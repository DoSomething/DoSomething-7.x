diff --git a/modules/content_migrate/includes/content_migrate.admin.inc b/modules/content_migrate/includes/content_migrate.admin.inc
index b2e9925..82b0acc 100644
--- a/modules/content_migrate/includes/content_migrate.admin.inc
+++ b/modules/content_migrate/includes/content_migrate.admin.inc
@@ -341,87 +341,88 @@ function _content_migrate_batch_process_migrate_data($field_name, &$context) {
    
   }
 
-  // Process one node in each batch.
+  // Process 1000 nodes in each batch.
+  for ($i = 0; $i <= 1000; $i++) {
+    $node = array_shift($context['sandbox']['nodes']);
+    if (!$node) {
+      return;
+    }
 
-  $node = array_shift($context['sandbox']['nodes']);
-  if (!$node) {
-    return;
-  }
+    $field = field_info_field($field_name);
+    $instance = field_info_instance('node', $field_name, $node['type']);
 
-  $field = field_info_field($field_name);
-  $instance = field_info_instance('node', $field_name, $node['type']);
+    // Construct an record to insert into the new field table
+    // from the data in the old table.
 
-  // Construct an record to insert into the new field table
-  // from the data in the old table.
+    $query = db_select($context['sandbox']['old_table'], 'old_table', array('fetch' => PDO::FETCH_ASSOC));
 
-  $query = db_select($context['sandbox']['old_table'], 'old_table', array('fetch' => PDO::FETCH_ASSOC));
-    
-  // We need new columns for bundle name, entity type, and language.
-  // See the debate going on at http://drupal.org/node/1164852.
-  // Reverting back to setting all nodes as untranslated.
-  $language = LANGUAGE_NONE;
-  if ($field['translatable']) {
-    //$language = $node['language'];
-  }
-  $query->addExpression("'". $node['type'] ."'", 'bundle');
-  $query->addExpression("'node'", 'entity_type');
-  $query->addExpression("'". $language ."'", 'language');
-    
-  // There are new names for what were the nid and vid columns.
-  $query->addField('old_table', 'nid', 'entity_id');
-  $query->addField('old_table', 'vid', 'revision_id');
-    
-  // Add the field columns to the select query.
-  // Use the new column names as aliases in case the 
-  // name changed, hopefully none did.
-  foreach ($context['sandbox']['old_cols'] as $column_name => $db_column_name) {
-    $query->addField('old_table', $db_column_name, $context['sandbox']['new_cols'][$column_name]);
-  }
-    
-  // Add delta, or construct it if missing.
-  if ($context['sandbox']['add_delta']) {
-    $query->addField('old_table', 'delta', 'delta');
-  }
-  else {
-    $query->addExpression(0, 'delta');
-  }
-  $query->condition('nid', $node['nid']);
-  $result = $query->execute();
+    // We need new columns for bundle name, entity type, and language.
+    // See the debate going on at http://drupal.org/node/1164852.
+    // Reverting back to setting all nodes as untranslated.
+    $language = LANGUAGE_NONE;
+    if ($field['translatable']) {
+      //$language = $node['language'];
+    }
+    $query->addExpression("'". $node['type'] ."'", 'bundle');
+    $query->addExpression("'node'", 'entity_type');
+    $query->addExpression("'". $language ."'", 'language');
+
+    // There are new names for what were the nid and vid columns.
+    $query->addField('old_table', 'nid', 'entity_id');
+    $query->addField('old_table', 'vid', 'revision_id');
+
+    // Add the field columns to the select query.
+    // Use the new column names as aliases in case the
+    // name changed, hopefully none did.
+    foreach ($context['sandbox']['old_cols'] as $column_name => $db_column_name) {
+      $query->addField('old_table', $db_column_name, $context['sandbox']['new_cols'][$column_name]);
+    }
 
-  foreach ($result as $record) {
-  
-    // Let modules alter this before the insert.
-    drupal_alter('content_migrate_data_record', $record, $field, $instance);
-
-    // Don't save empty values.
-    if (!empty($record)) {
-      $function = $field['module'] . '_field_is_empty';
-      if (function_exists($function)) {
-        // The $record array has the database columns as keys, which drupal_write_record() will need,
-        // but the _field_is_empty() function will be looking for the short, normalized column name.
-        $item = array();
-        foreach ($context['sandbox']['new_cols'] as $column_name => $db_column_name) {
-          if (array_key_exists($db_column_name, $record)) {
-            $item[$column_name] = $record[$db_column_name];
+    // Add delta, or construct it if missing.
+    if ($context['sandbox']['add_delta']) {
+      $query->addField('old_table', 'delta', 'delta');
+    }
+    else {
+      $query->addExpression(0, 'delta');
+    }
+    $query->condition('nid', $node['nid']);
+    $result = $query->execute();
+
+    foreach ($result as $record) {
+
+      // Let modules alter this before the insert.
+      drupal_alter('content_migrate_data_record', $record, $field, $instance);
+
+      // Don't save empty values.
+      if (!empty($record)) {
+        $function = $field['module'] . '_field_is_empty';
+        if (function_exists($function)) {
+          // The $record array has the database columns as keys, which drupal_write_record() will need,
+          // but the _field_is_empty() function will be looking for the short, normalized column name.
+          $item = array();
+          foreach ($context['sandbox']['new_cols'] as $column_name => $db_column_name) {
+            if (array_key_exists($db_column_name, $record)) {
+              $item[$column_name] = $record[$db_column_name];
+            }
+          }
+          if ($function($item, $field)) {
+            $record = NULL;
           }
-        }
-        if ($function($item, $field)) {
-          $record = NULL;
         }
       }
-    }
 
-    if (!empty($record)) {
-      if ($record['revision_id'] == $node['vid']) {
-        drupal_write_record($context['sandbox']['new_table'], $record);
+      if (!empty($record)) {
+        if ($record['revision_id'] == $node['vid']) {
+          drupal_write_record($context['sandbox']['new_table'], $record);
+        }
+        drupal_write_record($context['sandbox']['new_revision_table'], $record);
       }
-      drupal_write_record($context['sandbox']['new_revision_table'], $record);
     }
-  }
 
-  // Update our progress information.
-  $context['sandbox']['progress']++;
-  $context['message'] = t('Processing %nid : %title', array('%title' => $node['title'], '%nid' => $node['nid']));
+    // Update our progress information.
+    $context['sandbox']['progress']++;
+  }
+  $context['message'] = t('Processing through %nid', array('%nid' => $node['nid']));
 
   // Inform the batch engine that we are not finished,
   // and provide an estimation of the completion level we reached.