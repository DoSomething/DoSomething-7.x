? views/redirect_handler_field_redirect_type.inc
Index: redirect.install
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/redirect/redirect.install,v
retrieving revision 1.8
diff -u -p -r1.8 redirect.install
--- redirect.install	18 Dec 2010 21:33:21 -0000	1.8
+++ redirect.install	18 Dec 2010 21:47:59 -0000
@@ -102,6 +102,17 @@ function redirect_schema() {
 }
 
 /**
+ * Implements hook_install().
+ */
+function redirect_install() {
+  // If the path redirect table exists, then set the schema to run the
+  // migration update function.
+  if (db_table_exists('path_redirect')) {
+    drupal_set_installed_schema_version('redirect', 6999);
+  }
+}
+
+/**
  * Implements hook_uninstall().
  */
 function redirect_uninstall() {
@@ -180,3 +191,99 @@ function redirect_update_5() {
     db_add_index('redirect', 'expires', array('type', 'access'));
   }
 }
+/**
+ * Migrate path_redirect data.
+ */
+function redirect_update_7000(&$sandbox) {
+  if (!isset($sandbox['progress']) && db_table_exists('path_redirect')) {
+    $sandbox['progress'] = 0;
+    $sandbox['current_rid'] = 0;
+    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT rid) FROM {path_redirect}')->fetchField();
+    $sandbox['skipped'] = array();
+  }
+
+  if (empty($sandbox['max'])) {
+    $sandbox['#finished'] = 1;
+    return 'No redirects to migrate.';
+  }
+
+  // Ensure the redirect module is loaded since we need to use its functions.
+  drupal_load('module', 'redirect');
+
+  $query = db_query_range("SELECT * FROM {path_redirect} WHERE rid > :rid ORDER BY rid", 0, 10, array(':rid' => $sandbox['current_rid']));
+  foreach ($query as $old_redirect) {
+    $redirect = new stdClass();
+    redirect_object_prepare($redirect);
+
+    $source_parsed = redirect_parse_url($old_redirect->source);
+    $redirect->source = $source_parsed['url'];
+    if (!empty($source_parsed['query'])) {
+      $redirect->source_options['query'] = $source_parsed['query'];
+    }
+
+    $redirect_parsed = redirect_parse_url($old_redirect->redirect) + array('query' => drupal_get_query_array($old_redirect->query), 'fragment' => $old_redirect->fragment);
+    $redirect->redirect = $redirect_parsed['url'];
+    if (!empty($redirect_parsed['query'])) {
+      $redirect->redirect_options['query'] = $redirect_parsed['query'];
+    }
+    if (!empty($redirect_parsed['fragment'])) {
+      $redirect->redirect_options['fragment'] = $redirect_parsed['fragment'];
+    }
+    if (!empty($redirect_parsed['https'])) {
+      $redirect->redirect_options['https'] = TRUE;
+    }
+
+    // Make sure empty language codes get migrated to use the new constant.
+    $redirect->language = empty($old_redirect->language) ? LANGUAGE_NONE : $old_redirect->language;
+
+    // Default status codes get a value of 0.
+    if ($old_redirect->type != variable_get('redirect_default_status_code', 301)) {
+      $redirect->status_code = (int) $old_redirect->type;
+    }
+
+    redirect_hash($redirect);
+    if (redirect_load_by_hash($redirect->hash)) {
+      // If a redirect with the same hash already exists, then it needs to be
+      // skipped.
+      $sandbox['skipped'][$old_redirect->rid] = 'RID ' . $old_redirect->rid . ': ' . check_plain(redirect_url($redirect->source, $redirect->source_options)) . ' to ' . check_plain(redirect_url($redirect->redirect, $redirect->redirect_options));
+    }
+    else {
+      // Add the redirect to the database.
+      db_insert('redirect')
+        ->fields(array(
+          'hash' => $redirect->hash,
+          'type' => 'redirect',
+          'uid' => 1,
+          'source' => $redirect->source,
+          'source_options' => serialize($redirect->source_options),
+          'redirect' => $redirect->redirect,
+          'redirect_options' => serialize($redirect->redirect_options),
+          'language' => $redirect->language,
+          'status_code' => $redirect->status_code,
+          'count' => 0,
+          'access' => $old_redirect->last_used,
+        ))
+        ->execute();
+    }
+
+    $sandbox['progress']++;
+    $sandbox['current_rid'] = $old_redirect->rid;
+  }
+
+  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
+
+  if ($sandbox['#finished'] >= 1) {
+    // Once finished, drop the old table.
+    db_drop_table('path_redirect');
+
+    // Show a message about how many redirects were migrated, and how many
+    // were skipped.
+    $skipped = count($sandbox['skipped']);
+    $migrated = $sandbox['progress'] - $skipped;
+    $return = "Migrated $migrated redirects.";
+    if (!empty($sandbox['skipped'])) {
+      $return .= " The following $skipped redirects were not migrated since there were already existing redirects for the path and language combination:" . theme('item_list', array('items' => $sandbox['skipped']));
+    }
+    return $return;
+  }
+}
