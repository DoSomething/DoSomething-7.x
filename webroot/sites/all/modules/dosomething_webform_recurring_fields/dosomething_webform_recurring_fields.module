<?php

/**
 * @file
 * Add the ability to create set of base form elements for webforms based on the webform node's type.
 */

/**
 * A mapping of fields and the constructor array for building them into forms.
 */
function dosomething_webform_recurring_fields_get_fields() {
  global $user;
  $user = user_load($user->uid);
  return array(
    'campaign_sign_up' => array(
      'name' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => $user->field_user_name[field_language('user', $user, 'field_user_name')][0]['safe_value'],
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 100,
      ),
      'email' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => $user->mail,
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 255,
      ),
      'mobile' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Mobile'),
        '#default_value' => $user->field_user_mobile[field_language('user', $user, 'field_user_mobile')][0]['safe_value'],
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 15,
      ),
      'zip' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('ZIP Code'),
        '#default_value' => $user->field_user_zip[field_language('user', $user, 'field_user_zip')][0]['safe_value'],
        '#size' => 60,
        '#maxlength' => 10,
      ),
    ),
    'grant_application' => array(
      'name' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => $user->field_user_name[field_language('user', $user, 'field_user_name')][0]['safe_value'],
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 100,
      ),
      'email' => array (
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => $user->mail,
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 255,
      ),
      'school' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => $user->field_user_name[field_language('user', $user, 'field_user_name')][0]['safe_value'],
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 255,
      ),
      'mobile' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('Mobile'),
        '#default_value' => $user->field_user_mobile[field_language('user', $user, 'field_user_mobile')][0]['safe_value'],
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 15,
      ),
      'zip' => array(
        '#weight' => 0,
        '#type' => 'textfield',
        '#title' => t('ZIP Code'),
        '#default_value' => $user->field_user_zip[field_language('user', $user, 'field_user_zip')][0]['safe_value'],
        '#size' => 60,
        '#maxlength' => 10,
      ),
    ),
  );
}

/**
 * Returns a  mapping of content types to schema tables.
 * 
 * For each content type that we want to add special fields to,
 *  add a case to this switch statment that will return the name of the 
 *  database table that is definded in the install file. These tables 
 *  are managed by this application.
 */
function dosomething_recurring_fields_type_to_schema($content_type) {
  switch($content_type) {
    
    case 'campaign_sign_up':
      return 'ds_webform_campaign_su';
    
    case 'grant_application':
      return 'ds_webform_grant_app';
  }
}


/**
 * Implements hook_form_alter().
 */ 
function dosomething_webform_recurring_fields_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'webform_client_form')) {
    $fields_to_add = dosomething_webform_recurring_fields_get_fields();
    $type = $form['#node']->type;
    if (in_array($type, array_keys($fields_to_add))) {
      foreach ($fields_to_add[$type] as $key => $fields) {
        $form[$key] = $fields;
      }
      $form['#submit'][] = 'dosomething_webform_submit';
    }
  }

}

/**
 * A custom submit handler for webform data.
 */
function dosomething_webform_submit($form, &$form_state) {
  $node_type = $form_state['build_info']['args'][0]->type;
  $sid = $form_state['build_info']['args'][0]->sid;
  $fields_to_add = dosomething_webform_recurring_fields_get_fields();
  $field_data_to_insert = array();
  foreach ($form_state['values'] as $field_name => $value) {
    if (in_array($field_name, array_keys($fields_to_add[$node_type]))) {
      $field_data_to_insert[$field_name] = $value;
    }
  }
  $field_data_to_insert['sid'] = $sid;
  $table = dosomething_recurring_fields_type_to_schema($node_type);
  $result = db_insert($table)
    ->fields($field_data_to_insert)
    ->execute();
}

/**
 * Impelments hook_webform_submission_insert().
 * 
 * Find the sid from the newly added submission and add it to the node so we 
 * can use it in the submission handler.
 */
function dosomething_webform_recurring_fields_webform_submission_insert($node, $submission) {
  $node->sid = $submission->sid;
}
