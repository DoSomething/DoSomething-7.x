<?php

/**
 * @file
 * Handles Mailchimp API calls.
 **/

define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS', 'f2fab1dfd4');
define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE', 'a27895fe0c');
define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_NOTIFY_ADMIN_EMAIL', 'developers@dosomething.org');

/**
 * Send a subscribe request to a Mailchimp Group ID for a given email address.
 *
 * @param string $email
 *   Email address to signup.
 * @param string $mailchimp_group_id
 *   Mailchimp Group ID to subscribe to.
 */
function dosomething_subscribe_mailchimp_signup($email, $mailchimp_group_id) {
  //@todo: Move dosomething_general_mailchimp_subscribe code here and replace globally.
  return;
}

/**
 * Makes Mailchimp API call to return the grouping IDs for each group in a Mailchimp List.
 *
 * @param string $list_id
 *   Mailchimp List Id.
 *
  * @return array
 *   The grouping IDs for each group in the given list, indexed by group_name.
 */
function dosomething_subscribe_mailchimp_get_grouping_ids_from_api($list_id) {
  $mcapi = dosomething_subscribe_mailchimp_get_api_object();
  $group_map = array();
  $groupings = $mcapi->listInterestGroupings($list_id);
  if (is_array($groupings) && !empty($groupings)) {
    foreach ($groupings as $grouping) {
      foreach ($grouping['groups'] as $group) {
        // If a groupname is used in 2 different groupings, then it will override the wrong grouping id here.
        // So, this means: keep group names unique in Mailchimp.
        $group_map[$group['name']] = $grouping['id'];
      }
    }
  }
  // Handle invalid API key error:
  if ($mcapi->errorCode == 104) {
    dosomething_subscribe_mailchimp_invalid_api_notify();
  }
  return $group_map;
}

/**
 * Retrieve group maps from MC API, and store as variables.
 */
function dosomething_subscribe_mailchimp_set_grouping_id_vars() {
  // Retrieve group ids for Members list.
  $map_members = dosomething_subscribe_mailchimp_get_grouping_ids_from_api(DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS);
  // Store as variable.
  variable_set('dosomething_subscribe_mailchimp_grouping_ids_' . DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS, $map_members);
  // Retrieve group ids for Old People list.
  $map_oldpeople = dosomething_subscribe_mailchimp_get_grouping_ids_from_api(DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE);
  // Store as variable.
  variable_set('dosomething_subscribe_mailchimp_grouping_ids_' . DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE, $map_oldpeople);
  // Store timestamp of when variables were set.
  variable_set('dosomething_subscribe_mailchimp_grouping_ids_updated', time());
}

/**
 * Get the grouping ID for a given group_name in given_list_id.
 *
 * @param string $list_id
 *   Mailchimp List Id.
 * @param string $group_name
 *   Mailchimp Group name
 *
  * @return string
 *   The Mailchimp Grouping ID that the group_name belongs to.
 */
function dosomething_subscribe_mailchimp_get_grouping_id($list_id, $group_name) {
  $map = variable_get('dosomething_subscribe_mailchimp_grouping_ids_' . $list_id);
  // If it's empty, reset the groups.
  if (empty($map)) {
    dosomething_subscribe_mailchimp_set_grouping_id_vars();
    $map = variable_get('dosomething_subscribe_mailchimp_grouping_ids_' . $list_id);
  }
  return $map[$group_name];
}

/**
 * Implements hook_cron().
 */
function dosomething_subscribe_mailchimp_cron() {
  // Check to see if we have grouping IDS stored already.
  $members = variable_get('dosomething_subscribe_mailchimp_grouping_ids_' . DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS, array());
  $old_people = variable_get('dosomething_subscribe_mailchimp_grouping_ids_' . DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE, array());
  $groupings_last_updated = variable_get('dosomething_subscribe_mailchimp_grouping_ids_updated');
  $reset = FALSE;
  // If we don't have grouping IDs, we need to get them.
  if (empty($members) || empty($old_people)) {
    $reset = TRUE;
  }
  // Otherwise, see if it's been a day since we last got them.
  else {
    $sec_elapsed = time() - $groupings_last_updated;
    $hours_elapsed = floor($sec_elapsed/3600);
    if ($hours_elapsed > 24) {
      $reset = TRUE; 
    }
  }
  if ($reset) {
    dosomething_subscribe_mailchimp_set_grouping_id_vars();
  }
}

/**
 * Build MailChimp group info list as array.
 * @TODO: Rework this to use the grouping_id variables instead of making APi calls / storing in cache.
 *   
 * @return
 * $groupNames - array of all group names.
 * $currentGroup_subscribers - array of the number subsubcrivers to each MailChimp group currently.
 * $groupingIdByGroup_Subscribers - array of the historical subscription values by group.
 */
function dosomething_subscribe_mailchimp_group_info() {
  
  // Our function - alternative to contrib MailChimp module due to connection bug
  $mcapi = dosomething_subscribe_mailchimp_get_api_object();
  
  // Work around, connecting to both lists immedatly seems to work rahter than looping through them as needed
  $groupings['old_people'] = $mcapi->listInterestGroupings('a27895fe0c');
  $groupings['dosomething_members'] = $mcapi->listInterestGroupings('f2fab1dfd4');
  
    
  // Old People
  // $list_ids['old_people'] = 'a27895fe0c';

  // DoSomething Members
  // $list_ids['dosomething_members'] = 'f2fab1dfd4';
  
  $groupNames = array();
  $group_subscribers = array();

  // Collect list details with caching
  foreach ($groupings as $list_name => $grouping) {

    // Collect group details for list
    // $groupings = $mcapi->listInterestGroupings($listid);
    
    // Check for erros connecting to MCAPI
    if ($grouping != FALSE) {
          
      // Collect details for each group in list
      foreach ($grouping as $groups) {
        foreach ($groups['groups'] as $group) {
            
          // Collect details of list group
          $groupNames[] = $group['name'];
          $currentGroup_subscribers[$group['name']] = $group['subscribers'];
            
        }
      }
      
      // Cache ID
      $cids = "dosomething_subscribe_Mailchimp_group_subscribers_$list_name";
      
      // Collect cached info for list ID subscribers
      $cache = cache_get($cids);
      
      // Check last data point vs collection interval
      if (!empty($cache->data) || $cache->data['snapshot_due'] < time()) {
        $groupingIdByGroup_Subscribers = $cache->data;
      }
      else { // Rebuild list group subscriber data
      
        $groupingIdByGroup_Subscribers = array();
        
        // Collect group details for list
        // $groupings = $mcapi->listInterestGroupings($listid);
        
        // Confirm results are found
        if (is_array($grouping) && !empty($grouping)) {
          
          // Set timestamp of when next subscribers count refresh is due - daily
          // NOTE: Need cron job to build on interval rather than user access to get regular intervals of data points
          $groupingIdByGroup_Subscribers['snapshot_due'] = time() + (1 * 24 * 60 * 60);
          
          // Collect details for each group in list
          foreach ($grouping as $groups) {
            foreach ($groups['groups'] as $group) {
              
              // Collect details of list group subscribers
              $timestamp = time();
              $groupingIdByGroup_Subscribers[$list_name][$group['name']][$timestamp] = $group['subscribers'];
              
            }
          }
          
        }
        
        // Cache results
        cache_set($cid, $groupingIdByGroup_Subscribers);
        
      }
      
    }
    else {
      drupal_set_message('Failed to connect to MailChimp API to collect group details for "'. $list_name . '" list.', 'error');
    }
    
  } // END MC Lists loop - General & Old People
  
  return array($groupNames, $currentGroup_subscribers, $groupingIdByGroup_Subscribers);
  
}

/**
 * A wrapper function to connect to MailChimp. This is an alternative to the one provided in the MailChimp
 * module which has been buggy. An update to the latestest version of the module may address the issue
 * BUT needs to be tested.
 *   
 * @return - MCAPI connection object.
 */
function dosomething_subscribe_mailchimp_get_api_object() {
  
  libraries_load('mailchimp');
  $q = new MCAPI(variable_get('mailchimp_api_key', ''));

  // set the timeout to something reasonsable to avoid taking down the Drupal site
  $q->setTimeout(300);

  // specify if a secure connection should be used wit the API
  $q->useSecure(variable_get('mailchimp_use_secure', TRUE));

  if ($q->errorCode) {
    watchdog('dosomething_subscribe_mailchimp', 'MCAPI Error: %errmsg', array('%errmsg' => $q->errorMessage), WATCHDOG_ERROR);
    return NULL;
  }

  return $q;
}

/**
 * Alert developers that API key is no longer valid.  Gets called from various API requests.
 */
function dosomething_subscribe_mailchimp_invalid_api_notify() {
  watchdog('dosomething_subscribe_mailchimp', 'Invalid API key response.', $severity = WATCHDOG_ERROR);
}

/**
 * Updates a node's Mailchimp Group Id field.
 *
 *  @param int $nid
 *    Node nid to update.
 *
 *  @param string $mailchimp
 *    Mailchimp Group ID value to use.
 *
 */
function _dosomething_subscribe_mailchimp_update_node_mailchimp($nid, $mailchimp) {
  $node = node_load($nid);
  if ($node->nid) {
    $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'] = $mailchimp;
    node_save($node);
  }
}

/**
 * Bulk updates the Mailchimp Group Id field for a given node type.
 *
 *  @param string $node_type
 *    Node type to bulk update.
 *
 *  @param string $mailchimp
 *    Mailchimp Group ID value to use.
 *
 */
function _dosomething_subscribe_mailchimp_update_node_type_mailchimp($node_type, $mailchimp) {
  $nids = dosomething_general_get_nids_by_type($node_type); 
  foreach ($nids as $nid) {
    _dosomething_subscribe_mailchimp_update_node_mailchimp($nid, $mailchimp);
  }
}