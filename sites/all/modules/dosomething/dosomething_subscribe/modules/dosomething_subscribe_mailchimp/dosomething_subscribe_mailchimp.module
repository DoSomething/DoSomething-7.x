<?php

/**
 * @file
 * Handles Mailchimp API calls.
 **/

define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS', 'f2fab1dfd4');
define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE', 'a27895fe0c');
define('DOSOMETHING_SUBSCRIBE_MAILCHIMP_QUEUE_CRON', 'dosomething_subscribe_mailchimp_cron');

/**
 * Implements hook_menu().
 */
function dosomething_subscribe_mailchimp_menu() {
  $items = array();
  $items['admin/config/dosomething/dosomething_subscribe_mailchimp'] = array(
    'title' => 'Mailchimp API settings',
    'description' => t('Set and validate Mailchimp API key.'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_subscribe_mailchimp_admin_settings_form'),
    'file' => 'dosomething_subscribe_mailchimp.admin.inc',
  );
  $items['admin/reports/dosomething_subscribe_mailchimp'] = array(
    'title' => 'Mailchimp Signup Queue',
    'description' => t('Displays signups in the DS Sub Mailchimp cron queue.'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'dosomething_subscribe_mailchimp_queue_status_page', 
    'file' => 'dosomething_subscribe_mailchimp.admin.inc',
  );
  $items['admin/reports/dosomething_subscribe_mailchimp_grouping_ids'] = array(
    'title' => 'Mailchimp Grouping IDs Status',
    'description' => t('Displays contents of the DS Sub Mailchimp Grouping IDs variable.'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'dosomething_subscribe_mailchimp_grouping_ids_status_page', 
    'file' => 'dosomething_subscribe_mailchimp.admin.inc',
  );
  return $items;
}

/**
 * Queue a Mailchimp signup for a given $email and $group_name.
 *
 * @param $email
 *   Submitted email address.
 * @param $group_name
 *   The group name that the email is to be subscribed to.
  * @param $merge_vars
 *   Any additional data collected from the form submit handler that's calling this function.
 */
function dosomething_subscribe_mailchimp_signup($email, $group_name, $merge_vars = array()) {
  // Add email into merge_vars for listBatchSubscribe.
  $merge_vars += array(
    'EMAIL' => $email,
    'EMAIL_TYPE' => 'html',
  );
  // Collect user details by email based on current values in user account for MailChimp signup / update.
  $merge_vars += dosomething_subscribe_mailchimp_load_user_mergevars($email);
  // Look up list and grouping id for group_name.
  $group_data = dosomething_subscribe_mailchimp_get_group_data($group_name);
  // If we don't have a valid grouping id, log the error, and subscribe them to the general List by excluding GROUPINGS array.
  if (!$group_data){
    // Alert that Grouping ID was not found.
    watchdog('dosomething_subscribe_mailchimp','Cannot find List / Grouping ID for group named %name', array('%name' => $group_name), $severity = WATCHDOG_ERROR);
    // Use Members List as the default.
    $list_id = DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS;
  }
  // Otherwise, pass through the grouping id, groups (which is just group_name) to the GROUPINGS array.
  else {
    $list_id = $group_data['list_id'];
    $merge_vars += array(
      'GROUPINGS' => array(
        array(
          'id' => $group_data['grouping_id'],
          'groups' => $group_name
        ),
      )
    );
  }
  // Create an array with the format that listBatchSubscribe will expect.
  $signup_data = array(
    'list_id' => $list_id, 
    'email' => $email, 
    'group_name' => $group_name, 
    'merge_vars' => $merge_vars,
  );
  // Add it to the queue.
  dosomething_subscribe_mailchimp_queue_signup($signup_data);
}

/**
 * Makes Mailchimp API call to return the grouping IDs for each group in a Mailchimp List.
 *
 * @param string $list_id
 *   Mailchimp List Id.
 *
  * @return array
 *   The grouping IDs for each group in the given list, indexed by group_name.
 */
function dosomething_subscribe_mailchimp_get_grouping_ids_from_api($timeout = 300) {
  $mcapi = dosomething_subscribe_mailchimp_get_api_object($timeout);
  if (!$mcapi) {
    return FALSE;
  }
  $list_ids = array(DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS, DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE);
  $group_map = array();
  foreach($list_ids as $list_id) {
    $groupings = $mcapi->listInterestGroupings($list_id);
    if (is_array($groupings) && !empty($groupings)) {
      foreach ($groupings as $grouping) {
        foreach ($grouping['groups'] as $group) {
          // If a groupname is used in 2 different groupings, then it will override the wrong grouping id here.
          // So, this means: keep group names unique in Mailchimp.
          $group_map[$list_id][$group['name']] = $grouping['id'];
        }
      }
    }
  }
  return $group_map;
}

/**
 * Retrieve grouping IDs and groups from MC API, and store as an array.
 */
function dosomething_subscribe_mailchimp_set_grouping_id_vars($timeout = 300) {
  $grouping_ids = dosomething_subscribe_mailchimp_get_grouping_ids_from_api($timeout);
  if ($grouping_ids) {
    variable_set('dosomething_subscribe_mailchimp_grouping_ids', $grouping_ids);
    // Store timestamp of when variables were set.
    variable_set('dosomething_subscribe_mailchimp_grouping_ids_updated', time());
  }
}

/**
 * Get the grouping ID for a given group_name in given_list_id.
 *
 * @param string $group_name
 *   Mailchimp Group name to find the list and grouping id for.
 *
  * @return Array
 *   Returns array of list id and grouping id if found, returns FALSE if not found.
 */
function dosomething_subscribe_mailchimp_get_group_data($lookup_group_name) {
  $map = variable_get('dosomething_subscribe_mailchimp_grouping_ids');
  // If it's empty, reset the groups.
  if (empty($map)) {
    dosomething_subscribe_mailchimp_set_grouping_id_vars();
    $map = variable_get('dosomething_subscribe_mailchimp_grouping_ids');
  }
  // Loop through array to find the list it belongs to, and its corresponding grouping id.
  foreach ($map as $list_id => $groups) {
    foreach ($groups as $group_name => $grouping_id) {
      if ($lookup_group_name == $group_name) {
        return array(
          'list_id' => $list_id,
          'grouping_id' => $grouping_id,
        );
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_cron().
 */
function dosomething_subscribe_mailchimp_cron() {
  // Processin' that queue.
  dosomething_subscribe_mailchimp_process_queue();
  // Check if grouping ID variables need to be refreshed.
  dosomething_subscribe_mailchimp_check_grouping_id_vars();
}

/**
 * Adds a signup array to the cron queue.
 */
function dosomething_subscribe_mailchimp_queue_signup($signup_data) {
  // Queue record for scheduled signup later.
  $queue = DrupalQueue::get(DOSOMETHING_SUBSCRIBE_MAILCHIMP_QUEUE_CRON);
  $queue->createQueue();
  $queue->createItem($signup_data);
}

/**
 * Processes cron queue signups.
 */
function dosomething_subscribe_mailchimp_process_queue() {
  $queue = DrupalQueue::get(DOSOMETHING_SUBSCRIBE_MAILCHIMP_QUEUE_CRON);
  $queue->createQueue();
  $queue_count = $queue->numberOfItems();

  if ($queue_count > 0) {
    // Make sure we have a valid connection to the MC API.
    $mcapi = dosomething_subscribe_mailchimp_get_api_object(300);
    if (!$mcapi) {
      return;
    }
    $batches = array();
    $count = 0;
    $batch_limit = variable_get('mailchimp_batch_limit', 100);
    $batch_size = ($queue_count < $batch_limit) ? $queue_count : $batch_limit;
    while ($count < $batch_size) {
      if ($item = $queue->claimItem()) {
        // Separate $batches array into two arrays, one for each list.
        if ($item->data['list_id'] == DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS) {
          $batches[DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_MEMBERS][] = $item->data['merge_vars'];
        }
        else {
          $batches[DOSOMETHING_SUBSCRIBE_MAILCHIMP_LIST_ID_OLDPEOPLE][] = $item->data['merge_vars'];
        }
        $queue->deleteItem($item);
      }
      $count++;
    }
    $ret = array();
    $add_count = $update_count = 0;
    foreach ($batches as $list_id => $batch) {
      if (count($batch)) {
        $ret = $mcapi->listBatchSubscribe($list_id, $batch, FALSE, TRUE, FALSE);
        $add_count += $ret['add_count'];
        $update_count += $ret['update_count'];
        watchdog('dosomething_subscribe_mailchimp', 'listBatchSubscribe: ' . print_r($ret, TRUE) . ' Batch:' . serialize($batch)) . '';
        if ($ret['error_count'] > 0) {
          foreach ((array) $ret['errors'] as $error) {
            watchdog('dosomething_subscribe_mailchimp', 'MCAPI Error %errcode: %errmsg', array('%errcode' => $error['code'], '%errmsg' => $error['message']), WATCHDOG_ERROR);
          }
        }
      }
    }
  }
}

/**
 * Checks if the grouping id variables are set, and if they need to be refreshed, reset them.
 */
function dosomething_subscribe_mailchimp_check_grouping_id_vars() {
  // Check to see if we have grouping IDS stored already.
  $groupings = variable_get('dosomething_subscribe_mailchimp_grouping_ids', array());
  $groupings_last_updated = variable_get('dosomething_subscribe_mailchimp_grouping_ids_updated');
  $reset = FALSE;
  // If we don't have grouping IDs, we need to get them.
  if (empty($groupings)) {
    $reset = TRUE;
  }
  // Otherwise, see if it's been a day since we last got them.
  else {
    $sec_elapsed = time() - $groupings_last_updated;
    $hours_elapsed = floor($sec_elapsed/3600);
    if ($hours_elapsed > 24) {
      $reset = TRUE; 
    }
  }
  if ($reset) {
    dosomething_subscribe_mailchimp_set_grouping_id_vars();
  }
}

/**
 * Build MailChimp group info list as array.
 * @TODO: Rework this to use the grouping_id variables instead of making APi calls / storing in cache.
 *   
 * @return
 * $groupNames - array of all group names.
 * $currentGroup_subscribers - array of the number subsubcrivers to each MailChimp group currently.
 * $groupingIdByGroup_Subscribers - array of the historical subscription values by group.
 */
function dosomething_subscribe_mailchimp_group_info() {
  
  // Our function - alternative to contrib MailChimp module due to connection bug
  $mcapi = dosomething_subscribe_mailchimp_get_api_object();
  
  // Work around, connecting to both lists immedatly seems to work rahter than looping through them as needed
  $groupings['old_people'] = $mcapi->listInterestGroupings('a27895fe0c');
  $groupings['dosomething_members'] = $mcapi->listInterestGroupings('f2fab1dfd4');
  
    
  // Old People
  // $list_ids['old_people'] = 'a27895fe0c';

  // DoSomething Members
  // $list_ids['dosomething_members'] = 'f2fab1dfd4';
  
  $groupNames = array();
  $group_subscribers = array();

  // Collect list details with caching
  foreach ($groupings as $list_name => $grouping) {

    // Collect group details for list
    // $groupings = $mcapi->listInterestGroupings($listid);
    
    // Check for erros connecting to MCAPI
    if ($grouping != FALSE) {
          
      // Collect details for each group in list
      foreach ($grouping as $groups) {
        foreach ($groups['groups'] as $group) {
            
          // Collect details of list group
          $groupNames[] = $group['name'];
          $currentGroup_subscribers[$group['name']] = $group['subscribers'];
            
        }
      }
      
      // Cache ID
      $cids = "dosomething_subscribe_Mailchimp_group_subscribers_$list_name";
      
      // Collect cached info for list ID subscribers
      $cache = cache_get($cids);
      
      // Check last data point vs collection interval
      if (!empty($cache->data) || $cache->data['snapshot_due'] < time()) {
        $groupingIdByGroup_Subscribers = $cache->data;
      }
      else { // Rebuild list group subscriber data
      
        $groupingIdByGroup_Subscribers = array();
        
        // Collect group details for list
        // $groupings = $mcapi->listInterestGroupings($listid);
        
        // Confirm results are found
        if (is_array($grouping) && !empty($grouping)) {
          
          // Set timestamp of when next subscribers count refresh is due - daily
          // NOTE: Need cron job to build on interval rather than user access to get regular intervals of data points
          $groupingIdByGroup_Subscribers['snapshot_due'] = time() + (1 * 24 * 60 * 60);
          
          // Collect details for each group in list
          foreach ($grouping as $groups) {
            foreach ($groups['groups'] as $group) {
              
              // Collect details of list group subscribers
              $timestamp = time();
              $groupingIdByGroup_Subscribers[$list_name][$group['name']][$timestamp] = $group['subscribers'];
              
            }
          }
          
        }
        
        // Cache results
        cache_set($cid, $groupingIdByGroup_Subscribers);
        
      }
      
    }
    else {
      drupal_set_message('Failed to connect to MailChimp API to collect group details for "'. $list_name . '" list.', 'error');
    }
    
  } // END MC Lists loop - General & Old People
  
  return array($groupNames, $currentGroup_subscribers, $groupingIdByGroup_Subscribers);
  
}

/**
 * A wrapper function to connect to MailChimp. 
 *   
 * @return - MCAPI connection object if it connects.  Returns NULL if it can't.
 */
function dosomething_subscribe_mailchimp_get_api_object($timeout = 60, $validate_connection = TRUE) {
  libraries_load('mailchimp');
  $q = new MCAPI(variable_get('mailchimp_api_key', ''));
  // Set the timeout to something reasonsable to avoid taking down the Drupal site.
  $q->setTimeout($timeout);
  // Specify if a secure connection should be used with the API:
  $q->useSecure(variable_get('mailchimp_use_secure', TRUE));
  // If we need to validate the connection:
  if ($validate_connection) {
    // Send a request out the API to make sure there are no errors (e.g. Invalid API Key)
    $q->getVerifiedDomains();
  }
  // If we have errors:
  if ($q->errorCode) {
    watchdog('dosomething_subscribe_mailchimp', 'MCAPI Error %errcode: %errmsg %mcapi', array(
      '%errcode' => $q->errorCode, 
      '%errmsg' => $q->errorMessage,
      '%mcapi' => print_r($q, TRUE), 
      ), WATCHDOG_ERROR);

    // Notify for any API User error:
    if ($q->errorCode && $q->errorCode >= 100 && $q->errorCode < 200) {
      dosomething_subscribe_mailchimp_invalid_api_notify($q);
    }
    return NULL;
  }
  // Else no errors:
  else {
    // Set timestamp of API state last validated.
    variable_set('dosomething_subscribe_mailchimp_api_state_last_validated', time());
  }
  return $q;
}

/**
 * Send notification that API key is no longer valid.  Gets called from various API requests.
 *
 * @param $mcapi
 *   MC API object, containing error code and error message.
 */
function dosomething_subscribe_mailchimp_invalid_api_notify($mcapi) {
  // Check current state variable.
  $api_state = variable_get('dosomething_subscribe_mailchimp_is_api_state_valid');
  // If it's set to TRUE, ring the alarm that it's now FALSE.
  if ($api_state) {
    // Send notify email.
    global $language;
    $params = array(
      'error_code' => $mcapi->errorCode, 
      'error_message' => $mcapi->errorMessage,
    );
    drupal_mail('dosomething_subscribe_mailchimp', 'invalid_api_state', variable_get('dosomething_subscribe_mailchimp_notify_email', 'developers@dosomething.org'), $language, $params);
    // Set api_state_is_valid to FALSE.
    variable_set('dosomething_subscribe_mailchimp_is_api_state_valid', FALSE);
    // Store time of invalid response.
    variable_set('dosomething_subscribe_mailchimp_api_state_invalid_time', time());
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_subscribe_mailchimp_mail($key, &$message, $params) {
  switch ($key) {
    case 'invalid_api_state':
      $message['subject'] = t('Mailchimp Error !code: !message', array('!code' => $params['error_code'], '!message' => $params['error_message']));
      $message['body'][] = t('Please login to Mailchimp and/or the site to fix.');
      break;
    case 'restored_api_state':
      $message['subject'] = t('Mailchimp API Connection Restored');
      $message['body'][] = t('The Mailchimp API is running again.  Have a wonderful day!');
      break;
  }
}

/**
 * Build out $merge_vars values on what's available in the Drupal user account.
 *
 * @param $target_email
 *   Target email address to lookup User.
 * @param $target_mobile
 *   Target mobile number to lookup User.  
 *
 * @return
 *   Array $merge_vars for Mailchimp signup.
 */
function dosomething_subscribe_mailchimp_load_user_mergevars($target_email = NULL, $target_mobile = NULL) {
  // @todo: add lookup by mobile?
  $user = user_load_by_mail($target_email);
  if ($user) {
    $merge_vars['UID'] = $user->uid;
    $merge_vars['MMERGE3'] =  $user->name;
    // Grab Mobile from Profile2.
    $user2 = profile2_load_by_user($user, 'main');
    $mobile = field_get_items('profile2', $user2, 'field_user_mobile');

    if (!empty($target_mobile)) {
      $merge_vars['MMERGE7'] = $target_mobile;
    }
    elseif(!empty($mobile)) {
      $merge_vars['MMERGE7'] = $mobile;

      // @todo: ??
      // if ($target_mobile != $mobile) {
      //   Update user record with new mobile number?
      // }

      // Validates number - perhaps already done before sent to this function?
      // dosomething_general_valid_cell
    }
    // Birthday:
    $birthday = field_get_items('profile2', $user2, 'field_user_birthday');
    if (!empty($birthday)) {
      $birthday_bits = explode('-', $birthday[0]['value']);
      $birthday_stamp = mktime(0, 0, 0, $birthday_bits[1],  substr($birthday_bits[2], 0, strpos($birthday_bits[2],' ')), $birthday_bits[0]);
      $merge_vars['BDAY'] = date('m/d', $birthday_stamp);
      $merge_vars['BDAYFULL'] = date('m/d/Y', $birthday_stamp);
      // Need to store date values as var to allow recasting in final string
      $target_date = date('m/d', $birthday_stamp);
      $target_year_18 = date('Y', $birthday_stamp) + 18;
      $target_year_26 = date('Y', $birthday_stamp) + 26;
      // Support for target dates based on user birthday - 18 and 26 years old. Used by auto responders in MailChimp
      $merge_vars['TURNS18'] = $target_date ."/". $target_year_18;
      $merge_vars['TURNS26'] = $target_date ."/". $target_year_26;
    }
  }
  // Make sure merge_vars is formatted correctly even if no values are assigned
  if (empty($merge_vars) || count($merge_vars) == 0) {
    $merge_vars['UID'] = 0;
  }
  return $merge_vars;
}

/**
 * Updates a node's Mailchimp Group Id field.
 *
 *  @param int $nid
 *    Node nid to update.
 *
 *  @param string $mailchimp
 *    Mailchimp Group ID value to use.
 *
 */
function _dosomething_subscribe_mailchimp_update_node_mailchimp($nid, $mailchimp) {
  $node = node_load($nid);
  if ($node->nid) {
    $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'] = $mailchimp;
    node_save($node);
  }
}

/**
 * Bulk updates the Mailchimp Group Id field for a given node type.
 *
 *  @param string $node_type
 *    Node type to bulk update.
 *
 *  @param string $mailchimp
 *    Mailchimp Group ID value to use.
 *
 */
function _dosomething_subscribe_mailchimp_update_node_type_mailchimp($node_type, $mailchimp) {
  $nids = dosomething_general_get_nids_by_type($node_type); 
  foreach ($nids as $nid) {
    _dosomething_subscribe_mailchimp_update_node_mailchimp($nid, $mailchimp);
  }
}
