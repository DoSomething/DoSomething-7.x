<?php

/**
 * @file
 * Handles Mobile Commons API calls.
 **/

/**
 * Send a subscribe request to a MobileCommons Opt-in for a given email address.
 *
 * @param string $cell
 *   Cell number to signup.
 * @param string $mobilecommons_optin
 *   Mobile Commons Opt-in to subscribe to.
 */
function dosomething_subscribe_mobilecommons_signup($cell, $mobilecommons_optin) {
  //@todo: Move dosomething_general_mobile_commons_subscribe code here and replace globally.
  return;
}


/**
 * Sends a Mobilecommons API request to Mobilecommons for given alpha mobile to given alpha opt-in, and given beta mobiles to given beta opt-in.
 *
 * @param string $alpha_mobile
 *   Alpha mobile number to signup.
 * @param string $alpha_opt_in_path
 *   Alpha opt-in path.
 * @param array $beta_mobiles
 *   Array of beta mobile numbers to signup.
  * @param string $beta_opt_in_path
 *   Beta opt-in path.
 */
function dosomething_subscribe_mobilecommons_referral_signup($alpha_mobile, $alpha_opt_in_path, $beta_mobiles = array(), $beta_opt_in_path = '', $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';
  global $user;
  if ($user->uid > 0) {
    $profile = profile2_load_by_user($user, 'main');
    $fname = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
    $lname = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];
    $args += array(
      'first_name' => $fname,
      'last_name' => $lname,
    );
  }
  $friends = '';
  foreach ($beta_mobiles AS $key => $mobile) {
    if (!empty($mobile) && dosomething_general_valid_cell($mobile)) {
      $friends .= '&friends[]=' . $mobile;
    }
  }
  $friends .= '&friends_opt_in_path=' . $beta_opt_in_path;
  $apath = '';
  if ($alpha_opt_in_path > 0) {
     $apath = '&opt_in_path[]=' . $alpha_opt_in_path;
  }
  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$alpha_mobile" . $apath . $friends,
  );
  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }
  $result = drupal_http_request($api_opt_in_path_url, $options);
  watchdog('dosomething_subscribe_mobilecommons', 'Referral signup response = ' . print_r($result, TRUE));
  //@todo: Check response for errors.
  return $result;
}

/**
 * Form callback for mobile signup / referral form.
 */
function dosomething_subscribe_mobilecommons_referral_form($form, &$form_state, $node, $num_betas = 6) {
  $form['alpha_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' =>array('placeholder' => t('Your name:')),
  );
  $form['alpha_mobile'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' =>array('placeholder' => t('Your cell #:')),
  );
  if (isset($node->field_sms_referral_has_email[LANGUAGE_NONE][0]['value']) && $node->field_sms_referral_has_email[LANGUAGE_NONE][0]['value'] == 1) {
    $form['alpha_email'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#attributes' =>array('placeholder' => t('Your email:')),
    );
  }
  $form['beta_mobiles'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );
  for ($i = 0; $i < $num_betas; $i++) {
    $form['beta_mobiles']['beta_mobile_' . $i] = array(
      '#type' => 'textfield',
      '#attributes' =>array('placeholder' => t("Friend's cell #:")),
    );   
  }
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  // @todo: Dynamic SMS Referral Button Label field?
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Invite friends'),
    '#attributes' => array('class' => array('btn', 'primary', 'large')),
  );
  return $form;
}

/**
 * Form validation callback for mobile signup / referral form.
 */
function dosomething_subscribe_mobilecommons_referral_form_validate($form, &$form_state) {
  // Check for valid email address if email field exists:
  if (isset($form_state['values']['alpha_email']) && !valid_email_address($form_state['values']['alpha_email'])) {
     form_set_error('alpha_email', t('Please provide a valid email address.'));
  }
  // Check for valid alpha cell:
  $alpha_mobile = $form_state['values']['alpha_mobile'];
  $alpha_mobile = preg_replace('#[^0-9]#', '', $alpha_mobile);
  if (!dosomething_general_valid_cell($alpha_mobile)) {
    form_set_error('alpha_mobile', t('Please provide a valid cell number.'));  
  }
  // Check for valid beta cell numbers:
  for ($i = 0; $i < 6; $i++) {
    if (!empty($form_state['values']['beta_mobile_' . $i])) {
      $beta_mobile = $form_state['values']['beta_mobile_' . $i];
      $beta_mobile = preg_replace('#[^0-9]#', '', $beta_mobile);
      if (!dosomething_general_valid_cell($beta_mobile)) {
        form_set_error('beta_mobile_' . $i, t('Please provide a valid cell number.'));  
      }
    }
  }
}

/**
 * Form submit callback for mobile signup / referral form.
 */
function dosomething_subscribe_mobilecommons_referral_form_submit($form, &$form_state) {
  global $user;
  $args = array();
  $alpha_name = $form_state['values']['alpha_name'];
  $args['first_name'] = $alpha_name;
  $alpha_mobile = $form_state['values']['alpha_mobile'];
  $alpha_mobile = preg_replace('#[^0-9]#', '', $alpha_mobile);
  $alpha_email = $form_state['values']['alpha_email'];
  $beta_mobiles = array();
  for ($i = 0; $i < 6; $i++) {
    if (!empty($form_state['values']['beta_mobile_' . $i])) {
      $beta_mobile = $form_state['values']['beta_mobile_' . $i];
      $beta_mobile = preg_replace('#[^0-9]#', '', $beta_mobile);
      $beta_mobiles[] = $beta_mobile;
    }
  }
  // Load node to find relevant subscribe values.
  $node = node_load($form_state['values']['nid']);

  // If alpha and beta opt-in paths are set:
  if (isset($node->field_mobilecommons_opt_in_alpha[LANGUAGE_NONE][0]['value']) && isset($node->field_mobilecommons_opt_in_beta[LANGUAGE_NONE][0]['value'])) {
    // Send subscribe request to Mobilecommons:
    $response = dosomething_subscribe_mobilecommons_referral_signup($alpha_mobile, $node->field_mobilecommons_opt_in_alpha[LANGUAGE_NONE][0]['value'], $beta_mobiles, $node->field_mobilecommons_opt_in_beta[LANGUAGE_NONE][0]['value'], $args);
    // If there was a bad response, alert user.
    if (!$response) {
      drupal_set_message(t('Sorry, there was an error in the response.  Please try submitting again.'), 'warning');
      return;
    }
  }
  // Else if no paths are set, an admin needs to update the alpha/beta values.  
  // The idea here is that hopefully a user never sees this.
  else {
    drupal_set_message('Missing alpha and beta opt-in paths.  Please contact an administrator.', 'warning');
    return;
  }

  // If email form field is present:
  if (isset($node->field_sms_referral_has_email[LANGUAGE_NONE][0]['value']) && $node->field_sms_referral_has_email[LANGUAGE_NONE][0]['value'] == 1) {
    // If Mailchimp Group is present:
    if (isset($node->field_mailchimp_group[LANGUAGE_NONE][0]['value']) && module_exists('dosomething_subscribe_mailchimp')) {
      // Subscribe alpha_email to Mailchimp Group.
      dosomething_subscribe_mailchimp_signup($alpha_email, $node->field_mailchimp_group[LANGUAGE_NONE][0]['value']);
    }
    // If Mandrill Key is present:
    if (isset($node->field_mandrill_key[LANGUAGE_NONE][0]['value']) && module_exists('dosomething_mandrill')) {
      // Send Mandrill email to alpha_email: 
      $message['FNAME'] = $alpha_name;
      dosomething_mandrill_dispatch($alpha_email, $node->field_mandrill_key[LANGUAGE_NONE][0]['value'], $message);
    }  
  }

  // Store signup and set signup success message:
  if (module_exists('dosomething_signups')) {
    // If user is signed in, store as a signup:
    if ($user->uid > 0 && !dosomething_signups_is_user_signed_up($user->uid, $node->nid)) {
      // Insert signups record:
      dosomething_signups_insert_signup($user->uid, $node->nid);
    }
    // Set success message:
    drupal_set_message(dosomething_signups_get_signup_success_msg($node));
  }
}

/**
 * Updates a node's Mobilecommons Group Id field.
 *
 *  @param int $nid
 *    Node nid to update.
 *
 *  @param string $mobilecommons
 *    Mobilecommons Opt-in value to use.
 */
function _dosomething_subscribe_mobilecommons_update_node_mobilecommons($nid, $mobilecommons) {
  $node = node_load($nid);
  if ($node->nid) {
    $node->field_mc_optin[LANGUAGE_NONE][0]['value'] = $mobilecommons;
    node_save($node);
  }
}

/**
 * Bulk updates the Mobilecommons Opt-in field for a given node type.
 *
 *  @param string $node_type
 *    Node type to bulk update.
 *
 *  @param string $mobilecommons
 *    Mobilecommons Opt-in value to use.
 */
function _dosomething_subscribe_mobilecommons_update_node_type_mobilecommons($node_type, $mobilecommons) {
  $nids = dosomething_general_get_nids_by_type($node_type); 
  foreach ($nids as $nid) {
    _dosomething_subscribe_mobilecommons_update_node_mobilecommons($nid, $mobilecommons);
  }
}
