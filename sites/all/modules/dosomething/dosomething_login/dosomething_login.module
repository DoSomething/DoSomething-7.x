<?php

/**
 * @file
 * Custom functionality relating to user registration and login.
 */

/**
 * Implements hook_menu().
 */
function dosomething_login_menu() {
  $items = array();
  $items['user/registration/fb'] = array(
    'title' => 'Registration',
    'description' => 'Register through your Facebook account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_login_register_facebook'),
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
  );
  $items['user/registration'] = array(
    'title' => 'Registration',
    'description' => 'Sign up URL to which mobile commons submits sign up requests to us.',
    'page callback' => 'dosomething_login_user_register',
    //'page arguments' => array('dosomething_login_register_popup_form'),
    'access callback' => 'dosomething_login_user_register_access',
    'type' => MENU_CALLBACK,
  );
  $items['user/registration/ajax'] = array(
    'page callback' => 'dosomething_login_ajax',
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
  );
  $items['dosomething/under-13/permission/%/%/%'] = array(
    'title' => 'Parental Permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_login_parent_permission_page', 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['dosomething/under-13/parent-consent-email'] = array(
    'title' => 'Parental Permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_login_parent_permission_email_form'),
    'access callback' => 'dosomething_parent_consent_email_access',
    'type' => MENU_CALLBACK,
  );
  $items['dosomething/ajax/registration-data'] = array(
    'title' => 'Registration Data',
    'page callback' => 'dosomething_login_registration_data_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['access-denied'] = array(
    'title' => 'Access Denied',
    'page callback' => 'dosomething_login_access_denied_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *  Confirms that the user has access to view the registration form.
 *
 *  @return bool
 *    True if they have access, else false.
 */
function dosomething_login_user_register_access() {
  return (
    user_is_anonymous() &&
    variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) ||
    (
      !empty($_GET['destination']) &&
      drupal_valid_path($_GET['destination']) &&
      user_is_logged_in()
    )
  );
}

/**
 *  Loads the registration form (assuming the user is logged out), or redirects away if they're logged in.
 */
function dosomething_login_user_register() {
  // If the user is logged in, redirect to their ultimate destination because they're already registered.
  if (!empty($_GET['destination']) && drupal_valid_path($_GET['destination']) && user_is_logged_in()) {
    drupal_goto($_GET['destination']);
  }

  // Otherwise, show the registration form.
  return drupal_get_form('dosomething_login_register_popup_form');
}

/**
 * Implements hook_menu_alter().
 */
function dosomething_login_menu_alter(&$items) {
  // Remove the default user registration page in favor of our custom registration.
  unset($items['user/register']);
}

/**
 * Implements hook_library().
 */
function dosomething_login_library() {
  $libraries = array();
  $libraries['jquery.validate'] = array(
    'title' => 'jQuery Library',
    'website' => 'http://bassistance.de/jquery-plugins/jquery-plugin-validation/',
    'version' => '1.9.0',
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/jquery-validation-1.9.0/jquery.validate.min.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  $libraries['ds.ajax.popup'] = array(
    'title' => 'DoSomething Ajax Popup',
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-ajax-popups.js' => array(),
    ),
    'version' => '1.0',
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal.ajax'),
      array('system', 'jquery.form'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function dosomething_login_block_info() {
  $blocks['become_member'] = array(
    'info' => t('Become a Member'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['register_block'] = array(
    'info' => t('User registration block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_login_block_view($delta = '') {
  $block = array();
  $is_anonymous = user_is_anonymous();
  switch ($delta) {
    case 'become_member':
      if ($is_anonymous) {
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
        }
        if ((!isset($node) || $node->type != 'campaign_sign_up')) {
          if ((arg(0) != 'user' || arg(1) != 'registration')) {
            $block['subject'] = t('Become a Member');
            $block['content'][] = drupal_get_form('dosomething_login_register_block');
            $block['content'][] = drupal_get_form('dosomething_login_register_popup_form');
          }
          $block['content'][] = drupal_get_form('dosomething_login_login_popup_form');
        }
      }
      else if (module_exists('dosomething_user_my_somethings')) {
        // TODO: This should go in dosomething_user_my_somethings module
        // but we will have to redo a bunch of theming to get that working.
        $block['content'] = dosomething_user_my_somethings_member_block();
      }
      break;
    case 'register_block':
      if ($is_anonymous) {
        $form = drupal_get_form('dosomething_login_register_popup_form');
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          if ($node->type == 'campaign_sign_up') {
            drupal_add_js(drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-registration.js');
            drupal_add_js(drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-registration-block.js');
            drupal_add_css(drupal_get_path('module', 'dosomething_login') . '/css/dosomething-login-registration-block.css');
            unset($form['final_submit']);
          }
        }
        $block['subject'] = t('Register for an account');
        $block['content'][] = $form;
        $block['content'][] = drupal_get_form('dosomething_login_login_popup_form');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_mail().
 */
function dosomething_login_mail($key, &$message, $params) {
  switch ($key) {
    case 'dosomething-parent-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $params['link'] = dosomething_login_one_time_parent_permission_link($params['account']);
      $message['subject'] = t('Permission Request from @name', array('@name' => $params['full_name']));
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'dosomething-parent-permission-granted-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $message['subject'] = t('Permission Granted for @name', array('@name' => $params['full_name']));
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_permission_granted_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'dosomething-parent-permission-denied-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $message['subject'] = t('Permission Denied for @name', array('@name' => $params['full_name']));
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_permission_denied_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_login_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_login_member_lightbox' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'dosomething-login-member-lightbox',
    ),
    'dosomething_login_parent_email' => array(
      'path' => $path . '/templates',
      'variables' => array('full_name' => NULL, 'link' => NULL),
      'template' => 'dosomething-login-parent-email',
    ),
    'dosomething_login_parent_permission_granted_email' => array(
      'path' => $path . '/templates',
      'variables' => array('full_name' => NULL),
      'template' => 'dosomething-login-parent-permission-granted-email',
    ),
    'dosomething_login_parent_permission_denied_email' => array(
      'path' => $path . '/templates',
      'variables' => array('full_name' => NULL),
      'template' => 'dosomething-login-parent-permission-denied-email',
    ),
    'dosomething_login_form_required_marker' => array(
      'variables' => array(),
    ),
    'theme_dosomething_login_facebook_user_info' => array(
      'variables' => array('account' => NULL),
    ),
    'dosomething_login_action_ds_connect' => array(
      'variables' => array(),
    ),
    'dosomething_login_fboauth_user_form_connect' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function dosomething_login_theme_registry_alter(&$vars) {
  $path =  drupal_get_path('module', 'dosomething_login');
  $vars['fboauth_user_info']['theme_path'] = $path;
  $vars['fboauth_user_info']['function'] = 'theme_dosomething_login_facebook_user_info';
}

/**
 * Implements hook_cron().
 */
function dosomething_login_cron() {
  // TODO: Only run every few hours?
  dosomething_login_update_accounts_under_13();
  dosomething_login_clear_old_accounts();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_login_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  $uid = $form['#user']->uid;
  $fbid = fboauth_fbid_load($uid);
  if (isset($form['account']['fboauth'])) {
    $form['account']['fboauth']['#markup'] = theme('dosomething_login_fboauth_user_form_connect', array('uid' => $uid, 'fbid' => $fbid));
  }
  if (!dosomething_login_user_has_parental_consent($user->uid)) {
    // Note: Give a user parental consent if they are over 13
    // so that they don't get stuck not being able to edit their
    // account by changing their birthdate.
    dosomething_login_set_parental_consent_message();
    drupal_goto('user');
  }

  // Assuming we don't have permission to edit users...
  if (!user_access('administer users')) {
    // Hide the registration page field.  We don't want them to change that.
    $form['profile_main']['field_registration_page']['#access'] = FALSE;
  }

  // Add custom validation to this form.
  $form['#validate'][] = 'dosomething_login_profile_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_login_form_club_node_form_alter(&$form, &$form_state) {
  global $user;
  if (!dosomething_login_user_has_parental_consent($user->uid)) {
    // Note: Give a user parental consent if they are over 13
    // so that they don't get stuck not being able to edit their
    // account by changing their birthdate.
    dosomething_login_set_parental_consent_message();
    drupal_goto('user');
  }
}

/**
 * Implements hook_form_alter().
 */
function dosomething_login_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && strpos($form_id, 'webform_client_form_') === 0) {
    $node_types = array(
      'campaign_report_back',
      'campaign_sign_up',
      'grant_application',
      'scholarship_application',
      'action_guide',
      'project_report',
    );
    // Users without parental consent should be able to see this
    // but not be able to do anything with it.
    if (in_array($form['#node']->type, $node_types)) {
      global $user;
      if (!dosomething_login_user_has_parental_consent($user->uid)) {
        dosomething_login_set_parental_consent_message();
        drupal_goto();
      }
    }
  }
  else if (in_array($form_id, array('user_login', 'user_login_block'))) {
    // Our login validation function must run first.
    $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
    array_unshift($form['#validate'],'dosomething_login_user_login_validate');
    $form['name']['#title'] = t('Email, Username or Cell Number');
    $form['name']['#description'] = t('Enter your email, username or cell phone number.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function dosomething_login_form_dosomething_login_register_popup_form_alter(&$form, &$form_state, $form_id) {
  // Used to add css to beta campaign "project clean up"
  // No user state check is occurring as this form is only being called for anonymous users
  $path = urldecode(request_uri());
  if ($path == '/user/registration?destination=node/' . variable_get('beta_campaign_nid', 724796)) {
    // add custom JS and CSS files to this instance of the login/reg form only
    drupal_add_js(drupal_get_path('module', 'dosomething_campaign_styles') . '/campaign_styles/2013/cleanup/gate.js');
    drupal_add_css(drupal_get_path('module', 'dosomething_campaign_styles') . '/campaign_styles/2013/cleanup/gate.css');
  }
  
  if ($path == '/user/registration?destination=node/' . variable_get('hunt_campaign_nid', 729679)) {
    // add custom JS and CSS files to this instance of the login/reg form only
    drupal_add_js(drupal_get_path('module', 'dosomething_campaign_styles') . '/campaign_styles/2013/hunt/gate.js');
    drupal_add_css(drupal_get_path('module', 'dosomething_campaign_styles') . '/campaign_styles/2013/hunt/gate.css');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_login_form_user_pass_alter(&$form, &$form_state) {
  unset($form['#validate']);
  $form['#validate'] = array('dosomething_login_sms_password_recovery_validate');
  $form['#submit'] = array('dosomething_login_sms_password_recovery_submit');
}

/**
 * Validation function for resetting passwords that adds mobile phone based
 * signup reset capabilities.
 */
function dosomething_login_sms_password_recovery_validate(&$form, &$form_state) {
  $name = trim($form_state['values']['name']);

  // Check if they gave us a mobile number. We want to do this first because
  // we can't send emails to the accounts we've generated with
  // "{$number}@mobile" addresses.
  $number = dosomething_general_valid_cell($name);
  if ($number) {
    $account = dosomething_general_find_user_by_cell($number);
    if ($account) {
      // Send a text message with the reset password.
      $form_state['send_sms_reset'] = TRUE;
      form_set_value(array('#parents' => array('account')), $account, $form_state);
      return;
    }
  }

  // Not going to be sending an SMS text at this point.
  $form_state['send_sms_reset'] = FALSE;

  // Code from here on is copied from user_pass_validate()--asside from the
  // error message.

  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, %name is not recognized as a user name, e-mail address, or mobile number.', array('%name' => $name)));
  }
}

/**
 * Submition handler for resetting passwords that adds mobile phone based
 * signup reset capabilities.
 */
function dosomething_login_sms_password_recovery_submit($form, &$form_state) {
  // Check the incoming form state. If send_sms_reset is false then do what
  // we do normally.
  if (!isset($form_state['send_sms_reset']) || !$form_state['send_sms_reset']) {
    user_pass_submit($form, $form_state);
    return;
  }
  elseif (isset($form_state['values']['account']->uid)) {
    $account = $form_state['values']['account'];
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $reset_link = user_pass_reset_url($account);
    $pass = user_password(6);
    $account = user_load($account->uid);
    $account->pass = user_hash_password($pass);
    user_save($account);
    $number = preg_replace('/\D/', '', trim($form_state['values']['name']));
    // Note: If the message is too long, then it won't go through.
    $message = "Your DoSomething password is now $pass";
    $response = sms_mobile_commons_send($number, $message);
    watchdog('SMS', 'A user with the mobile number of %number asked for a password reset. The text message user validation response was "%validation" and the message sending status was "%message"',
      array('%number' => $number, '%validation' => $response['validation'], '%message' => $response['message']),
      WATCHDOG_NOTICE
    );
    drupal_set_message(t('A text message with reset instructions has been sent to your mobile phone.'));
  }
}

/**
 * Implements hook_element_info().
 */
function dosomething_login_element_info() {
  $types = array();
  $types['dosomething_password_confirm'] = array(
    '#input' => TRUE,
    '#process' => array('dosomething_login_dosomething_password_confirm'),
    '#theme_wrappers' => array('form_element'),
    '#element_validate' => array('password_confirm_validate'),
  );
  return $types;
}

/**
 * Process a form element of type dosomething_password_confirm.
 */
function dosomething_login_dosomething_password_confirm($element) {
  // The normal password confirm sets a title and doesn't let you add
  // attributes or edit the title.

  // This removes the title of the confirm password and adds placeholders.
  $element = form_process_password_confirm($element);
  unset($element['pass2']['#title']);
  $element['pass1']['#attributes']['placeholder'] = t('Password');
  return $element;
}

/**
 * Custom validation for user login form
 *
 */
function dosomething_login_user_login_validate($form, &$form_state) {
  // Note: Taken from logintoboggan module
  // Allow users to login with email address and cell phone number
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($name = dosomething_login_find_user_by_email($form_state['values']['name'])) {
      form_set_value($form['name'], $name, $form_state);
    }
    else if ($number = dosomething_general_valid_cell($form_state['values']['name'])) {
      if ($account = dosomething_general_find_user_by_cell($number)) {
        form_set_value($form['name'], $account->name, $form_state);
      }
    }
  }
}

/**
 * Find a user by email address (this isn't much different from core user_load_by_mail,
 * which calls user_load_multiple(array(), array('mail' => $mail));
 */
function dosomething_login_find_user_by_email($email) {
  $user = user_load_by_mail($email);
  return $user ? $user->name : FALSE;
}

/**
 * Custom validation for user_profile_form
 */
function dosomething_login_profile_form_validate($form, &$form_state) {
  // Verify that this is a unique cell phone number.
  $profile = isset($form_state['profiles']['main']) ? $form_state['profiles']['main'] : NULL;
  if (isset($form_state['values']['profile_main']['field_user_mobile'][LANGUAGE_NONE][0]['value'])) {
    $entered_number = $form_state['values']['profile_main']['field_user_mobile'][LANGUAGE_NONE][0]['value'];
    if ($number = dosomething_general_valid_cell($entered_number)) {
      // Make sure no one else is using this number.
      if ($account = dosomething_general_find_user_by_cell($number)) {
        if ($account->uid != $profile->uid) {
          form_set_error('profile_main][field_user_mobile][' . LANGUAGE_NONE . '][0', t('The provided cell phone number is already in use by another account.'));
        }
      }
      // Save the version of the phone with only digits.
      $form_state['values']['profile_main']['field_user_mobile'][LANGUAGE_NONE][0]['value'] = $number;
    }
    else if ($entered_number) {
      form_set_error('profile_main][field_user_mobile][' . LANGUAGE_NONE . '][0', t('%phone is not a valid cell phone number.', array('%phone' => $entered_number)));
    }
  }
}

/**
 * The popup register form for 'Become a Member'.
 */
function dosomething_login_register_popup_form($form, &$form_state) {
  // we want to cache this form, because we'll be using ajax_get_form, which requires that the form be secure
  if (isset($_GET['destination'])) {
    $path = $_GET['destination'];
  }
  else {
    $path = current_path();
  }

  $fb_link = fboauth_action_link_properties('connect', $path);
  $fb_url = url($fb_link['href'], array('query' => $fb_link['query']));
  $form_state['cache'] = true;
  $form['#validate'][] = 'dosomething_login_register_block_validate';
  $form['#submit'][] = 'dosomething_login_register_block_submit';
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-registration.js',
      array(
        'data' => array(
          'dosomethingLogin' => array(
              'dsApiKey' => variable_get('dosomething_login_api_key', '8hSyfEZIeBrlcgrdM6QbS63F6NjUvgqQ'),
          ),
        ),
        'type' => 'setting',
      ),
    ),
    'library' => array(
      array('dosomething_login', 'jquery.validate'),
    ),
  );

  $query = drupal_get_destination();
  $query['destination'] = $query['destination'] == 'user/registration' ? 'front' : $query['destination'];

  if ($query['destination'] == 'node/' . variable_get('cgg_form_id')) {
    $query['destination'] .= '?_';
  }

  $form['#action'] = url($_GET['q'], array('query' => drupal_get_destination()));
  $form['#action'] = url('user/registration', array('query' => $query));

  $form['title_text'] = array(
    '#type' => 'item',
    '#title' => t("You’re Almost There"),
  );
  $form['#action'] = url('user/registration', array('query' => $query));
  $form['connect'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'connect-with-facebook',
      ),
    ),
    '#children' => l('Connect with Facebook', $fb_url),
  );
  $form['or'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'separator',
      ),
    ),
    '#children' => t('or'),
  );
  $form['name'] = array(
    'first_name' => array(
      '#type' => 'textfield',
      '#title' => t('First Name')/* . theme('dosomething_login_form_required_marker', array())*/,
      '#hidden_title' => t('First Name'),
      '#prefix' => '<div class="popup-content">',
      '#attributes' => array(
        'placeholder' => t('First Name'),
        'class' => array('dosomething-original-value'),
      ),
      '#size' => 9,
      '#required' => TRUE,
      //'#field_suffix' => theme('dosomething_login_form_required_marker', array()),
    ),
    'last_name' => array(
      '#type' => 'textfield',
      '#title' => t('Last Name')/* . theme('dosomething_login_form_required_marker', array())*/,
      '#hidden_title' => t('Last Name'),
      '#attributes' => array(
        'placeholder' => t('Last Name'),
        'class' => array('dosomething-original-value'),
      ),
      '#size' => 9,
      '#required' => TRUE,
      //'#field_suffix' => theme('dosomething_login_form_required_marker', array()),
    ),
  );

  $e = '';
  if (!empty($_GET['email'])) {
    if (valid_email_address($_GET['email'])) {
      $e = check_plain($_GET['email']);
    }
    else {
      $e = '';
    }
  }

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email') . theme('dosomething_login_form_required_marker', array()),
    '#attributes' => array(
      'placeholder' => t('Email'),
    ),
    '#default_value' => $e,
    '#size' => 20,
    //'#field_suffix' => theme('dosomething_login_form_required_marker', array()),
  );
  $form['cell'] = array(
    '#type' => 'textfield',
    '#title' => t('Cell'),
    '#attributes' => array(
      'placeholder' => t('Cell'),
    ),
    '#size' => 20,
  );

  $form['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#hidden_title' => t('Password'),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Password'),
    ),
    '#size' => 20,
    //'#field_suffix' => theme('dosomething_login_form_required_marker', array()),
  );
  $form['birthday'] = array(
    '#type' => 'item',
    '#title' => t('<span class="login-popup-birthday">Birthday</span>') . theme('dosomething_login_form_required_marker', array()),
    'month' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('mm'),
      ),
      '#size' => 2,
      '#maxlength' => 2,
    ),
    'day' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('dd'),
      ),
      '#size' => 2,
      '#maxlength' => 2,
    ),
    'year' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('yyyy'),
      ),
      '#size' => 4,
      '#maxlength' => 4,
    ),
  );

  $form['parent_email_message'] = array(
    '#type' => 'item',
    '#title' => t('What a Rock Star!'),
    '#description' => t("Since you're under the age of 13, you'll need to get a parent or guardian's permission."),
    '#prefix' => '<div class="under-13-field">',
  );
  $form['parent_email'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t("Parent or Guardian's Email"),
    ),
    '#suffix' => theme('dosomething_login_form_required_marker', array()) . '</div>',
    '#size' => 20,
  );

  $form['signup'] = array(
    '#type' => 'item',
    '#description' => t("Clicking “Finish” won't sell your soul, but it means you agree to our<br /> <a href='/about/terms-of-service'>terms of service</a> & <a href='/about/privacy'>privacy policy</a> & to receive our weekly update."),
    '#prefix' => '<div class="disclaimer">',
    '#suffix' => '</div></div>',
  );
  $form['final_submit'] = array(
    '#prefix' => '<div class="ds-login-popup-footer">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Finish'),
  );
  $form['user'] = array(
    '#theme' => 'link',
    '#path' => 'user',
    '#prefix' => '<span class="already-member">already a member? ',
    '#suffix' => '</span>',
    '#text' => t("log in"),
    '#options' => array(
      'attributes' => array('class' => array('or-sign-in', 'sign-in-popup')),
      'html' => FALSE,
    ),
  );

  // Set default values if this was submitted to the related registration block first.
  if (isset($form_state['input']['form_id']) && $form_state['input']['form_id'] == 'dosomething_login_register_block') {
    $form['name']['first_name']['#default_value'] = isset($form_state['input']['first_name']) ? $form_state['input']['first_name'] : '';
    $form['name']['last_name']['#default_value'] = isset($form_state['input']['last_name']) ? $form_state['input']['last_name'] : '';
    if (!empty($form_state['input']['cell_or_email'])) {
      // If there was a valid entry then prepopulate.
      // Otherwise, they'll have to re-enter anyway.
      if (valid_email_address($form_state['input']['cell_or_email'])) {
        $form['email']['#default_value'] =  $form_state['input']['cell_or_email'];
      }
      else if (($number = ltrim(preg_replace('/[^0-9]/', '', $form_state['input']['cell_or_email']), 1))) {
        $form['cell']['#default_value'] =  $form_state['input']['cell_or_email'];
      }
    }
  }
  return $form;
}

/**
 * The popup login form for 'Become a Member'.
 */
function dosomething_login_login_popup_form($form, &$form_state) {
  // we want to cache this form, because we'll be using ajax_get_form, which requires that the form be secure
  $form_state['cache'] = true;
  $form['#attached'] = array(
    'library' => array(array('system', 'ui.dialog')),
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-login-popup-lightbox.js',
      array(
        'data' => array(
          'dosomethingLogin' => array(
              'dsApiKey' => variable_get('dosomething_login_api_key', '8hSyfEZIeBrlcgrdM6QbS63F6NjUvgqQ'),
          ),
        ),
        'type' => 'setting',
      ),
    ),
  );

  $query = drupal_get_destination();
  $query['destination'] = $query['destination'] == 'user/registration' ? 'front' : $query['destination'];

  if ($query['destination'] == 'node/' . variable_get('cgg_form_id')) {
    $query['destination'] .= '?_';
  }
  $form['title_text'] = array(
    '#type' => 'item',
    '#title' => t("We've Missed You."),
  );
  $form['#action'] = url('user', array('query' => $query));

  $fb_link = fboauth_action_link_properties('connect', current_path());
  $form['connect'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'connect-with-facebook',
      ),
    ),
    '#children' => l('Connect with Facebook', $fb_link['href'], array('query' => $fb_link['query'])),
  );
  $form['or'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'separator',
      ),
    ),
    '#children' => t('or'),
    '#suffix' => '<div class="popup-content">',
  );

  // Copy from user_login().
  $login = drupal_get_form('user_login');
  $form['#validate'] = $login['#validate'];
  $form['#submit'] = $login['#submit'];
  foreach (array('#type', '#title', '#required', '#description') as $key) {
    $form['name'][$key] = $login['name'][$key];
    $form['pass'][$key] = $login['pass'][$key];
  }
  $form['pass']['#description'] .= t('<br><a href="@password">Forgot your password?</a>', array('@password' => url('user/password')));

  $form['final_submit'] = array(
    '#prefix' => '</div><div class="ds-login-popup-footer">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Log In'),
  );
  $form['see-whats-new'] = array(
    '#prefix' => '<span class="see-whats-new">',
    '#suffix' => '</span>',
    '#type' => 'link',
    '#href' => 'blog/check-out-our-new-do',
    '#title' => t("see what's new"),
    '#options' => array(
      'html' => FALSE,
      'attributes' => array(
      ),
    ),
  );
  $form['user'] = array(
    '#type' => 'link',
    '#href' => 'user/registration',
    '#prefix' => '<span class="already-member">not a member? ',
    '#suffix' => '</span>',
    '#title' => t('become one'),
    '#options' => array(
      'attributes' => array('class' => array('or-sign-in')),
      'html' => FALSE,
    ),
  );

  return $form;
}

/**
 * The form for the 'Become a Member' block.
 */
function dosomething_login_register_block($form, &$form_state) {
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-registration-popup-lightbox.js',
    ),
    'library' => array(array('system', 'ui.dialog')),
  );

  $query = drupal_get_destination();
  $query['destination'] = $query['destination'] == 'user/registration' ? 'front' : $query['destination'];

  $form['why'] = array(
    '#theme' => 'link',
    '#path' => 'why-become-a-member',
    '#text' => t("Why become a member?"),
    '#options' => array(
      'attributes' => array('class' => array('why')),
      'html' => FALSE,
    ),
  );
  $form['#action'] = url('user/registration', array('query' => $query));
  $fb_link = fboauth_action_link_properties('connect', current_path());
  $fb_url = url($fb_link['href'], array('query' => $fb_link['query']));
  $form['connect'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'connect-thru-facebook',
      ),
    ),
    '#children' => l('Connect thru Facebook', $fb_url),
  );
  $form['or'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'separator',
        'split',
      ),
    ),
    '#children' => t('or'),
  );
  $form['ie_signup '] = array(
    '#theme' => 'link',
    '#path' => 'user/registration',
    '#text' => t("Sign Up"),
    '#options' => array(
      'attributes' => array('class' => array('ie-signup-button')),
      'html' => FALSE,
    ),
  );
  $form['ds-register-wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'clearfix',
        'ds-register-wrapper',
      ),
    ),
  );
  $form['ds-register-wrapper']['name'] = array(
    'first_name' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('First Name'),
      ),
      '#size' => 9,
    ),
    'last_name' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('Last Name'),
      ),
      '#size' => 9,
    ),
  );
  $form['ds-register-wrapper']['cell_or_email'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Cell or email'),
    ),
    '#size' => 20,
  );
  $form['ds-register-wrapper']['first_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#attributes' => array('class' => array('submit')),
  );
  $form['ds-register-wrapper']['user'] = array(
    '#theme' => 'link',
    '#path' => 'user',
    '#text' => t("or sign in"),
    '#options' => array(
      'attributes' => array('class' => array('or-sign-in', 'sign-in-popup')),
      'html' => FALSE,
    ),
  );
  return $form;
}

/**
 * Validate the user registration form.
 */
function dosomething_login_register_block_validate($form, &$form_state) {
  $values = $form_state['values'];

  // So, the form system throws an error on required fields when they're empty,
  // but if there's no title on the field then there's no error message displayed
  // and the fields are never highlighted in red.  Plus if you add another error
  // on one of these required fields then nothing happens because there is already
  // an error registered on that field.  FAPI does not allow you in any way to clear
  // an error on a single field.  So, we clear all of the errors and add them back
  // again while adding meaningful messages for the titleless required fields.
  // Since we're adding the same messages, we don't have to worry about the set
  // drupal message that are created.
  $empty_required_fields = array('first_name', 'last_name', 'pass');
  $errors = form_get_errors();
  form_clear_error();
  if (count($errors)) {
    foreach ($errors as $field => $message) {
      if (in_array($field, $empty_required_fields) && !$message) {
        $element = isset($form['name'][$field]) ? $form['name'][$field] : $form[$field];
        // Make sure to add the #hidden_title key to the fields.
        form_set_error($field, t('!name field is required.', array('!name' => $element['#hidden_title'])));
      }
      else {
        form_set_error($field, $message);
      }
    }
  }

  if (strlen($form_state['values']['pass']) < 6) {
    form_set_error('pass', t('Your password must be at least 6 characters long.'));
  }
  $form_state['values']['birthdate'] = mktime(0, 0, 0, $values['month'], $values['day'], $values['year']);
  if (!is_numeric($values['month']) || $values['month'] > 12) {
    form_set_error('month', t('Please provide a valid numeric month for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['day']) || $values['month'] > 31) {
    form_set_error('day', t('Please provide a valid day for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['year']) || strlen($values['year']) != 4) {
    form_set_error('year', t('Please provide the 4-digit year you were born.'));
    $invalid_birthday = TRUE;
  }
  if (!isset($invalid_birthday)) {
    if (!dosomething_login_person_is_over_age($form_state['values']['birthdate'], 13)) {
      if (!isset($form_state['values']['parent_email']) || !valid_email_address($form_state['values']['parent_email'])) {
        form_set_error('parent_email', t('Please provide a valid parental email address.'));
      }
      else if ($values['parent_email'] == $values['email']) {
       form_set_error('parent_email', t("Your parent/guardian email cannot be the same as your own email.  If you do not have your own email address but use your parent's email address instead, please email help@dosomething.org and we'll get it sorted out."));
      }
    }
  }

  if (!$values['first_name']) {
    form_set_error('first_name', t('Please provide your first name.'));
  }
  if (!$values['last_name']) {
    form_set_error('last_name', t('Please provide your last name.'));
  }
  // Validate cell number or e-mail address
  if (valid_email_address($values['email'])) {
    if (db_select('users')->fields('users', array('uid'))->condition('mail', db_like($values['email']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('email', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $values['email'], '@password' => url('user/password'))));
    }
    $form_state['values']['mail'] = $values['email'];
  }
  if ($values['cell']) {
    if ($number = dosomething_general_valid_cell($values['cell'])) {
       
      if (db_select('field_data_field_user_mobile')
            ->fields('field_data_field_user_mobile', array('entity_id'))
            ->condition('field_user_mobile_value', db_like($number), 'LIKE')
            ->range(0, 1)
            ->execute()
            ->fetchField()) {
        
        form_set_error('cell', t('The phone number %phone is already registered. <a href="@password">Have you forgotten your password?</a>',
                                 array('%phone' =>$values['cell'], '@password' => url('user/password'))));
      }
      elseif (db_select('users')
               ->fields('users', array('uid'))
               ->condition('mail', db_like($number . '@mobile'), 'LIKE')
               ->range(0, 1)
               ->execute()
               ->fetchField()) {
        
        form_set_error('cell', t('The phone number %phone is already registered. <a href="@password">Have you forgotten your password?</a>',
                                 array('%phone' =>                       $values['cell'], '@password' => url('user/password'))));
      }
      
      $form_state['values']['phone'] = $number;
      if (!valid_email_address($form_state['values']['mail'])) {
        $form_state['values']['mail'] = $number . '@mobile';
      }
    }
    else {
        form_set_error('cell', t('The phone number %phone is invalid.', array('%phone' => $values['cell'])));
    }
  }
  if (!$values['email'] && !$values['cell']) {
    form_set_error('email', t('Please provide a valid email address'));
    form_set_error('cell', t('or provide a valid cell phone number.'));
  }
}

 /**
 * Submit the user registration form.
 *
 * When a user registers for DoSomething.org in general using the user registation
 * form found as a block for anomious users in place of the user account informaiton
 * typically found in the left column of most pages.
 *
 * @param array $form
 *   Form array of the submissted values
 * @param array $form_state
 *   Array by reference that allows for the dynamic changing of the form values at
 *   various states of the submission process - validation, submission.
 */
function dosomething_login_register_block_submit($form, &$form_state) {
  $values = $form_state['input'];
  $birthdate = $form_state['values']['birthdate'];
  $name = preg_replace('/[^A-Za-z.]+/', '', $values['first_name']) . ' ' . preg_replace('/[^A-Za-z.]+/', '', $values['last_name']);
  $form_state['values']['name'] = dosomething_login_unique_name($name);
  $form_state['values']['init'] = $name;
  if (empty($form_state['values']['pass'])) {
    $form_state['values']['pass'] = user_password();
  }
  // Remove unneeded values.
  form_state_values_clean($form_state);

  $account = drupal_anonymous_user();
  $edit = array_intersect_key((array) $account, $form_state['values']);
  $edit['pass'] = $form_state['values']['pass'];
  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Determine the user's role by their age.
  if (dosomething_login_person_is_over_age($birthdate, 26)) {
    $role_name = 'old person';
  }
  else if (!dosomething_login_person_is_over_age($birthdate, 13)) {
    $role_name = 'pending member';
  }
  else {
    $role_name = 'member';
  }
  $account->status = 1;
  $role = user_role_load_by_name($role_name);
  $account->roles[$role->rid] = $role->name;
  $account = user_save($account, $edit);
  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }

  // Save profile data.
  // Note: Because we're doing drupal_write_record instead of profile_create,
  // we can't hook in on profile insert anywhere.  We should change this,
  // and if we do, then update dosomething_projects_general_register_form_submit
  // and dosomething_projects_general_form_dosomething_login_register_popup_form_alter
  // so we can use hook_entity_insert.
  $profile = new stdClass();
  $profile->type = 'main';
  $profile->uid = $account->uid;
  drupal_write_record('profile', $profile);
  $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['first_name'];
  $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['last_name'];
  $profile->field_user_birthday[LANGUAGE_NONE][0]['value'] = date('Y-m-d h:i:s', $birthdate);
  $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = (int) dosomething_login_person_is_over_age($birthdate, 13);
  $profile->field_user_newsletter_optin[LANGUAGE_NONE][0]['value'] = 1;

  // Adds the page that the user registered on.
  if (isset($_SERVER['HTTP_REFERER']) || isset($_GET['destination'])) {
    $referer = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : $_GET['destination']);
    $referer = preg_replace('#https?\:\/\/' . preg_quote($_SERVER['HTTP_HOST']) . '/#i', '', $referer);
    if (preg_match('#node/[0-9]+#', $referer)) {
      $referer = drupal_get_path_alias($referer);
    }

    $profile->field_registration_page[LANGUAGE_NONE][0]['value'] = $referer;
  }

  if (isset($form_state['values']['phone'])) {
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $form_state['values']['phone'];
  }
  
  field_attach_insert('profile2', $profile);

  $form_state['profile'] = $profile;
  $form_state['account'] = $account;
  $form_state['uid'] = $account->uid;
  
  if (isset($account->mail) && $account->status) {
    // Removed send message for initial registrations - re instructions from Marah.
    // Bug #1785 - Fwd: Welcome to DoSomething.org marah poop
    // _user_mail_notify('register_no_approval_required', $account);
  }
  else {
    // TOOD: verify cell number via SMS.
  }
  
  // Add user

  if (!dosomething_login_person_is_over_age($birthdate, 13)) {
    if (isset($values['parent_email'])) {
      global $language;
      $params = array('account' => $account);
      drupal_mail('dosomething_login', 'dosomething-parent-email', $values['parent_email'], $language, $params);
      drupal_set_message(t('An email has been sent to %email for parental permission.', array('%email' => $values['parent_email'])));
    }
  }
  // After they are saved, save their fbuid with their uid if they registered
  // through Facebook.
  if (isset($_SESSION['fbuser'])) {
    fboauth_save($account->uid, $_SESSION['fbuser']->id);
    unset($_SESSION['fbuser']);
  }
  
  // Add new user to MailChimp group.
  $merge_vars = array();
  
  $merge_vars['FNAME'] = $values['first_name'];
  $merge_vars['LNAME'] = $values['last_name'];
  $merge_vars['MMERGE3'] = $name;
  $merge_vars['UID'] = $account->uid;
          
  $merge_vars['BDAY'] = date('m/d', $birthdate);
  $merge_vars['BDAYFULL'] = date('m/d/Y', $birthdate);
  $merge_vars['TURNS18'] = date('m/d/Y', strtotime('+18 years', $birthdate));
  $merge_vars['TURNS26'] = date('m/d/Y', strtotime('+26 years', $birthdate));
  
  // Phone
  if (isset($form_state['values']['phone']) && $form_state['values']['phone'] != '') {
    $merge_vars['MMERGE7'] = $form_state['values']['phone'];
  }
  
  // Submit to MailChimp:
  $mailchimp_subscribe_results = dosomething_subscribe_mailchimp_signup($account->mail, variable_get('dosomething_subscribe_mailchimp_user_register'), $merge_vars);
  
  // Log user in.
  if ($account->status) {
    user_login_submit(array(), $form_state);
  }
  
  // Add to Mobile Commons if number provided:
  if (isset($form_state['values']['phone'])) {
    $mobilecommons = variable_get('dosomething_subscribe_mobilecommons_user_register');
    $mobile_commons_subscribe_results = dosomething_general_mobile_commons_subscribe($form_state['values']['phone'], $mobilecommons);
    watchdog('dosomething_login', 'cell = ' . $form_state['values']['phone'] . ' opt_in = ' . $mobilecommons . ' response = ' . print_r($mobile_commons_subscribe_results, TRUE));
  }

  // Clear any logged registration data.
  $query = db_delete('ds_registration_data');
  // TODO: Use both conditions but make it an OR.
  if (isset($form_state['values']['phone'])) {
    $query->condition('cell', $form_state['values']['phone']);
  }
  else {
    $query->condition('email', $account->mail);
  }
  $num_deleted = $query->execute();
}

/**
 * Generate a unique username.
 */
function dosomething_login_unique_name($name, $i = '') {
  if (db_select('users')->fields('users', array('uid'))->condition('name', db_like($name . $i), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    if ($i === '') {
      $i = 0;
    }
    else {
      $i++;
    }
    return dosomething_login_unique_name($name, $i);
  }
  else {
    return $name . $i;
  }
}

/**
 * Returns HTML for a marker for required form elements.
 *  Copied from theme_form_required_marker to allow different class.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *
 * @ingroup themeable
 */
function theme_dosomething_login_form_required_marker($variables) {
  $t = get_t();
  $attributes = array(
    'class' => array('ds-registration-form-required', 'form-required'),
    'title' => $t('This field is required.'),
  );
  return '<span' . drupal_attributes($attributes) . '>*</span>';
}

/**
 * Determine if a drupal user is over the given age.
 *  If no birthday is set, the default answer is no.
 *
 * @param $uid
 *  (int) numeric id of drupal user.
 * @return @boolean
 */
function dosomething_login_drupal_user_is_over_age($uid, $age = 13, $end_timestamp = NULL) {
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    $birthday = field_get_items('profile2', $profile, 'field_user_birthday');
    if (isset($birthday[0]['value'])) {
      // this is only a a time (no time) so timezone is not important.
      $timestamp = strtotime($birthday[0]['value']);
      return dosomething_login_person_is_over_age($timestamp, $age, $end_timestamp);
    }
  }
  return FALSE;
}

/**
 * Check if a user is over the given age.
 *
 * @param $birthday
 *  (int) timestamp of birthday.
 * @param $age
 *  (int) the age to check.
 * @param $timestamp
 *  (int) the time at which to check the age. Defaults to current time.
 * @return @boolean
 */
function dosomething_login_person_is_over_age($birthday, $age = 13, $timestamp = NULL) {
  $timestamp = is_null($timestamp) ? REQUEST_TIME : $timestamp;
  return $birthday < strtotime(sprintf("-%d year", $age), $timestamp);
}

/**
 * Mark a user as being over 13.
 *  They don't need parental permission at this point.
 */
function dosomething_login_mark_user_account_over_13($uid) {
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    $birthday = field_get_items('profile2', $profile, 'field_user_birthday');
    $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
    profile2_save($profile);
  }
}

/**
 * Get a user's full name from their main profile.
 */
function dosomething_login_get_user_full_name($account) {
  $full_name = '';
  $names = array();
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    foreach (array('field_user_first_name', 'field_user_last_name') as $field) {
      $stored_names = field_get_items('profile2', $profile, $field);
      if (isset($stored_names[0]['safe_value'])) {
        $names[] = $stored_names[0]['safe_value'];
      }
    }
    $full_name = implode(' ', $names);
  }
  return $full_name;
}

/**
 * Retrieve a user's cell phone number from their profile.
 */
function dosomething_login_get_cell_phone_number($account, $profile = NULL) {
  $number = FALSE;
  if (is_null($profile)) {
    $profile = profile2_load_by_user($account, 'main');
  }
  if (is_object($profile)) {
    $numbers = field_get_items('profile2', $profile, 'field_user_mobile');
    $number = isset($numbers[0]['value']) ? ltrim(preg_replace('/[^0-9]/', '', $numbers[0]['value']), 1) : FALSE;
  }
  return $number;
}

/**
 * Determine if user has parentel consent to use this site.
 *  If they are over 13, then they don't need it.
 */
function dosomething_login_user_has_parental_consent($uid) {
  $account = user_load($uid);
  if (dosomething_login_drupal_user_is_over_age($uid, 13)) {
    return TRUE;
  }
  // Don't lock out admins
  if (in_array('administrator', $account->roles)) {
    return TRUE;
  }
  if (!in_array('pending member', $account->roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Set a message indicating that s user cannot perform an action
 *  until the have been given consent by a parent.
 */
function dosomething_login_set_parental_consent_message() {
  // TODO: Some link to ask for parental consent
  drupal_set_message(t('Before you can perform this action, you must have parental consent. You can send a request to your parent or legal guardian <a href="@link"> here</a>.', array('@link' => '/dosomething/under-13/parent-consent-email')), 'warning');
}

/**
 * Determine access to parental consent email request form.
 */
function dosomething_parent_consent_email_access() {
  global $user;
  return !dosomething_login_user_has_parental_consent($user->uid);
}

/**
 * Form for a person under 13 to request their parent's permission
 *  to use the site.
 */
function dosomething_login_parent_permission_email_form($form, &$form_state, $uid = NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $form['parent_email'] = array(
    '#title' => t('Parent or Guardian Email Address'),
    '#type' => 'textfield',
    '#size' => 20,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  $form['submit_email'] = array(
    '#type' => 'submit',
    '#value' => t('Send Email'),
  );
  return $form;
}

/**
 * Validation callback for parent permission email form.
 */
function dosomething_login_parent_permission_email_form_validate($form, &$form_state) {
  $email = trim($form_state['values']['parent_email']);
  $account = user_load($form_state['values']['uid']);
  if (!valid_email_address($email)) {
    form_set_error('parent_email', t('you must provide a valid email address'));
  }
  else if ($email == $account->mail) {
   form_set_error('parent_email', t("Your parent/guardian email cannot be the same as your own email.  If you do not have your own email address but use your parent's email address instead, please email help@dosomething.org and we'll get it sorted out."));
   }
}

/**
 * Submission callback for parent permission email form.
 */
function dosomething_login_parent_permission_email_form_submit($form, &$form_state) {
  global $language;
  $email = trim($form_state['values']['parent_email']);
  $account = user_load($form_state['values']['uid']);
  $params = array('account' => $account);

  drupal_mail('dosomething_login', 'dosomething-parent-email', $email, $language, $params);
  // TODO: This message may not be necessary.
  drupal_set_message(t('An email has been sent to %email.', array('%email' => $email)));
}

/**
 * Generates a unique URL for a parent to give permission to their
 *  under 13 year old child.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return
 *   A unique URL that provides a one-time link for the user.
 */
function dosomething_login_one_time_parent_permission_link($account) {
  $timestamp = REQUEST_TIME;
  return url("dosomething/under-13/permission/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->created), array('absolute' => TRUE));
}

/**
 * Page callback for parental consent link.
 *  This is used for users under 13 who need consent to be members.
 */
function dosomething_login_parent_permission_page($form, &$form_state, $uid, $timestamp, $hash, $action = NULL) {
  global $language;
  // This expires after 6 months.
  $timeout = strtotime('-6 months');
  $current = REQUEST_TIME;
  // Some redundant checks for extra security ?
  $users = user_load_multiple(array($uid), array('status' => '1'));
  if ($timestamp <= $current && $account = reset($users)) {
    // No time out for first time login.
    if ($timestamp < $timeout) {
      drupal_set_message(t('You have tried a parental consent link that has expired.'));
      drupal_goto();
    }
    elseif ($account->uid && $timestamp <= $current && $hash == user_pass_rehash($account->pass, $timestamp, $account->created)) {
      if (dosomething_login_user_has_parental_consent($uid)) {
        drupal_set_message(t('%user_name is either over 13 or has already received parental consent.', array('%user_name' => $account->name)));
        drupal_goto();
      }
      if ($action == 'submit') {
        if (isset($form_state['input']['op'])) {
          // Determine whether the parent is granting or denying membership.
          switch ($form_state['input']['op']) {
            case t('Yes'):
              watchdog('dosomething', 'User %name was given parental permission to be a member.', array('%name' => $account->name));
              drupal_set_message(t('You have just allowed %user_name to be a member of this site. An email has been sent.', array('%user_name' => $account->name)));
              drupal_mail('dosomething_login', 'dosomething-parent-permission-granted-email', $account->mail, $language, array('account' => $account));
              dosomething_login_grant_user_parental_permission($account);
              break;

            case t('No'):
              watchdog('dosomething', 'User %name was NOT given parental permission to be a member.', array('%name' => $account->name));
              drupal_set_message(t('%user_name has been denied parental consent to be a member of this site. An email has been sent.', array('%user_name' => $account->name)));
              drupal_mail('dosomething_login', 'dosomething-parent-permission-denied-email', $account->mail, $language, array('account' => $account));
              dosomething_login_deny_user_parental_permission($account);
              break;

            default:
              drupal_set_message(t('You provided an invalid response.'), 'warning');
              drupal_goto("dosomething/under-13/permission/$uid/$timestamp/$hash");
              break;
          }
        }
        else {
          drupal_set_message(t('You provided an invalid response.'), 'warning');
        }
        drupal_goto();
      }
      // TODO: else if user already has permission by virtue of being 13 or older.
      else {
        $form['message'] = array('#markup' => t('<p>Will you allow %user_name to be a member of this site?</p>', array('%user_name' => $account->name)));
        $form['actions'] = array('#type' => 'actions');
        $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Yes'));
        $form['actions']['cancel'] = array('#type' => 'submit', '#value' => t('No'));
        $form['#action'] = url("dosomething/under-13/permission/$uid/$timestamp/$hash/submit");
        return $form;
      }
    }
  }
  else {
    drupal_set_message(t('You have tried to use a parental permission link that has either been used or is not valid.'));
    drupal_goto('');
  }
}

/**
 * Give a user under 13 parental permission.
 */
function dosomething_login_grant_user_parental_permission($account) {
  $member = user_role_load_by_name('member');
  $pending_member = user_role_load_by_name('pending member');
  // Only set the roles if they are a pending member.
  if (isset($account->roles[$pending_member->rid])) {
    $account->roles[$member->rid] = $member->name;
    unset($account->roles[$pending_member->rid]);
    $account = user_save($account);
  }
}

/**
 * Give a user under 13 parental permission.
 */
function dosomething_login_deny_user_parental_permission($account) {
  // TODO: It is undecided whether sanything should be done
  // for denied users, so we are doing nothing for the time
  // being.
}

/**
 * Update users who have become 13 or older.
 */
function dosomething_login_update_accounts_under_13($limit = 10) {
  $profiles = dosomething_login_get_accounts_under_13($limit);
  if (isset($profiles['profile2']) && count($profiles['profile2'])) {
    foreach ($profiles['profile2'] as $profile_data) {
      $profile = profile2_load($profile_data->pid);
      $birthday = field_get_items('profile2', $profile, 'field_user_birthday');
      if (isset($birthday[0]['value'])) {
        if (dosomething_login_person_is_over_age(strtotime($birthday[0]['value']), 13)) {
          $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
          profile2_save($profile);
          $account = user_load($profile->uid);
          dosomething_login_grant_user_parental_permission($account);
        }
      }
    }
  }
}

/**
 * Get a list of accounts who are under 13
 */
function dosomething_login_get_accounts_under_13($limit = 10) {
  //Grab users in order of their birthdays
  // depending on whether they're marked under 13.
  $query = new EntityFieldQuery;

  try {
    $result = $query
      ->entityCondition('entity_type', 'profile2')
      ->propertyCondition('type', 'main')
      ->fieldCondition('field_user_is_over13', 'value', 0, '=')
      ->fieldOrderBy('field_user_birthday', 'value', 'ASC')
      ->range(0, $limit)
      ->execute();
  } catch (Exception $e) {
    return 0;
  }
  return $result;
}

/**
 * Delete old accounts of users who are under 13 and
 *  haven't received permission from there parents.
 */
function dosomething_login_clear_old_accounts($limit = 10) {
  $accounts = dosomething_login_get_old_accounts($limit);
  if (count($accounts)) {
    foreach ($accounts as $uid) {
      if ($uid != 1) {
        user_delete($uid);
      }
    }
  }
}

/**
 * Get the count of unassigned notifications.
 */
function dosomething_login_get_old_accounts($limit = 10) {
  $records = array();
  $role = user_role_load_by_name('pending member');
  try {
    $query = db_select('users', 'u');
    $query->innerJoin('users_roles', 'r', 'r.uid = u.uid');
    $result = $query->fields('u', array('uid'))
      ->condition('r.rid', $role->rid, '=')
      ->condition('u.status', 1, '=')
      ->condition('u.created', strtotime('-6 months'), '<')
      ->orderBy('u.created', 'ASC')
      ->range(0, $limit)
      ->execute();

  } catch (Exception $e) {
    return $records;
  }
  while($record = $result->fetchAssoc()) {
    $records[] = $record;
  }
  return $records;
}

/**
 * Implements hook_fboauth_actions().
 */
function dosomething_login_fboauth_actions() {
  $actions['prereg'] = array(
    'title' => t('Pre Register'),
    'callback' => 'dosomething_login_action_prereg',
    'permissions' => array(
      'email',
      'user_birthday',
    ),
  );
  $actions['ds_connect'] = array(
    'title' => t('Connect through user profile when already logged in.'),
    'callback' => 'dosomething_login_action_ds_connect',
    'permissions' => array(
      'email',
      'user_birthday',
    ),
    'theme' => 'dosomething_login_action_ds_connect',
  );
  $actions['ds_deauth'] = array(
    'title' => t('Deauthorize'),
    'callback' => 'dosomething_login_facebook_deauth',
    'theme callback' => 'dosomething_login_facebook_deauth_link',
  );
  return $actions;
}


/**
 * Facebook OAuth callback for initiating a Facebook connection.
 * This is exactly the same as the default FB Oauth module connection except
 * it creates a new user image upon connection.
 */
function dosomething_login_action_ds_connect($app_id, $access_token) {
  global $user;

  $fbuser = fboauth_graph_query('me', $access_token);
  $uid = fboauth_uid_load($fbuser->id);

  if (!$user->uid && $uid && ($account = user_load($uid))) {
    fboauth_login_user($account);
  }
  elseif (!empty($fbuser->email) && ($account = array_shift(user_load_multiple(array(), array('mail' => $fbuser->email))))) {
    fboauth_save($account->uid, $fbuser->id);

    if (fboauth_login_user($account)) {
      // This is the only difference between this action and the default.
      dosomething_login_save_profile_pic($user->uid, $fbuser->id);
      drupal_set_message(t('You\'ve connected your account with Facebook.'));
    }
  }
  else {
    if ($user->uid) {
      fboauth_save($user->uid, $fbuser->id);
      // This is the only difference between this action and the default.
      dosomething_login_save_profile_pic($user->uid, $fbuser->id);
      drupal_set_message(t('Nice! You\'ve connected your account with Facebook.'));
    }
    elseif (variable_get('user_register', 1)) {
      $account = fboauth_create_user($fbuser);
      $account = user_load($account->uid);

      if ($account->status == 0) {
        _user_mail_notify('register_pending_approval', $account);
        drupal_set_message(t('An account has been created for you on @sitename but an administrator needs to approve your account. In the meantime, a welcome message with further instructions has been sent to your e-mail address.', array('@sitename' => variable_get('site_name', ''))));
      }
      elseif (fboauth_login_user($account)) {
        drupal_set_message(t('Welcome to @sitename. Basic information has been imported from Facebook into your account. You may want to <a href="!edit">edit your account</a> to confirm the details and set a password.', array('@sitename' => variable_get('site_name', ''), '!edit' => url('user/' . $account->uid . '/edit'))));
      }
    }
    else {
      drupal_set_message('Your Facebook e-mail address does not match any existing accounts. If you have an account, you must first log in before you can connect your account to Facebook. Creation of new accounts on this site is disabled.');
    }
  }
}

/**
 * Implements hook_user_login().
 */
function dosomething_login_user_login(&$edit, $account) {
  if ($account->uid) {
    // Check if they have connected through Facebook.
    if ($fbid = db_query('SELECT fbid from {fboauth_users} WHERE uid = :uid', array(':uid' => $account->uid))->fetchField()) {
      dosomething_login_save_profile_pic($account->uid, $fbid);
    }
  }
}

/**
 * Saves a user pic from Facebook to the user profile.
 *
 * @param integer $uid
 *   Drupal user ID.
 * @param integer $fbid
 *   ID for the user in Facebook.
 */
function dosomething_login_save_profile_pic($uid, $fbid) {
  $picture_directory = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
  if (file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)) {
    $picture_result = drupal_http_request('https://graph.facebook.com/' . $fbid . '/picture?type=large');
    $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $uid . '.jpg');
    $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);

    // Check to make sure the picture isn't too large for the site settings.
    $max_dimensions = variable_get('user_picture_dimensions', '85x85');
    file_validate_image_resolution($picture_file, $max_dimensions);

    // Update the user record.
    $picture_file->uid = (isset($account->uid) ? $account->uid : 0);
    $picture_file = file_save($picture_file);
    file_usage_add($picture_file, 'user', 'user', $uid);
    db_update('users')
      ->fields(array(
      'picture' => $picture_file->fid,
      ))
      ->condition('uid', $uid)
      ->execute();
    // Remove old image style since new file has same name.
    $pic_uri = image_style_path($style_name = 'action_results_thumbnail', $picture_file->uri);
    file_unmanaged_delete($pic_uri);
  }
}

/**
 * Facebook OAuth callback for deauthorizing the site from Facebook.
 */
function dosomething_login_facebook_deauth($app_id, $access_token) {
  global $user;
  // If there is a user profile picture, remove it.
  // These are currently only added when a user connects through FB.
  if ($user->picture) {
    $user_pic = file_load($user->picture);
    if (is_object($user_pic)) {
      file_delete($user_pic, TRUE);
    }
  }

  // Deauthorize our application from Facebook.
  $result = fboauth_method_invoke('auth.revokeAuthorization', $access_token);

  // If successful, also remove the uid-fbid pairing.
  if (!is_array($result) && $result) {
    // Remove friends from user profile.
    dosomething_login_facebook_friend_process($user->uid);
    // Remove users from fboauth.
    fboauth_save($user->uid, NULL);
    drupal_set_message(t('Your DoSomething account has been disconnected from Facebook.'));
  }
  else {
    drupal_set_message(t('There was an error disconnecting from Facebook. The server returned %message.', array('%message' => $result->error_msg)), 'error');
    watchdog('There was an error disconnecting the user %username from Facebook. The server returned %message.', array('%message' => $result->error_msg, '%username' => $user->name));
  }
}

/**
 * Facebook OAuth action callback; Take user to registration page if don't
 * already have an account.
 */
function dosomething_login_action_prereg($app_id, $access_token) {
  global $user;

  $fbuser = fboauth_graph_query('me', $access_token);
  $uid = fboauth_uid_load($fbuser->id);

  // If the user has logged in before, load their account and login.
  if (!$user->uid && $uid && ($account = user_load($uid))) {
    if ($fb_friends = fboauth_graph_query('me/friends', $access_token)) {
      dosomething_login_facebook_friend_process($uid, $fb_friends->data);
    }
    fboauth_login_user($account);
    drupal_set_message("Thanks for signing in.");
  }
  // If the Facebook e-mail address matches an existing account, bind them
  // together and log in as that account.
  elseif (!empty($fbuser->email) && ($account = array_shift(user_load_multiple(array(), array('mail' => $fbuser->email))))) {
    fboauth_save($account->uid, $fbuser->id);

    // Logins will be denied if the user's account is blocked.
    if (fboauth_login_user($account)) {
      if ($fb_friends = fboauth_graph_query('me/friends', $access_token)) {
        dosomething_login_facebook_friend_process($account->uid, $fb_friends->data);
      }
      drupal_set_message(t("You've connected your account with Facebook."));
    }
  }
  else {
    // If the user is already logged in, associate the two accounts.
    if ($user->uid) {
      fboauth_save($user->uid, $fbuser->id);
      if ($fb_friends = fboauth_graph_query('me/friends', $access_token)) {
        dosomething_login_facebook_friend_process($user->uid, $fb_friends->data);
      }
      drupal_set_message(t("You've connected your account with Facebook."));
    }
    // Redirect to our user_reg page.
    else {
      // The fboauth module requires a redirect.
      $_SESSION['fbuser'] = $fbuser;
      return 'user/registration/fb';
    }
  }
}

/**
 * Registration page through Facebook. Prepopulates info and connects user
 * to Facebook account.
 */
function dosomething_login_register_facebook($form, &$form_state) {
  $form = drupal_retrieve_form('dosomething_login_register_popup_form', $form_state);
  $form['#action'] = '/user/registration/fb/?destination=front';
  unset($form['connect']);
  unset($form['or']);
  if (isset($_SESSION['fbuser'])) {
    $fbuser = $_SESSION['fbuser'];
    $form['email']['#value'] = $fbuser->email;
    $form['name']['first_name']['#value'] = $fbuser->first_name;
    $form['name']['last_name']['#value'] = $fbuser->last_name;
    $birthday = $fbuser->birthday;
    $date = explode('/', $birthday);
    $form['birthday']['month']['#value'] = $date[0];
    $form['birthday']['day']['#value'] = $date[1];
    $form['birthday']['year']['#value'] = $date[2];
    drupal_set_message('Please fill out the following information to finish registration using your Facebook account.');
  }
  else {
    drupal_set_message("There was a problem receiving your information from Facebook, please register below to create an account.");
  }
  return $form;
}

/**
 * Save Facebook friends if they have profiles in the system.
 * Deletes entries for user if facebook_friends array is empty.
 */
function dosomething_login_facebook_friend_process($uid, $facebook_friends = array()) {
  // Remove old entries.
  db_delete('facebook_friends')
    ->condition('uid', $uid)
    ->execute();

  if ($facebook_friends) {
    // Get currently users currently registered through Facebook.
    $local_results = db_select('fboauth_users')
      ->fields('fboauth_users', array('fbid', 'uid'))
      ->execute();
    while ($local_result = $local_results->fetchObject()) {
      $fb_user[$local_result->fbid] = $local_result->uid;
    }
    $query = db_insert('facebook_friends')->fields(array('uid', 'fbid'));
    foreach ($facebook_friends as $friend) {
      // If user's friend has registered, save.
      if (isset($fb_user[$friend->id])) {
        $query->values(array('uid' => $uid, 'fbid' => $friend->id));
      }
    }
    $query->execute();
  }
  // Otherwise remove from friends as well.
  else {
    $fbid = fboauth_fbid_load($uid);
    if ($fbid) {
      // Remove old entries.
      db_delete('facebook_friends')
        ->condition('fbid', $fbid)
        ->execute();
    }
  }
}

/**
 * Log registration data when a user begins the registration process.
 */
function dosomething_login_registration_data_page() {
  if (isset($_POST['ds_api_key']) && $_POST['ds_api_key'] == variable_get('dosomething_login_api_key', '8hSyfEZIeBrlcgrdM6QbS63F6NjUvgqQ')) {
    $data = new stdClass;
    $required_fields = array('first_name', 'last_name');
    $query = db_delete('ds_registration_data');

    if (!isset($_POST['cell_or_email'])) {
      exit;
    }
    foreach ($required_fields as $field) {
      if (!isset($_POST[$field]) || !$_POST[$field]) {
        exit;
      }
      $data->{$field} = $_POST[$field];
    }

    // Ensure there is no current user with this cell or email.
    if (valid_email_address($_POST['cell_or_email'])) {
      if (user_load_by_mail($_POST['cell_or_email'])) {
        exit;
      }
      $data->email = $_POST['cell_or_email'];
      $query->condition('email', $data->email);
    }
    else if ($number = dosomething_general_valid_cell($_POST['cell_or_email'])) {
      if (db_select('field_data_field_user_mobile')->fields('field_data_field_user_mobile', array('entity_id'))->condition('field_user_mobile_value', db_like($number), 'LIKE')->range(0, 1)->execute()->fetchField()) {
        exit;
      }
      $data->cell = $number;
      $query->condition('cell', $number);
    }
    // Clear data if this is a duplicate.
    $num_deleted = $query->execute();

    $success = drupal_write_record('ds_registration_data', $data);
  }
  exit;
}

/**
 * Return a link to initiate a Facebook Connect login or association.
 *
 * @param $link
 *   An array of properties to be used to generate a login link. Note that all
 *   provided properties are required for the Facebook login to succeed and
 *   must not be changed. If $link is FALSE, Facebook OAuth is not yet
 *   configured.
 * @see fboauth_link_properties()
 */
function theme_dosomething_login_action_ds_connect($variables) {
  $action = $variables['action'];
  $link = $variables['properties'];
  $url = url($link['href'], array('query' => $link['query']));
  $link['attributes']['class'] = isset($link['attributes']['class']) ? $link['attributes']['class'] : 'facebook-action-connect';
  $attributes = isset($link['attributes']) ? drupal_attributes($link['attributes']) : '';
  $title = isset($link['title']) ? check_plain($link['title']) : '';
  return '<a ' . $attributes . ' href="' . $url . '"><img src="http://static.ak.fbcdn.net/images/fbconnect/login-buttons/connect_light_medium_short.gif" alt="' . $title . '" /></a>';
}

/**
 * Display the Facebook Connect options on a user's profile form.
 */
function theme_dosomething_login_fboauth_user_form_connect($variables) {
  global $user;
  $uid = $variables['uid'];
  $fbid = $variables['fbid'];
  $output = '';
  // Don't show this for admins. It won't deauth because it requires the
  // user themselves to be logged into Faceboook.
  if ($user->uid == $uid) {
    if ($fbid) {
      $output = t('Your account is connected with Facebook. (<a href="!url">More info</a>)', array('!url' => url('user/' . $uid . '/fboauth')));
    }
    else {
      $output = fboauth_action_display('ds_connect');
      $output .= '<div class="description">' . t('Connect with Facebook to login with your Facebook account instead of a password.') . '</div>';
    }
  }
  else {
    $output .= '<div class="description">' . t('Admins cannot de-authorize Facebook users.') . '</div>';
  }
  return $output;
}

/**
 * Provided themed information about the user's current Facebook connection.
 */
function theme_dosomething_login_facebook_user_info($variables) {
  $account = $variables['account'];

  $output = '';
  $output .= '<p>' . t('Your account is current connected with Facebook. Currently this site has access to the following information from Facebook.') . '</p>';
  $list = array('items' => array('basic' => 'Your basic information (Name, Gender, Picture, etc.)') + fboauth_user_connect_permissions() + array('birthday' => t('Your birthday')));
  $output .= theme('item_list', $list);
  $output .= '<p>' . t('You may disconnect your account from Facebook at any time by using the Deauthorize option below. If deauthorized, you will no longer be able to use Facebook to log into this account and must use a normal password. <strong>If you have not yet set a password, you will not be able to log onto this site</strong>.') . '</p>';
  $output .= fboauth_action_display('ds_deauth');
  return $output;
}

/**
 * Page callback for access denied menu callback.
 */
function dosomething_login_access_denied_page() {
  if (user_is_anonymous()) {
    return drupal_get_form('dosomething_login_login_popup_form');
  }
  else {
    return t('You are not authorized to access this page.');
  }
}

function dosomething_login_ajax() {
  list($form, $form_state, $form_id, $form_build_id) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  if ($errors = form_get_errors()) {
    $return = array(
      'success' => FALSE,
      'missing' => $errors,
    );
  }
  else {
    $return = array(
      'success' => true,
    );
  }
  drupal_get_messages('error');
  drupal_json_output($return);
}

/**
 * Implements hook_fboauth_user_presave().
 */
function dosomething_login_fboauth_user_presave(&$edit, $fbuser) {
  $birthdate = strtotime($fbuser->birthday);
  // Determine the user's role by their age.
  $role_name = 'member';
  if (dosomething_login_person_is_over_age($birthdate, 26)) {
    $role_name = 'old person';
  }
  else if (!dosomething_login_person_is_over_age($birthdate, 13)) {
    $role_name = 'pending member';
  }
  $role = user_role_load_by_name($role_name);
  $edit['roles'][$role->rid] = $role->name;
  $edit['name'] = dosomething_login_unique_name($fbuser->name);
}

function dosomething_login_user_taxonomy_terms() {
  return array('fb_connected', 'fb_created_account');
}

function dosomething_login_user_taxonomy_login($account) {
  $return = array();

  if (fboauth_fbid_load($account->uid)) {
    $return['add'] = 'fb_connected';
  }
  else {
    $return['remove'] = 'fb_connected';
  }
  return $return;
}

function dosomething_login_user_taxonomy_user_taxonomy_insert($account) {
  if ($account->fboauth) {
    return 'fb_created_account';
  }
}

/**
 *  Implements hook_fboauth_user_save()
 */
function dosomething_login_fboauth_user_save($account, $fbuser) {
  // Adds the page that the user registered on.
  if (isset($_GET['destination'])) {
    $referer = $_GET['destination'];
    if (preg_match('#node/[0-9]+#', $referer)) {
      // Get the alias if we see the real path.
      $referer = drupal_get_path_alias($referer);
    }

    $profile = profile2_load_by_user($account, 'main');
    $profile->field_registration_page[LANGUAGE_NONE][0]['value'] = $referer;
    $profile->save();
  }
}

