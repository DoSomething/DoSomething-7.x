<?php

/**
 * @file
 * Custom functionality relating to user registration and login.
 */

/**
 * Implements hook_block_info().
 */
function dosomething_login_block_info() {
  $blocks['become_member'] = array(
    'info' => t('Become a Member'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_login_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'become_member':
      global $user;
      if (!$user->uid) {
        $block['subject'] = t('Become a Member');
        $block['content'] = drupal_get_form('dosomething_login_register_block');
      }
      else {
        $block['subject'] = '';
        $block['content'] = dosomething_login_member_block();
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_mail().
 */
function dosomething_login_mail($key, &$message, $params) {
  switch ($key) {
    case 'dosomething-parent-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $message['subject'] = t('Permissions for %name', array('%name' => $params['full_name']));
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'dosomething-parent-permission-granted-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $message['subject'] = t('Permission Granted');
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_permission_granted_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'dosomething-parent-permission-denied-email':
      $params['full_name'] = dosomething_login_get_user_full_name($params['account']);
      $message['subject'] = t('Permission Denied');
      $message['body'][] = drupal_html_to_text(theme('dosomething_login_parent_permission_denied_email', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;


  }
}

/**
 * The form for the 'Become a Member' block.
 */
function dosomething_login_register_block($form) {
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'dosomething_login') . '/js/dosomething-login-member-lightbox.js',
    ),
    'library' => array(array('system', 'ui.dialog')),
  );
  $form['#action'] = url($_GET['q'], array('query' => drupal_get_destination()));
  $form['connect']['#markup'] = '<div class="connect-thru-facebook">' . l('Connect thru Facebook', 'fbconnect/register/create') . '</div>';
  $form['or']['#markup'] = '<div class="separator split">' . t('or') . '</div>';
  $form['name'] = array(
    'first_name' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('First Name'),
      ),
      '#size' => 9,
    ),
    'last_name' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('Last Name'),
      ),
      '#size' => 9,
    ),
  );
  $form['cell_or_email'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Cell Number or E-mail'),
    ),
    '#size' => 20,
  );
  $form['birthday'] = array(
    'over_13' => array('#markup' => '<div class="age-question">' . t('Over 13?') . '</div>'),
    'month' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('mm'),
      ),
      '#size' => 2,
      '#maxlength' => 2,
    ),
    'day' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('dd'),
      ),
      '#size' => 2,
      '#maxlength' => 2,
    ),
    'year' => array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('yyyy'),
      ),
      '#size' => 4,
      '#maxlength' => 4,
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('submit')),
  );
  $form['why'] = array(
    '#theme' => 'link',
    '#path' => '',
    '#text' => t('Why become a member?'),
    '#options' => array(
      'attributes' => array('class' => array('why')),
      'html' => FALSE,
    ),
    '#prefix' => '<hr class="top"/><h3 class="why-member">',
    '#suffix' => '</h3><hr class="bottom"/>',
  );
  $form['lightbox'] = array(
    '#markup' => theme('dosomething_login_member_lightbox'),
    '#prefix' => '<div id="member-dialog">',
    '#suffix' => '</div>',
  );
  $form['already']['#markup'] = '<h3 class="already-member">' . t('Already a member?') . '</h3>';
  $form['logins'] = array(
    'facebook_login' => array('#markup' => l(
      '<span class="fb-icon">log in</span>',
      'fbconnect/login',
      array(
        'class' => 'login facebook-login ds-button',
        'html' => TRUE,
      )
    )
    ),
    'login' => array(
      '#theme' => 'link',
      '#path' => 'user/login',
      '#text' => t('log in'),
      '#options' => array(
        'attributes' => array('class' => array('login ds-login ds-button')),
        'html' => FALSE,
      ),
    ),
  );
  return $form;
}

/**
 * Validate the user registration form.
 */
function dosomething_login_register_block_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!$values['first_name']) {
    form_set_error('first_name', t('Please provide your first name.'));
  }
  if (!$values['last_name']) {
    form_set_error('last_name', t('Please provide your last name.'));
  }
  // Validate cell number or e-mail address
  if (valid_email_address($values['cell_or_email'])) {
    if (db_select('users')->fields('users', array('uid'))->condition('mail', db_like($values['cell_or_email']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('cell_or_email', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $values['cell_or_email'], '@password' => url('user/password'))));
    }
    $form_state['values']['mail'] = $values['cell_or_email'];
  }
  else if (($number = preg_replace('[^0-9]', '', $values['cell_or_email'])) && strlen($number) >= 10) {
    if (db_select('field_data_field_user_mobile')->fields('field_data_field_user_mobile', array('entity_id'))->condition('field_user_mobile_value', db_like($number), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('cell_or_email', t('The phone number %phone is already registered. <a href="@password">Have you forgotten your password?</a>', array('%phone' => $values['cell_or_email'], '@password' => url('user/password'))));
    }
    $form_state['values']['phone'] = $number;
    $form_state['values']['mail'] = '';
  }
  else {
    form_set_error('cell_or_email', t('Please provide a valid email address or phone number'));
  }
  if (!is_numeric($values['month']) || $values['month'] > 12) {
    form_set_error('month', t('Please provide a valid numeric month for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['day']) || $values['month'] > 31) {
    form_set_error('day', t('Please provide a valid day for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['year']) || strlen($values['year']) != 4) {
    form_set_error('year', t('Please provide the 4-digit year you were born.'));
    $invalid_birthday = TRUE;
  }
  if (!isset($invalid_birthday)) {
    $birthday = mktime(0, 0, 0, $values['month'], $values['day'], $values['year']);
    $form_state['values']['birthdate'] = $birthday;
    if ((time() - $birthday) < 13*365*24*60*60) {
      form_set_error('year', t('Members must be at least 13 years old.'));
    }
  }
}

/**
 * Submit the user registration form.
 */
function dosomething_login_register_block_submit($form, &$form_state) {
  $values = $form_state['values'];
  $birthdate = $values['birthdate'];
  $name = preg_replace('/[^A-Za-z.]+/', '', $values['first_name']) . ' ' . preg_replace('/[^A-Za-z.]+/', '', $values['last_name']);
  $form_state['values']['name'] = dosomething_login_unique_name($name);
  $form_state['values']['pass'] = user_password();
  $form_state['values']['init'] = $name;
  // Remove unneeded values.
  form_state_values_clean($form_state);

  $account = drupal_anonymous_user();
  $edit = array_intersect_key((array) $account, $form_state['values']);
  entity_form_submit_build_entity('user', $account, $form, $form_state);
  // Handle 'old people' (26+yo)
  if ((time() - $birthdate) > 26*365*24*60*60) {
    $role_name = 'old person';
    drupal_set_message(t('Thank you for registering. Unfortunately, we do not allow accounts for people over 26.'));
    $account->status = 0;
  }
  else {
    $role_name = 'member';
    $account->status = 1;
  }
  $role = user_role_load_by_name($role_name);
  $account->roles[$role->rid] = $role->name;
  $account = user_save($account, $edit);
  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }
  // Save profile data.
  $profile = new stdClass();
  $profile->type = 'main';
  $profile->uid = $account->uid;
  drupal_write_record('profile', $profile);
  $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['first_name'];
  $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['last_name'];
  $birthday = new DateObject($values['birthdate']);
  $time = $birthday->format(DATE_FORMAT_DATETIME);
  $profile->field_user_birthday[LANGUAGE_NONE][0]['value'] = $time;
  $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
  if (isset($values['phone'])) {
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $values['phone'];
  }
  field_attach_insert('profile2', $profile);
  $form_state['uid'] = $account->uid;
  if (isset($account->mail) && $account->status) {
    _user_mail_notify('register_no_approval_required', $account);
    drupal_set_message(t('Please check your email to verify your account.'));
  }
  else {
    // TOOD: verify cell number via SMS.
  }
}

/**
 * Generate a unique username.
 */
function dosomething_login_unique_name($name, $i = '') {
  if (db_select('users')->fields('users', array('uid'))->condition('name', db_like($name . $i), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    if ($i === '') {
      $i = 0;
    }
    else {
      $i++;
    }
    return dosomething_login_unique_name($name, $i);
  }
  else {
    return $name . $i;
  }
}


/**
 * Implements hook_menu_alter().
 */
function dosomething_login_menu_alter(&$items) {
  // Remove the default user registration page in favor of our custom registration.
  unset($items['user/register']);
}

/**
 * Implements hook_menu().
 */
function dosomething_login_menu() {
  $items = array();
  $items['mobile-signup'] = array(
    'title' => 'Mobile Signup',
    'description' => 'Sign up URL to which mobile commons submits sign up requests to us.',
    'page callback' => 'dosomething_login_mobile_signup',
    'access callback' => 'dosomething_login_mobile_signup_access',
  );
  $items['dosomething/under-13/permission/%/%/%'] = array(
    'title' => 'Parental Permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_login_parent_permission_page', 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function dosomething_login_mobile_signup_access() {
  $valid = sms_mobile_commons_incoming_check();

  //TODO: REMOVE ME BEFORE PRODUCTION!!!
  //For testing allow ip of zivtech office and local dev machines
  $ip = ip_address();
  if ($ip == '192.168.56.1' || $ip == '173.161.182.250') {
    $valid = TRUE;
  }
  if (!$valid) {
    //We've got someone trying to create users on the mobile page. That's bad.
    watchdog('dosomething_login',
      'Someone is trying to mobile signup from ip address: ' . $ip
      . " This is suspicious.", $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
  }
  return $valid;
}

function dosomething_login_mobile_signup() {
  //TODO REMOVE ME. I AM FOR TESTING ONLY.
  $ip = ip_address();
  watchdog('dosomething_login', $ip . " " . $_SERVER['REQUEST_URI'], $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);

  return 'THIS IS A TEST';
}

/**
 * Member dashboard block for logged in users.
 */
function dosomething_login_member_block() {
  global $user;
  drupal_add_js(drupal_get_path('module', 'dosomething_login') . '/js/show-member-items.js');
  $output = '<div class="dosomething-login-user-name">' . '<h2>' . check_plain($user->name) . '</h2><span class="user-role">( ' . dosomething_login_user_role() . ' )</span></div>';
  $output .= '<div class="dosomething-login-profile">' . dosomething_login_profile_completion() . '</div>';
  $output .= dosomething_login_my_somethings();
  $output .= dosomething_login_notifications();
  //$output .= l('Go to profile >>', 'user', array('attributes' => array('class' => array('dosomething-login-goto-profile'))));
  return $output;
}

function dosomething_login_user_role($account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  $roles = $account->roles;
  $member = user_role_load_by_name('member');
  if (isset($roles[$member->rid])) {
    return t('member');
  }
  $active_member = user_role_load_by_name('active member');
  if (isset($roles[$active_member->rid])) {
    return 'active';
  }
  return t('inactive');
}

function dosomething_login_profile_completion() {
  global $user;
  $ratio = dosomething_login_profile_percentage();
  $output = '<div class="profile-header">' . t('My profile: %percent', array('%percent' => number_format($ratio, 0) . '%')) .  l('Complete >>', 'user/' . $user->uid . '/edit/main') . '</div>';
  $output .= '<div class="dosomething-login-percentage"><div class="ratio" data-ratio="' . $ratio . '"><div class="inner" style="width: ' . $ratio . '%">' . $ratio . '</div></div></div>';
  return $output;
}

function dosomething_login_my_somethings() {
  $output = '<h2 class="my-somethings"><div class="inner">' . t('My Somethings') . '</div></h2>';
  $items[] = array('data' => t('My Current Somethings'), 'children' => dosomething_login_my_current_somethings());
  $items[] = array('data' => t('My Opportunities'), 'children' => dosomething_login_my_opportunities());
  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => 'my-somethings')));
  return $output;
}

function dosomething_login_notifications() {
  $output = '<h2 class="notifications"><div class="inner">' . t('Notifications') . '</div></h2>';
  // TODO: replace dummy content
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => 'notifications')));
  return $output;
}

function dosomething_login_profile_percentage() {
  global $user;
  $profile = profile2_load_by_user($user);
  $total = 0;
  $complete = 0;
  if (isset($profile['main'])) {
    foreach ($profile['main'] as $field_name => $values) {
      if (substr($field_name, 0, 5) == 'field') {
        $total++;
        if (count($values)) {
          $complete++;
        }
      }
    }
  }
  if ($total) {
    return (($complete / $total) * 100);
  }
  return 0;
}

function dosomething_login_my_current_somethings() {
  // TODO: replace dummy content
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  return $items;
}

function dosomething_login_my_opportunities() {
  // TODO: replace dummy content
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  $items[] = 'Fox Lane book drive | ' . l('Report Back', '<front>');
  return $items;
}

/**
 * Add necessary registration items to fbconnect registration form.
 */
function dosomething_login_form_fbconnect_register_page_alter(&$form, $form_state) {
  if (isset($form['account']['mail']['#value'])) {
    $data = fbconnect_get_user_info(array('first_name', 'last_name'));
    $form['dosomething_name'] = array(
      'first_name' => array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => t('First Name'),
        ),
        '#default_value' => $data['first_name'],
        '#size' => 9,
      ),
      'last_name' => array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => t('Last Name'),
        ),
        '#default_value' => $data['last_name'],
        '#size' => 9,
      ),
    );
    $form['cell'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => t('Cell Number'),
      ),
      '#size' => 20,
    );
    $form['birthday'] = array(
      'over_13' => array('#markup' => '<div class="age-question">' . t('Over 13?') . '</div>'),
      'month' => array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => t('mm'),
        ),
        '#size' => 2,
        '#maxlength' => 2,
      ),
      'day' => array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => t('dd'),
        ),
        '#size' => 2,
        '#maxlength' => 2,
      ),
      'year' => array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => t('yyyy'),
        ),
        '#size' => 4,
        '#maxlength' => 4,
      ),
    );
    $form['#validate'][] = 'dosomething_login_fbconnect_register_validate';
    $form['#submit'][] = 'dosomething_login_fbconnect_register_submit';
  }
}

function dosomething_login_fbconnect_register_submit($form, &$form_state) {
  $values = $form_state['values'];
  $account = $form_state['user'];
  // Save profile data.
  $profile = new stdClass();
  $profile->type = 'main';
  $profile->uid = $account->uid;
  drupal_write_record('profile', $profile);
  $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['first_name'];
  $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['last_name'];
  $birthday = new DateObject($values['birthdate']);
  $time = $birthday->format(DATE_FORMAT_DATETIME);
  $profile->field_user_birthday[LANGUAGE_NONE][0]['value'] = $time;
  $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
  if (isset($values['phone'])) {
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $values['phone'];
  }
  field_attach_insert('profile2', $profile);
}

function dosomething_login_fbconnect_register_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!$values['first_name']) {
    form_set_error('first_name', t('Please provide your first name.'));
  }
  if (!$values['last_name']) {
    form_set_error('last_name', t('Please provide your last name.'));
  }
  // Validate cell number
  if (($number = preg_replace('[^0-9]', '', $values['cell'])) && strlen($number) >= 10) {
    if (db_select('field_data_field_user_mobile')->fields('field_data_field_user_mobile', array('entity_id'))->condition('field_user_mobile_value', db_like($number), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('cell_or_email', t('The phone number %phone is already registered. <a href="@password">Have you forgotten your password?</a>', array('%phone' => $values['cell_or_email'], '@password' => url('user/password'))));
    }
    $form_state['values']['phone'] = $number;
  }
  if (!is_numeric($values['month']) || $values['month'] > 12) {
    form_set_error('month', t('Please provide a valid numeric month for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['day']) || $values['month'] > 31) {
    form_set_error('day', t('Please provide a valid day for your birthday.'));
    $invalid_birthday = TRUE;
  }
  if (!is_numeric($values['year']) || strlen($values['year']) != 4) {
    form_set_error('year', t('Please provide the 4-digit year you were born.'));
    $invalid_birthday = TRUE;
  }
  if (!isset($invalid_birthday)) {
    $birthday = mktime(0, 0, 0, $values['month'], $values['day'], $values['year']);
    $form_state['values']['birthdate'] = $birthday;
    if ((time() - $birthday) < 13*365*24*60*60) {
      form_set_error('year', t('Members must be at least 13 years old.'));
    }
  }
}

/**
 * Form for a person under 13 to request their parent's permission
 *  to use the site.
 */
function dosomething_login_parent_permission_email_form(&$form, &$form_state, $uid) {
  $form = array();
  $form['parent_email'] = array(
    '#title' => t('Parent Email Address'),
    '#type' => 'textfield',
    '#size' => 20,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  $form['submit_email'] = array(
    '#type' => 'submit',
    '#value' => t('Send Email'),
  );
  return $form;
}

/**
 * Validation callback for parent permission email form.
 */
function dosomething_login_parent_permission_email_form_validate($form, &$form_state) {
  $email = $form_state['values']['parent_email'];
  if (!valid_email_address($email)) {
    form_set_error('parent_email', t('you must provide a valid email address'));
  }
}

/**
 * Submission callback for parent permission email form.
 */
function dosomething_login_parent_permission_email_form_submit($form, &$form_state) {
  global $language;
  $email = $form_state['values']['parent_email'];
  $params = array();

  $account = user_load($form_state['values']['uid']);
  
  // Note: On account creation, fields use language-none so it should be ok not
  // to use field_get_items here.
  $profile = profile2_load_by_user($account, 'main');
  $params['first_name'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
  $params['last_name'] = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];
  drupal_mail('dosomething_login', 'dosomething-parent-email', $email, $language, $params); 
  // TODO: This message may not be necessary.
  drupal_set_message(t('An email has been sent to %email.', array('%email' => $email))); 
}

/**
 * Implements hook_theme().
 */
function dosomething_login_theme() {
  return array(
    'dosomething_login_member_lightbox' => array(
      'path' => drupal_get_path('module', 'dosomething_login') . '/templates',
      'template' => 'dosomething-login-member-lightbox',
    ),
    'dosomething_login_parent_email' => array(
      'path' => drupal_get_path('module', 'dosomething_login') . '/templates',
      'arguments' => array('full_name' => NULL),
      'template' => 'dosomething-login-parent-email',
    ),
    'dosomething_login_parent_permission_granted_email' => array(
      'path' => drupal_get_path('module', 'dosomething_login') . '/templates',
      'arguments' => array('full_name' => NULL),
      'template' => 'dosomething-login-parent-permission-granted-email',
    ),
    'dosomething_login_parent_permission_denied_email' => array(
      'path' => drupal_get_path('module', 'dosomething_login') . '/templates',
      'arguments' => array('full_name' => NULL),
      'template' => 'dosomething-login-parent-permission-denied-email',
    ),
  );
}

/**
 * Determine if a drupal user is over 13 years old.
 *
 * @param $uid
 *  (int) numeric id of drupal user.
 * @return @boolean
 */
function dosomething_login_drupal_user_is_over_age($uid, $age = 13) {
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    $birthday = field_get_items('profile2', $profile, 'field_user_birthday'); 
    if (isset($birthday[0]['value'])) {
      // this is only a a time (no time) so timezone is not important.
      $timestamp = strtotime($birthday[0]['value']);
      return dosomething_login_person_is_over_age($timestamp, $age);
    }
  }
  return FALSE;
}

/**
 * Check if a user is over 13.
 *
 * @param $birthday
 *  (int) timestamp of birthday.
 * @return @boolean
 */
function dosomething_login_person_is_over_age($birthday, $age = 13) {
  return ((time() - $birthday) < strtotime("-$age year")) ? FALSE : TRUE;
}

/**
 * Mark a user as being over 13.
 *  They don't need parental permission at this point.
 */
function dosomething_login_mark_user_account_over_13($uid) {
  // TODO: What else needs to be done to graduate the user to being over 13?
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    $birthday = field_get_items('profile2', $profile, 'field_user_birthday'); 
    $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
    profile2_save($profile);
  }
}

/**
 * Get a user's full name from their main profile.
 */
function dosomething_login_get_user_full_name($account) {
  $full_name = '';
  $names = array();
  $profile = profile2_load_by_user($account, 'main');
  if (is_object($profile)) {
    foreach (array('field_user_first_name', 'field_user_last_name') as $field) {
      $stored_names = field_get_items('profile2', $profile, $field); 
      if (isset($stored_names[0]['safe_value'])) {
        $names[] = $stored_names[0]['safe_value'];
      }
    }
    $full_name = implode(' ', $names);
  }
  return $full_name;
}

/**
 * Determine if user has parentel consent to use this site.
 *  If they are over 13, then they don't need it.
 */
function dosomething_login_user_has_parental_consent($uid) {

  if (dosomething_login_drupal_user_is_over_age($uid)) {
    return TRUE;
  }
  // TODO: Check if user has parental consent.
  // If they do, then return true
  // We don't know how this will be modeled.
  return FALSE;
}

/**
 * Generates a unique URL for a parent to give permission to their
 *  under 13 year old child.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return
 *   A unique URL that provides a one-time link for the user.
 */
function dosomething_login_one_time_parent_permission_link($account) {
  $timestamp = REQUEST_TIME;
  return url("dosomething/under-13/permission/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->created), array('absolute' => TRUE));
}

/**
 * TODO:
 */
function dosomething_login_parent_permission_page($form, &$form_state, $uid, $timestamp, $hash, $action = NULL) {
  // TODO: This expires after 6 months (maybe sooner).
  global $language;
  $timeout = strtotime('-6 months');
  $current = REQUEST_TIME;
  // Some redundant checks for extra security ?
  $users = user_load_multiple(array($uid), array('status' => '1'));
  if ($timestamp <= $current && $account = reset($users)) {
    // No time out for first time login.
    if ($timestamp < $timeout) {
      drupal_set_message(t('You have tried a parental consent link that has expired.'));
      drupal_goto();
    }
    elseif ($account->uid && $timestamp <= $current && $hash == user_pass_rehash($account->pass, $timestamp, $account->created)) {
      if (dosomething_login_user_has_parental_consent($uid)) {
        drupal_set_message(t('%user_name is either over 13 or has already received parental consent.', array('%user_name' => $account->name)));
        drupal_goto();
      }
      if ($action == 'submit') {
        if (isset($form_state['input']['op'])) {
          switch ($form_state['input']['op']) {
            case t('Yes'):
              // If the child is allowed access.
              watchdog('dosomething', 'User %name was given parental permission to be a member.', array('%name' => $account->name));
              drupal_set_message(t('You have just allowed %user_name to be a member of this site.  An email has been sent.', array('%user_name' => $account->name)));
              drupal_mail('dosomething_login', 'dosomething-parent-permission-granted-email', 'matt@zivtech.com', $language, array('account' => $account)); 
              //drupal_mail('dosomething_login', 'dosomething-parent-permission-granted-email', $account->mail, $language, $params); 
              dosomething_login_give_user_parental_permission($account);
              break;
            case t('No'):
              watchdog('dosomething', 'User %name was NOT given parental permission to be a member.', array('%name' => $account->name));
              drupal_set_message(t('%user_name has been denied parental consent to be a member of this site.  An email has been sent.', array('%user_name' => $account->name)));
              drupal_mail('dosomething_login', 'dosomething-parent-permission-denied-email', 'matt@zivtech.com', $language, array('account' => $account)); 
              //drupal_mail('dosomething_login', 'dosomething-parent-permission-denied-email', $account->mail, $language, $params); 
              dosomething_login_deny_user_parental_permission($account);
              break;

            default:
              drupal_set_message(t('You provided an invalid response.'), 'warning');
              drupal_goto("dosomething/under-13/permission/$uid/$timestamp/$hash");
              break;
          }
        }
        else {
          drupal_set_message(t('You provided an invalid response.'), 'warning');
        }
        drupal_goto();
      }
      // TODO: else if user already has permission by virtue of being 13 or older.
      else {
        $form['message'] = array('#markup' => t('<p>Will you allow %user_name to be a member of this site?</p>',  array('%user_name' => $account->name)));
        $form['actions'] = array('#type' => 'actions');
        $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Yes'));
        $form['actions']['cancel'] = array('#type' => 'submit', '#value' => t('No'));
        $form['#action'] = url("dosomething/under-13/permission/$uid/$timestamp/$hash/submit");
        return $form;
      }
    } 
  }
  else {
    drupal_set_message(t('You have tried to use a parental permission link that has either been used or is not valid.'));
    drupal_goto('');
  }
}

/**
 * Give a user under 13 parental permission.
 */
function dosomething_login_give_user_parental_permission($account) {
  // TODO: How is non-parental permission stored?
  // We don't know if it's going to be a role or not yet.

  //$edit = array();
  //$role = user_role_load_by_name('member');
  //$account->roles[$role->rid] = $role->name;
  //$account = user_save($account, $edit);
}

/**
 * Give a user under 13 parental permission.
 */
function dosomething_login_deny_user_parental_permission($account) {
  // TODO: How is non-parental permission stored?
  // We don't know if it's going to be a role or not yet.
  // We're waiting on this.
}

/**
 * Implements hook_cron().
 */
function dosomething_login_cron() {
  //dosomething_login_update_accounts_under_13();
  //dosomething_login_clear_old_accounts();
}

/**
 * Update users who have become 13 or older.
 */
function dosomething_login_update_accounts_under_13($limit = 10) {
  $profiles = dosomething_login_get_accounts_under_13($limit);
  if (count($profiles)) {
    foreach ($profiles as $profile_data) {
      $profile = profile2_load($profile_data->pid);
      $birthday = field_get_items('profile2', $profile, 'field_user_birthday');
      if (isset($birthday[0]['value'])) {
        if (dosomething_login_person_is_over_age(strtotime($birthday[0]['value']), 13)) {
          // TODO: Anything else to mark as over 13?
          $profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = 1;
          profile2_save($profile);
        }
      }
    }
  }
}

/**
 * Get a list of accounts who are under 13
 */
function dosomething_login_get_accounts_under_13($limit = 10) {
  // TODO: Grab users in order of their birthdays
  // depending on whether they're marked under 13.
  // LIMIT ?
  $query = new EntityFieldQuery;

  try {
    $result = $query
      ->entityCondition('entity_type', 'profile2')
      ->propertyCondition('type', 'main')
      ->fieldCondition('field_user_is_over13', 'value', 0, '=')
      ->fieldOrderBy('field_user_birthday', 'value', 'ASC')
      ->execute();
  } catch (Exception $e) {
    // TODO: Some watchdog notice.
    return 0;
  }
  return $result;
}

/**
 * Delete old accounts of users who are under 13 and
 *  haven't received permission from there parents.
 */
function dosomething_login_clear_old_accounts($limit = 10) {
  $accounts = dosomething_login_get_old_accounts($limit);
  if (count($accounts)) {
    foreach ($accounts as $uid) {
      user_delete($uid);
    }
  }
}

/**
 * Get the count of unassigned notifications.
 */
function dosomething_login_get_old_accounts() {
  return array();
  // TODO: What marks a user as pending?
  // This won't do anything for now.
  // We can use an entity query here.
  // Grab users that have a created value less then REQUEST_TIME - strtitime('-6 months')
  // order by user created.
}

