<?php
/**
 * @file
 * Code for the Crazy $#!T Campaign feature.
 */

include_once 'crazyshit.features.inc';

define('CRAZY_DOMAIN', variable_get('crazy_domain', 'www.dosomething.org'));
define('CRAZY_AUTH_PAGES', serialize(explode(',', variable_get('crazy_auth_pages', 'friends,submit'))));
define('CRAZY_MAILCHIMP_GROUP', 'CraziestThing2013');
define('CRAZY_RANKING_POINT', 43200); // in seconds
define('CRAZY_GRACE_PERIOD', 1800); // in seconds

/**
 *	Implements hook_menu()
 */
function crazyshit_menu() {
	$items = array();
	/*$items['crazy/submit-crazy'] = array(
	  'page callback' => 'crazyshit_submit_craziness',
	  'access callback' => TRUE,
	  'delivery callback' => 'ajax_deliver',
	);*/

	$items['crazy/submit-bullshit'] = array(
	  'page callback' => 'crazyshit_submit_bullshit',
	  'access callback' => TRUE,
	  'delivery callback' => 'ajax_deliver',
	);

	$items['crazy/submit-vouch'] = array(
	  'page callback' => 'crazyshit_submit_vouch',
	  'access callback' => TRUE,
	  'delivery callback' => 'ajax_deliver',
	);

	$items['crazy/submit-vouch-request/%'] = array(
	  'page callback' => 'crazyshit_submit_vouch_request',
	  'access callback' => TRUE,
	  'page arguments' => array(2),
	  'delivery callback' => 'ajax_deliver',
	);

	$items['cstemplate/%/%'] = array(
	  'page callback' => 'crazyshit_template_render',
	  'page arguments' => array(1, 2),
	  'access callback' => TRUE,
	);

	$items['crazy/fb-share/%'] = array(
	  'page callback' => 'crazyshit_fb_share',
	  'page arguments' => array(2),
	  'access callback' => TRUE,
	);

	$items['crazy/fb-connect'] = array(
	  'page callback' => 'crazyshit_fb_connect',
	  'access callback' => TRUE
	);

	$items['fb/pics-for-pets/crazy'] = array(
	  'page callback' => 'crazyshit_redirect_from_pfp',
	  'access callback' => TRUE,
	);

	$items['crazy/flag/%'] = array(
	  'page callback' => 'crazyshit_flag',
	  'page arguments' => array(2),
	  'access arguments' => array('administer users'),
	);

	return $items;
}

function crazyshit_flag($sid) {
  if (!intval($sid)) {
  	 return false;
  }
  $submission = array_shift(entity_load('webform_submission_entity', array($sid)));
  if (!isset($submission->sid)) {
    return false;
  }

  $state = 1;
  if ($submission->field_crazy_flagged[LANGUAGE_NONE][0]['value'] == 1) {
  	$submission->field_crazy_flagged[LANGUAGE_NONE][0]['value'] = 0;
  	$state = 0;
  }
  else {
  	$submission->field_crazy_flagged[LANGUAGE_NONE][0]['value'] = 1;
  }

  @entity_save('webform_submission_entity', $submission);

  echo $state;
  drupal_exit();
}

/**
 *	Checks whether the page url matches the crazy $#!T URI
 *
 *	@param $page (optional)
 *		The URI to the page that should be checked.  If blank,
 *		assumes you mean request_uri().
 *
 *	@return boolean
 *		Returns true or false, depending on whether or not the
 *		page is a crazy page.
 */
function crazyshit_is_crazy_page($page = '') {
  if (empty($page)) {
	$page = request_path();
  }

  if (preg_match('#^crazy#', $page)) {
	return true;
  }

  return false;
}

/**
 *  Implements hook_css_alter()
 *	Removes unused styles.
 */
function crazyshit_css_alter(&$css) {
  if (crazyshit_is_crazy_page()) {
	$unused = array(
	   'sites/all/modules/date/date_api/date.css',
	   'sites/all/modules/date/date_popup/themes/datepicker.1.7.css',
	   'modules/field/theme/field.css',
	   'modules/node/node.css',
	   'modules/poll/poll.css',
	   'modules/user/user.css',
	   'sites/all/modules/views_slideshow/views_slideshow.css',
	   'sites/all/modules/dosomething/dosomething_blocks/css/twitter-widget.css',
	);
	foreach ($unused AS $style) {
	  unset($css[$style]);
	}
  }
}

/**
 *  Implements hook_js_alter()
 *	Removes unused scripts.
 */
function crazyshit_js_alter(&$js) {
  if (crazyshit_is_crazy_page()) {
    $unused = array(
      'sites/all/modules/dosomething/dosomething_blocks/js/lets_talk_dialog.js',
      'sites/all/modules/dosomething/dosomething_blocks/js/show-facebook-twitter.js',
      'sites/all/modules/dosomething/dosomething_menu/js/ds-main-menu.js',
      'sites/all/themes/doit/js/formalize/jquery.formalize.min.js',
      'sites/all/themes/doit/js/jQuery-SelectBox/jquery.selectBox.min.js',
      'sites/all/themes/doit/js/doit-select.js',
      'sites/all/themes/doit/js/jquery.lettering-0.6.min.js',
      'sites/all/themes/doit/js/show-search-facets.js',
      'sites/all/themes/doit/js/doit-lettering.js',
      'sites/all/modules/dosomething/dosomething_general/js/iframe-defer.js',
    );

    foreach ($unused AS $script) {
      unset($js[$script]);
    }
  }
}

/**
 *	Implements hook_page_templates_alter()
 *	Adds navigation bar to the top of the page.
 */
function crazyshit_page_templates_alter(&$variables) {
   if (crazyshit_is_crazy_page()) {
	  $v = &$variables['page']['top_navbar'];

	  $fbed = crazy_check_fb_auth();
	  include DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/plugin.php';

	  $ru = request_path();
	  foreach ($top_links AS $match => $info) {
	  	$href = $info['href'];
	  	$links[$href] = array(
	  	  'title' => t($info['title']),
	  	  'href' => $href,
	  	  'attributes' => (isset($info['attributes']) ? $info['attributes'] : array()),
	  	);

	  	if (preg_match('#^' . $match . '#i', $ru)) {
	  	  $links[$href]['attributes'] += array(
	  		'class' => array('active'),
	  	  );
	  	}
	  }

	  $sub = array();
	  $u = $ru;
	  foreach ($sub_menus AS $match => $s) {
	  	if (preg_match('#' . $match . '#i', $u)) {
	  	  foreach ($sub_menus[$match] AS $key => $type) {
	  	  	if (strpos($type['href'], '#') !== false) {
	  	  		preg_match('/(?<href>.*?)#(?<fragment>.*?)$/', $type['href'], $hr);
	  	  		$href = $hr['href'];
	  	  		$fragment = $hr['fragment'];
	  	  	}
	  	  	else {
	  	  		$href = $type['href'];
	  	  		$fragment = '';
	  	  	}

	  		$sub[] = array(
	  		   'title' => t($type['title']),
	  		   'href' => $href,
	  		   'fragment' => $fragment,
	  		   'attributes' => (isset($type['attributes']) ? $type['attributes'] : array()),
	  		);
	  	  }
	  	}
	  }

	  $crazy_menu = array();
	    
	  $crazy_menu = array(
	    '#theme' => 'links',
	    '#links' => $links,
	    '#attributes' => array('class' => array('crazy-menu')),
	  );

	  $crazy_sub_menu = array();
	  if (!empty($sub)) {
	    $crazy_sub_menu = array(
	      '#theme' => 'links',
	      '#links' => $sub,
	      '#attributes' => array('class' => array('crazy-sub-menu')),
	    );
	  }

	  $h = file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/html/header.html');

	  $v = $h . '<div class="crazy-menu-wrapper">' . drupal_render($crazy_menu) . '</div><div class="crazy-sub-menu-wrapper">' . drupal_render($crazy_sub_menu) . '</div>' . $v;
   }
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function crazyshit_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 *	Redirects from PFP Facebook app back to DoSomething.
 */
function crazyshit_redirect_from_pfp() {
   drupal_goto('https://' . CRAZY_DOMAIN . '/' . CRAZY_ROOT . '/friends?fb=1');
}

/**
 *	Submits a vouch.
 */
function crazyshit_submit_vouch() {
	global $user;
	if (!$user->uid) {
	  // If a user isn't logged in, they shouldn't be able to vouch for something.
	  echo drupal_json_output(array(
		'status' => 0
	  ));
	}

	$update = crazyshit_update_counts(intval($_POST['rel']), 'crazy_vouch_count');

	$fbid = fboauth_fbid_load($user->uid);

	$notification = array(
	  'sid' => $update['sid'],
	  'uid' => $update['uid'],
	  'fid' => fboauth_fbid_load($update['uid']),
	  'from_uid' => $user->uid,
	  'from_fid' => $fbid,
	  'type' => 11,
	  'timestamp' => REQUEST_TIME,
	  'notified' => 1,
	  'origin' => intval($_POST['origin']),
	  'ipaddress' => $_SERVER['REMOTE_ADDR'],
	);
	drupal_write_record('crazy_notifications', $notification);

	echo drupal_json_output(array(
	  'status' => 1,
	  'count' => $update['count'],
	));

	drupal_exit();
}

/**
 *	Submits a vouch request.
 *
 *	@param $sid
 *		The submission ID of the post in question.
 */
function crazyshit_submit_vouch_request($sid) {
	$friends = $_POST['friends'];
	$submission = array_shift(entity_load('webform_submission_entity', array($sid)));
	global $user;

	$fbid = fboauth_fbid_load($user->uid);

	foreach ($friends AS $key => $friend) {
	  $notification = array(
	    'sid' => $submission->sid,
	    'uid' => fboauth_uid_load($friend),
	    'fid' => $friend,
	    'from_uid' => $user->uid,
	    'from_fid' => $fbid,
	    'type' => 1,
	    'timestamp' => REQUEST_TIME,
	    'notified' => 1,
	    'origin' => intval($_POST['origin']),
	    'ipaddress' => $_SERVER['REMOTE_ADDR'],
	  );

	  drupal_write_record('crazy_notifications', $notification);
	}
}

/**
 *  Adds weight to posts from a Facebook image share.
 *
 *	@param int $sid
 *	   The submission ID of the post that should be updated.
 */
function crazyshit_fb_share($sid) {
  $submission = array_shift(entity_load('webform_submission_entity', array($sid)));

  $total = 0;
  if (isset($submission->field_crazy_total_count[LANGUAGE_NONE])) {
    $total = (int) $submission->field_crazy_total_count[LANGUAGE_NONE][0]['value'];
  }

  $weight = 0;
  // Check for existing weight and update accordingly.
  if (isset($submission->field_craziness_weight[LANGUAGE_NONE][0]['value'])) {
  	$weight = $submission->field_craziness_weight[LANGUAGE_NONE][0]['value'];
  }

  // We want to get the nearest 10, 100, 1000, 10000, etc...
  $top = pow(10, strlen((string) $total));
  $multiplier = (CRAZY_RANKING_POINT / $top);

  $weight += (0.5 * $multiplier);

  $submission->field_crazyness_weight[LANGUAGE_NONE][0]['value'] = $weight;
  @entity_save('webform_submission_entity', $submission);
}

/*
function crazyshit_submit_craziness() {
	$submission = array_shift(entity_load('webform_submission_entity', array(intval($_POST['rel']))));
	if (!$submission) {
	   watchdog('crazyshit', 'The crazy shit was not crazy.');
	   return FALSE;
	}

	$value = 0;
	if (isset($submission->field_crazy_count[LANGUAGE_NONE])) {
	   $value = $submission->field_crazy_count[LANGUAGE_NONE][0]['value'];
	}

	$value++;
	$submission->field_crazy_count[LANGUAGE_NONE][0]['value'] = $value;
	webform_entity_save_webform_submission($submission);
	
	global $user;
	$fbid = fboauth_fbid_load($user->uid);
	$notification = array(
	  'sid' => $submission->sid,
	  'uid' => 0,
	  'fid' => 0,
	  'from_uid' => $user->uid,
	  'from_fid' => $fbid,
	  'type' => 10,
	  'timestamp' => REQUEST_TIME,
	  'notified' => 0,
	  'ipaddress' => $_SERVER['REMOTE_ADDR'],
	);

	drupal_write_record('crazy_notifications', $notification);

	#crazy_update_share_count();
	echo drupal_json_output(array(
		'status' => 1,
		'count' => $value,
	));
	exit;
}*/

function crazyshit_update_counts($sid, $field) {
  // Get the submission, or send an error.
  $submission = array_shift(entity_load('webform_submission_entity', array($sid)));
  if (!$submission) {
    watchdog('crazyshit', 'There was an error with the field_' . $field . ' field (SID: ' . $sid . ')');
    return FALSE;
  }

  // Get the current B.S. count
  $value = 0;
  if (isset($submission->{'field_' . $field}[LANGUAGE_NONE])) {
     $value = (int) $submission->{'field_' . $field}[LANGUAGE_NONE][0]['value'];
  }

  // BS++
  $value++;

  // Update it.
  $submission->{'field_' . $field}[LANGUAGE_NONE][0]['value'] = $value;

  $total = 0;
  if (isset($submission->field_crazy_total_count[LANGUAGE_NONE])) {
   $total = (int) $submission->field_crazy_total_count[LANGUAGE_NONE][0]['value'];
  }

  $total++;
  $submission->field_crazy_total_count[LANGUAGE_NONE][0]['value'] = $total;

  $total_today = 0;
  if (isset($submission->field_crazy_today_count[LANGUAGE_NONE])) {
   $total_today = (int) $submission->field_crazy_today_count[LANGUAGE_NONE][0]['value'];
  }

  $total_today++;
  $submission->field_crazy_today_count[LANGUAGE_NONE][0]['value'] = $total_today;

  $total_week = 0;
  if (isset($submission->field_crazy_week_count[LANGUAGE_NONE])) {
   $total_week = (int) $submission->field_crazy_week_count[LANGUAGE_NONE][0]['value'];
  }

  $total_week++;
  $submission->field_crazy_week_count[LANGUAGE_NONE][0]['value'] = $total_week;

  /**
   *  Updates the craziness weight to properly order submissions.
   */
  $weight = 0;
  // Check for existing weight and update accordingly.
  if (isset($submission->field_craziness_weight[LANGUAGE_NONE][0]['value'])) {
  	$weight = $submission->field_craziness_weight[LANGUAGE_NONE][0]['value'];
  }

  // We want to get the nearest 10, 100, 1000, 10000, etc...
  $top = pow(10, strlen((string) $total));
  $multiplier = (CRAZY_RANKING_POINT / $top);

  // Add new weights, depending on the action.
  switch ($field) {
  	case 'crazy_vouch_count':
  	   $weight += (0.75 * $multiplier);
  	break;
  	case 'crazy_bullshit_count':
  	   $weight += (0.25 * $multiplier);
  	break;
  }

  $submission->field_craziness_weight[LANGUAGE_NONE][0]['value'] = $weight;

  @entity_save('webform_submission_entity', $submission);

  return array(
  	'sid' => $submission->sid,
  	'uid' => $submission->uid,
  	'count' => $value
  );
}

/**
 *	Submits a B.S. notification.
 */
function crazyshit_submit_bullshit() {
	global $user;

	if (!$user->uid) {
	  // If a user isn't logged in, they shouldn't be able to vouch for something.
	  echo drupal_json_output(array(
		'status' => 0
	  ));
	}

	$n = 0;
	// If we have disabled notifications, set notified = true
	// so the user doesn't see the notification when they come back.
	if ($_POST['alert'] == 'true' || !CRAZY_ALLOW_NOTIFICATIONS) {
	  $n = 1;
	}

	$update = crazyshit_update_counts(intval($_POST['rel']), 'crazy_bullshit_count');

	// Get Drupal and FB user ids
	$fbid = fboauth_fbid_load($user->uid);
	$to_fbid = fboauth_fbid_load($update['uid']);

	// Build the notification array.
	$notification = array(
	  'sid' => $update['sid'],
	  'uid' => $update['uid'],
	  'fid' => $to_fbid,
	  'from_uid' => $user->uid,
	  'from_fid' => $fbid,
	  'type' => 2,
	  'timestamp' => REQUEST_TIME,
	  'notified' => $n,
	  'origin' => intval($_POST['origin']),
	  'ipaddress' => $_SERVER['REMOTE_ADDR'],
	);

	// Write the notification.
	drupal_write_record('crazy_notifications', $notification);

	// Return author, status, new count.
	echo drupal_json_output(array(
	  'author' => $to_fbid,
	  'status' => 1,
	  'count' => $update['count'],
	));

	drupal_exit();
}

/**
 *	Renders a template for the popups.
 *
 *	@param $template
 *		The template that should be rendered.
 *
 *	@param $sid
 *		The submission ID of the post in question.
 */
function crazyshit_template_render($template, $sid) {
  // Start the parameters with just the SID.
  $params = array(
	'sid' => $sid,
	'you' => (isset($_POST['you']) ? intval($_POST['you']) : 0),
  );

  // Add a random tip if it's the tips popup.
  if ($template == 'tip') {
	include DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/plugin.php';
	$params['tip'] = t($money_saving_tips[array_rand($money_saving_tips)]);
  }

  if (isset($_POST['goto'])) {
	$params['goto'] = $_POST['goto'];
  }

  if (isset($_POST['source'])) {
  	$source = substr(check_plain($_POST['source']), 1);
  }

  $params['source'] = $source;

  // Return the template.
  echo theme($template, $params);

  // Update the notifications table that the user saw it.
  db_update('crazy_notifications')
  ->fields(array(
	'notified' => 1
  ))
  ->condition('sid', intval($sid))
  ->execute();

  // Finished.
  drupal_exit();
}

/**
 *	Implements hook_page_alter()
 */
function crazyshit_page_alter(&$page) {
  if (crazyshit_is_crazy_page()) {
	include DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/plugin.php';
	drupal_set_title($campaign_title);

    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:type',
        'content' => $facebook_posts['share']['namespace'] . ':' . $facebook_posts['share']['object'],
      ),
    );
    drupal_add_html_head($element, 'picsforpets_social_graph_type');

	$uri = request_uri();

	// Loads CSS files from the $crazy_css array found in plugin.php
	foreach ($crazy_css AS $path => $css) {
		if (preg_match('#^/' . $path . '#i', $uri)) {
			foreach ($css AS $style) {
				drupal_add_css(drupal_get_path('module', 'crazyshit') . '/css/' . $style, array(
				  'group' => CSS_THEME,
				  'weight' => 1000,
				));
			}
		}
	}

	// Loads JS files from the $crazy_js array found in plugin.php
	foreach ($crazy_js AS $path => $js) {
		if (preg_match('#^/' . $path . '#i', $uri)) {
			foreach ($js AS $script) {
				drupal_add_js(drupal_get_path('module', 'crazyshit') . '/js/' . $script, array(
				  'weight' => 1000,
				));
			}
		}
	}

    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:type',
        'content' => $facebook_posts['share']['namespace'] . ':' . $facebook_posts['share']['object'],
      ),
    );
    drupal_add_html_head($element, 'crazy_og_type');

    // Includes the jQuery ui dialog library, regardless of logged in status.
    drupal_add_library('system', 'ui.dialog');

	// Loads Facebook.
	drupal_add_library('connections', 'facebook');
	// Backup for weird production facebook issues...
    // Includes the jQuery ui dialog library, regardless of logged in status.
	drupal_add_js(drupal_get_path('module', 'connections') . '/js/connections.js', array(
      'weight' => 500,
    ));

	$origin = 0;

	// If on a gallery page, adds an array of submission IDs to Drupal.settings
	// When the page loads, javascript takes these IDs and disables the buttons.
	$settings = array();
	if (preg_match('#^\/' . CRAZY_ROOT . '\/?(friends|time-.*?)?#i', $uri)) {
	  if ($allow_lazy_loading) {
	     drupal_add_js(drupal_get_path('module', 'crazyshit') . '/js/jquery.lazyload.js');
	  }

	  global $user;
	  $fbid = fboauth_fbid_load($user->uid);
	  #$i = db_or();
	  #$i->condition('from_uid', $user->uid);
	  #$i->condition('from_fid', $fbid);

	  $s = db_select('crazy_notifications', 'n')
		->fields('n', array('sid', 'type'))
		->condition('from_uid', $user->uid)
	    ->condition('type', array(2, 10, 11), 'IN')
	    #->condition('from_uid', 0, '!=')
	    ->execute();
	  $shares = $s->fetchAll();

	  $settings = array(
	    'share_count' => count($shares),
	    'shares' => $shares,
	  );

	  $origin = 1;
	}

	if (preg_match('#^\/' . CRAZY_ROOT . '/friends#i', $uri)) {
		$origin = 2;
	}

	if (preg_match('#^\/' . CRAZY_ROOT . '/submit#i', $uri)) {
		$origin = 3;
	}

	$settings['facebook'] = $facebook_posts;
	$settings['fb_app_id'] = variable_get('fboauth_id');

	$settings['origin'] = $origin;
	// Whether or not to allow notifications.
	$settings['allow_notifications'] = CRAZY_ALLOW_NOTIFICATIONS;

	// Whether lazy loading is allowed.
	$settings['allow_lazy_loading'] = CRAZY_ALLOW_LAZY_LOADING;

	$settings['crazy_root'] = CRAZY_ROOT;

	// Settings.
	drupal_add_js(array('crazy' => $settings), 'setting');
  }
}

/**
 *	Implements hook_views_pre_render()
 */
function crazyshit_views_post_render(&$view, &$output, &$cache) {
   if (crazyshit_is_crazy_page()) {
     global $user;
     // Allows for lazy loading of images...
     $output = preg_replace_callback('#src="([^\"]+)"\s+#i', 'crazyshit_add_lazy_class', $output);
     $output = str_replace(' a-' . $user->uid, ' a-' . $user->uid . ' by-me', $output);

     // Very hacky but it's a quick fix for now.
     // Will be implemented properly later.
     $admin = user_access('delete all webform submissions');
     if (!$admin) {
     	$output = preg_replace('#<div class="flag">.*</div>#i', '', $output);
     }
   }
}

/**
 *	Adds the "lazy" class to images, to enable lazy loading.
 */
function crazyshit_add_lazy_class($matches) {
  static $i = 1;

  // Lazy load count always needs to be at least 1.
  $c = (CRAZY_LAZY_LOAD_COUNT < 1) ? 1 : CRAZY_LAZY_LOAD_COUNT;

  $unique_cache = substr(md5(rand(0, 1000000)), 0, 5);
  // We multiply the lazy load count by 2, because lazy loading includes the facebook pictures.
  if ($i > ($c * 2) && CRAZY_ALLOW_LAZY_LOADING) {
	// We're beyond the non-lazy threshold, so lazy-load the image.
	$r = 'src="/' . drupal_get_path('module', 'crazyshit') .'/images/default-img.jpg" data-original="' . $matches[1] . '?' . $unique_cache . '" class="lazy" data-num="' . $i . '" ';
  }
  else {
	// If we're within the threshhold of non-lazy images, don't add the "lazy" class to them.
	// The lazy class causes issues when you first create a post.  So we can't lazy load it.
	$p = $matches[1] . '?' . $unique_cache;
	$r = 'src="' . strval($p) . '" data-num="' . $i . '" data-original="' . $p . '" ';
  }

  $i++;
  return $r;
}

/**
 *  Implements hook_views_query_alter()
 */
function crazyshit_views_query_alter(&$view, &$query) {
  if ($view->name == 'crazy_shit_landing') {
	$uri = request_path();
	if (preg_match('#^' . CRAZY_ROOT . '/(friends/)?(?<showid>[0-9]+)$#i', $uri, $showid)) {
	  $showid = $showid['showid'];
	  // Try and find the submission with this ID and mark it as relevant
	  $query->fields['ided'] = array(
	    'field' => 'IF (webform_submissions.sid = ' . $showid . ', 1, 0)',
	    'table' => '',
	    'alias' => 'is_the_one',
	  );

	  // When we're looking for one specific element, we can show it first in the list
  	  // by doing "is_the_one DESC" (see "is_the_one" definition above).  Everything else
	  // will resume as normal below the post.
	  $theone = array(
	    'field' => 'is_the_one',
	    'direction' => 'DESC',
	  );

	  $query->where[1]['conditions'][] = array(
	    'field' => 'webform_submissions.sid = :sid',
		'value' => array(':sid' => $showid),
		'operator' => 'formula',
	  );

	  // Prepend "is_the_one" order to the beginning of the orderby array.
	  array_unshift($query->orderby, $theone);
	}

    if ($view->current_display == 'block') {
      if (preg_match('#^' . CRAZY_ROOT . '/time-(today|week|all)$#i', $uri, $time)) {
		$time = $time[1];

		// Gets submissions posted today.
		if ($time == 'today') {
		   // Note 2/27/13:
		   // Here's a weird one: We can't use the DATE_FORMAT(etc. etc.) format as seen below for today
		   // because it doesn't show all of the posts! So let's just use a unix timestamp format.
		   $query->where[1]['conditions'][1] = array(
			 'field' => "webform_submissions.submitted >= :today",
			 'value' => array(':today' => mktime(0, 0, 0)),
		 	 'operator' => 'formula',
		   );
		   unset($query->orderby[1]);
		}
		// Gets submissions posted this week.
		else if ($time == 'all') {
		   unset($query->orderby[0]);
		}
	  }
	  else if ($uri == CRAZY_ROOT) {
	    // Monday is always the start of the week.  Get this week's Monday in days (ago).
	    $monday = (date('N') - 1);
	    $query->where[1]['conditions'][1] = array(
		  'field' => "DATE_FORMAT(ADDTIME(FROM_UNIXTIME(webform_submissions.submitted), SEC_TO_TIME(-18000)), '%Y-%m-%d') >= :last_week AND DATE_FORMAT(ADDTIME(FROM_UNIXTIME(webform_submissions.submitted), SEC_TO_TIME(-18000)), '%Y-%m-%d') <= :today",
		  'value' => array(
			  ':last_week' => date('Y-m-d', strtotime($monday . ' days ago')),
			  ':today' => date('Y-m-d'),
			),
	  	  'operator' => 'formula',
	    );
	    unset($query->orderby[1]);
	  }

	  $query->fields['real_weight'] = array(
	    'field' => '(((webform_submissions.submitted - ' . REQUEST_TIME . ') + ' . CRAZY_GRACE_PERIOD . ') + field_data_field_craziness_weight.field_craziness_weight_value)',
	    'table' => '',
	    'alias' => 'real_weight',
	  );
	  
	  $query->orderby[0]['field'] = 'real_weight';
    }

  // If we're viewing the friends gallery page, only show submissions by my Facebook friends.
  if (preg_match('#^' . CRAZY_ROOT . '\/friends#i', $uri)) {
	$facebook = crazy_load_fb();
	module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');

    global $user;

    if (!$user->uid) {
      drupal_goto('https://www.facebook.com/dialog/oauth?client_id=' . variable_get('fboauth_id') . '&redirect_uri=http://' . CRAZY_DOMAIN . '/fboauth/connect%3Fdestination%3D' . substr(request_uri(), 1) . '&scope=email,user_birthday');
    }

    $fbid = fboauth_fbid_load($user->uid);
    if ($fbid) {
	  $access_token = $facebook->getAccessToken();
	  $friends = $facebook->api('/' . $fbid . '/friends');

	  $f = array(
	    0 => $fbid,
	  );
	  foreach ($friends['data'] AS $key => $friend) {
	    $f[] = $friend['id'];
	  }
	}
	else {
	  drupal_goto('https://www.facebook.com/dialog/oauth?client_id=' . variable_get('fboauth_id') . '&redirect_uri=http://' . CRAZY_DOMAIN . '/fboauth/connect%3Fdestination%3D' . substr(request_uri(), 1) . '&scope=email,user_birthday');
	}

	$ids = crazy_fb_get_multi_fbids($f);

	if ($view->name == 'crazy_shit_landing' && $view->current_display == 'friends_view' && !empty($ids)) {
	  // Create a database condition class to narrow viewable posts down to just your friends.
	  $s = new DatabaseCondition();
	  $s->condition('webform_submissions.uid', $ids);
	  $c = &$s->conditions();
	  $c['#conjunction'] = 'OR';

      // remove the view's filter criteria to be replaced by the new conditional.
      unset($query->where[1]['conditions'][1]);

	  // Add the conditional to the query.
	  $query->where[1]['conditions'][] = array(
		'field' => $s,
	  );
	}
  }
 }
}

/**
 *	Gets multiple Facebook IDs from an array of Drupal User IDs
 *
 *	@param $users
 *		An array of Drupal user ids.
 */
function crazy_fb_get_multi_fbids(Array $users) {
  $result = db_query("SELECT uid, 1 FROM {fboauth_users} WHERE fbid IN (" . implode(',', $users) . ")");
global $user;
  $uids = $result->fetchAllKeyed();
  
  return array_keys($uids);
}

/**
 *  Implements hook_module_implements_alter()
 */
function crazyshit_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['crazyshit'])) {
    $group = $implementations['crazyshit'];
    unset($implementations['crazyshit']);
    $implementations['crazyshit'] = $group;
  }
}

/**
 *	Implements hook_form_alter()
 */
function crazyshit_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') === 0 && isset($form_state['webform_entity']) && $form_state['webform_entity']['bundle'] == 'crazy_shit') {
		$u = &$form['submitted'];
		$page = (isset($form_state['input']['details']['page_num']) ? $form_state['input']['details']['page_num'] : 0);

		include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/plugin.php';
		if ($page == 0 || !isset($form_state['input']['submitted']['field_crazy_crazy_picture'][LANGUAGE_NONE][0]['fid'])) {
			/*$u['s'] = array(
				'#type' => 'container',
				'step' => array(
					'#markup' => t($submit_form['steps']['step1']),
				),
				'#weight' => -1000,
				'#attributes' => array(
					'class' => array('step-field'),
				),
			);*/

			$form['submitted']['webform_entity_form']['#groups']['group_crazy_page1']->children[] = 'sbutton';
			$form['submitted']['webform_entity_form']['#group_children']['sbutton'] = 'group_crazy_page1';
		}
		else {
			/*$u['s'] = array(
				'#type' => 'container',
				'step' => array(
					'#markup' => t($submit_form['steps']['step2']),
				),
				'#weight' => -1000,
			);*/

			$file = file_load($form_state['input']['submitted']['field_crazy_crazy_picture'][LANGUAGE_NONE][0]['fid']);
			$path = str_replace(drupal_realpath('public://') . '/', '', drupal_realpath($file->uri));
			$form_state['file_path'] = $path;

			$u['sbutton'] = array(
				'#type' => 'container',
				'preview_image' => array(
					'#markup' => '<img src="/files/styles/crazy_image_dimensions/public/' . $path . '" alt="" />',
				),
				'#weight' => 10,
				'#attributes' => array(
					'class' => array('image-widget-data')
				),
			);

			$form['#submit'][] = 'crazyshit_add_text_to_image';
			$form['#submit'][] = 'crazyshit_redirect_to_friends';
		}
	}
}

/**
 *	Adds text to the image.
 */
function crazyshit_add_text_to_image($form, &$form_state) {
  $top = $form_state['input']['submitted']['field_crazy_top_text'][LANGUAGE_NONE][0]['value'];
  $bottom = $form_state['input']['submitted']['field_crazy_bottom_text'][LANGUAGE_NONE][0]['value'];

  $path = drupal_realpath('public://') . '/styles/crazy_image_dimensions/public/crazyshit/' . basename($form_state['file_path']);

  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/includes/image.php';
  write_text_to_image($path, $top, $bottom);
}

/**
 *	Redirects to the "me and my friends" tab after creation, and sets $_SESSION['from_creation']
 */
function crazyshit_redirect_to_friends($form, &$form_state) {
  $sid = $form_state['values']['details']['sid'];
  $image = file_create_url('public://' . $form_state['file_path']);
  $s = array(
  	'sid' => $sid,
  	'image' => $image,
  );

  $_SESSION['from_creation'] = $s;
  drupal_goto('crazy/friends/' . $sid);
}

/**
 *	Loads the Facebook object and returns it.
 */
function crazy_load_fb() {
  // Some browsers won't let the third party cookies through by default unless
  // a compact privacy policy is set in the headers.
  drupal_add_http_header('P3P', 'CP="IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT"');
  $path = libraries_get_path('facebook');
  if (!empty($path)) {
	require_once(DRUPAL_ROOT . '/' . $path . '/facebook.php');
  }
  else {
	drupal_set_message('You are missing the Facebook SDK');
	return;
  }

  $appid = variable_get('fboauth_id', 105775762330);
  $secret = variable_get('fboauth_secret', '68e767e16e139277b1e7d2e2ba16a4f6');

  $facebook = new Facebook(array(
	'appId' => $appid,
	'secret' => $secret,
  ));

  return $facebook;
}

/**
 *	Checks Facebook authentication.
 *
 *	@param $facebook
 *		The Facebook object, if it exists.  This function will
 *		create the object otherwise.
 */
function crazy_check_fb_auth($facebook = '') {
  if (!is_object($facebook)) {
    $facebook = crazy_load_fb();
  }

  $access_token = $facebook->getAccessToken();

  // Try and get the $fbuser object
  $fbuser = fboauth_graph_query('me', $access_token);
  if (isset($fbuser->id)) {
    return 1;
  }
  else {
    return 0;
  }
}

/**
 *	Redirects to the Facebook auth page.
 *  This seems to fix the auth problem.
 */
function crazyshit_fb_connect() {
  $facebook = crazy_load_fb();

  $params = array(
	'scope' => 'email,user_birthday',
	'redirect_uri' => $_SERVER['HTTP_REFERER'],
  );

  $l = $facebook->getLoginUrl($params);
  header('location: ' . $l);
}


function crazyshit_fboauth_redirect($destination) {
  if (strpos($destination, 'crazy') !== -1) {
  	global $user;
	if (!empty($user->mail)) {
	    $mid = CRAZY_MAILCHIMP_GROUP;
	    $email = $user->mail;

	    if (!empty($mid) && valid_email_address($email) && !empty($email)) {
		
		// Add email to MailChimp group
	       $mailchimp_status = dosomething_general_mailchimp_subscribe($email, $mid);
	       
               $message['subject'] = 'What\'s the craziest thing you\'ve done to save money?';
      
               // Note that the message body is an array, not a string.
               $message['body'][] = '<strong>Hey there!</strong>';

               $message['body'][] = '<p>We\'ve all done something crazy to save money... some of us have done more than others. If you haven\'t already,
                            <a href="http://www.dosomething.org/crazy/submit/start">submit your story</a> and you will be entered to win a $4,000
			     scholarship to help you avoid crazy things in the future. (contest rules here)</p>';
			     
               $message['body'][] = '<p>I\'ll send you some highlighted stories every so often, along with a couple ideas on how they could have sanely
                            saved money instead.  Our site is still in beta right now, so if you have any comments that could help us make it
			    better, <strong><a href="https://docs.google.com/forms/d/1tDNHmnIrbBwXs7yrsA5Mdw4eFKTBEbQ6-0li3hQax7U/viewform">click here.
		            </a></strong></p><br /><br />';
			    
               $message['body'][] = '<p>Stay Crazy,<br />Greg from DoSomething.org</p>';
		
               $mail_status = crazyshit_mail_send($email, $message);

	       if (!$mail_status) {
	         watchdog('crazyshit', 'Failed to send welcome message after user registration: %email using the parameters: %param',
			   array('%email' => $email, '%message' => $message), WATCHDOG_ERROR);
	       }

	    }

	    $u = array(
	      'uid' => $user->uid,
	      'email' => $user->mail,
	      'timestamp' => REQUEST_TIME,
	    );
	    drupal_write_record('crazy_emails', $u);
	}
  }
}

/**
 *	Implements hook_theme()
 */
function crazyshit_theme() {
  $path = drupal_get_path('module', 'crazyshit');

  return array(
    'crazyshit_welcome' => array(
      'path' => $path . '/templates',
      'template' => 'crazyshit-welcome-email',
    ),
    'bull' => array(
      'path' => $path . '/templates',
      'template' => 'bullshit-alert',
    ),
    'vouch' => array(
      'path' => $path . '/templates',
      'template' => 'vouch-alert',
    ),
    'login' => array(
      'path' => $path . '/templates',
      'template' => 'login-alert',
    ),
    'submit' => array(
      'path' => $path . '/templates',
      'template' => 'submit-alert',
    ),
    'tip' => array(
      'path' => $path . '/templates',
      'template' => 'tip',
    ),
    'share' => array(
	  'path' => $path . '/templates',
	  'template' => 'share-alert',
    ),
  );
}

/**
 * Implements hook_init().
 */
function crazyshit_init() {
  // Return nothing if the page isn't within the crazy $#!T module
  if (crazyshit_is_crazy_page()) {
	  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'crazyshit') . '/plugin.php';

	  global $user;

	  // Load the Facebook object
	  $facebook = crazy_load_fb();

	  // Handles Facebook user system
	  crazyshit_handle_fb_users($facebook);

	  $onpage = preg_match('#^(' . implode('|', $crazy_notification_pages) . ')$#i', request_path());
	  if (CRAZY_ALLOW_NOTIFICATIONS && $onpage) {
		// Set up an or statement for the below query.
		#$c = db_or();
		#$c->condition('uid', intval($user->uid));
		#$c->condition('fid', intval($fbuser->id));

		// Load any notifications the user has.
		$n = db_select('crazy_notifications', 'n')
		  ->fields('n', array('type', 'sid', 'from_fid', 'fid'))
		  // Make sure it's for the currently logged in user.
		  ->condition('uid', $user->uid)
		  // Make sure they haven't seen it yet.
		  ->condition('notified', 0)
		  // Make sure it's a BS notification.
		  ->condition('type', 2)
		  // Make sure it comes from the friends page.
		  ->condition('origin', 2)
		  // Show only one at a time.
		  ->range(0, 1)
		  ->execute();
		$ns = $n->fetchAll();

		$notifications = reset($ns);
		$pre = '';

		$from_fb = false;
		if (isset($_GET['fb'])) {
			$from_fb = (bool) intval($_GET['fb']);
		}

		if (!empty($notifications)) {
		   if ($notifications->from_fid == $notifications->fid) {
		      $pre = 'Drupal.behaviors.dsCrazyScripts.notify_yourself = true; ';
		   }

	 	   $submission = array_shift(entity_load('webform_submission_entity', array($notifications->sid)));
		   $mp = "var my_post = { 'sid': " . $notifications->sid . ", 'image': '" . file_create_url($submission->field_crazy_crazy_picture[LANGUAGE_NONE][0]['uri']) . "' }; ";
		   drupal_add_js($mp, 'inline');

		   drupal_add_js("jQuery(document).ready(function() { if (top.location == self.location) { window.setTimeout(function() { " . $pre . " jQuery.fn.dsCrazyPopup('bull', " . intval($notifications->sid) . "); }); } }, 1500);", 'inline');
		}
		else if ($from_fb) {
		   drupal_add_js("jQuery(document).ready(function() { if (top.location == self.location) { window.setTimeout(function() { jQuery.fn.dsCrazyPopup('bull', 0); }); } }, 1500);", 'inline');
		}
	  }

	  // If user is not authenticated, show the "connect to submit" popup on the submit button.
	  if (!crazy_check_fb_auth($facebook)) {
	  	drupal_add_js("jQuery(document).ready(function() { Drupal.behaviors.dsCrazyScripts.probably_unauthed = true; });", 'inline');
	  }

	  // If a user just created a new post, show the "share this" popup.
	  /* Cut 3/4/13...but it may come back.
	   *
	  if (isset($_SESSION['from_creation']) && !empty($_SESSION['from_creation'])) {
	  	// The SID is $_SESSION['from_creation']
	  	$sid = intval($_SESSION['from_creation']['sid']);
	  	$image = strval($_SESSION['from_creation']['image']);

	  	$p = json_encode($_SESSION['from_creation']);

	  	// Remove $_SESSION['from_creation']
	  	unset($_SESSION['from_creation']);

	  	// Show the popup
	  	drupal_add_js("jQuery(document).ready(function() { var my_post = " . $p . "; jQuery.fn.dsCrazyPopup('share', " . $sid . ", {'reload': true }); });", 'inline');
	  }*/

	  // Ignore the rest of this if we're not looking at a page that requires authentication.
	  $pages = unserialize(CRAZY_AUTH_PAGES);
	  if (!preg_match('#crazy/(' . implode('|', $pages) . ').*?#i', request_uri())) {
	  	return;
	  }
   }
}

function crazyshit_handle_fb_users($facebook) {
  global $user;

  try {
	  // Load the FBOAuth include file so we can use it's functions.
	  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');

	  // Conditions.
	  // 1. User already logged into Dosomething but not associed with FB.
	  //   - Associate user id with fb id if not associated.
	  // 2. User is not logged in but has a DS uid that is not associated.
	  //   - No way to detect that unless the email matches - in which case
	  //     connect them.
	  // 3. User is not logged in and has an associated fb id
	  //   - Log them in. Nothing else needed.
	  // 4. User is not logged in and has no DS uid.
	  //   - Create a new user and log them in.

	  if ($user->uid > 0) {
		$fbid = fboauth_fbid_load($user->uid);
		$fbuser = (object) $facebook->api("/$fbid");
	  }
	  else {
		$access_token = $facebook->getAccessToken();

		// Try and get the $fbuser object
	  	$fbuser = fboauth_graph_query('me', $access_token);
	  }

	  // In some cases we don't get an id. This will break everything so we wrap
	  // the whole shebang in an if.
	  if (isset($fbuser->id)) {
	    $uid = $user->uid;
	    $account = $user;
	    // Not sure if we should do this or not. Seems smarter than leaving it emtpy
	    // though.
	    if (!isset($fbuser->email)) {
	      $fbuser->email = $fbuser->id . '@facebook.com';
	    }
	    $found_users = user_load_multiple(array(), array('mail' => $fbuser->email));
	    $found_user = array_shift($found_users);

	    // Start our search for the appropriate condition.
	    // Condition 3.
	    if (!$user->uid && $uid && ($account = user_load($uid))) {
	      // The fb uid maps to a user. Unblock the user, then log them in.
	      user_user_operations_unblock(array($account->uid));
	      fboauth_login_user($account);
	    }
	    // Condition 4.
	    elseif (!$user->uid && !$uid && empty($found_user)) {
	      $account = fboauth_create_user($fbuser);
	      // Unblock the user.
	      $accounts = array($account->uid);
	      user_user_operations_unblock($accounts);
	      $account = user_load($account->uid);
	      // Then log them in.
	      fboauth_login_user($account);
	    }
	    // Condition 2.
	    elseif (!$user->uid && !$uid && !empty($found_user)) {
	      // We found a matching user. Associate the FB account with them. Then
	      // log them in.
	      fboauth_save($found_user->uid, $fbuser->id);
	      // Unblock the user.
	      user_user_operations_unblock(array($found_user->uid));
	      $account = user_load($found_user->uid);
	      fboauth_login_user($account);
	    }
	    // Condition 1.
	    elseif ($user->uid && !$uid) {
	      // The user is already logged into Dosomething. Associate
	      // TODO THIS MIGHT NEED SOME LOVE TO ENSURE WE DON'T MISSASSOCIATE USERS.
	      fboauth_save($user->uid, $fbuser->id);
	      // Make sure the user is unblocked.
	      user_user_operations_unblock(array($account->uid));
	    }
	  }
  }
  catch (Exception $e) {}
}

/**
 * Impliments hook_mail. Provides functionality to be triggered by key value.
 *
 * @param $key
 *   Value to customize message content.
 * @param $$message
 *   Array by reference to build message values to be sent.
 * @params
 *   Potential parameters to react to for specific $key values.
 */
function crazyshit_mail($key, &$message, $params) {

  switch ($key) {
    // Send a simple message from the contact form.
    case 'intro':
	
     $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }

      break;
  }
	
	
}

/**
 * Send email message speific to the Crazy project.
 *
 * @param $email
 *   Users email address.
 * @param $message
 *   The cotents of the message to be sent.
 * @return
 *   Boolean indicating success.
 */
function crazyshit_mail_send($email, $message) {
	
  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'crazyshit';
  $key = 'intro';

  // Specify 'to' and 'from' addresses.
  $to = $email;
  $from = 'crazy@dosomething.org';

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = $message;

  // The language of the e-mail. This will one of three values:
  // * user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // * global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // * language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  
  if ($result['result'] == FALSE) {	
    watchdog('crazyshit', 'Failed to send intro email message.');
  }
  
  return $result['result'];


}
