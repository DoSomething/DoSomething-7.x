<?php

// API key form ID -- for form_alter later down the page
if (!defined('API_KEY_FORM_ID')) define('API_KEY_FORM_ID', variable_get('ds_api_key_form_id', 725930)); // 724999 on local

// Master API key for DS developers -- lets us access any API
if (!defined('MASTER_API_KEY')) define('MASTER_API_KEY', variable_get('ds_api_master_api_key', '6d0bcf10b343040410d6120ac8bd472c'));

/**
 *  Implements hook_menu()
 */
function dosomething_public_api_menu() {
  $items['api/%'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'dosomething_public_api_run',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 *  Runs an API.  Takes the action from the URL, confirms its existence,
 *  and runs the processing function.
 */
function dosomething_public_api_run($action) {
  // API key is required
  $bypass = false;
  if (!empty($_GET['key'])) {
    $api_key = preg_replace('#[^A-Za-z0-9]#i', '', $_GET['key']);
    if ($api_key == MASTER_API_KEY) { 
      $bypass = true;
    }
    else {
      $query = "
        SELECT sid
        FROM `webform_submissions`
        WHERE MD5(`sid`) = '" . $api_key . "'";
      $key = db_query($query);
      $k = $key->fetchAll();
    }
  }

  if ((!$bypass && (isset($k) && count($k) == 0)) || empty($_GET['key'])) {
    drupal_json_output(array(
      'error' => t('You must have a valid API key to access this content.  Please go to http://www.dosomething.org/api to request a key.')
    ));

    drupal_exit();
  }

  $action = str_replace('.json', '', $action);
  if (file_exists(drupal_get_path('module', 'dosomething_public_api') . '/apis/' . $action . '.inc')) { 
    module_load_include('inc', 'dosomething_public_api', 'apis/' . $action);
    $function = 'dosomething_public_api_' . $action . '_api';
    if (function_exists($function)) {
      $function();
    }
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_public_api_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_public_api_key' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => null,
        'email' => null
      ),
      'template' => 'api-key',
    ),
  );
}

/**
 * Implements hook_mail().
 */
function dosomething_public_api_mail($key, &$message, $params) {
  switch ($key) {
    case 'api_key':
      $message['subject'] = t('Your DoSomething.org API key');
      $message['headers']['From'] = t('DoSomething.org <admin@dosomething.org>');
      $message['body'][] = theme('dosomething_public_api_key', $params);
      break;
  }
}

/**
 *  Implements hook_form_alter()
 */
function dosomething_public_api_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_' . API_KEY_FORM_ID) {
    $form['#submit'][] = 'dosomething_public_api_submit_email';
  }
}

function dosomething_public_api_submit_email($form, &$form_state) {
  $f = $form['#submission']->submitted;
  $sid = $form_state['values']['details']['sid'];

  $key = md5($sid);

  $params = array(
    'email' => $f['email_address'],
    'name' => $f['full_name'],
    'key' => $key
  );

  global $language;
  drupal_mail('dosomething_public_api', 'api_key', $params['email'], $language, $params);
}

/**
 *  Handles offset and limit for API's.  Default offset and limit is 0, 25.
 *  
 *  @param $api
 *    The API object, referenced through a db_select or EntityFieldQuery.
 *
 *  @param $default_offset
 *    Default 0.  Set higher to start the result set higher.
 *
 *  @param $default_limit
 *    Default 25.  Set higher to show more results.
 *
 *  @return
 *    Nothing.  This function alters the $api object.
 */
function dosomething_public_api_handle_offset_and_limit(&$api, $default_offset = 0, $default_limit = 25) {
  $range = array($default_offset, $default_limit);

  if (!empty($_GET['offset'])) {
    // Offset
    $offset = intval($_GET['offset']);
    $range[0] = $offset;
  }

  if (!empty($_GET['limit'])) {
    // Limit
    $limit = intval($_GET['limit']);
    $range[1] = $limit;
  }

  $api->range($range[0], $range[1]);
}

/**
 *  Filters data by dates.  Offers two options: Single date and comma-separated date.
 *  A single date will return data that was affected on that particular date
 *  Two comma-separated dates will return data that was affected in the range between the two dates.
 *
 *  @param $api
 *    An API object, referenced through a db_select or EntityFieldQuery
 *
 *  @param $dates
 *    The date(s) to search by.  The dates will be sent through strtotime(), so they should be in
 *    English language format (e.g. "today", "yesterday", "October 1, 2012"...)
 *
 *  @param $field_type
 *    The field type through which to search.  Accepts "condition" (for db_select)
 *    or "propertyCondition" (for EntityFieldQuery).
 *
 *  @param $column
 *    The column to compare the dates against.
 *
 *  @param $column_type ("int" or "date")
 *    "int" does direct timestamp comparisons.  "date" will transfer it into full-date timestamps
 *    for non-integer fields.    
 *
 *  @return
 *    Nothing.  This function alters the $api object.
 */
function dosomething_public_api_date_sort(&$api, $dates, $field_type, $column, $column_type = 'int') {
  $created = strval(htmlspecialchars(trim($dates)));
  if (!empty($created)) {
    list($start, $end) = explode(',', $created);
    $btw = array();
    $s = $e = '';
    if ($column_type == 'date') {
      $s = date('Y-m-d 00:00:00', strtotime($start));
      $e = date('Y-m-d 00:00:00', strtotime($end));
    }
    else {
      $s = strtotime($start);
      $e = strtotime($end);
    }

    // If we have a start and end date to filter by, show anything between those dates
    if ($s && $e) {
      $btw = array($s, $e);

      if ($field_type == 'fieldCondition') {
        $api->{$field_type}($column, 'value', $btw, 'BETWEEN');
      }
      else {
        $api->{$field_type}($column, $btw, 'BETWEEN');
      }
    }

    // If we only have a start date, show action guides started on that date.
    else if ($s) {
      if ($field_type == 'fieldCondition') {
        $api->{$field_type}($column, 'value', $s, '=');
      }
      else {
        $api->{$field_type}($column, $s, '=');
      }
    }
  }
}