<?php
/**
 * @file
 * Code for the dosomething_beta module.
 */
define('DOSOMETHING_MOMM_LEGACY_NID', 731098);
define('DOSOMETHING_MOMM_BETA_NID', 850);
define('DOSOMETHING_MOMM_BETA_PATH', 'campaigns/mind-my-money');

/**
 * Implements hook_menu().
 */
function dosomething_beta_menu() {
  $items = array();

  $items['admin/config/dosomething/beta'] = array(
    'title' => t('Beta connection'),
    'description' => 'Admin form to test Beta connection',
    'page callback' => 'dosomething_beta_status_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 * Handles redirects from legacy campaigns to corresponding beta campaigns.
 */
function dosomething_beta_init() {
  $current_path = current_path();

  // We only need redirect for legacy MOMM campaign, so if this isn't it, exit.
  if ($current_path != 'node/' . DOSOMETHING_MOMM_LEGACY_NID) { return; }

  // If user is an admin, allow access to legacy node regardless.
  if (user_access('administer modules')) { return; }

  // If anonymous user, or user is not signed up:
  if ( !user_is_logged_in() || !dosomething_beta_signup_exists(DOSOMETHING_MOMM_BETA_NID) ) {
    // Redirect to beta node (needs to be a relative path).
    drupal_goto(DOSOMETHING_MOMM_BETA_PATH);
  }
}

/**
 * Page callback for beta connection status page.
 */
function dosomething_beta_status_page() {
  $output = "<h3>Status</h3>";
  if (!db_set_active('beta')) {
    return "Beta db configuration not found. :(";
  }
  db_set_active();
  if (!dosomething_beta_signup_test_connection()) {
    $output .= "Beta db connection not found.";
    return $output;
  }
  $output .= 'Beta db connection successful.';
  $output .= render(drupal_get_form('dosomething_beta_signup_exists_form'));
  return $output;
}

/**
 * Checks if a signup record exists in the beta app.
 *
 * @param int $nid
 *   The beta node nid of the signup record to check.
 * @param int $uid
 *   Optional - the user uid of signup record to check.
 *   If not given, uses global $user->uid.
 *
 * @return mixed
 *   The sid of signup exists, FALSE if it doesn't exist.
 */
function dosomething_beta_signup_exists($nid, $uid = NULL) {
  // Initialize variable to return.
  $exists = FALSE;
  try {
    // Connect to beta db.
    db_set_active('beta');
    if ($uid == NULL) {
      global $user;
      $uid = $user->uid;
    }
    $result = db_select('dosomething_signup', 's')
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->fields('s', array('sid'))
      ->execute();
    $sid = $result->fetchField(0);
    // If a sid was found, return it.
    if (is_numeric($sid)) {
      $exists = $sid;
    }
    // Set back to legacy db.
    db_set_active();
  }
  catch (Exception $e) {
    watchdog('dosomething_beta', $e, array(), WATCHDOG_ERROR);
  }
  return $sid;
}

/**
 * Form constructor to check if a signup record exists in the beta app.
 *
 * Primary purpose is for admin testing DB connection and data.
 */
function dosomething_beta_signup_exists_form($form, &$form_state) {
  $form = array();
  $form['query'] = array(
    '#type' => 'fieldset',
    '#title' => 'Query Beta Signups',
  );
  $form['query']['nid'] = array(
    '#title' => 'Beta NID',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 6,
    '#default_value' => DOSOMETHING_MOMM_BETA_NID,
  );
  $form['query']['uid'] = array(
    '#title' => 'User UID',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 6,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
    '#attributes' => array(
      'class' => array('btn'),
    ),
  );
  return $form;
}

/**
 * Form submission handler for dosomething_beta_signup_exists_form().
 *
 * @see dosomething_beta_signup_exists_form()
 */
function dosomething_beta_signup_exists_form_submit(&$form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $uid = $form_state['values']['uid'];
  // Check for signup.
  $sid = dosomething_beta_signup_exists($nid, $uid);
  if ($sid) {
    $message = t("Signup sid %sid exists for uid %uid and nid %nid", array(
      '%sid' => $sid,
      '%uid' => $uid,
      '%nid' => $nid,
    ));
    drupal_set_message($message);
    return;
  }
  $message = t("No signup found for uid %uid and nid %nid", array(
    '%uid' => $uid,
    '%nid' => $nid,
  ));
  drupal_set_message($message);
}

/**
 * Runs a test in beta db to make sure we're connected.
 *
 * @return bool
 *   TRUE if connected to beta app, FALSE if not (table wasn't found).
 */
function dosomething_beta_signup_test_connection() {
  $exists = FALSE;
  // Connect to beta db.
  try {
    db_set_active('beta');
    // Look for a table that only exists in beta app.
    $exists = db_table_exists('dosomething_reportback_log');
    // Set back to legacy db.
  }
  catch (Exception $e) {
    watchdog('dosomething_beta', $e, array(), WATCHDOG_ERROR);
  }
  db_set_active();
  return $exists;
}

/**
 * Returns data array if MOMM signup data exists for given $uid.
 */
function dosomething_beta_get_signup_data($uid) {
  $data = FALSE;
  try {
    db_set_active('beta');
    $result = db_select('dosomething_signup', 'n')
      ->fields('n')
      ->condition('uid', $uid)
      ->condition('nid', DOSOMETHING_MOMM_BETA_NID)
      ->execute()
      ->fetchAssoc();
    if ($result && $result['data']) {
      $data = unserialize($result['data']);
    }
  }
  catch (Exception $e) {
    watchdog('dosomething_beta', $e, array(), WATCHDOG_ERROR);
  }
  db_set_active();
  return $data;
}

/**
 * Updates the MOMM signup data for given user UID in beta signups table.
 *
 * @param int $uid
 *â€‚ User uid of signup record.
 * @param array $data
 *  Data to store for this signup.
 */
function dosomething_beta_update_signup_data($uid, $data) {
  $data = serialize($data);
  try {
    db_set_active('beta');
    // Update the data field:
    $update = db_update('dosomething_signup')
    ->fields(array(
      'data' => $data,
      ))
    ->condition('uid', $uid)
    ->condition('nid', DOSOMETHING_MOMM_BETA_NID)  
    ->execute();
  }
  catch (Exception $e) {
    watchdog('dosomething_beta', $e, array(), WATCHDOG_ERROR);
  }
  db_set_active();
}

/**
 * Writes redirect records to point to relevant beta fact_page nodes.
 */
function dosomething_beta_redirect_fact_pages() {
  $values = array(
    29140 => 'facts/11-facts-about-alcohol-abuse',
    29308 => 'facts/11-facts-about-animal-cruelty',
    337422 => 'facts/11-facts-about-animal-testing',
    29324 => 'facts/11-facts-about-arts-education',
    332488 => 'facts/11-facts-about-blizzards',
    29151 => 'facts/11-facts-about-body-image',
    570847 => 'facts/11-facts-about-bp-oil-spill',
    610381 => 'facts/11-facts-about-bullying',
    29306 => 'facts/11-facts-about-child-abuse',
    128467 => 'facts/11-facts-about-child-soldiers',
    723140 => 'facts/11-facts-about-circus-animal-abuse',
    29297 => 'facts/11-facts-about-cyber-bullying',
    585709 => 'facts/11-facts-about-depression',
    128671 => 'facts/11-facts-about-domestic-and-dating-violence',
    29149 => 'facts/11-facts-about-driving-under-influence',
    29197 => 'facts/11-facts-about-e-waste',
    29222 => 'facts/11-facts-about-earthquakes',
    40099 => 'facts/11-facts-about-eating-disorders',
    29276 => 'facts/11-facts-about-education-america',
    407272 => 'facts/11-facts-about-education-and-poverty-america',
    29215 => 'facts/11-facts-about-energy',
    723635 => 'facts/11-facts-about-giraffes',
    29114 => 'facts/11-facts-about-global-poverty',
    29278 => 'facts/11-facts-about-global-warming',
    83295 => 'facts/11-facts-about-guns',
    29172 => 'facts/11-facts-about-healthy-living',
    443256 => 'facts/11-facts-about-heroin',
    727693 => 'facts/11-facts-about-high-school-dropout-rates',
    721571 => 'facts/11-facts-about-holocaust',
    727880 => 'facts/11-facts-about-homeless-teens',
    728328 => 'facts/11-facts-about-human-trafficking',
    29237 => 'facts/11-facts-about-hurricane-katrina',
    729010 => 'facts/11-facts-about-hurricane-sandy',
    29231 => 'facts/11-facts-about-hurricanes',
    644221 => 'facts/11-facts-about-national-parks',
    277755 => 'facts/11-facts-about-pollution',
    29314 => 'facts/11-facts-about-puppy-mills',
    311174 => 'facts/11-facts-about-racial-discrimination',
    29277 => 'facts/11-facts-about-recycling',
    128608 => 'facts/11-facts-about-refugees',
    727781 => 'facts/11-facts-about-smoking',
    728341 => 'facts/11-facts-about-steroids',
    440196 => 'facts/11-facts-about-suicide',
    330072 => 'facts/11-facts-about-sweatshops',
    302686 => 'facts/11-facts-about-teen-pregnancy',
    408281 => 'facts/11-facts-about-teens-and-alcohol',
    727849 => 'facts/11-facts-about-teens-and-drug-use',
    326001 => 'facts/11-facts-about-teens-and-self-esteem',
    332501 => 'facts/11-facts-about-tornadoes',
    29302 => 'facts/11-facts-about-tsunamis',
    332503 => 'facts/11-facts-about-volcanoes',
    29212 => 'facts/11-facts-about-water-around-world',
    645905 => 'facts/11-facts-about-water-developing-world',
  );
  foreach ($values as $legacy_nid => $beta_path) {
    $redirect = new stdClass();
    redirect_object_prepare(
      $redirect, 
      array(
        'source' => 'node/' . $legacy_nid, 
        'source_options' => array(),
        'redirect' => $beta_path, 
        'redirect_options' => array(), 
        'language' => LANGUAGE_NONE, 
      ) 
    );
    redirect_save($redirect);
  }
}
