<?php

/**
 * @file
 * Handles custom services for DoSomething.org
 */

include_once('dosomething_services.features.inc');

/**
 * Implements hook_field_widget_form_alter().
 *
 * Provides specific functionality for handling webform fields that fail when
 * being submitted through Services.
 *
 * One such field was the picture field (field_webform_pictures). Most of the code
 * found here was taken from file_field_widget_form(). Main difference is that
 * we're ensuring our image items got added to the array.
 */
function dosomething_services_field_widget_form_alter(&$element, &$form_state, $context) {
  // Check that type is 'image'
  $type = $context['field']['type'];
  $is_type_image = $type == 'image';
  
  // Checking 'programmed' and 'submitted' flags which indicate to us that it's
  // likely been submitted through the webform_service
  $is_services_submitted = $form_state['programmed'] && $form_state['submitted'];
  
  // Finally check that there are field_webform_pictures that were submitted
  $has_field_webform_pictures_fid = isset($form_state['values']['submitted']['field_webform_pictures'][LANGUAGE_NONE][0]['fid']);

  if ($is_type_image && $is_services_submitted && $has_field_webform_pictures_fid) {
    // Start to code found from file_field_widget_form(), only that we're
    // ensuring elements get added to the array for each image submitted
    $instance = $context['instance'];
    $field = $context['field'];

    $defaults = array(
      'fid' => 0,
      'display' => !empty($field['settings']['display_default']),
      'description' => '',
    );

    // Programmatically building the struct for this element that would've been
    // found when processing through file_field_widget_form()
    $elem = array(
      '#entity_type' => 'webform_submission_entity',
      '#bundle' => 'campaign_report_back',
      '#field_name' => 'field_webform_pictures',
      '#language' => 'und',
      '#field_parents' => array('submitted'),
      '#columns' => array(
        'fid',
        'alt',
        'title',
        'width',
        'height',
      ),
      '#title' => 'Pictures'
    );

    // Then similar to what's found in file_field_widget_form(), essentially 
    // use the managed_file type, but extended with some enhancements.
    $element_info = element_info('managed_file');
    $elem += array(
      '#type' => 'managed_file',
      '#upload_location' => file_field_widget_uri($field, $instance),
      '#upload_validators' => file_field_widget_upload_validators($field, $instance),
      '#value_callback' => 'file_field_widget_value',
      '#process' => array_merge($element_info['#process'], array('file_field_widget_process')),
      '#progress_indicator' => $instance['widget']['settings']['progress_indicator'],
      // Allows this field to return an array instead of a single value.
      '#extended' => TRUE,
    );

    // **IMPORTANT** Key difference in code is here where we unconditionally 
    // add to the $element array for each picture item
    $item_count = count($form_state['values']['submitted']['field_webform_pictures'][LANGUAGE_NONE]);
    for ($delta = 0; $delta < $item_count; $delta++) {
      $element[$delta] = $elem;
      $element[$delta]['#default_value'] = $defaults;
      $element[$delta]['#weight'] = $delta;
      $element[$delta]['#required'] = ($elem['#required'] && $delta == 0);
    }

    // end to field_webform_pictures handling and to code found from file_field_widget_form()
  }
}

/**
 * Implements hook_services_resources().
 */
function dosomething_services_services_resources() {
  return array(
    'user' => array(
      'actions' => array(
        'fblogin' => array(
          'help' => 'Provide login services from a Facebook account',
          'callback' => '_dosomething_services_facebook_login',
          'args' => array(
            array(
              'name' => 'access_token',
              'type' => 'string',
              'description' => t('User\'s access token received from Facebook authorization'),
              'source' => array('data' => 'access_token'),
              'optional' => FALSE,
            ),
          ),
          'access callback' => 'services_access_menu',
          'file' => array('type' => 'module', 'module' => 'dosomething_services', 'name' => 'dosomething_services'),
        ),
      ),
    ),
    'file' => array(
      'actions' => array(
        'create_media' => array(
          'help' => 'Create a media file from accepted URLs',
          'callback' => '_dosomething_services_create_media',
          'args' => array(
            array(
              'name' => 'url',
              'type' => 'string',
              'description' => t('URL for media source from accepted location (ex: youtube, vimeo, etc)'),
              'source' => array('data' => 'url'),
              'optional' => FALSE,
            ),
          ),
          'access callback' => '_dosomething_services_create_media_access',
          'access arguments' => array('create_media'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_services_resources_alter().
 *
 * Replace the default user creation callback with ours.
 */
function dosomething_services_services_resources_alter(&$resources, $endpoint) {
  // Only execute these changes on the dosomething default 'rest' endpoint
  if ($endpoint->name == 'rest') {
    // If email verification is enabled, bypass it with our custom callback.
    if (variable_get('user_email_verification', TRUE)) {
      $resources['user']['actions']['register']['callback'] = '_dosomething_services_user_resource_create';
    }

    // file/create_raw override
    $resources['file']['actions']['create_raw']['callback'] = '_dosomething_services_file_create_raw';

    // system/connect callback override
    $resources['system']['actions']['connect']['callback'] = '_dosomething_services_system_resource_connect';

    // user/login override
    $resources['user']['actions']['login']['callback'] = '_dosomething_services_user_resource_login';
    // user/login arg for email login
    $resources['user']['actions']['login']['args'][] = array(
      'name' => 'email',
      'type' => 'string',
      'description' => 'A valid email address',
      'source' => array('data' => 'email'),
      'optional' => TRUE,
    );
    // username arg now becomes optional
    foreach ($resources['user']['actions']['login']['args'] as &$user_arg) {
      if ($user_arg['name'] == 'username') {
        $user_arg['optional'] = TRUE;
        break;
      }
    }
  }
}

/**
 * Receives the user's access_token to either log the user into an account
 * or create one if necessary.
 *
 * Code is similar to what's found in dosomething_login_action_ds_connect() from
 * the dosomething_login module. Only differences:
 *  - Returning the $fbuser object if the fboauth_graph_query() fails, so that
 *    external clients can respond accordingly
 *  - drupal_set_message calls removed
 *  - Always logging the user in after fboauth_create_user()
 */
function _dosomething_services_facebook_login($access_token) {
  global $user;
  $user_return = NULL;

  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');

  $fbuser = fboauth_graph_query('me', $access_token);

  // Query failed if no id is set, or if error is set
  if (!isset($fbuser->id) || isset($fbuser->error)) {
    return $fbuser;
  }

  // Loads a Drupal uid given a Facebook ID.
  $uid = fboauth_uid_load($fbuser->id);

  // If not currently logged in, but user's logged in with facebook before
  if (!$user->uid && $uid && ($account = user_load($uid))) {
    fboauth_login_user($account);

    $user_return = $account;
  }

  // If fb email matches an existing email, bind them together and login
  elseif (!empty($fbuser->email) && ($account = array_shift(user_load_multiple(array(), array('mail' => $fbuser->email))))) {
    fboauth_save($account->uid, $fbuser->id);

    if (fboauth_login_user($account)) {
      dosomething_login_save_profile_pic($user->uid, $fbuser->id);

      $user_return = $account;
    }
  }
  // If user is logged in to drupal already, associate the two accounts
  else {
    // If the user is already logged in, associate the two accounts.
    if ($user->uid) {
      fboauth_save($user->uid, $fbuser->id);
      if ($fb_friends = fboauth_graph_query('me/friends', $access_token)) {
        dosomething_login_facebook_friend_process($user->uid, $fb_friends->data); // TODO: needed?
      }
      dosomething_login_save_profile_pic($user->uid, $fbuser->id);  // TODO: needed?

      $user_return = $user;
    }
    // Otherwise, register a new account for the user
    else {
      $account = fboauth_create_user($fbuser);
      $account = user_load($account->uid);

      if (fboauth_login_user($account)) {
        $user_return = $account;
      }
    }
  }

  // Return user object and session id and name if successful
  if ($user_return && $user_return->uid) {
    user_login_finalize();

    $return = new stdClass();
    $return->sessid = session_id();
    $return->session_name = session_name();
    _dosomething_services_add_more_session_info($return);

    $return->user = $user_return;

    return $return;
  }
  else {
    $error_obj = new stdClass();
    $error_obj->error = t('Error in Facebook login.');
    $error_obj->user_obj = $user_return;
    $error_obj->user_uid = $user_return->uid;

    return $error_obj;
  }
}

/**
 * Helper function to create return object for form errors
 */
function _dosomething_services_form_error($msg, $code) {
  $error_obj = new stdClass();
  $error_obj->form_errors = array('error' => $msg);
  return services_error($msg, $code, $error_obj);
}

/**
 * Overriding _user_resource_create() to be able to set a user's profile2 data
 * and properly send the registration email.
 */
function _dosomething_services_user_resource_create($account) {
  // Check for required fields
  if (empty($account['name'])) {
    return _dosomething_services_form_error(t('Username is required.'), 406);
  }
  else if (empty($account['pass'])) {
    return _dosomething_services_form_error(t('A password is required.'), 406);
  }
  else if (empty($account['mail'])) {
    return _dosomething_services_form_error(t('A valid e-mail address is required.'), 406);
  }
  else if (empty($account['profile_main']['field_user_birthday'][LANGUAGE_NONE][0]['value']['date'])) {
    return _dosomething_services_form_error(t('Birthday is required.'), 406);
  }
  else if (empty($account['profile_main']['field_user_first_name'][LANGUAGE_NONE][0]['value'])) {
    return _dosomething_services_form_error(t('First Name is required.'), 406);
  }
  else if (empty($account['profile_main']['field_user_last_name'][LANGUAGE_NONE][0]['value'])) {
    return _dosomething_services_form_error(t('Last Name is required.'), 406);
  }

  // Find user by name or by mail
  $old_user = user_load_by_name($account['name']);
  if (!$old_user) {
    $old_user = user_load_by_mail($account['mail']);
    if ($old_user) {
      return _dosomething_services_form_error(t('An account with that e-mail address already exists'), 406);
    }
  }
  else {
    return _dosomething_services_form_error(t('An account with that username already exists'), 406);
  }
  
  // No existing account found, so create a new one
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $new_user = new stdClass;
  $new_user->name = $account['name'];
  $new_user->pass = user_hash_password($account['pass']);
  $new_user->mail = $account['mail'];

  $bday = strtotime($account['profile_main']['field_user_birthday'][LANGUAGE_NONE][0]['value']['date']);
  if ($bday !== FALSE && dosomething_login_person_is_over_age($bday, 26)) {
    $new_user->roles[20] = 'old person';
  }

  $new_user->status = 1;

  user_save($new_user);

  // Populate user's profile2 data
  $new_profile = profile2_create(array('type' => 'main'));
  $new_profile->uid = $new_user->uid;

  if (isset($account['profile_main']['field_user_first_name'][LANGUAGE_NONE][0]['value'])) {
    $new_profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $account['profile_main']['field_user_first_name'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($account['profile_main']['field_user_last_name'][LANGUAGE_NONE][0]['value'])) {
    $new_profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $account['profile_main']['field_user_last_name'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($account['profile_main']['field_user_mobile'][LANGUAGE_NONE][0]['value'])) {
    $new_profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $account['profile_main']['field_user_mobile'][LANGUAGE_NONE][0]['value'];
  }
  // Birthday
  $bday_obj = new DateObject($bday);
  $new_profile->field_user_birthday[LANGUAGE_NONE][0]['value'] = $bday_obj->format(DATE_FORMAT_DATETIME);
  // Over 13
  $new_profile->field_user_is_over13[LANGUAGE_NONE][0]['value'] = (int) dosomething_login_person_is_over_age($bday, 13);
  // Membership anniversary - Expects Unix timestamp
  $new_profile->field_user_anniversary[LANGUAGE_NONE][0]['value'] = time();

  profile2_save($new_profile);

  // Profile is now setup, so safe to send email to user
  _user_mail_notify('register_no_approval_required', $new_user);

  // Login the user
  _user_resource_login($account['name'], $account['pass']);

  // Build the return data
  $return = new stdClass();
  $return->user = array('uid' => $new_user->uid);
  if ($uri = services_resource_uri(array('user', $new_user->uid))) {
    $return->user['uri'] = $uri;
  }
  $return->user['mail'] = $account['mail'];

  // Add session information to the return value
  $return->sessid = session_id();
  $return->session_name = session_name();
  _dosomething_services_add_more_session_info($return);

  return $return;
}

/**
 * Modify the output from _user_resource_login() to give more session info
 */
function _dosomething_services_user_resource_login($username, $password, $email) {
  // If no email or username, then nothing to log in with
  if (empty($username) && empty($email)) {
    $return = services_error(t('No \'username\' or \'email\' sent. Need one to login.'), 401);
  }
  // If there's a username, then use normal login process
  elseif (!empty($username)) {
    try {
      $return = _user_resource_login($username, $password);

      // Successful login. Append more info to the returned object
      _dosomething_services_add_more_session_info($return);
    }
    catch (Exception $e) {
      if ($e->getCode() == 401) {
        // If login threw a 401 and input is a valid email, try to login as email instead
        if (valid_email_address($username)) {
          $email = $username;
          $bLoginAsEmail = true;
        }
        else {
          watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));
          $return = services_error(t('Wrong username or password.'), 401);
        }
      }
    }
  }
  // If there's an email and no username
  elseif (!empty($email) && valid_email_address($email)) {
    $bLoginAsEmail = true;
  }

  // Attempt to load user by email and authenticate based on that account
  if ($bLoginAsEmail) {
    $account = user_load_by_mail($email);
    if (count($account) > 0 && $account->name) {
      $return = _user_resource_login($account->name, $password);

      // Successful login. Append more info to the returned object
      _dosomething_services_add_more_session_info($return);
    }
    else {
      $return = services_error(t('No account found with this email address.'), 401);
    }
  }

  return $return;
}

/**
 * Modify the output from _system_resource_connect() to give more session info
 */
function _dosomething_services_system_resource_connect() {
  $return = _system_resource_connect();
  $return->session_name = session_name();
  _dosomething_services_add_more_session_info($return);
  
  return $return; 
}

/**
 * Submit media to parse and process. If successful, returns submitted file object.
 */
function _dosomething_services_create_media($url) {
  $return = new stdClass();

  if (!empty($url) && valid_url($url)) {
    try {
      $file_obj = media_parse_to_file($url);
      $return = $file_obj;
    }
    catch (Exception $e) {
      $return->error = $e->getMessage();
    }
  }
  else {
    // Invalid URL, return error
    $return->error = t('Invalid URL');
  }

  return $return;
}

/**
 * Access callback for the file/create_media resource
 */
function _dosomething_services_create_media_access($op = 'view', $args = array()) {
  if ($op == 'create_media') {
    return user_access('save file information');
  }

  return FALSE;
}

/**
 * Overriding _file_resource_create_raw() to make file updates before returning
 * results to the user.
 */
function _dosomething_services_file_create_raw() {
  // Do regular create_raw process
  $return = _file_resource_create_raw();

  // Then update file status and resave
  foreach ($return as $file_info) {
    if ($fid = $file_info['fid']) {
      if ($file = file_load($fid)) {
        // By default, file is saved as temporary file. Changing its status and
        // resaving will make it permanent (and viewable in admin/content/file)
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
      }
    }
  }

  return $return;
}

/**
 * Append additional session information onto our return objects
 */
function _dosomething_services_add_more_session_info(&$obj) {
  $obj->session_cache_expire = session_cache_expire();
  $obj->session_cache_limiter = session_cache_limiter();
  $obj->session_get_cookie_params = session_get_cookie_params();
}