<?php

include_once('teams.features.inc');

/**
 * Implements hook_form_alter().
 */
function teams_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') !== 0 || empty($form_state['webform_entity']) || $form_state['webform_entity']['bundle'] != 'campaign_sign_up') {
    return;
  }

  $entity_form = &$form['submitted'];
  $node = $form['#node'];

  // we only want to add the submit and validate functions if teams is turned on
  if (isset($node->field_teams_enable) && $node->field_teams_enable[LANGUAGE_NONE][0]['value']) {
    // make sure we didn't delete a field
    if (isset($node->field_signup_magic_fields)) {
      $values = array();
      foreach ($node->field_signup_magic_fields[LANGUAGE_NONE] as $field) {
        $values[] = $field['value'];
      }
      $wanted = array('field_team_name', 'field_leader_info');

      // we only want to add submit and validate functions if the relevant fields are turned on
      if (count(array_intersect($values, $wanted)) == count($wanted)) {
        $form['#validate'][] = 'teams_form_validate';
        $form['#submit'][] = 'teams_form_submit';
      }
      else if (in_array('field_team_name', $values)) {
        $form['#validate'][] = 'teams_form_validate_group_only';
        $form['#submit'][] = 'teams_form_submit_group_only';
      }
    }
  }
}

function teams_form_validate_group_only(&$form, &$form_state) {
  if (isset($form['#submission']->submitted)) {
    $sub = $form['#submission']->submitted;
    $team_name = $sub['field_team_name'][LANGUAGE_NONE][0]['value'];
    if (empty($team_name)) {
      form_set_error('field_team_name', t('You must enter a team name.'));
    }
    else {
      $form_state['values']['submitted']['group_group'][LANGUAGE_NONE][0]['value'] = 1;
    }
  }
}

function teams_form_submit_group_only(&$form, &$form_state) {
  $sid = $form_state['values']['details']['sid'];
}

function teams_form_validate(&$form, &$form_state) {
  if (isset($form['#submission']->submitted)) {
    $sub = $form['#submission']->submitted;
    $team_name = $sub['field_team_name'][LANGUAGE_NONE][0]['value'];
    $leader_info = $sub['field_leader_info'][LANGUAGE_NONE][0]['value'];

    if (!empty($team_name) && !empty($leader_info)) {
      form_set_error('field_team_name', t('You may not attempt to join and create a team at the same time.'));
    }
    else if (empty($team_name) && empty($leader_info)) {
      form_set_error('field_team_name', t('You must either join a team or create a team.'));
    }
    else if (!empty($team_name) && teams_team_exists($sub['field_team_name'][LANGUAGE_NONE][0]['value'], $form['#node']->nid)) {
      form_set_error('field_team_name', t('A team with that name has already been created.'));
    }
    else if (!empty($leader_info) && ($form_state['teams_leader'] = dosomething_general_load_user_by_mail_or_cell($leader_info)) === FALSE) {
      form_set_error('field_leader_info', t('A team leader with that email/cell does not exist.'));
    }
    else {
      if (!empty($team_name)) {
        $form_state['values']['submitted']['group_group'][LANGUAGE_NONE][0]['value'] = 1;
      }
    }
  }
}

function teams_form_submit(&$form, &$form_state) {
  $sub = $form_state['webform_entity']['submission']->submitted;
  $sid = $form_state['values']['details']['sid'];
  $nid = $form_state['values']['details']['nid'];
  $team_name = $sub['field_team_name'][LANGUAGE_NONE][0]['value'];
  $friends = $sub['field_team_invite'][LANGUAGE_NONE];

  if (!empty($team_name)) {
    $gid = og_get_group('webform_submission_entity', $sid, true)->gid;
    // invite friends
    foreach ($friends as $index => $friend) {
      if (is_int($index)) {
        teams_add_member($friend['value'], $gid);
      }
    }
  }
  else {
    $groups = og_get_entity_groups('user', $form_state['teams_leader']);
    $groups = og_load_multiple($groups);
    foreach ($groups as $group) {
      $entity = $group->getEntity();
      if (isset($entity->bundle) && $entity->bundle == 'campaign_sign_up') {
        if ($entity->nid == $nid) {
          og_group($group->gid, array(
            'state' => OG_STATE_ACTIVE,
          ));
        }
      }
    }
  }
}

function teams_team_exists($team_name, $webform_nid) {
  $query = db_select('webform_submissions', 'wf');
  $query->addJoin('INNER', 'og', 'og', 'etid=sid');
  $query->addJoin('INNER', 'field_data_field_team_name', 'name', 'name.entity_id=wf.sid');
  $query->condition('wf.nid', $webform_nid, '=');
  $query->condition('name.field_team_name_value', $team_name, '=');
  $query->addField('wf', 'sid');

  $result = $query->execute()->rowCount();
  return (bool)$result;
}

/**
 * Implements hook_module_implements_alter().
 */
function teams_module_implements_alter(&$implementations, $hook) {
  // We can only disable our elements if we come after webform_entity, make sure we do.
  if ($hook == 'form_alter' && isset($implementations['teams'])) {
    $group = $implementations['teams'];
    unset($implementations['teams']);
    $implementations['teams'] = $group;
  }
}

/**
 * Implements hook_menu().
 */
function teams_menu() {
  $items = array();

  // My team page for campaigns
  $items['my-team/%'] = array(
    'page callback' => 'teams_my_team',
    'page arguments' => array(1),
    'access callback' => true,
  );

  $items['teams/join/%/%'] = array(
    'page callback' => 'teams_join_by_url',
    'page arguments' => array(2,3),
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function teams_block_info() {
  $blocks = array();

  $blocks['team_management'] = array(
    'info' => t('DoSomething Team Management'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function teams_block_view($delta = '') {
  global $user;
  $block = array();

  if ($delta != 'team_management') return;

  if (arg(0) == 'team' && is_numeric(arg(2))) {
    $gid = og_get_group('webform_submission_entity', arg(2))->gid;
    $is_admin = og_user_access($gid, 'administer group');

    $uids = teams_get_member_uids($gid);

    $list_elements = array();
    foreach ($uids as $uid) {
      $name = dosomething_general_get_full_name($uid);
      if ($name == ' ') $name = '{name unavailable}';

      $name = '<div class="member-name">'.$name.'</div>';

      if ($is_admin && $uid != $user->uid) {
        $name .= drupal_render(drupal_get_form('teams_remove_member_form', $gid, $uid));
      }

      $list_elements[] = array(
        'data' => $name,
        'id' => 'team-member-'.$uid,
        'class' => array('team-member'),
      );
    }

    $block['content']['team_members'] = array(
      '#prefix' => '<div class="team-member-list"><h3>Team Members</h3>',
      '#suffix' => '</div>',
    );
    $block['content']['team_members']['toggle-admin'] = array(
      '#type' => 'markup',
      '#markup' => l('Remove members', '', array(
        'attributes' => array('id' => 'teams-remove-members'),
          'fragment' => ' ',
          'external' => TRUE,
        )
      ),
    );
    $block['content']['team_members']['users'] = array(
      '#theme' => 'item_list',
      '#attributes' => array(
        'class' => 'members-list',
      ),
      '#items' => $list_elements,
    );

    $block['content']['add-form-description'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="team-add-members-wrapper">',      
      '#markup' => '<h3>INVITE FRIENDS</h3><p>Enter your friends\' email address to invite them to join the team. Make sure they know the email address of the team leader--they\'ll need that to join.</p>',
    );
    $block['content']['add-form'] = drupal_get_form('teams_add_member_form', $gid);
    $block['content']['notification'] = array(
      '#type' => 'container',
      '#suffix' => '</div>',
      '#attributes' => array(
        'id' => 'teams-notification-area',
      ),
    );
    $block['content']['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'teams') . '/teams.js',
      ),
    );
  }
  return $block;
}

function teams_get_member_uids($gid) {
  $query = db_select('og_membership', 'ogm');
  $query->addJoin('inner', 'users', 'u', 'etid=uid');
  $query->condition('entity_type', 'user', '=');
  $query->condition('gid', $gid, '=');
  $query->fields('u', array('uid'));

  $results = $query->execute()->fetchAllAssoc('uid', PDO::FETCH_ASSOC);
  $uids = array_keys($results);
  return $uids;
}

function teams_add_member_form($form, &$form_state, $gid) {
  $form['friend'] = array(
    '#type' => 'textfield',
    '#title' => 'Friend\'s email',
    '#size' => 16,
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invite',
    '#ajax' => array(
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
      'event' => 'click',
      'callback' => 'teams_ajax_add_member',
      'wrapper' => 'teams-notification-area',
      'method' => 'html',
    ),
  );

  return $form;
}

function teams_remove_member_form($form, &$form_state, $gid, $uid) {
  $form['uid'] = array(
    '#type' => 'hidden',
    '#default_value' => $uid,
    '#value' => $uid,
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Remove',
    '#ajax' => array(
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
      'event' => 'click',
      'callback' => 'teams_ajax_remove_member',
      'wrapper' => 'team-member-'.$uid,
    ),
  );

  return $form;
}

function teams_ajax_add_member($form, $form_state) {
  if (isset($form_state['values']['friend'])) {
    $friend = $form_state['values']['friend'];
    $gid = $form_state['values']['gid'];
    return teams_add_member($friend, $gid);
  }
  return 'Please include your friend\'s cell or email.';
}

function teams_add_member($friend, $gid) {
  global $user, $language;
  $type = 'email';
  if (!valid_email_address($friend)) {
    if (!$number = dosomething_general_valid_cell($friend)) {
      return 'Please enter a cell number or email address.';
    }
    else {
      $type = 'phone';
      $friend = $number;
    }
  }

  $submission = og_load_entity_from_group($gid);
  $submission_form = node_load($submission->nid);
  $campaign = og_load_entity_from_group($submission_form->group_audience[LANGUAGE_NONE][0]['gid']);
  $campaign_url = drupal_lookup_path('alias', 'node/' . $campaign->nid);

  if ($account = dosomething_general_load_user_by_mail_or_cell($friend)) {
    og_group($gid, array(
      'entity' => $account,
      'state' => OG_STATE_ACTIVE,
    ));

    if ($type == 'email') {
      $params = array(
        'account' => $user,
        'link' => url("my-team/$campaign_url", array(
          'absolute' => true,
        )),
        'campaign_name' => $campaign->title,
        'type' => 'team',
      );
      drupal_alter('teams_added_email', $params, $gid);
      drupal_mail('teams', 'added', $friend, $language, $params);
    }
    else {
      sms_send($friend, $message);
    }

    // TODO: add the username to the team list. via an ajax command
    return $friend . ' has been added to your team. Feel free to add more!';
  }
  else {
    $profile = profile2_load_by_user($user, 'main');
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
    $first = $profile_wrapper->field_user_first_name->value();
    $last = $profile_wrapper->field_user_last_name->value();

    if ($type == 'email') {
      $group_hash = teams_get_group_hash($gid);
      $params = array(
        'account' => $user,
        'link' => url("teams/join/$gid/$group_hash", array(
          'absolute' => true,
        )),
        'campaign_name' => $campaign->title,
        'type' => 'team',
      );
      drupal_alter('teams_invite_email', $params, $gid);
      drupal_mail('teams', 'invite', $friend, $language, $params);
    }
    else {
      teams_store_number($number, $gid);
      $message = "You have been invited to join $first $last's DoSomething team. Reply TEAMJOIN to join!";
      sms_send($number, $message);
    }
    return $friend . ' has been invited to join your team. Feel free to add more!';
  }
}

function teams_ajax_remove_member($form, $form_state) {
  $uid = $form_state['values']['uid'];
  $gid = $form_state['values']['gid'];

  if ($account = user_load($uid)) {
    og_ungroup($gid, 'user', $account);
    return '';
  }
}

function teams_store_number($number, $gid) {
  $data = array(
    'gid' => $gid,
    'number' => $number,
  );
  drupal_write_record('teams_invited', $data);
}

function teams_join_by_url($gid, $hash, $uid = FALSE) {
  if ($hash === teams_get_group_hash($gid)) {
    $account = NULL;
    if (!$uid) {
      global $user;
      $account = clone $user;
    }
    else {
      $account = user_load($uid);
    }

    og_group($gid, array(
      'state' => OG_STATE_ACTIVE,
      'entity' => $account,
    ));

    $sub = og_load_entity_from_group($gid);
    $owner = user_load($sub->uid);
    $form = node_load($sub->nid);
    $campaign = og_load_entity_from_group($form->group_audience[LANGUAGE_NONE][0]['gid']);
    $url = drupal_lookup_path('alias', 'node/' . $campaign->nid);

    $params = array(
      'account' => $user,
      'link' => url("my-team/$url", array(
        'absolute' => true,
      )),
      'campaign_name' => $campaign->title,
      'type' => 'team',
    );
    drupal_alter('teams_joined_email', $params, $gid);
    drupal_mail('teams', 'joined', $owner->mail, $_GLOBALS['language'], $params);

    drupal_goto('my-team/' . $url);
  }
}

function teams_get_group_hash($gid) {
  $sub = og_load_entity_from_group($gid);
  return substr(md5($sub->sid . $sub->nid . 'bananas!'), 0, 8);
}

/**
 * Menu callback for my-team/%.
 */
function teams_my_team($url_base) {
  if (!user_is_logged_in()) {
    $return = '<h1 class="title">Oops.</h1>';
    return $return.'Please <a href="/user?destination='.$url_base.'">log in</a> or go to <a href="/'.$url_base.'">www.dosomething.org/'.$url_base.'</a> to sign up.';
  }
  else {
    $team = teams_get_my_teams_for_url($url_base);
    if (!empty($team)) {
      drupal_goto('team/'.$url_base.'/'.array_shift($team));
    }
    else {
      $return = '<h1 class="title">Oops.</h1>';
      return $return.'Please <a href="/'.$url_base.'">sign up</a> to create a team.';
    }
  }
}

/**
 * Access callback for checking if a user is part of a group for
 * a given base URL campaign.
 */
function teams_in_group($url_base) {
  return teams_get_my_teams_for_url($url_base) != array();
}

function teams_get_my_teams_for_url($url) {
  static $sid;
  global $user;
  if (!isset($sid)) {
    $campaign_nid = teams_get_nid_from_path($url);
    $campaign_gid = og_get_group('node', $campaign_nid)->gid;

    $query = db_select('og_membership', 'o1');
    $query->addJoin('INNER', 'node', 'n', 'o1.etid=n.nid');
    $query->addJoin('RIGHT', 'webform_submissions', 'wf', 'wf.nid=n.nid');
    $query->addJoin('INNER', 'og', 'o2', 'o2.etid=wf.sid');
    $query->addJoin('INNER', 'og_membership', 'o3', 'o3.gid=o2.gid');
    $query->condition('o3.entity_type', 'user', '=');
    $query->condition('o3.etid', $user->uid, '=');
    $query->condition('o1.gid', $campaign_gid, '=');
    $query->condition('n.type', 'campaign_sign_up', '=');
    $query->fields('wf', array('sid'));
    $result = $query->execute()->fetchAllAssoc('sid', PDO::FETCH_ASSOC);

    $sid = array_keys($result);
  }
  return $sid;
}

function teams_get_nid_from_path($url) {
  $campaign_path = drupal_lookup_path('source', $url);
  if (strpos($campaign_path, 'node') === 0) {
    $campaign_nid = explode('/', $campaign_path);
    $campaign_nid = $campaign_nid[1];
  }
  return $campaign_nid;
}

/**
 * Implements hook_mail().
 */
function teams_mail($key, &$message, $params) {
  switch ($key) {
    case 'invite':
      $params['full_name'] = teams_full_name($params['account']->uid);
      $message['subject'] = t('@name has invited you to join their DoSomething @type', array('@name' => $params['full_name'], '@type' => $params['type']));
      $message['body'][] = drupal_html_to_text(theme('teams_invite', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'added':
      $params['full_name'] = teams_full_name($params['account']->uid);
      $message['subject'] = t('@name has added you to their DoSomething @type', array('@name' => $params['full_name'], '@type' => $params['type']));
      $message['body'][] = drupal_html_to_text(theme('teams_added', $params));
      $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
      break;
    case 'joined':
      $params['full_name'] = teams_full_name($params['account']->uid);
      $message['subject'] = t('@name has joined your @type for @campaign', array('@name' => $params['full_name'], '@type' => $params['type'], '@campaign' => $params['campaign_name']));
      $message['body'][] = drupal_html_to_text(theme('teams_joined', $params));
      break;
  }
}

function teams_full_name($uid) {
  $name = dosomething_general_get_full_name($uid);
  if ($name == ' ') {
    $name = user_load($uid)->name;
  }
  return $name;
}

/**
 * Implements hook_theme().
 */
function teams_theme($existing, $type, $theme, $path) {
  return array(
    'teams_invite' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'teams-invite',
    ),
    'teams_added' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'teams-added',
    ),
    'teams_joined' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'teams-joined',
    ),
  );
}

function teams_conductor_sms_keywords() {
  $keywords = array(
    'jointeam' => 'teams_sms_join',
    'jointem' => 'teams_sms_join',
    'jointeams' => 'teams_sms_join',
    'joinateam' => 'teams_sms_join',
    'join team' => 'teams_sms_join',
    'join tem' => 'teams_sms_join',
    'joi team' => 'teams_sms_join',
    'join teams' => 'teams_sms_join',
    'join a team' => 'teams_sms_join',
    'joina team' => 'teams_sms_join',

    'startteam' => 'teams_sms_create',
    'starteam' => 'teams_sms_create',
    'staream' => 'teams_sms_create',
    'sarteam' => 'teams_sms_create',
    'sartteam' => 'teams_sms_create',
    'Start Team' => 'teams_sms_create',
    'Star Team' => 'teams_sms_create',
    'start' => 'teams_sms_create',
    'star' => 'teams_sms_create',

    'invite' => 'teams_sms_invite',
    'invited' => 'teams_sms_invite',
    'invte' => 'teams_sms_invite',
    'invitee' => 'teams_sms_invite',
    'envite' => 'teams_sms_invite',
  );

  module_load_include('inc', 'teams', 'teams.hunt_mobile');
  foreach (teams_report_backs() as $keyword => $form) {
    $keywords[$keyword] = $keyword;
  }

  return $keywords;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function teams_ctools_plugin_directory($owner, $plugin_type) {
  if (in_array($owner, array('conductor', 'ctools'))) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function teams_ctools_plugin_type() {
  return array(
    'team_progress' => array(
      'load themes' => TRUE,
      'cache' => TRUE,
    ),
  );
}

/**
 * Implements hook_default_conductor_default_workflows().
 */
function teams_default_conductor_workflows() {
  // we will return a workflows array
  $workflows = array();

  // initialize our first workflow
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'teams_sms_join';
  $workflow->title = 'Teams SMS Join';
  $workflow->description = 'Join a team via SMS.';
  $workflow->api_version = '1.0';

  // start making activities!
  $activity = $workflow->newActivity('start');
  teams_xy($activity, 1);
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('check_name');

  // check if they have a user account with a name filled out
  $activity = $workflow->newActivity('teams_check_user');
  teams_xy($activity, 2);
  $activity->name = 'check_name';
  $activity->title = 'Check if they have a profile and name field.';
  $activity->inputs = array('start');
  $activity->outputs = array('ask_name');

  // ask for their name to populate their profile
  $activity = $workflow->newActivity('ds_conditional_sms_prompt');
  teams_xy($activity, 3);
  $activity->name = 'ask_name';
  $activity->title = 'Ask for their first name if we do not yet have it.';
  $activity->question = 'What is your first name?';
  $activity->conditional_check = 'check_name:has_name';
  $activity->isset_type = 'notset';
  $activity->check_type = 'isset';
  $activity->inputs = array('check_name');
  $activity->outputs = array('team_leader');

  // ask for the team leader email/cell
  $activity = $workflow->newActivity('ds_conditional_sms_prompt');
  teams_xy($activity, 4);
  $activity->name = 'team_leader';
  $activity->title = 'Ask for team leader email/cell';
  $activity->question = 'Tell us your team leader\'s email or cell #. Let them know to make sure they have this info on their DoSomething.org account!';
  $activity->conditional_check = 'check_name:is_invited';
  $activity->isset_type = 'notset';
  $activity->check_type = 'isset';
  $activity->inputs = array('ask_name');
  $activity->outputs = array('signature_remover');

  $activity = $workflow->newActivity('sms_strip_signature');
  teams_xy($activity, 5);
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array('team_leader');
  $activity->outputs = array('save_join');

  $activity = $workflow->newActivity('teams_join_team');
  teams_xy($activity, 6);
  $activity->name = 'save_join';
  $activity->title = 'Save the join to the team.';
  $activity->inputs = array('signature_remover');
  $activity->outputs = array('end');

  // end!
  $activity = $workflow->newActivity('end');
  teams_xy($activity, 7);
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('save_join');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;



  // initialize our first workflow
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'teams_sms_create';
  $workflow->title = 'Teams SMS Create';
  $workflow->description = 'Create a team via SMS.';
  $workflow->api_version = '1.0';

  // start making activities!
  $activity = $workflow->newActivity('start');
  teams_xy($activity, 1);
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('check_name');

  // check if they have a user account with a name filled out
  $activity = $workflow->newActivity('teams_check_user');
  teams_xy($activity, 2);
  $activity->name = 'check_name';
  $activity->title = 'Check if they have a profile and name field.';
  $activity->inputs = array('start');
  $activity->outputs = array('ask_name');

  // ask for their name to populate their profile
  $activity = $workflow->newActivity('ds_conditional_sms_prompt');
  teams_xy($activity, 3);
  $activity->name = 'ask_name';
  $activity->title = 'Ask for their first name if we do not yet have it.';
  $activity->question = 'What is your first name?';
  $activity->conditional_check = 'check_name:has_name';
  $activity->isset_type = 'notset';
  $activity->check_type = 'isset';
  $activity->inputs = array('check_name');
  $activity->outputs = array('team_name');

  // ask for the team name
  $activity = $workflow->newActivity('sms_prompt');
  teams_xy($activity, 4);
  $activity->name = 'team_name';
  $activity->title = 'Ask for team name';
  $activity->question = 'What would you like your team\'s name to be? Be creative. There can only be one team with this name, and you can\'t change it later!';
  $activity->inputs = array('ask_name');
  $activity->outputs = array('signature_remover');

  $activity = $workflow->newActivity('sms_strip_signature');
  teams_xy($activity, 5);
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array('team_name');
  $activity->outputs = array('save_join');

  $activity = $workflow->newActivity('teams_create_team');
  teams_xy($activity, 6);
  $activity->name = 'save_join';
  $activity->title = 'Save the team.';
  $activity->inputs = array('signature_remover');
  $activity->outputs = array('end');

  // end!
  $activity = $workflow->newActivity('end');
  teams_xy($activity, 7);
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('save_join');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;



  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'teams_sms_invite';
  $workflow->title = 'Teams SMS Invite';
  $workflow->description = 'Invite people to a team via SMS.';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  teams_xy($activity, 1);
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('get_info');

  $activity = $workflow->newActivity('sms_prompt');
  teams_xy($activity, 2);
  $activity->name = 'get_info';
  $activity->title = 'Get Info';
  $activity->question = 'Give us the email or cell of someone you would like to invite to your group.';
  $activity->inputs = array('start');
  $activity->outputs = array('process');

  $activity = $workflow->newActivity('teams_invite');
  teams_xy($activity, 3);
  $activity->name = 'process';
  $activity->title = 'Process a team join';
  $activity->inputs = array('get_info');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  teams_xy($activity, 4);
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('process');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;


  module_load_include('inc', 'teams', 'teams.hunt_mobile');
  $report_backs = teams_report_backs();
  foreach ($report_backs as $keyword => $form) {
    $workflow = new ConductorWorkflow;
    $workflow->wid = 'new';
    $workflow->name = $keyword;
    $workflow->title = $keyword;
    $workflow->description = 'Report back for '.$keyword;
    $workflow->api_version = '1.0';

    $activity = $workflow->newActivity('start');
    teams_xy($activity, 1);
    $activity->name = 'start';
    $activity->title = 'Start';
    $activity->inputs = array();
    $activity->outputs = array('submit');

    $activity = $workflow->newActivity('teams_report_back');
    teams_xy($activity, 2);
    $activity->name = 'submit';
    $activity->title = 'Fill out report form';
    $activity->inputs = array('start');
    $activity->outputs = array('end');
    $activity->nid = $form['nid'];
    $activity->cid = $form['cid'];
    $activity->response = $form['response'];
    $activity->base_url = 'hunt';
    $activity->value = $form['value'];

    $activity = $workflow->newActivity('end');
    teams_xy($activity, 3);
    $activity->name = 'end';
    $activity->title = 'End';
    $activity->inputs = array('submit');
    $activity->outputs = array();

    $workflows[$workflow->name] = $workflow;

  }

  return $workflows;
}

/**
 * Helper function to increase X and Y by an amount for Conductor activities.
 * Objects in PHP are automatically pass by reference.
 */
function teams_xy($activity, $multiplier) {
  $num = 50*$multiplier;
  $activity->x = $num;
  $activity->y = $num;
}
