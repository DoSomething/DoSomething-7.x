<?php

include_once('teams.features.inc');

/**
 * Implements hook_menu().
 */
function teams_menu() {
  $items = array();

  // My team page for campaigns
  $items['my-team/%'] = array(
    'page callback' => 'teams_my_team',
    'page arguments' => array(1),
    'access callback' => 'teams_in_group',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function teams_block_info() {
  $blocks = array();

  $blocks['team_management'] = array(
    'info' => t('DoSomething Team Management'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function teams_block_view($delta = '') {
  global $user;
  $block = array();

  if ($delta != 'team_management') return;

  if (arg(0) == 'team' && is_numeric(arg(2))) {
    $gid = og_get_group('webform_submission_entity', arg(2))->gid;
    $is_admin = og_user_access($gid, 'administer group');

    $query = db_select('og_membership', 'ogm');
    $query->addJoin('inner', 'users', 'u', 'etid=uid');
    $query->condition('entity_type', 'user', '=');
    $query->condition('gid', $gid, '=');
    $query->fields('u', array('uid'));

    $results = $query->execute()->fetchAllAssoc('uid', PDO::FETCH_ASSOC);
    $uids = array_keys($results);

    $list_elements = array();
    foreach ($uids as $uid) {
      $name = dosomething_general_get_full_name($uid);
      if ($name == ' ') $name = '{name unavailable}';

      $name = '<div class="member-name">'.$name.'</div>';

      if ($is_admin && $uid != $user->uid) {
        $name .= drupal_render(drupal_get_form('teams_remove_member', $gid, $uid));
      }

      $list_elements[] = array(
        'data' => $name,
        'id' => 'team-member-'.$uid,
        'class' => array('team-member'),
      );
    }

    $block['content']['toggle-admin'] = array(
      '#type' => 'markup',
      '#markup' => l('Remove members', '', array(
        'attributes' => array('id' => 'teams-remove-members'),
          'fragment' => ' ',
          'external' => TRUE,
        )
      ),
    );
    $block['content']['users'] = array(
      '#theme' => 'item_list',
      '#attributes' => array(
        'class' => 'members-list',
      ),
      '#items' => $list_elements,
    );
    $block['content']['notification'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'teams-notification-area',
      ),
    );
    $block['content']['add-form'] = drupal_get_form('teams_add_member', $gid);

    $block['content']['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'teams') . '/teams.js',
      ),
    );
  }
  return $block;
}

function teams_add_member($form, &$form_state, $gid) {
  $form['friend'] = array(
    '#type' => 'textfield',
    '#title' => 'Friend\'s cell or email',
    '#size' => 16,
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add',
    '#ajax' => array(
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
      'event' => 'click',
      'callback' => 'teams_ajax_add_member',
      'wrapper' => 'teams-notification-area',
      'method' => 'html',
    ),
  );

  return $form;
}

function teams_remove_member($form, &$form_state, $gid, $uid) {
  $form['uid'] = array(
    '#type' => 'hidden',
    '#default_value' => $uid,
    '#value' => $uid,
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Remove',
    '#ajax' => array(
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
      'event' => 'click',
      'callback' => 'teams_ajax_remove_member',
      'wrapper' => 'team-member-'.$uid,
    ),
  );

  return $form;
}

function teams_ajax_add_member($form, $form_state) {
  global $user;
  if (isset($form_state['values']['friend'])) {
    $friend = $form_state['values']['friend'];
    $type = 'email';
    if (!valid_email_address($friend)) {
      if (!$number = dosomething_general_valid_cell($friend)) {
        return 'Please enter a cell number or email address.';
      }
      else {
        teams_store_number($number, $gid);
        $type = 'phone';
        $friend = $number;
      }
    }

    if ($account = dosomething_general_load_user_by_mail_or_cell($friend)) {
      og_group($form_state['values']['gid'], array(
        'entity' => $account,
        'state' => OG_STATE_ACTIVE,
      ));
      // TODO: add the username to the team list. via an ajax command
      return $friend . ' has been added to your team.';
    }
    else {
      $profile = profile2_load_by_user($user, 'main');
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
      $first = $profile_wrapper->field_user_first_name->value();
      $last = $profile_wrapper->field_user_last_name->value();

      if ($type == 'email') {
        $group_hash = teams_get_group_hash($gid);
        // send email with base_url/team/join/$gid/$hash
      }
      else {
        $message = "You have been invited to join $first $last's DoSomething team. Reply TEAMJOIN to join!";
        //sms_send($number, $message);
      }
      return $friend . ' has been invited to join your team.';
    }
  }
  return 'Please include your friend\'s cell or email.';
}

function teams_ajax_remove_member($form, $form_state) {
  $uid = $form_state['values']['uid'];
  $gid = $form_state['values']['gid'];

  if ($account = user_load($uid)) {
    og_ungroup($gid, 'user', $account);
    return '';
  }
}

function teams_store_number($number, $gid) {
  $data = array(
    'gid' => $gid,
    'number' => $number,
  );
  drupal_write_record('teams_invited', $data);
}

function teams_get_group_hash($gid) {
  $sub = entity_load('webform_submission_entity', array(og_load($gid)->etid));
  return substr(md5($sub->sid . $sub->nid . $sub->uid), 0, 8);
}

/**
 * Permission callback for checking if a user is an admin.
 * Duplicate the OG callback, just translate GID to entity_type
 * and etid.
 */
function teams_access_group($gid) {
  return true;
}

function teams_remove($gid, $uid) {
}

/**
 * Menu callback for my-team/%.
 */
function teams_my_team($url_base) {
  $team = teams_get_my_teams_for_url($url_base);
  drupal_goto('team/'.$url_base.'/'.array_shift($team));
}

/**
 * Access callback for checking if a user is part of a group for
 * a given base URL campaign.
 */
function teams_in_group($url_base) {
  return teams_get_my_teams_for_url($url_base) != array();
}

function teams_get_my_teams_for_url($url) {
  static $sid;
  global $user;
  if (!isset($sid)) {
    $campaign_nid = teams_get_nid_from_path($url);
    $campaign_gid = og_get_group('node', $campaign_nid)->gid;

    $query = db_select('og_membership', 'o1');
    $query->addJoin('INNER', 'node', 'n', 'o1.etid=n.nid');
    $query->addJoin('RIGHT', 'webform_submissions', 'wf', 'wf.nid=n.nid');
    $query->addJoin('INNER', 'og', 'o2', 'o2.etid=wf.sid');
    $query->addJoin('INNER', 'og_membership', 'o3', 'o3.gid=o2.gid');
    $query->condition('o3.entity_type', 'user', '=');
    $query->condition('o3.etid', $user->uid, '=');
    $query->condition('o1.gid', $campaign_gid, '=');
    $query->condition('n.type', 'campaign_sign_up', '=');
    $query->fields('wf', array('sid'));
    $result = $query->execute()->fetchAllAssoc('sid', PDO::FETCH_ASSOC);

    $sid = array_keys($result);
  }
  return $sid;
}

function teams_get_nid_from_path($url) {
  $campaign_path = drupal_lookup_path('source', $url);
  if (strpos($campaign_path, 'node') === 0) {
    $campaign_nid = explode('/', $campaign_path);
    $campaign_nid = $campaign_nid[1];
  }
  return $campaign_nid;
}

