<?php

/**
 * @file
 * Code for the Dosomething Campaign feature.
 */

include_once('dosomething_campaign.features.inc');

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {

  $items = array();

  $items['campaign/join/%'] = array(
    'page callback' => 'dosomething_campaign_join_page',
    'page arguments' => array(2),
    'access callback' => 'dosomething_campaign_join_page_access',
    'access arguments' => array(2),
    'file' => 'dosomething_campaign.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function dosomething_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'kiva_confirmation' => array(
      'path' => $path . '/templates',
      'template' => 'kiva_confirmation',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function dosomething_campaign_block_info() {
  $blocks = array();
  $blocks['kiva_signup'] = array(
    'info' => t('Kiva Campaign Signup Form'),
  );
  $blocks['kiva_confirmation'] = array(
    'info' => t('Kiva Campaign Signup Confirmation'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_campaign_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'kiva_signup':
      $block['content'] = drupal_render(drupal_get_form('dosomething_campaign_beta_signup_form', 729307));
      break;
    case 'kiva_confirmation':
      $block['content'] = theme('kiva_confirmation');
      break;
  }
  return $block;
}

/**
 * Implements hook_init().
 */
function dosomething_campaign_init() {
  // If we are viewing a node:
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == FALSE) {
    // Check if current path is a gated campaign, and route to either registration gate, join page, or the actual campaign.
    $node = menu_get_object();
    if ($node && $node->type == 'campaign' && $node->field_has_gate[LANGUAGE_NONE][0]['value'] == 1) {
      global $user;
      dosomething_campaign_redirector($user, $node->nid);
    }
  }
}

/**
 * Redirects given $user object to either the: 
 * - Campaign user/registration gate
 * - the join page
 * based on given $nid and whether or not the user has logged in and/or signed up yet.
 */
function dosomething_campaign_redirector($user, $nid) {
  // If anon user, redirect to user/destination?node=$campaign_nid
  if ($user->uid == 0) {
    drupal_goto('user/registration', array('query' => array('destination' => 'node/' . $nid)));
  }
  // Else if logged in user hasn't signed up (and is non-override), redirect to join page:
  else if (!dosomething_campaign_can_user_override_join($user) && !dosomething_campaign_is_user_signed_up($user->uid, $nid)) {
    // Redirect to the campaign join page.   
    drupal_goto('campaign/join/' . $nid); 
  }
}

/**
 * Access callback for join page.
 */
function dosomething_campaign_join_page_access($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  // Only should appear for gated signups:
  if (!dosomething_campaign_is_gated_signup_node($node)) {
    return FALSE;
  }
  global $user;
  // Check if user can access page unconditionally.
  if (dosomething_campaign_can_user_override_join($user)) {
    return TRUE;
  }
  // Otherwise, only grant access for logged in users.
  return $user->uid != 0;
}

/**
 * Implements hook_user_login.
 */
function dosomething_campaign_user_login(&$edit, $account) {
  // If the referring URL is a campaign signup gate, the loaded campaign node is returned.
  $campaign_node = dosomething_campaign_is_campaign_signup_gate($_SERVER['HTTP_REFERER']);
  if ($campaign_node) {
    // Execute campaign login signup function:
    dosomething_campaign_signup($account, $campaign_node);
  }
}

/**
 * Returns boolean of whether or not given loaded node is a campaign signup node.
 */
function dosomething_campaign_is_gated_signup_node($node) {
  return $node && $node->type == 'campaign' && $node->field_is_gate_login_signup[LANGUAGE_NONE][0]['value'] == 1;
}

/**
 * Checks if a URL is a campaign gate that should signup user on login, and returns the campaign node if so.
 *
 * @param $url
 *  String, URL to check.
 *
 * @return
 *   The loaded campaign node object if the destination is a campaign where is_gate_login_signup.  Returns FALSE otherwise.
 */
function dosomething_campaign_is_campaign_signup_gate($url) {
  // Check if given URL is a campaign gate.
  $destination = '?destination=node/';
  $user_registration_url = 'user/registration' . $destination;
  $user_login_url = 'user/login' . $destination;
  if (strpos($url, $user_registration_url) !== FALSE || strpos($url, $user_login_url) !== FALSE) {
    $nid = basename($url);
    $node = node_load($nid);
    // If this is a campaign with signup on login, return the node.
    if (dosomething_campaign_is_gated_signup_node($node)) {
      return $node;
    }
  }
  return FALSE;
}

/**
 * Handles a campaign signup via login through campaign gate.
 *
 * @param $account
 *  Account object of user who logged in.
 * @param $node
 *  Node object of campaign user is signing up for.
 */
function dosomething_campaign_signup($account, $node) {
  $nid = $node->nid;
  $user_signed_up = dosomething_campaign_is_user_signed_up($account->uid, $nid);
  if (!$user_signed_up) {
    dosomething_campaign_insert_signup($account->uid, $nid);
    $email = $account->mail;
    // Mailchimp signup:
    $mailchimp = $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'];
    if ($mailchimp && !empty($mailchimp)) {
      dosomething_subscribe_mailchimp_signup($email, $mailchimp);
    }
    // Mobilecommons signup:
    $mobilecommons = $node->field_mc_optin[LANGUAGE_NONE][0]['value'];
    if ($mobilecommons && !empty($mobilecommons)) {
      $cell = '';
      $user2 = profile2_load_by_user($account, 'main');
      $cell = field_get_items('profile2', $user2, 'field_user_mobile');
      $cell = $cell[0]['value'];
      if (!empty($cell)) {
        $response = dosomething_general_mobile_commons_subscribe($cell, $mobilecommons);
        watchdog('dosomething_campaign', 'cell = ' . $cell . ' opt_in = ' . $mobilecommons . ' response = ' . print_r($response, TRUE));
      }
    }
    // Mandrill mail:
    $mandrill = $node->field_mandrill_key[LANGUAGE_NONE][0]['value'];
    if ($mandrill && !empty($mandrill)) {
      dosomething_mandrill_dispatch($email, $mandrill);
    }
  }
}

/**
 * Inserts a record for given user UID and campaign node NID in dosomething_campaign_signups table.
 */
function dosomething_campaign_insert_signup($uid, $nid) {
  $signup = db_insert('dosomething_campaign_signups')
  ->fields(array(
    'uid' => $uid,
    'nid' => $nid,
    'timestamp' => REQUEST_TIME,
    ))
  ->execute();
}

/**
 * Returns boolean for if given user uid is signed up given campaign nid.
 */
function dosomething_campaign_is_user_signed_up($uid, $nid) {
  $signup = db_query('SELECT uid FROM {dosomething_campaign_signups} WHERE uid = :uid AND nid = :nid', array(':uid' => $uid, ':nid' => $nid))->fetchField();
  if ($signup) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Retuns boolean if given $user can access join and campaign pages regardless of signup.
 *
 * @param $user
 *  User object of user to check.
 *
 * @return boolean
 */
function dosomething_campaign_can_user_override_join($user) {
  return user_access('administer site configuration', $user);
}



/**
 * Form callback for signup beta form.
 */
function dosomething_campaign_beta_signup_form($form, &$form_state, $nid, $num_betas = 6) {
  $form['alpha_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your First Name:'),
    '#required' => TRUE,
  );
  $form['alpha_mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Cell #:'),
    '#required' => TRUE,
  );
  $form['alpha_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Email:'),
    '#required' => TRUE,
  );
  $form['beta_mobiles'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );
  for ($i = 0; $i < $num_betas; $i++) {
    $form['beta_mobiles']['beta_mobile_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t("Friend's cell #:"),
    );   
  }
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Share'),
  );
  return $form;
}

/**
 * Form validation callback for signup beta form.
 * @todo: Make dynamic?
 */
function dosomething_campaign_beta_signup_form_validate($form, &$form_state) {
  // Check for valid email address:
  if (!valid_email_address($form_state['values']['alpha_email'])) {
     form_set_error('alpha_email', t('Please provide a valid email address.'));
  }
  // Check for valid alpha cell:
  $alpha_mobile = $form_state['values']['alpha_mobile'];
  $alpha_mobile = preg_replace('#[^0-9]#', '', $alpha_mobile);
  if (!dosomething_general_valid_cell($alpha_mobile)) {
    form_set_error('alpha_mobile', t('Please provide a valid cell number.'));  
  }
  // Check for valid beta cell numbers:
  for ($i = 0; $i < 6; $i++) {
    if (!empty($form_state['values']['beta_mobile_' . $i])) {
      $beta_mobile = $form_state['values']['beta_mobile_' . $i];
      $beta_mobile = preg_replace('#[^0-9]#', '', $beta_mobile);
      if (!dosomething_general_valid_cell($beta_mobile)) {
        form_set_error('beta_mobile_' . $i, t('Please provide a valid cell number.'));  
      }
    }
  }
}

/**
 * Form submit callback for signup beta form.
 * @todo: Make dynamic?
 */
function dosomething_campaign_beta_signup_form_submit($form, &$form_state) {
  $args = array();

  $alpha_name = $form_state['values']['alpha_name'];
  $args['first_name'] = $alpha_name;

  $alpha_mobile = $form_state['values']['alpha_mobile'];
  $alpha_mobile = preg_replace('#[^0-9]#', '', $alpha_mobile);
  $alpha_email = $form_state['values']['alpha_email'];

  $beta_mobiles = array();
  // @todo: Make # of betas dymamic?  You could actually store the # of beta signups field on the campaign node.
  // Don't want to store it as a hidden form field in case anybody messes with it.
  for ($i = 0; $i < 6; $i++) {
    if (!empty($form_state['values']['beta_mobile_' . $i])) {
      $beta_mobile = $form_state['values']['beta_mobile_' . $i];
      $beta_mobile = preg_replace('#[^0-9]#', '', $beta_mobile);
      $beta_mobiles[] = $beta_mobile;
    }
  }

  // Load campaign node to get signup values.
  $nid = $form_state['values']['nid'];
  // @todo: Revisit this to make it dynamic.  For now, hardcoded to only work for Kiva campaign.
  if ($nid != 729307) {
    return;
  }

  // Call signup functions:
  $node = node_load($form_state['values']['nid']);
  $mailchimp_group = $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'];
  $alpha_optin = $node->field_campaign_alphas_campaign[LANGUAGE_NONE][0]['value'];
  $beta_optin =$node->field_campaign_betas_campaign[LANGUAGE_NONE][0]['value'];
  
  // Mailchimp Signup:
  dosomething_subscribe_mailchimp_signup($alpha_email, $mailchimp_group);

  // Send Mandrill transactional email message
  dosomething_mandrill_dispatch($alpha_email, '25women', $alpha_name);

  // Mobilecommons Alpha+Beta signup:
  $response = dosomething_general_mobile_commons_subscribe_with_friends($alpha_mobile, $alpha_optin, $beta_mobiles, $beta_optin, $args);
  watchdog('dosomething_campaign', 'Beta signup - Mobilecommons response = ' . print_r($response, TRUE)); 

  // Send to confirmation page with the relevant query string variables.
  drupal_goto('node/729332', array(
    'query' => array(
      'first_name' => $alpha_name, 
      'email' => $alpha_email,
    )
  ));
}
