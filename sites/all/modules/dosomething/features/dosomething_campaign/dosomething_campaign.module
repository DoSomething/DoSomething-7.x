<?php

/**
 * @file
 * Code for the Dosomething Campaign feature.
 */

include_once('dosomething_campaign.features.inc');
// Include Campaign-specific form callback functions:
include_once('includes/kiva.inc');
include_once('includes/momm.inc');
include_once('includes/tfj.inc');

/**
 * Implements hook_ctools_plugin_type().
 */
function dosomething_campaign_ctools_plugin_type() {
  return array(
    'signup_data_modal' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dosomething_campaign_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}
/**
 * Implements hook_theme().
 */
function dosomething_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'kiva_confirmation' => array(
      'path' => $path . '/templates',
      'template' => 'kiva_confirmation',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function dosomething_campaign_block_info() {
  $blocks = array();
  $blocks['kiva_signup'] = array(
    'info' => t('Kiva Campaign Signup Form'),
  );
  $blocks['kiva_confirmation'] = array(
    'info' => t('Kiva Campaign Signup Confirmation'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_campaign_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'kiva_signup':
      $block['content'] = drupal_render(drupal_get_form('dosomething_campaign_beta_signup_form', 729307));
      break;
    case 'kiva_confirmation':
      $block['content'] = theme('kiva_confirmation');
      break;
  }
  return $block;
}

/**
 * Handles a campaign signup via login through campaign gate.
 *
 * @param $account
 *â€‚ Account object of user who logged in.
 * @param $node
 *â€‚ Node object of campaign user is signing up for.
 */
function dosomething_campaign_signup($account, $node) {
  $nid = $node->nid;
  $user_signed_up = dosomething_signups_is_user_signed_up($account->uid, $nid);
  if (!$user_signed_up) {
    dosomething_signups_insert_signup($account->uid, $nid);
    $email = $account->mail;
    $user2 = profile2_load_by_user($account, 'main');
    // Mailchimp signup:
    $mailchimp = $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'];
    if ($mailchimp && !empty($mailchimp)) {
      dosomething_subscribe_mailchimp_signup($email, $mailchimp);
    }
    // Mobilecommons signup:
    $mobilecommons = $node->field_mc_optin[LANGUAGE_NONE][0]['value'];
    if ($mobilecommons && !empty($mobilecommons)) {
      $cell = '';
      $user2 = profile2_load_by_user($account, 'main');
      $cell = field_get_items('profile2', $user2, 'field_user_mobile');
      $cell = $cell[0]['value'];
      if (!empty($cell)) {
        $response = dosomething_general_mobile_commons_subscribe($cell, $mobilecommons);
        watchdog('dosomething_campaign', 'cell = ' . $cell . ' opt_in = ' . $mobilecommons . ' response = ' . print_r($response, TRUE));
      }
    }
    // Mandrill mail:
    $mandrill = $node->field_mandrill_key[LANGUAGE_NONE][0]['value'];
    $fname = field_get_items('profile2', $user2, 'field_user_first_name');
    $message['FNAME'] = $fname[0]['value'];
    if ($mandrill && !empty($mandrill)) {
      dosomething_mandrill_dispatch($email, $mandrill, $message);
    }
  }
}

/**
 * Stores the address fields from a signup form 
 * into the Campaign Signup Address List webform.
 */
function dosomething_campaign_submit_signup_address($data) {
  global $user;
  $submission = new stdClass;
  $submission->bundle = 'webform';
  // Just hardcodin' some webform nid's.
  $submission->nid = variable_get('campaign_signup_address_list_nid', 731111);
  $submission->data = array();
  $submission->uid = $user->uid;
  $submission->submitted = REQUEST_TIME;
  $submission->remote_addr = ip_address();
  $submission->is_draft = FALSE;
  $submission->sid = NULL;
  $wrapper = entity_metadata_wrapper('webform_submission_entity', $submission);
  // Just hardcodin some webform component cid's.
  $wrapper->value()->data[1]['value'][0] = $data['nid'];
  $wrapper->value()->data[2]['value'][0] = $data['address1'];
  $wrapper->value()->data[3]['value'][0] = $data['address2'];
  $wrapper->value()->data[4]['value'][0] = $data['city'];
  $wrapper->value()->data[5]['value'][0] = $data['state'];
  $wrapper->value()->data[6]['value'][0] = $data['zip'];
  $wrapper->value()->data[7]['value'][0] = $data['name'];
  // Not a typo, component 8 was deleted.
  $wrapper->value()->data[9]['value'][0] = $user->mail;
  $wrapper->save();
}
