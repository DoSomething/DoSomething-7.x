<?php
/**
 * @file
 * Code for the dosomething_schools feature.
 */

include_once('dosomething_schools.features.inc');

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_schools_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Render content for school top info section.
 */
function dosomething_schools_main_info($school_id) {
  global $user;
  $items = array();

  $school = entity_load('ds_school', array($school_id));
  $school = $school[$school_id];

  $member_link = '';
  if ($user->uid == 0) {
    $member_link = t('Become a member');
    $member_link .= l('Go', 'why-become-a-member', array('attributes' => array('class' => 'go-button')));
  }

  $clubs = dosomething_schools_clubs($school_id);
  $clubs_list = array();
  foreach ($clubs as $club) {
    $clubs_list[] = l($club['title'], 'node/' . $club['nid']);
  }

  $output = array(
    'container' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => 'dosomething-stats school',
      ),
      'left' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => 'left',
        ),
        'location' => array(
          '#markup' => $school->city . ', ' . $school->state,
          '#prefix' => '<div class="location">',
          '#suffix' => '</div>',
        ),
        'clubs' => array(
          '#theme' => 'item_list',
          '#items' => $clubs_list,
          '#attributes' => array(
            'class' =>  'clubs',
          ),
        ),
        'member_link' => array(
          '#markup' => $member_link,
          '#prefix' => '<div class="become-member">',
          '#suffix' => '</div>',
        ),
      ),
      'right' => array(
        'members_counter' => array(
          '#markup' => dosomething_schools_counter($school_id),
        ),
      ),
    ),
  );

  return $output;
}

/**
 * Return themed counter for members and actions for a school.
 */
function dosomething_schools_counter($school_id) {
  $items = array();

  $actions = dosomething_schools_done_it($school_id);
  $actions = array_merge($actions['projects'], $actions['report_backs']);
  $total_actions = count($actions);

  $items['total_actions'] = array(
    'title' => t('Total Actions'),
    'value' => $total_actions,
  );

  $member_count = dosomething_schools_member_count($school_id);

  $items['school_members'] = array(
    'title' => t('Do Something Members'),
    'value' => $member_count,
  );

  return theme('dosomething_stats_counter', array('items' => $items));
}


/**
 * Query for the total number of users with the school set on their profile.
 */
function dosomething_schools_member_count($school_id) {
  $query = db_select('field_data_field_school_reference', 's');
  $query->innerJoin('profile', 'p', 's.entity_id = p.pid');
  $query->innerJoin('users', 'u', 'p.uid = u.uid');
  $query->condition('s.entity_type', 'profile2', '=');
  $query->condition('s.bundle', 'main', '=');
  $query->condition('field_school_reference_target_id', $school_id, '=');
  $query->condition('u.status', '1', '=');
  $total = $query->countQuery()->execute()->fetchObject();
  $member_count = $total->expression;

  return $member_count;
}


/**
 * Get clubs that reference a school.
 */
function dosomething_schools_clubs($school_id) {
  $query = db_select('field_data_field_school_reference', 's');
  $query->innerJoin('node', 'n', 's.entity_id = n.nid');
  $query->fields('n', array('nid', 'title'));
  $query->condition('s.field_school_reference_target_id', $school_id, '=');
  $query->condition('s.bundle', 'club', '=');
  $query->condition('n.status', '1', '=');
  $results = $query->execute();

  $clubs = array();
  while ($result = $results->fetchObject()) {
    $clubs[] = array(
      'title' => $result->title,
      'nid' => $result->nid,
    );
  }
  return $clubs;
}


/**
 * Returns gids of clubs that reference a school.
 */
function dosomething_schools_clubs_gids($school_id) {
  $clubs = dosomething_schools_clubs($school_id);

  $nids = array();
  foreach ($clubs as $club) {
    $nids[] = $club['nid'];
  }

  $gids = og_get_group_ids('node', $nids);
  $gids_string = implode(',', $gids);

  return $gids_string;
}


/**
 * Return projects and report backs related to a school.
 */
function dosomething_schools_done_it($school_id) {
  $cid = 'dosomething_schools_done_it_' . $school_id;
  $cache = cache_get($cid);
  $actions = array();
  if (!is_object($cache) || !isset($cache->data)) {
    $actions = array(
      'projects' => dosomething_schools_done_it_projects($school_id),
      'report_backs' => dosomething_schools_done_it_report_backs($school_id),
    );
    if (!is_object($cache)) {
      $cache = new stdClass();
      $cache->data = array();
    }
    $cache->data = $actions;
    cache_set($cid, $cache->data);
  }
  else {
    $actions = $cache->data;
  }

  return $actions;
}

/**
 * Render 'Done it' items for display.
 */
function dosomething_schools_done_it_display($school_id, $all = TRUE) {
  $items = dosomething_schools_done_it($school_id);

  // Create new array from data for use in render array output.
  $actions = array();
  foreach ($items as $type => $data) {
    if ($type == 'projects') {
      if (count($data)) {
        foreach ($data as $project) {
          $submission = entity_load('webform_submission_entity', array($project->sid));
          $submission = array_shift($submission);
          if ($submission) {
            $title = $submission->field_project_title;
            $image = $submission->field_picture;

            $action = new stdClass();
            $action->image = isset($image[LANGUAGE_NONE][0]['uri']) ? $image[LANGUAGE_NONE][0] : NULL;
            $action->uri = 'webform-submission/' .  $submission->sid;
            $action->title = isset($title[LANGUAGE_NONE][0]['value']) ? $title[LANGUAGE_NONE][0]['value'] : t('New Project');
            $actions[] = $action;
          }
        }
      }
    }
    if ($type == 'report_backs') {
      if (count($data)) {
        // We only need one submission per campaign report back, so
        // remove duplicates based on campaign entity id.
        $new_array = array();
        foreach ($data as $value) {
          $new_array[$value->etid] = $value;
        }
        $report_backs = array_values($new_array);

        foreach ($report_backs as $report_back) {
          $campaign = node_load($report_back->etid);
          $image = field_get_items('node', $campaign, 'field_campaign_main_image');

          $action = new stdClass();
          $action->title = $campaign->title;
          $action->image = isset($image[0]['uri']) ? $image[0] : NULL;
          $action->uri = 'node/' . $campaign->nid;
          $actions[] = $action;
        }
      }
    }
  }

  if (!count($actions)) {
    $empty_text = t('You have not done anything. Start a project or complete a campaign report back!');
    $element = array(
      '#type' => 'markup',
      '#markup' => $empty_text,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  else {
    // Set numbers of items, image style, and more link.
    if ($all) {
      $image_style = 'my_somethings';
      $more_link = '';
      $default_image = array(
        'uri' => 'sites/all/modules/dosomething/features/dosomething_projects_general/project-nopic-120x120.png',
        'title' => 'DoSomething Club',
        'alt' => 'DoSomething Clubs Default image',
      );
    }
    else {
      $more_link = count($actions) > 4 ? l('More >>', 'school/' . $school_id . '/done-it') : '';
      $actions = array_slice($actions, 0, 4);
      $image_style = 'project_related_thumb';
      $default_image = array(
        'uri' => 'sites/all/modules/dosomething/features/dosomething_projects_general/project-nopic-60x60.png',
        'title' => 'DoSomething Club',
        'alt' => 'DoSomething Clubs Default image',
      );
    }

    // Create render array for display.
    foreach ($actions as $delta => $action) {
      $element[$delta] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'views-row',
          ),
        ),
        'image' => array(
          '#theme' => 'image_formatter',
          '#item' => isset($action->image) ? $action->image : $default_image,
          '#image_style' => isset($action->image) ? $image_style : NULL,
          '#path' => array(
            'path' => $action->uri,
          ),
        ),
        'description' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'something-description',
            ),
          ),
          'title' => array(
            '#type' => 'link',
            '#title' => t($action->title),
            '#href' => $action->uri,
            '#prefix' => '<div class="views-field-title">',
            '#suffix' => '</div>',
          ),
        ),
      );
    }
    $element['more'] = array(
      '#prefix' => '<span class="more-link-right">',
      '#suffix' => '</span>',
      '#markup' => $more_link,
    );
  }
  return $element;
}


/**
 * Get project reports related to a school.
 */
function dosomething_schools_done_it_projects($school_id) {
  // Query for all projects report submissions by og members of a club
  // in which that club references the school.
  $query = db_select('field_data_field_school_reference', 's');
  $query->condition('s.field_school_reference_target_id', $school_id, '=');
  $query->condition('s.bundle', 'club', '=');
  $query->innerJoin('node', 'n', 's.entity_id = n.nid');
  $query->condition('n.status', '1', '=');
  $query->innerJoin('og', 'og', 'n.nid = og.etid');
  $query->innerJoin('og_membership', 'om', 'og.gid = om.gid');
  $query->condition('om.entity_type', 'user', '=');
  $query->condition('om.state', '1', '=');
  $query->innerJoin('webform_submissions', 'w', 'om.etid = w.uid');
  $query->condition('w.bundle', 'project_report', '=');
  $query->fields('w', array('sid', 'submitted'));
  $results = $query->execute();

  $items = array();
  while ($result = $results->fetchObject()) {
    $items[] = $result;
  }

  // Query for all project report submissions, submitted by
  // users with the school set on their profile.
  $query = db_select('field_data_field_school_reference', 's');
  $query->innerJoin('profile', 'p', 's.entity_id = p.pid');
  $query->innerJoin('webform_submissions', 'w', 'p.uid = w.uid');
  $query->innerJoin('users', 'u', 'p.uid = u.uid');
  $query->condition('s.field_school_reference_target_id', $school_id, '=');
  $query->condition('s.entity_type', 'profile2', '=');
  $query->condition('s.bundle', 'main', '=');
  $query->condition('w.bundle', 'project_report', '=');
  $query->condition('u.status', '1', '=');
  $query->fields('w', array('sid', 'submitted'));
  $results = $query->execute();

  while ($result = $results->fetchObject()) {
    $items[] = $result;
  }

  // Clean up any possible duplicates.
  return array_unique($items, SORT_REGULAR);
}


/**
 * Get campaign report backs related to a school.
 */
function dosomething_schools_done_it_report_backs($school_id) {
  // Query for all campaign report backs that reference the school.
  $query = db_select('webform_submissions', 'w');
  $query->innerJoin('field_data_field_webform_school_reference', 's', 'w.sid = s.entity_id');
  $query->innerJoin('node', 'n', 'w.nid = n.nid');
  $query->innerJoin('og_membership', 'om', 'w.nid = om.etid');
  $query->innerJoin('og', 'og', 'om.gid = og.gid');
  $query->fields('w', array('sid', 'submitted'));
  $query->fields('og', array('etid', 'label'));
  $query->condition('s.field_webform_school_reference_target_id', $school_id, '=');
  $query->condition('w.bundle', 'campaign_report_back', '=');
  $results = $query->execute();

  $items = array();
  while ($result = $results->fetchObject()) {
    $items[] = $result;
  }

  // Query for all campaign report back submissions, submitted by
  // users with the school set on their profile.
  $query = db_select('field_data_field_school_reference', 's');
  $query->innerJoin('profile', 'p', 's.entity_id = p.pid');
  $query->innerJoin('webform_submissions', 'w', 'p.uid = w.uid');
  $query->innerJoin('users', 'u', 'p.uid = u.uid');
  $query->innerJoin('node', 'n', 'w.nid = n.nid');
  $query->innerJoin('og_membership', 'om', 'w.nid = om.etid');
  $query->innerJoin('og', 'og', 'om.gid = og.gid');
  $query->condition('s.field_school_reference_target_id', $school_id, '=');
  $query->condition('s.entity_type', 'profile2', '=');
  $query->condition('s.bundle', 'main', '=');
  $query->condition('w.bundle', 'campaign_report_back', '=');
  $query->condition('u.status', '1', '=');
  $query->fields('w', array('sid', 'submitted'));
  $query->fields('og', array('etid', 'label'));
  $results = $query->execute();

  while ($result = $results->fetchObject()) {
    $items[] = $result;
  }

  // Clean up any possible duplicates.
  return array_unique($items, SORT_REGULAR);
}
