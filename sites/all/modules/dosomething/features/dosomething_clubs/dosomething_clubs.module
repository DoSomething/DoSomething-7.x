<?php
/**
 * @file
 * Code for the dosomething_clubs feature.
 */

include_once('dosomething_clubs.features.inc');

define('DSCLUBS_ADMIN_ROLE', 3);
define('CLUBS_MCOMMONS_CAMPAIGN', 122361);

/**
 * Implements hook_og_ui_get_group_admin_alter().
 * Removes unwanted items from node/%/group.
 */
function dosomething_clubs_og_ui_get_group_admin_alter(&$data, $gid) {
  unset($data['roles']);
  unset($data['permissions']);
}

/**
 *  Implements hook_views_query_alter()
 */
function dosomething_clubs_views_query_alter(&$view, &$query) {
  if ($view->name == 'clubs' && $view->current_display == 'clubs_directory') {
    if (!empty($query->where[1]['conditions'][3]['value']) && !isset($query->where[1]['conditions'][2]['value'][':minlat'])) {
      // Searches by school state reference, THEN includes the field club state
      $query->where[1]['conditions'][2] = array(
          'field' => 'field_data_field_club_state.field_club_state_value',
          'value' => $query->where[1]['conditions'][3]['value'],
          'operator' => 'in'
      );
    }
  }
}

function dosomething_clubs_js_alter(&$page) {
  if (preg_match('#\/clubs\/share\/([0-9]+)#i', request_uri())) {
    // This breaks google on the share page.
    unset($page['sites/all/modules/dosomething/dosomething_general/js/iframe-defer.js']);
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_clubs_theme() {
  return array(
    'dosomething_clubs_welcome_email' => array(
      'variables' => array(
        'name' => NULL,
        'clubname' => NULL,
        'clublink' => NULL,
        'andwelcome' => NULL
      ),
      'template' => 'dosomething-clubs-new-club-email',
    ),
    'dosomething_clubs_invite_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-invite-email',
    ),
    'dosomething_clubs_member_invite_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
        'their_name' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-member-invite-email',
    ),
    'dosomething_clubs_owner_change_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-owner-change-email',
    ),
    'dosomething_clubs_new_admin_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-member-made-admin',
    ),
    'dosomething_clubs_approved_email' => array(
      'variables' => array(
        'approver' => NULL,
        'approvee' => NULL,
        'club_name' => NULL,
        'club_link' => NULL
      ),
      'template' => 'dosomething-clubs-approved-email',
    ),
    'dosomething_clubs_join_request_email' => array(
      'variables' => array(
        'requester' => NULL,
        'leader' => NULL,
        'club_name' => NULL,
        'club_link' => NULL
      ),
      'template' => 'dosomething-clubs-join-request-email',
    ),
    'dosomething_clubs_tell_leader_invite' => array(
      'variables' => array(
        'leader' => NULL,
        'approvee' => NULL,
        'club_name' => NULL,
        'club_link' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-leader-invite-email',
    ),
    'dosomething_clubs_role_change' => array(
      'variables' => array(
        'club_link' => NULL,
        'club' => NULL,
        'name' => NULL
      ),
      'template' => 'dosomething-clubs-new-role-email',
    ),
    'dosomething_clubs_member_deleted' => array(
      'variables' => array(
        'club_link' => NULL,
        'club_name' => NULL,
        'name' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-member-deleted-email',
    ),
    'dosomething_clubs_invitee_joined' => array(
      'variables' => array(
        'club_link' => NULL,
        'club_name' => NULL,
        'name' => NULL,
        'approvee' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-invitee-joined',
    ),
    'dosomething_clubs_nag_leader' => array(
      'variables' => array(
        'club_link' => NULL,
        'club_name' => NULL,
        'name' => NULL,
        'leader' => NULL,
        'email' => NULL,
      ),
      'template' => 'dosomething-clubs-nag-leader',
    ),
    'dosomething_clubs_share_page' => array(
      'variables' => array(),
      'template' => 'dosomething-clubs-share-page',
    ),
    'dosomething_clubs_email_share_element' => array(
      'variables' => array(),
      'template' => 'dosomething-clubs-email-share-element',
    ),
  );
}

function dosomething_clubs_is_club_member($gid) {
  global $user;

  return og_is_member($gid) || user_access('administer group', $user);
}

/**
 * Implements hook_menu().
 */
function dosomething_clubs_menu() {
  $items['create-club-logged-out'] = array(
    'title' => 'Start A Club',
    'page callback' => 'dosomething_clubs_create_club_anonymous',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['clubs/responded'] = array(
    'page callback' => 'dosomething_clubs_responded_to_txt',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE
  );

  $items['clubs/edit-logo/%'] = array(
    'page callback' => 'dosomething_clubs_edit_logo',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in'
  );

  $items['clubs/remind-approve/%/%'] = array(
    'page callback' => 'dosomething_clubs_remind_approve',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in'
  );

  $items['club_admin/approve/nojs/%/%'] = array(
    'page callback' => 'dosomething_clubs_approve',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_member',
    'access arguments' => array(3),
  );
  $items['club_admin/approve/ajax/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/approve/nojs/%/%'];

  $items['club/join/%'] = array(
    'page callback' => 'dosomething_clubs_join_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['club/join-by-invite/%/%'] = array(
    'page callback' => 'dosomething_clubs_join_page',
    'page arguments' => array(2, TRUE, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['club/join-by-fb/%/%'] = array(
    'page callback' => 'dosomething_clubs_join_page',
    'page arguments' => array(2, false, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['club_admin/role-edit/nojs/%/%/%'] = array(
    'page callback' => 'dosomething_clubs_member_admin',
    'page arguments' => array(2,3,4,5),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_admin',
    'access arguments' => array(4),
  );
  $items['club_admin/role-edit/ajax/%/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/role-edit/nojs/%/%/%'];

  $items['club_admin/change-owner/nojs/%/%'] = array(
    'page callback' => 'dosomething_clubs_change_owner_process',
    'page arguments' => array(2,3,4),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_admin',
    'access arguments' => array(3),
  );

  $items['club_admin/change-owner/js/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/change-owner/nojs/%/%'];

  $items['myclub'] = array(
    'page callback' => 'dosomething_clubs_my_club_redirect',
    'access callback' => 'dosomething_clubs_member_has_a_club'
  );

  $items['myclub/edit'] = array(
    'page callback' => 'dosomething_clubs_my_club_redirect',
    'page arguments' => array('edit'),
    'access callback' => 'user_is_logged_in'
  );

  $items['clubs/share/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_clubs_add_users', 2),
    'access callback' => 'user_is_logged_in',
    'title' => t('Invite friends to your club'),
  );

  return $items;
}

/**
 *  Responds to a text message being answered through Clubs.
 */
function dosomething_clubs_responded_to_txt() {
  $num = $_REQUEST['phone_number_without_country_code'];
  if (dosomething_general_valid_cell($num)) {
    $account = dosomething_general_find_user_by_cell($num);
    if (!empty($account->uid)) {
      $q = db_select('node', 'n')
        ->fields('n', array('nid', 'uid'))
        ->condition('uid', $account->uid)
        ->condition('type', 'club')
        ->orderBy('created', 'DESC')
        ->range(0, 1)
        ->execute();

      $nodes = array();
      $r = $q->fetchAll();
      foreach ($r AS $key => $n) {
        $data = array(
          'nid' => $n->nid,
          'uid' => $n->uid,
          'timestamp' => REQUEST_TIME
        );
        drupal_write_record('dosomething_clubs_sms_response', $data);
      }
    }

    echo '<?xml version="1.0" encoding="UTF-8"?>
    <response>
     <reply>
      <text>
       <![CDATA[We are glad to know you are an active club.  Did you know we are giving away free pizza parties to clubs with 10+ members? Txt PIZZA for more.]]>
      </text>
     </reply>
    </response>';
    exit;
  }
}

/**
 *  Creates form to edit the club logo.
 */
function dosomething_clubs_edit_logo_form($form, $form_state, $nid) {
  $form = array();
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('New club photo')
  );

  $form['wrapper'] = array(
    '#markup' => '<div id="ajax-wrapper"></div>'
  );

  $form['upload_button'] = array(
    '#value' => t('Upload'),
    '#type' => 'submit',
    '#title' => t('Upload')
  );

  $form['#validate'][] = 'dosomething_clubs_validate_logo';
  $form['#submit'][] = 'dosomething_clubs_change_logo';

  return $form;
}

/**
 *  Validates club logo information
 */
function dosomething_clubs_validate_logo(&$form, &$form_state) {
  $errors = 0;
  $file = $_FILES['files']['name']['file'];
  $nid = $form_state['build_info']['args'][0];

  if (!isset($file) || empty($file)) {
    form_set_error('form', t("We're going to need a new club photo if you're hoping to change it."));
    $errors++;
  }

  if ($errors > 0) {
    drupal_goto(drupal_lookup_path('alias', 'node/' . $nid));
  }
}

/**
 *  Processes club logo change
 */
function dosomething_clubs_change_logo(&$form, &$form_state) {
  $nid = $form_state['build_info']['args'][0];
  $validators = array(
     #'file_validate_is_image' => array(),
     #'file_validate_image_resolution' => array(variable_get('btn_dimensions', '124x124')), 
     #'file_validate_size' => array(variable_get('btn_file_size', '5') * 1024),
  );

  $node = node_load($nid);

  // Save file
  $file = file_save_upload('file', $validators, 'public://'); 
  $file->status = 1;
  $nf = file_save($file);

    global $user;

  $info = image_get_info(drupal_realpath($nf->uri));
  // Fake the structure of the field_club_picture element.
  $node->field_club_picture = array(
    LANGUAGE_NONE => array(
      0 => array(
        'fid' => $nf->fid,
        'alt' => '',
        'title' => '',
        'width' => $info['width'],
        'height' => $info['height'],
        'uid' => $user->uid,
        'filename' => $nf->filename,
        'uri' => $nf->uri,
        'filemime' => $nf->filemime,
        'filesize' => $nf->filesize,
        'status' => $nf->status,
        'timestamp' => $nf->timestamp,
        'type' => $nf->type,
        'rdf_mapping' => array()
      )
    )
  );

  node_save($node);

  drupal_set_message(t("Image successfully changed!"));
  drupal_goto(drupal_lookup_path('alias', 'node/' . $nid));  
}

/**
 *  Creates pop-over 'edit logo'
 */
function dosomething_clubs_edit_logo($nid) {
  $node = node_load($nid);
  if (isset($node->field_club_picture[LANGUAGE_NONE][0]['uri'])) {
    $image = $node->field_club_picture[LANGUAGE_NONE][0];
    $image_style = 'action_results_thumbnail';
  }
  else {
    $image = array(
      'uri' => 'sites/all/modules/dosomething/features/dosomething_clubs/club-nopic-01.png',
      'title' => 'DoSomething Club',
      'alt' => 'DoSomething Clubs Default image',
    );
    $image_style = NULL;
  }


echo '
  <h1>Edit Club Photo</h1>
  <div id="edit-image-side" style="float: left; margin-right: 10px">
';

echo theme('image_formatter', array(
  'item' => $image,
  'image_style' => $image_style
));

echo '
  </div>
  <div id="edit-info-side">
  <p>' . t("To change your club's photo, select a file and click \"Upload\", below.") . '</p>
  </div>
  <div class="loading">Loading...</div>
';

echo drupal_render(drupal_get_form('dosomething_clubs_edit_logo_form', $nid));
}

/**
 *  Processes club-admin-nagging on behalf of club members
 */
function dosomething_clubs_remind_approve($uid, $nid) {
  $gid = og_get_group('node', $nid)->gid;
  $node = node_load($nid);
  global $user;
  if ($uid != $user->uid) {
    // They're trying to nag on behalf of someone else.
    drupal_goto('clubs');
  }

  else if (og_is_member($gid)) {
    // They're already a member of the group.
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  else if ($node->uid == $uid) {
    // They're the club leader.
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  // TODO:
  // Flood stoppage

  else {
    $nag = db_select('dosomething_clubs_nag', 'n')
      ->fields('n', array('uid'))
      ->condition('timestamp', array(strtotime('24 hours ago'), REQUEST_TIME), 'BETWEEN')
      ->condition('clubid', $node->nid, '=')
      ->condition('uid', $user->uid)
      ->range(0, 1)
      ->execute();

    if ($nag->rowCount()) {
      drupal_set_message(t("It looks like you've reminded the club leader in the last 24 hours.  You may only remind the leader once per day."), 'error');
      drupal_goto($_SERVER['HTTP_REFERER']);
    }

    // Finally, they're not a member.  Nag the club leader to get them approved.
    $l = user_load($node->uid);
    $le = profile2_load_by_user($l, 'main');
    if (isset($le->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
      $leader = $le->field_user_first_name[LANGUAGE_NONE][0]['value'];
    }
    else {
      $leader = $l->name;
    }

    $params = array(
      'name' => dosomething_general_get_full_name($user, 'private'),
      'leader' => $leader,
      'club_name' => $node->title,
      'club_link' => url(drupal_lookup_path('alias', 'node/' . $nid), array('absolute' => TRUE)),
      'email' => $l->mail
    );

    global $language;
    $nag = new stdClass();
    $nag->uid = $user->uid;
    $nag->clubid = $node->nid;
    $nag->timestamp = REQUEST_TIME;

    drupal_write_record('dosomething_clubs_nag', $nag);
    drupal_mail('dosomething_clubs', 'nag_leader', $l->mail, $language, $params);
    drupal_set_message(t("Thanks, we've reminded the club leader about your approval request."));
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 *  Access function.  Figures out if a member has a club.
 */
function dosomething_clubs_member_has_a_club() {
  global $user;

  // Logged out users should never see My Club
  if (!user_is_logged_in()) {
    return FALSE;
  }

  // If a user has a club of their own...
  $club = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('type', 'club', '=')
  ->condition('uid', $user->uid, '=')
  ->orderBy('nid', 'desc')
  ->range(0, 1)
  ->execute()
  ->fetchAll();

  if ($club[0]) {
    return TRUE;
  }
  else {
    // If a user doesn't have a club, but is a member of a club
    $club = db_select('og_membership', 'o')
      ->fields('o', array('gid'))
      ->condition('entity_type', 'user')
      ->condition('etid', $user->uid)
      ->orderBy('gid', 'DESC')
      ->range(0, 1)
      ->execute()
      ->fetchAll();

    if ($club[0]) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 *  Processing function.  Redirects from /myclub or /myclub/edit to
 *  the user's most recently created or joined club, or edit page.
 */
function dosomething_clubs_my_club_redirect($action = 'club') {
  global $user;

  if ($action == 'club') {
    $club = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'club', '=')
    ->condition('uid', $user->uid, '=')
    ->orderBy('nid', 'desc')
    ->range(0, 1)
    ->execute()
    ->fetchAll();

    if ($club[0]) {
      drupal_goto(drupal_lookup_path('alias', 'node/' . $club[0]->nid));
    }
    else {
      $club = db_select('og_membership', 'o')
        ->fields('o', array('gid'))
        ->condition('entity_type', 'user')
        ->condition('etid', $user->uid)
        ->orderBy('gid', 'DESC')
        ->range(0, 1)
        ->execute()
        ->fetchAll();

      if ($gid = current($club)->gid) {
        $nid = og_load_entity_from_group($gid)->nid;
      }

      if (isset($nid)) {
        drupal_goto(drupal_lookup_path('alias', 'node/' . $nid));
      }
      else {
        drupal_goto('clubs/club-not-found');
      }
    }
  }
  else if ($action == 'edit') {
    $club = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'club', '=')
    ->condition('uid', $user->uid, '=')
    ->orderBy('nid', 'desc')
    ->execute()
    ->fetchAll();

    if ($club[0]) {
      drupal_goto('node/' . $club[0]->nid . '/edit');
    }
    else {
      drupal_goto('clubs/club-not-found');
    }
  }
}

/**
 *  Access function.  Figures out if a user is the club leader, or has equivalent permissions.
 */
function dosomething_clubs_is_club_owner($owner, $uid = 0) {
  global $user;

  if ($owner == $uid || user_acces('administer group', $user)) {
    return true;
  }
  else {
    return false;
  }
}

/**
 *  Non-JS-friendly "are you sure you want to change the club leader?" form.
 */
function dosomething_clubs_change_owner_confirm_form($form, $form_state, $user, $club, $gid) {
  $form['confirm_title'] = array(
    '#markup' => 'Change Club Ownership',
    '#prefix' => '<h2>',
    '#suffix' => '</h2>'
  );

  $form['confirm_message'] = array(
    '#markup' => 'Are you <b>sure</b> you want to make ' . $user->name . ' the owner of the "' . $club->title . '" club? You will no longer be the leader, but you will retain administrator rights.',
    '#prefix' => '<p>',
    '#suffix' => '</p>'
  );

  $form['yep'] = array(
    '#type' => 'submit',
    '#value' => 'Yes, change the owner',
    '#attributes' => array(
      'class' => array('go-button'),
      'style' => 'margin: 10px'
    )
  );

  $form['nope'] = array(
    '#type' => 'button',
    '#value' => 'No! Take me back.',
    '#attributes' => array(
      'onclick' => 'javascript:window.history.go(-1)',
      'class' => array('go-button'),
      'style' => 'margin: 10px'
    )
  );

  $form_state['uid'] = $user->uid;
  $form_state['club'] = $club->nid;
  $form_state['gid'] = $gid;

  $form['#submit'][] = 'dosomething_clubs_do_change_owner';
  return $form;
}

/**
 *  Processes club owner change.
 */
function dosomething_clubs_change_owner($clubid, $userid) {
  $user = user_load($userid);
  $profile = profile2_load_by_user($user, 'main');

  $nid = og_load_entity_from_group($clubid)->nid;
  $node = node_load($nid);
  $node->uid = $user->uid;
  $node->field_email[LANGUAGE_NONE][0]['value'] = $user->mail;
  $node->field_name_last[LANGUAGE_NONE][0]['value'] = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];
  $node->field_name[LANGUAGE_NONE][0]['value'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];

  if (isset($profile->field_user_mobile[LANGUAGE_NONE][0]['value']) && !empty($profile->field_user_mobile[LANGUAGE_NONE][0]['value'])) {
    $phone = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
  }
  else {
    $phone = '';
  }

  $node->field_phone_required[LANGUAGE_NONE][0]['value'] = $phone;
  node_save($node);

  og_role_grant($clubid, $userid, DSCLUBS_ADMIN_ROLE);

  /**
    * Send an email to the new group owner, letting them know they now own the group.
    */
  $params = array(
    'name' => dosomething_general_get_full_name($user, 'private'),
    'club' => $node->title,
    'invite_link' => url(drupal_lookup_path('alias', 'node/' . $nid), array('absolute' => TRUE))
  );

  if (valid_email_address($user->mail)) {
     global $language;
     drupal_mail('dosomething_clubs', 'owner_change', $user->mail, $language, $params);
  }
}

/**
 *  Handles club leader change and redirection.
 */
function dosomething_clubs_do_change_owner($form, &$form_state) {
  // Repopulate the group with the new user's information.
  dosomething_clubs_change_owner($form_state['gid'], $form_state['uid']);

  drupal_set_message(t('Group owner successfully changed.'));
  $form_state['redirect'] = drupal_lookup_path('alias', 'node/' . $form_state['club']);
}

/**
 *  Handles JS / Non-JS states for owner-change
 */
function dosomething_clubs_change_owner_process($jsstate, $gid, $uid) {
  if ($jsstate == 'nojs') {
    if (!empty($gid)) {
      $nid = og_load_entity_from_group($gid)->nid;
      if (!empty($nid)) {
        $n = node_load($nid);
        $u = user_load($uid);
      }
    }

    $f = drupal_get_form('dosomething_clubs_change_owner_confirm_form', $u, $n, $gid);
    return drupal_render($f);
  }
  else if ($jsstate == 'js') {
    dosomething_clubs_change_owner($gid, $uid);
    return json_encode(array(
      'status' => true
    ));
  }
}

/**
 * Implements hook_node_insert().
 */
function dosomething_clubs_node_insert($node) {
  if ($node->type == 'club') {
    $email = field_get_items('node', $node, 'field_email');
    $names = field_get_items('node', $node, 'field_name');
    $phone = field_get_items('node', $node, 'field_phone_required');
    $name = strlen($names[0]['value']) ? $names[0]['value'] : $email[0]['value'];

    $params = array(
      'name' => $name,
      'clubname' => $node->title,
      'clublink' => 'http://' . $_SERVER['HTTP_HOST'] . url('node/' . $node->nid),
    );
    if ($node->new_member) {
      $params['andwelcome'] = t(' and welcome to DoSomething.org');
    }

    global $language;

    dosomething_clubs_make_owner_admin($node->nid);
    drupal_mail('dosomething_clubs', 'welcome_email', $email[0]['value'], $language, $params);
    dosomething_general_mobile_commons_subscribe($phone[0]['value'], CLUBS_MCOMMONS_CAMPAIGN);
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_clubs_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome_email':
      $message['subject'] = t('Success! You have just started !club', array('!club' => $params['clubname']));
      $message['body'][] = theme('dosomething_clubs_welcome_email', $params);
      #$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      // That was causing crazy issues with emails.
      $message['headers']['Bcc'] = "'clubs+approval@dosomething.org','nadir@dosomething.org'";
      $message['headers']['From'] = 'Do Something Clubs <clubs@dosomething.org>';
      break;
    case 'invite_email':
      $message['subject'] = t('!name has invited you to join !club', array('!club' => $params['club'], '!name' => $params['name']));
      $message['body'][] = theme('dosomething_clubs_invite_email', $params);
      $message['headers']['From'] = $params['name'] . ' <clubs@dosomething.org>';
      break;
    case 'member_invite_email':
      $message['subject'] = t('!name has added you to "!club"', array('!name' => $params['name'], '!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_member_invite_email', $params);
      $message['headers']['From'] = $params['name'] . ' <clubs@dosomething.org>';
      break;
    case 'owner_change':
      $message['subject'] = t('You have been made the owner of !club', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_owner_change_email', $params);
      $message['headers']['From'] = 'DoSomething.org Clubs <clubs@dosomething.org>';
      break;
    case 'new_admin':
      $message['subject'] = t('You have been given admin privelages for "!club"', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_new_admin_email', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'approved_email':
      $message['subject'] = t('!person has approved your request to join "!club"', array('!person' => $params['approver'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_approved_email', $params);
      $message['headers']['From'] = $params['approver'] . ' <clubs@dosomething.org>';
      break;
    case 'join_request_email':
      $message['subject'] = t('!name has requested to join your "!club"', array('!name' => $params['requester'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_join_request_email', $params);
      $message['headers']['From'] = $params['requester'] . ' <clubs@dosomething.org>';
      break;
    case 'tell_leader_someone_invited_email':
      $message['subject'] = t('!name has joined "!club"', array('!name' => $params['approvee'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_tell_leader_invite', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'tell_inviter_invitee_joined':
      $message['subject'] = t('!name has joined "!club"', array('!name' => $params['approvee'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_invitee_joined', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'role_change':
      $message['subject'] = t('Your title has been updated on "!club"', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_role_change', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'member_deleted':
      $message['subject'] = t('Your member profile has been unlinked from "!club"', array('!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_member_deleted', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'nag_leader':
      $message['subject'] = t("!name's membership is still pending on !club.", array(
        '!name' => $params['name'],
        '!club' => $params['club_name']
      ));
      $message['body'][] = theme('dosomething_clubs_nag_leader', $params);
      $message['headers']['From'] = $params['name'] . ' <clubs@dosomething.org>';
      break;
  }
}

/**
 * Implements hook_form_og_uid_add_users_alter().
 */
function dosomething_clubs_form_og_ui_add_users_alter(&$form, $form_state) {
  $form['og_user']['og_add_user_state'] = array(
    '#type' => 'value',
    '#value' => OG_STATE_ACTIVE,
  );
  $form['og_user']['og_add_user_membership_type'] = array(
    '#type' => 'value',
    '#value' => OG_MEMBERSHIP_TYPE_DEFAULT,
  );
}

/**
 * Modify the drupal mail system to send HTML emails.
 */
class DosomethingClubsMailSystem implements MailSystemInterface {
  public function format(array $message) {
    $message['body'] = implode("\n\n", $message['body']);
    return $message;
  }
  public function mail(array $message) {
    $mimeheaders = array();
    foreach ($message['headers'] as $name => $value) {
      $mimeheaders[] = $name . ': ' . mime_header_encode($value);
    }
    $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
    return mail(
      $message['to'],
      mime_header_encode($message['subject']),
      // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
      // on Unix and CRLF on Windows. Drupal automatically guesses the
      // line-ending format appropriate for your system. If you need to
      // override this, adjust $conf['mail_line_endings'] in settings.php.
      preg_replace('@\r?\n@', $line_endings, $message['body']),
      // For headers, PHP's API suggests that we use CRLF normally,
      // but some MTAs incorrectly replace LF with CRLF. See #234403.
      join("\n", $mimeheaders)
    );
  }
}

/**
 *  Sets a session variable to move the user to the "invite your friends" page
 *  after their club has been created.
 */
function dosomething_clubs_share_page(&$form, &$form_state) {
  $_SESSION['just_created_club'] = true;
}

/**
 *  Massive form to handle inviting friends.
 */
function dosomething_clubs_add_users($form, &$form_state, $nid) {
  if (isset($_SESSION['just_created_club'])) {
    unset($_SESSION['just_created_club']);
  }

  if (preg_match('#u\-([0-9]+)#', $nid, $u)) {
    $n = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('uid', $u[1])
      ->condition('type', 'club')
      ->orderBy('created', 'DESC')
      ->range(0, 1);

    $node = $n->execute()->fetchAll();
    $node = reset($node);
  }

  drupal_add_js(drupal_get_path('module', 'dosomething_clubs') . '/js/clubs-share.js');
  drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs_share_page.css');

  drupal_add_js('https://apis.google.com/js/client.js');
  drupal_add_js(drupal_get_path('module', 'dosomething_contact_picker') . '/js/picker.js');
  drupal_add_js(drupal_get_path('module', 'dosomething_contact_picker') . '/services/google/google.js');
  drupal_add_js(drupal_get_path('module', 'dosomething_contact_picker') . '/services/yahoo/yahoo.js');

  drupal_add_library('connections', 'facebook');

  $form_state['node'] = $nid;
  $g = og_get_group('node', $nid);
  $n = node_load($nid);
  $form_state['group'] = $g->gid;

  $image = 'http://www.dosomething.org/sites/all/modules/dosomething/features/dosomething_clubs/club-nopic-01.png';
  if (!empty($n->field_club_picture[LANGUAGE_NONE][0]['filename'])) {
    $image = 'http://' . $_SERVER['HTTP_HOST'] . '/files/styles/action_results_thumbnail/public/' . str_replace(' ', '%20', $n->field_club_picture[LANGUAGE_NONE][0]['filename']);
  }

  drupal_add_js("var fb_link, fb_title, fb_blurb;\r\nfb_link = '" . dosomething_clubs_invite_link($g->gid, '', true) . "'\r\nfb_title = '" . addslashes($n->title) . "'\r\nfb_blurb = '" . addslashes($n->field_club_blurb[LANGUAGE_NONE][0]['value']) . "'\r\nfb_image = '" . $image . "';", array(
    'type' => 'inline',
    'weight' => -1000,
  ));

  $form['header'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'share-page-header'),
    /*'exclamation' => array(
      '#prefix' => '<p>',
      '#markup' => '<img src="/' . drupal_get_path('module', 'dosomething_clubs') . '/images/share-page-header.png" alt="" />',
      '#suffix' => '</p>',
    ),*/
    'title' => array(
      '#prefix' => '<h1 class="title">',
      '#markup' => t('Congrats, your club has been created!'),
      '#suffix' => '</h1>',
    ),
    'but' => array(
      '#prefix' => '<h2 class="but">',
      '#markup' => t('Invite friends to join.'),
      '#suffix' => '</h2>'
    )
  );

  $form['shares'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'share-buttons'),
    'cell' => array(
      '#type' => 'container',
      '#attributes' => array('id' => 'cell-share', 'class' => array('share-container')),
      'image' => array(
        '#markup' => l('<img src="/' . drupal_get_path('module', 'dosomething_clubs') . '/images/cell-off.png" alt="" />', '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'cell'), 'html' => TRUE)),
      ),
      'cell' => array(
        '#prefix' => '<p id="cell-button" class="button">',
        '#markup' => l(t('BY CELL'), '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'cell'))),
        '#suffix' => '</p>',
      ),
    ),
    'fb' => array(
      '#type' => 'container',
      '#attributes' => array('id' => 'fb-share', 'class' => array('share-container')),
      'image' => array(
        '#markup' => l('<img src="/' . drupal_get_path('module', 'dosomething_clubs') . '/images/fb-off.png" alt="" />', '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'fb'), 'html' => TRUE)),
      ),
      'cell' => array(
        '#prefix' => '<p id="fb-button" class="button">',
        '#markup' => l(t('BY FACEBOOK'), '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'fb'))),
        '#suffix' => '</p>',
      ),
    ),
    'email' => array(
      '#type' => 'container',
      '#attributes' => array('id' => 'email-share', 'class' => array('share-container')),
      'image' => array(
        '#markup' => l('<img src="/' . drupal_get_path('module', 'dosomething_clubs') . '/images/email-off.png" alt="" />', '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'email'), 'html' => TRUE)),
      ),
      'cell' => array(
        '#prefix' => '<p id="email-button" class="button">',
        '#markup' => l(t('BY EMAIL'), '#', array('attributes' => array('class' => array('share-button'), 'rel' => 'email'))),
        '#suffix' => '</p>',
      ),
    )
  );

  global $user;
  $p = profile2_load_by_user($user, 'main');
  $name = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
  $link = rawurlencode(dosomething_clubs_invite_link($g->gid, '', true));
  $e_template = 'Hey,%0A%0AI\'ve invited you to join "' . rawurlencode($n->title) . '".%0A%0AClick the link below to sign up as a DoSomething.org member and join my club:%0A' . $link . '%0A%0AAs a member, you will be able to update the DoSomething.org community about projects we\'re working on and invite your friends to the club.  Not to mention the fact that we can win prizes, scholarships, and grants!%0A%0AIf you have any question, email Crystal at clubs@dosomething.org';

  $items = array(
    'gmail' => theme('dosomething_clubs_email_share_element', array(
      'image_uri' => 'gmail-scraper.png',
      'type' => t('Get !type contacts', array('!type' => 'Gmail')),
      'class' => 'gmail',
      'uri' => '#',
      'onclick' => 'google',
    )),
    'yahoo' => theme('dosomething_clubs_email_share_element', array(
      'image_uri' => 'yahoo-scraper.png',
      'type' => t('Get !type contacts', array('!type' => 'Yahoo')),
      'class' => 'yahoo',
      'uri' => '#',
      'onclick' => 'yahoo',
    )),
    'my' => theme('dosomething_clubs_email_share_element', array(
      'image_uri' => 'email-scraper.png',
      'type' => t('Use another email'),
      'class' => 'my',
      'uri' => 'mailto:?subject=Join my club!&body=' . $e_template,
      'onclick' => ''
    ))
  );

  $form['fb_share'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'fb-share-container', 'class' => array('full-share-container')),
    'loading' => array(
      '#markup' => t('Loading your friends.  Please wait...'),
    ),
  );

  $form['email_share'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'email-share-container', 'class' => array('full-share-container')),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('email-share-type'),
      ),
    ),
    'rather' => array(
      '#prefix' => '<p id="rather">',
      '#markup' => t("I'd rather !type", array('!type' => l(t('type in my own friend\'s email addresses'), '#'))),
      '#suffix' => '</p>',
    ),
  );

  $form['email_share']['email_box']['pre'] = array(
    '#markup' => '<div id="manual-emails">',
  );

  $form['email_share']['email_box']['abc'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Your friends\' emails:'),
    '#suffix' => '</p>'
  );

  $form['email_share']['email_box']['field_container'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('email-field-container'), 'rel' => 'email'),
  );

  for ($i = 0; $i < 6; $i++) {
    $form['email_share']['email_box']['field_container']["email[$i]"] = array(
      '#type' => 'textfield',
      '#attributes' => array('class' => array('email-share-email'))
    );
  }

  $form['email_share']['email_box']['add'] = array(
    '#markup' => l(t('Add more'), '#', array('attributes' => array('class' => array('add-more'), 'rel' => 'email'))),
  );

  $form['email_share']['email_box']['post'] = array(
    '#markup' => '</div>',
  );

  $form['email_share']['loading'] = array(
    '#prefix' => '<div id="loading">',
    '#markup' => '&nbsp;',
    '#suffix' => '</div>',
  );

  $form['cell_share'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'cell-share-container', 'class' => array('full-share-container')),
    'send' => array(
      '#prefix' => '<p id="send">',
      '#markup' => t('Send your friends a text telling them to join the party.'),
      '#suffix' => '</p>',
    ),
  );

  $form['cell_share']['cell_box']['pre'] = array(
    '#markup' => '<div id="manual-cells">',
  );

  $form['cell_share']['cell_box']['abc'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Your friends\' Cells:'),
    '#suffix' => '</p>'
  );

  $form['cell_share']['cell_box']['field_container'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('cell-field-container'), 'rel' => 'cell'),
  );

  for ($i = 0; $i < 6; $i++) {
    $form['cell_share']['cell_box']['field_container']["cell[$i]"] = array(
      '#type' => 'textfield',
      '#attributes' => array('class' => array('cell-share-cell'))
    );
  }

  $form['cell_share']['cell_box']['add'] = array(
    '#markup' => l(t('Add more'), '#', array('attributes' => array('class' => array('add-more'), 'rel' => 'cell'))),
  );

  $form['cell_share']['cell_box']['submit_cells'] = array(
    '#type' => 'submit',
    '#value' => 'Invite these numbers',
    '#attributes' => array('class' => array('go-button')),
  );

   $form['cell_share']['cell_box']['submit_cells']['#ajax'] = array(
     'callback' => 'dosomething_clubs_abc',
   );

  $form['cell_share']['cell_box']['post'] = array(
    '#markup' => '</div>',
  );

  $form['next'] = array(
    '#prefix' => '<p id="continue-to-club">',
    '#markup' => l(t('Continue to club...'), drupal_lookup_path('alias', 'node/' . $nid)),
    '#suffix' => '</p>'
  );

  $form['select_boxes'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'check-area'),
    'select-area' => array(
      '#markup' => l(t('Select All'), '#', array('attributes' => array('id' => 'check-all'))) . ' / ' . l(t('None'), '#', array('attributes' => array('id' => 'check-none'))),
    ),
  );

  $form['response'] = array(
    '#markup' => '<div id="response"></div>'
  );

  $form['submit_emails_block'] = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'submit-emails-block'),
    'submit_emails' => array(
      '#type' => 'submit',
      '#value' => 'Send Emails',
      '#attributes' => array('class' => array('go-button send-emails')),
      '#ajax' => array(
        'callback' => 'dosomething_clubs_submit_emails',
      ),
    ),
    'invite_sent' => array(
      '#markup' => '<div id="invite-sent"></div>',
    ),
  );

  return $form;
}

/**
 *  Processing function to add a user to a club.
 *
 *  @param $contact
 *    The user's email address or cell phone.
 *
 *  @param $nid
 *    The Node ID of the club.
 *
 *  @param $gid (optional)
 *    The Group ID of the club.  If blank, the function will figure it out.
 *
 *  @return
 *    Nothing.  This function sends out invitations.
 */
function dosomething_clubs_add_user_by_email_or_cell($contact, $nid, $gid = 0) {
  if (empty($nid)) return;

  if ($gid == 0 && !empty($nid)) {
    $gid = og_get_group('node', $nid)->gid;
  }

  if (!valid_email_address($contact)) {
    return;
  }

  if ($account = dosomething_general_load_user_by_mail_or_cell($contact)) {
    dosomething_clubs_join($gid, array('entity' => $account, 'state' => OG_STATE_ACTIVE));
    dosomething_clubs_invite_message($contact, $gid, FALSE, TRUE, $nid);
  }
  else {
    dosomething_clubs_no_account_join($contact);
    dosomething_clubs_invite_message($contact, $gid);
  }
}

/**
 *  Sends invitations to people, and sends the "Invitation sent!" message to the user.
 */
function dosomething_clubs_submit_emails(&$form, &$form_state) {
  if (!empty($form_state['input']['email'][0])) {
    $emails = $form_state['input']['email'];
  }
  else {
    $emails = $form_state['input']['emails'];
  }

  $nid = $form_state['node'];
  $gid = $form_state['group'];

  foreach ($emails AS $email) {
    dosomething_clubs_add_user_by_email_or_cell($email, $nid, $gid);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('#invite-sent', '<div id="invite-sent">Invitation sent!</div>'),
    ),
  );
}

/**
 *  @TODO: Cell invitation functionality.
 */
function dosomething_clubs_abc(&$form, &$form_state) {
  $numbers = $form_state['input']['cell'];
  global $user;
  $p = profile2_load_by_user($user, 'main');
  //@TODO: This
  $form_values['details']['nid'] = $form_state['club_id'];
  #sms_flow_start($p->field_user_mobile[LANGUAGE_NONE][0]['value'], $alpha_optin, $beta_optin, $numbers, $form_values, array(
  # 'first_name' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
  #));
  //foreach ($numbers AS $key => $number) {
    // Something with the phone number
  //}
  exit;
}

/**
 * Impelments hook_form_alter().
 */
function dosomething_clubs_form_club_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['state']['#title'] = 'What state is your school in?';
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['type']['#title'] = 'What kind of school is it?';
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['name']['#title'] = 'School name';

  global $user;
  $profile = profile2_load_by_user($user, 'main');

  $form['another'] = array(
    '#markup' => '<p id="dosomething-club-tag">DoSomething.org Club</p>',
    '#weight' => 3.5
  );
  $form['test'] = array(
    '#markup' => '<p id="club-name-live">The club name will be "<span>(Write something)</span> DoSomething.org Club"</p>',
    '#weight' => 4.5
  );

  $form['field_noschool_club_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Group Name');

  $form['actions']['delete']['#attributes'] = array(
    'class' => array('go-button'),
    'style' => 'margin-left: 10px',
  );

  $form['actions']['submit']['#attributes']['class'] = array('go-button');
  $create = isset($form_state['build_info']['args'][0]->nid);
  $form['actions']['submit']['#value'] = ($create ? t('Save Changes') : t('Create Club'));

  if (!user_is_logged_in()) {
    if ($_SESSION['shortform_email']) {
      $form['field_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $_SESSION['shortform_email'];
    }

    $form['not_logged_in_notice'] = array(
      '#markup' => t("It looks like you're not logged in. Fill out this form to create a DoSomething.org membership and create your club."),
      '#prefix' => '<div id="not-logged-in-notice" class="example-obtuse">',
      '#suffix' => '</div>',
      '#weight' => -1000
    );

    $form['parent_email'] = array(
      '#title' => t("Your Parent's email address:"),
      '#description' => t("Please give us your parent's email address so we can confirm you can join us!"),
      '#type' => 'textfield',
      '#weight' => -1
    );

    $form['password'] = array(
      '#title' => t('Password'),
      '#description' => t("This will be the password you use to login to your DoSomething.org account."),
      '#type' => 'password',
      '#required' => TRUE,
      '#weight' => 10
    );

    $form['new_member'] = array(
      '#type' => 'hidden',
      '#value' => 1
    );

    $form['#group_children']['password'] = 'group_club_leader_info';
    $form['#fieldgroups']['group_club_leader_info']->children[] = 'password';

    $form['#group_children']['parent_email'] = 'group_club_leader_info';
    $form['#fieldgroups']['group_club_leader_info']->children[] = 'parent_email';
  }
  else {
    if (isset($profile->field_user_address)) {
      $address = $profile->field_user_address[LANGUAGE_NONE][0];

      if (
          empty($form['field_club_address'][LANGUAGE_NONE][0]['value']['#default_value'])
          && empty($form['field_club_city'][LANGUAGE_NONE][0]['value']['#default_value'])
          && empty($form['field_club_state'][LANGUAGE_NONE]['#default_value'])
          && empty($form['field_club_zip'][LANGUAGE_NONE][0]['value']['#default_value'])
      ) {
        $form['field_club_address'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['thoroughfare'];
        $form['field_club_city'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['locality'];
        $form['field_club_state'][LANGUAGE_NONE]['#default_value'] = $address['administrative_area'];
        $form['field_club_zip'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['postal_code'];
      }
    }

    $form['#submit'][] = 'dosomething_general_webform_email_and_mobile_subscribe';
  }

  $form['#submit'][] = 'dosomething_clubs_mailchimp';

  $form['#attached']['js'] = array(
    array(
      'data' => drupal_get_path('module', 'dosomething_clubs') . '/js/club-autofill.js',
      'options' => array(
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
        'every_page' => TRUE
      )
    )
  );

  $form['#attached']['css'] = array(
    array(
      'data' => drupal_get_path('module', 'dosomething_clubs') . '/css/clubs_form.css',
      'options' => array(
        'group' => CSS_LIBRARY,
        'preprocess' => FALSE,
        'every_page' => TRUE
      )
    )
  );
  #drupal_add_js(drupal_get_path('module', 'dosomething_clubs') . '/js/club-autofill.js');
  #drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs-form.css');
  $form['#validate'][] = 'dosomething_clubs_form_validate';

  // Take no action if this user is not authenticated.
  if ($user->uid == 0) {
    $form['#submit'][] = 'dosomething_login_register_block_submit';
    return;
  }
  // Only fill in data on forms that are ours or new forms.
  elseif ($form['nid']['#value'] == NULL || $form['#node']->uid == $user->uid) {
    // Load data.
    $profile = profile2_load_by_user($user, 'main');
    $augmented = FALSE;
    if ($profile) {
      $augmented = TRUE;
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
      if ($form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_first_name->value();
      }
      if ($form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_last_name->value();
      }
      // If the mobile number is empty, prepopulate it.
      if ($form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_mobile->value();
      }
      // If we have a birthday, prepopulate the field.
      if (is_numeric($profile_wrapper->field_user_birthday->raw())) {
        $form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']  = date('Y-m-d H:i:s', $profile_wrapper->field_user_birthday->raw());
        // We want to capture birthdates but we don't want them updated here.
        // We'll set a form error below if they somehow manage to do this.
        $form['field_club_leader_birthdate']['#disabled'] = TRUE;
      }
    }
    // If this email isn't actually a magic mobile number, prepopulate the form
    // with it.
    if (substr($user->mail, -7) != '@mobile') {
      $augmented = TRUE;
      $form['field_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
    }
    if ($augmented) {
      // Attach our submit handler to update the user and profile objects with
      // newer data.
      $form['#submit'][] = 'dosomething_clubs_form_submit';
    }
  }

  // Finally, send them to the page where they can invite their friends.
  $form['#submit'][9999] = 'dosomething_clubs_share_page';
}

/**
 *  Add a user to a mailchimp group
 */
function dosomething_clubs_mailchimp(&$form, &$form_state) {
  $vals = $form_state['values'];
  $mid = $vals['field_mailchimp_group_id'][LANGUAGE_NONE][0]['value'];
  $email = $vals['field_email'][LANGUAGE_NONE][0]['value'];

  if (!empty($mid)) {
     dosomething_general_mailchimp_subscribe($email, $mid);
  }
}

/**
 *  Makes the owner of the group the administrator.
 */
function dosomething_clubs_make_owner_admin($nid) {
  global $user;
  $gid = og_get_group('node', $nid)->gid;
  og_role_grant($gid, $user->uid, DSCLUBS_ADMIN_ROLE);
}

function dosomething_clubs_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_719550') {
    $form['#submit'][] = 'dosomething_clubs_preserve_shortform_email';
  }
}

function dosomething_clubs_preserve_shortform_email(&$form, &$form_state) {
  $email = $form_state['values']['submitted_tree']['field_webform_email'][LANGUAGE_NONE][0]['value'];
  $_SESSION['shortform_email'] = $email;
}

/**
 * Scholarship Application form validation callback.
 */
function dosomething_clubs_form_validate(&$form, &$form_state) {
  global $user;
  $error = 0;

  if (!user_is_logged_in()) {
    // 13 years in seconds
    $atleast = strtotime('13 years ago');
    $bday = strtotime($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']);

    if ($bday > $atleast) {
      form_set_error('parent_email', t("Please give us your parent's email address so we can check that you're okay to be here."));
    }
  }

  $r = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('created', array(strtotime('24 hours ago'), REQUEST_TIME), 'BETWEEN')
    ->condition('type', 'club', '=')
    ->condition('uid', $user->uid, '=')
    ->range(0, 1)
    ->execute()
    ->fetchAll();

  if ($r[0]) {
    form_set_error('form', t("It looks like you've created !another in the last 24 hours.  Please wait a full day before making a new club, or delete your old club and try again.  Received this in error? !email",
      array(
        '!email' => l(t('Email clubs@dosomething.org'), 'mailto:clubs@dosomething.org'),
        '!another' => l(t('another club'), drupal_lookup_path('alias', 'node/' . $r[0]->nid)) 
      )
    ));
  }

  // If the email is set, make sure we can update the user's email address.
  if (isset($form_state['values']['field_email'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'] != '') {
    $mail = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $account = user_load_by_mail($mail);
    // If we found an account with that email address and the email address does
    // not belong to this user, set an error.
    if ($account && $account->uid != $user->uid) {
      form_set_error('field_email', t('That email address already belongs to a DoSomething.org member.  Do you have another account? Try !loggingin or !resetting', array(
        '!loggingin' => l('logging in', 'user', array(
          'attributes' => array(
            'class' => array('sign-in-popup')
          )
        )),
        '!resetting' => l('resetting your password', 'user/password')
      )));
      $error++;
    }
    if (!valid_email_address($mail)) {
      form_set_error('field_email', t('The email address provided is not a valid email address.'));
      $error++;
    }
  }
  // Don't let them change their birthdate on this form.
  if ((isset($form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']) && $form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value'] != '') && (isset($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value'] != '')) {
    if (substr($form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value'], 0, 10) != substr($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value'], 0, 10)) {
      form_set_error('field_club_leader_birthdate', 'Sorry you can\'t change your birthdate on this form. Please edit your profile to change your birthdate');
      $error++;
    }
  }
  if (isset($form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    $number = $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    if (strlen($number) != 10) {
      form_set_error('field_phone_required', t('We need a valid phone number with area code.'));
      $error++;
    }
  }

  // If a user is not logged in and is creating a club, fake the registration form.
  // This information will create a user in the system.
  if (!user_is_logged_in()) {
    $form_state['input']['first_name'] = $form_state['values']['first_name'] = $form_state['values']['field_name'][LANGUAGE_NONE][0]['value'];
    $form_state['input']['last_name'] = $form_state['values']['last_name'] = $form_state['values']['field_name_last'][LANGUAGE_NONE][0]['value'];
    $form_state['input']['parent_email'] = $form_state['values']['parent_email'];
    $form_state['values']['birthdate'] = $bday;
    $form_state['values']['phone'] = $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['pass'] = $form_state['values']['password'];
    $form_state['values']['email'] = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['mail'] = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['month'] = date('m', $bday);
    $form_state['values']['day'] = date('d', $bday);
    $form_state['values']['year'] = date('Y', $bday);
  }
}

/**
 * Scholarship Application form submission callback.
 */
function dosomething_clubs_form_submit(&$form, &$form_state) {
  global $user;
  $values = $form_state['values'];

  $campaigns = $form_state['values']['field_campaign_list'][LANGUAGE_NONE];

  foreach ($campaigns AS $key => $stuff) {
    $node = node_load($stuff['nid']);
    if (isset($node->field_campaign_mcommons) && !empty($node->field_campaign_mcommons[LANGUAGE_NONE][0]['value'])) {
      dosomething_general_mobile_commons_subscribe($number, $node->field_campaign_mcommons[LANGUAGE_NONE][0]['value']);
    }
  }

  // Update profile values with contact info from the application.
  $profile = profile2_load_by_user($user, 'main');
  if (isset($values['field_phone_required'][LANGUAGE_NONE][0]['value']) && $values['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    //Strip junk from the phone number:
    $number = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name'][LANGUAGE_NONE][0]['value']) && $values['field_name'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['field_name'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name_last'][LANGUAGE_NONE][0]['value']) && $values['field_name_last'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['field_name_last'][LANGUAGE_NONE][0]['value'];
  }
  $profile->save();

  if (isset($values['field_email'][LANGUAGE_NONE][0]['value']) && $values['field_email'][LANGUAGE_NONE][0]['value'] != '' && $values['field_email'][LANGUAGE_NONE][0]['value'] != $user->mail) {
    $variables = array(
      '@username' => $user->name,
      '@old_mail' => $user->mail,
      '@new_mail' => $values['field_email'][LANGUAGE_NONE][0]['value'],
    );
    watchdog('dosomething_clubs', 'Updating the email address for @username from @old_mail to @new_mail upon club creation', $variables);
    $user->mail = $values['field_email'][LANGUAGE_NONE][0]['value'];
    user_save($user);
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_clubs_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
  * Implements hook_module_implements_alter()
  */
function dosomething_clubs_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter' && isset($implementations['dosomething_clubs'])) {
    $group = $implementations['dosomething_clubs'];
    unset($implementations['dosomething_clubs']);
    $implementations['dosomething_clubs'] = $group;
  }
}

/**
  * We can't disable the OG Groups UI Module (too many requirements)
  * So let's remove the group tab the old fashioned way...
  * Implements hook_menu_alter()
  */
function dosomething_clubs_menu_alter(&$items) {
  unset($items['node/%/group']);
  unset($items['group/%/group']);
}

/**
 * Menu callback for anonymous user Create Club page.
 */
function dosomething_clubs_create_club_anonymous() {
  return array(
    'body' => array(
      '#markup' => t('Please login or become a member before starting a club.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
    'login_form' => array(
      'form' => drupal_get_form('user_login'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
  );
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function dosomething_clubs_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'club') {
    $form['title']['#value'] = 'club';
    $form['title']['#type'] = 'value';
    $form['title']['#required'] = FALSE;
  }
}

/**
 * Implement hook_node_submit().
 * 
 * Replace auto nodetitle functionality.
 */
function dosomething_clubs_node_save($node, $form, &$form_state) {
  dosomething_clubs_title($node, $form_state);
}

/**
 * Implement hook_node_submit().
 */
function dosomething_clubs_node_submit($node, $form, &$form_state) {
  dosomething_clubs_title($node, $form_state);
}

/**
 * Implement hook_node_presave().
 *
 * Replace auto nodetitle functionality
 */
function dosomething_clubs_node_presave($node) {
  dosomething_clubs_title($node);
}

function dosomething_clubs_title(&$node, $form = array()) {
  if ($node->type == 'club') {
    $noassoc = ($form ? $form['values']['field_no_school_associate'][LANGUAGE_NONE][0]['value'] : $node->field_no_school_associate[LANGUAGE_NONE][0]['value']);
    $real_name = ($form ? $form['values']['field_noschool_club_name'][LANGUAGE_NONE][0]['value'] : $node->field_noschool_club_name[LANGUAGE_NONE][0]['value']);

    if ($noassoc && trim($real_name) !== '') {
      $node->title = $real_name . ' DoSomething.org ' . t('Club');
    }
    else {
      $school_id = $node->field_school_reference[LANGUAGE_NONE][0]['target_id'];
      $school = array_shift(entity_load('ds_school', array($school_id)));
      $node->title = $school->name . ' DoSomething.org Club';
    }
  }
}

/**
 * Club invite a friend form.
 */
function dosomething_clubs_invite_form($form, &$form_state, $gid) {
  $form = array();

  $n = menu_get_object();
  $form_state['nid'] = $n->nid;

  $form['invite'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#attributes' => array(
      'placeholder' => 'Friend\'s email', // or cell
      'style' => 'float: left; margin-right: 10px;'
    ),
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $gid,
    '#default_value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invite',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_invite_form_ajax',
    ),
  );

  $form['invite-sent'] = array(
    '#markup' => '',
    '#prefix' => '<div id="invite-sent">',
    '#suffix' => '</div>'
  );

  //$form['#submit'][] = 'dosomething_clubs_invite_form_submit';

  return $form;
}

/**
 *  Invites people to join from the shortform on clubs.
 */
function dosomething_clubs_invite_form_ajax($form, &$form_state) {
  static $invited;
  $gid = $form_state['values']['gid'];
  $invite = $form_state['values']['invite'];
  $nid = $form_state['nid'];

  if ($account = dosomething_general_load_user_by_mail_or_cell($invite)) {
    dosomething_clubs_join($gid, array('entity' => $account, 'state' => OG_STATE_ACTIVE));
    dosomething_clubs_invite_message($invite, $gid, FALSE, TRUE, $nid);
  }
  else {
    dosomething_clubs_no_account_join($invite);
    dosomething_clubs_invite_message($invite, $gid);
  }

  $invited++;
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_invoke('#dosomething-clubs-invite-form input[name="invite"]', 'val', array('')),
      ajax_command_replace('#invite-sent', '<div id="invite-sent">Invitation sent!</div>') // Replace invitation sent so it only appears once.
    ),
  );
}

/**
 * Club join form.
 */
function dosomething_clubs_join_form($form, &$form_state, $gid) {
  $form = array();

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $gid,
    '#default_value' => $gid,
  );

  $n = menu_get_object();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $n->nid,
    '#default_value' => $n->nid
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Join',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
  );

  if (!user_is_logged_in()) {
    $form['submit']['#attributes']['onclick'] = "return jQuery.fn.dsClubsSubmit()";
  }
  else {
    $form['#submit'][] = 'dosomething_clubs_join_form_submit';
  }

  return $form;
}

/**
 * Club member title form
 */
function dosomething_clubs_member_title_form($form, &$form_state, $gid, $uid) {
  $form = array();

  $current = NULL;
  $membership = og_get_group_membership($gid, 'user', $uid);
  if (isset($membership->field_membership_description) && !empty($membership->field_membership_description)) {
    $current = $membership->field_membership_description[LANGUAGE_NONE][0]['value'];
  }

  $form['#attributes'] = array(
    'class' => array('club-title-update'),
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#default_value' => $current,
    '#size' => 30,
    '#attributes' => array(
      'placeholder' => 'Position (President, VP, etc)',
    ),
  );

  $form_state['gid'] = $gid;
  $form_state['uid'] = $uid;

  $form['membership_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $membership->id,
    '#value' => $membership->id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_member_title_submit',
    ),
  );

  return $form;
}

/**
 *  Handles user title for club
 */
function dosomething_clubs_member_title_submit($form, &$form_state) {
  $title = $form_state['values']['title'];
  $etid = $form_state['values']['membership_id'];
  $membership = reset(entity_load('og_membership', array($etid)));
  $membership->field_membership_description[LANGUAGE_NONE][0]['value'] = $title;
  entity_save('og_membership', $membership);

  global $language;
  $u = user_load($form_state['uid']);
  $node = og_load_entity_from_group($form_state['gid']);
  $params = array(
    'club' => $node->title,
    'club_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
    'name' => $u->name
  );
  drupal_mail('dosomething_clubs', 'role_change', $u->mail, $language, $params);

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      //ajax_command_invoke('.club-member form', 'hide'),
      ajax_command_replace('#member-title-'.$membership->etid, $title),
    ),
  );
}

/**
 * Submit handler for club join form.
 */
function dosomething_clubs_join_form_submit($form, &$form_state) {
  global $user;

  $gid = $form_state['values']['gid'];

  $n = node_load($form_state['values']['nid']);
  $u = user_load($n->uid);
  $p = profile2_load_by_user($u, 'main');

  $profile = profile2_load_by_user($user, 'main');

  $params = array(
    'requester' => $profile->field_user_first_name[LANGUAGE_NONE][0]['value'],
    'leader' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
    'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $n->nid),
    'club_name' => $n->title
  );

  drupal_mail('dosomething_clubs', 'join_request_email', $u->mail, $language, $params);

  dosomething_clubs_join($gid);
}

/**
 * Store a record of a member being invited to a team.
 */
function dosomething_clubs_no_account_join($email) {
  $data = array(
    'gid' => $gid,
    'invite' => $email,
  );
  drupal_write_record('dosomething_clubs_invites', $data, array('gid', 'invite'));
}

/**
 * Delete a record once someone signs up.
 */
function dosomething_clubs_account_created($contact) {
  if (!is_array($contact)) {
    $dc = array($contact);
  }
  else {
    $dc = $contact;
  }

  if (is_array($contact) && !empty($contact)) {
    db_delete('dosomething_clubs_invites')
      ->condition('invite', $dc, 'IN')
      ->execute();
  }
}

/**
 * Send an email/sms inviting them to a club.
 */
function dosomething_clubs_invite_message($contact, $gid, $is_reminder = FALSE, $is_member = FALSE, $node_id = 0) {
  global $language, $user;

  $params = array(
    'name' => dosomething_general_get_full_name($user, 'public'),
    'club' => og_load_entity_from_group($gid)->title,
    'invite_link' => dosomething_clubs_invite_link($gid, $contact),
    'email' => $contact
  );

  if (valid_email_address($contact)) {
    if ($is_member == TRUE) {
      $params['club_link'] = url(drupal_lookup_path('alias', 'node/' . $node_id), array(
        'absolute' => TRUE,
      ));
      $params['their_name'] = dosomething_login_find_user_by_email($contact);
     drupal_mail('dosomething_clubs', 'member_invite_email', $contact, $language, $params);
    }
    else {
      $invite = array(
        'gid' => $gid,
        'invite' => $contact,
        'inviter' => $user->uid
      );
      drupal_write_record('dosomething_clubs_invites', $invite);
      drupal_mail('dosomething_clubs', 'invite_email', $contact, $language, $params);
    }
  }
  else if (dosomething_general_valid_cell($contact)) {
    #dosomething_general_mobile_commons_subscribe($contact, 126531, array('club_name' => t('Blah')));
  }
}

/**
 *  Implements hook_entity_update()
 */
function dosomething_clubs_entity_update($entity, $type) {
  if ($type == 'og_membership' && ($entity->original->state == 2)) {
    // It seems this is only called when a user is approved in OG Groups.
    // Sign them up for certain campaigns.
    global $user, $language;

    $person = $entity->original->etid;
    $person = user_load($person);
    $profile = profile2_load_by_user($person, 'main');

    $phone = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
    if (!empty($phone)) {
      dosomething_general_mobile_commons_subscribe($phone, CLUBS_MCOMMONS_CAMPAIGN);
    }

    $email = $person->mail;
    $my_name = '';
    $my_name = dosomething_general_get_full_name($user, 'private');

    $node = og_load_entity_from_group($entity->original->gid);

    $params = array(
      'approver' => $my_name,
      'approvee' => $person->name,
      'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $node->nid),
      'club_name' => $node->title
    );

    drupal_mail('dosomething_clubs', 'approved_email', $email, $language, $params);
    if (!empty($email)) {
      //dosomething_general_infusionsoft_subscribe($email, ACTION_ID);
    }
  }
}

/**
 *  Implements hook_views_post_render()
 */
function dosomething_clubs_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'club_photo_gallery' && isset($view->result[0]->field_field_project_photo) && empty($view->result[0]->field_field_project_photo)) {
    $output = array();
  }
}

/**
 *  Confirms a user was actually invited, and joins them if they were.
 */
function dosomething_clubs_join_page($gid, $verify = FALSE, $hash = NULL) {
  global $user, $language;
  $node = og_load_entity_from_group($gid);
  $uri = entity_uri('node', $node);

  if ($verify) {
    if (is_null($hash) || ($hash !== dosomething_clubs_invite_hash($gid))) {
      drupal_set_message(t('The unique identifier is not correct for this club. Please request access to the club below.'), 'error');
    }
    else {
      $u = user_load($node->uid);
      $params = array(
        'leader' => dosomething_general_get_full_name($u, 'public'),
        'approvee' => $user->name,
        'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $node->nid),
        'club_name' => $node->title,
        'email' => $u->mail
      );

      $invitee = db_select('dosomething_clubs_invites', 'i')
        ->fields('i', array('inviter'))
        ->condition('invite', $user->mail)
        ->range(0, 1)
        ->execute()
        ->fetchAll();

      if (!empty($invitee[0]->inviter)) {
        $inviter = user_load($invitee[0]->inviter);
        $p = profile2_load_by_user($inviter, 'main');
        $starter = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
        if (!trim($starter)) {
          $starter = $inviter->name;
        }
        $params['name'] = $starter;

        if ($inviter->uid != $u->uid) {
          drupal_mail('dosomething_clubs', 'tell_leader_someone_invited_email', $u->mail, $language, $params);
        }

        drupal_mail('dosomething_clubs', 'tell_inviter_invitee_joined', $inviter->mail, $language, $params);
      }

      dosomething_clubs_join($gid, array('state' => OG_STATE_ACTIVE));
      dosomething_clubs_account_created($user->mail);
    }
  }
  else {
    dosomething_clubs_join($gid, array('entity' => $user, 'state' => OG_STATE_ACTIVE), TRUE);
  }

  drupal_goto($uri['path']);
}

/**
 * Wrapper for og_group to make sure we start with pending state.
 */
function dosomething_clubs_join($gid, $args, $immediately_join = false) {
  global $user;

  if (!$immediately_join && !isset($args['state'])) {
    $args += array(
      'state' => OG_STATE_PENDING
    );
  }

  og_group($gid, $args);
}

/**
 *  Creates an md5 hash for invitations
 */
function dosomething_clubs_invite_hash($gid) {
  $nid = og_load_entity_from_group($gid)->nid;
  $hash = md5('ds_clubs'.$nid.$gid);
  return $hash;
}

/**
 *  Creates an invitation link
 */
function dosomething_clubs_invite_link($gid, $email = '', $fb = false) {
  $url = 'club/join-by-' . ($fb ? 'fb' : 'invite') . '/'.$gid.'/'.dosomething_clubs_invite_hash($gid);
  $url = url('user/registration', array(
    'absolute' => TRUE,
    'query' => array(
      'email' => $email,
      'destination' => $url,
    ),
  ));
  return $url;
}

/**
 *  Approves a member through AJAX
 */
function dosomething_clubs_approve($ajax, $gid, $uid) {
  $values = array('entity' => user_load($uid), 'state' => OG_STATE_ACTIVE);
  og_group($gid, $values);

  if ($ajax === 'ajax') {
    $commands = array(
      ajax_command_remove('#club-member-' . $uid),
      ajax_command_append('#member-list-current', '<tr><td><h2>' . dosomething_clubs_member_icon($uid) . '</h2></td><td colspan="2">Reload the page to edit this member</td></tr>'),
      ajax_command_restripe('#member-list-current'),
    );

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_goto();
  }
}

/**
 *  Presumably something to do with a user's name.
 */
function dosomething_clubs_member_icon($uid) {
  $account = user_load($uid);
  $name = dosomething_general_get_full_name($account);
  if ($name == ' ') {
    $name = $account->name;
  }
  return $name;
}

/**
 * Club member delete form
 */
function dosomething_clubs_member_delete_form($form, &$form_state, $gid, $uid) {
  $form = array();

  $membership = og_get_group_membership($gid, 'user', $uid);

  $form['#attributes'] = array(
    'class' => array('club-member-delete'),
  );

  $form['confirm'] = array(
    '#markup' => 'Are you sure?',
  );

  $form_state['uid'] = $uid;
  $form_state['gid'] = $gid;

  $form['membership_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $membership->id,
    '#value' => $membership->id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_member_delete_submit',
    ),
  );

  return $form;
}

/**
 *  Removes a member from a group.
 */
function dosomething_clubs_member_delete_submit($form, &$form_state) {
  $etid = $form_state['values']['membership_id'];
  $uid = reset(entity_load('og_membership', array($etid)))->etid;
  entity_delete('og_membership', $etid);

    $u = user_load($form_state['uid']);
    $node = og_load_entity_from_group($form_state['gid']);

    $params = array(
      'name' => dosomething_general_get_full_name($u, 'private'),
      'club_name' => $node->title,
      'club_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
      'email' => $u->mail
    );

    drupal_mail('dosomething_clubs', 'member_deleted', $u->mail, $language, $params);

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      //ajax_command_invoke('.club-member form', 'hide'),
      ajax_command_remove('#club-member-'.$uid),
      ajax_command_restripe('#member-list-current, #member-list-pending'),
    ),
  );
}

/**
 *  Changes a user to an admin, through AJAX.
 */
function dosomething_clubs_member_admin($ajax, $operation, $gid, $uid) {
  $rid = DSCLUBS_ADMIN_ROLE;
  if ($operation == 'promote') {
    global $language;

    $u = user_load($uid);
    $node = og_load_entity_from_group($gid);

    $params = array(
      'name' => dosomething_general_get_full_name($u, 'private'),
      'club' => $node->title,
      'invite_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE))
    );

    drupal_mail('dosomething_clubs', 'new_admin', $u->mail, $language, $params);
    og_role_grant($gid, $uid, $rid);
  }
  else if ($operation == 'demote') {
    og_role_revoke($gid, $uid, $rid);
  }

  if ($ajax === 'ajax') {
    global $user;
    $commands = array(
      ajax_command_replace('#role-'.$uid, dosomething_clubs_role_link($gid, $uid)),
    );

    if ($user->uid == $uid && $operation == 'demote') {
      $commands[] = ajax_command_append('body', '<script>window.location.href = window.location.href;</script>');
    }
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_goto();
  }
}

/**
 *  Access function.  Checks if a user is an admin, or has similar permissions.
 */
function dosomething_clubs_is_club_admin($gid, $uid = NULL) {
  $account = NULL;
  if (is_null($uid)) {
    global $user;
    $account = $user;
  }
  else {
    $account = user_load($uid);
  }

  $leader = og_load_entity_from_group($gid)->uid;

  return in_array(DSCLUBS_ADMIN_ROLE, og_get_user_roles($gid, $account->uid)) || user_access('administer group', $account) || ($account->uid == $leader);
}

/**
 *  Promotes or demotes people.
 */
function dosomething_clubs_role_link($gid, $uid) {
  global $user;

  $role_url = 'club_admin/role-edit/nojs';
  $action = (dosomething_clubs_is_club_admin($gid, $uid)) ? 'demote' : 'promote';
  $tag = (dosomething_clubs_is_club_admin($gid, $uid)) ? 'Demote from Admin' : 'Promote to Admin';

  $classes = array('use-ajax');
  if ($uid == $user->uid) {
    // Reload the page class...
    $classes[] = 'demoting-myself';
  }
  return l($tag, "$role_url/$action/$gid/$uid", array('attributes' => array('class' => $classes, 'id' => 'role-'.$uid)));
}

/**
 *  Implements hook_page_alter()
 */
function dosomething_clubs_page_alter(&$page) {
  $path = request_uri();
  if (preg_match('#club\/(.*?)#i', $path)) {
    if (isset($_SESSION['just_created_club'])) {
      global $user;

      $n = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('uid', $user->uid)
        ->orderBy('created', 'DESC')
        ->range(0, 1);
      $node = $n->execute()->fetchAll();
      $node = reset($node);

      drupal_goto('clubs/share/' . $node->nid);
    }
  }

  if ($path == '/clubs') {
    drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs_landing.css', array(
     'group' => CSS_THEME,
     'weight' => 100
   ));
  }

  if ($path == '/clubs/directory') {
    drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs_directory.css', array(
     'group' => CSS_THEME,
     'weight' => 100
   ));
    drupal_add_js(drupal_get_path('module', 'dosomething_clubs') . '/js/clubs_directory.js');
  }
}
