<?php
/**
 * @file
 * Code for the dosomething_clubs feature.
 */

include_once('dosomething_clubs.features.inc');

define('DSCLUBS_ADMIN_ROLE', 3);
define('CLUBS_MCOMMONS_CAMPAIGN', 122361);

/**
 * Implements hook_og_ui_get_group_admin_alter().
 * Removes unwanted items from node/%/group.
 */
function dosomething_clubs_og_ui_get_group_admin_alter(&$data, $gid) {
  unset($data['roles']);
  unset($data['permissions']);
}

/**
 * Implements hook_theme().
 */
function dosomething_clubs_theme() {
  return array(
    'dosomething_clubs_welcome_email' => array(
      'variables' => array(
        'name' => NULL,
        'clubname' => NULL,
        'clublink' => NULL,
        'andwelcome' => NULL
      ),
      'template' => 'dosomething-clubs-new-club-email',
    ),
    'dosomething_clubs_invite_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-invite-email',
    ),
    'dosomething_clubs_member_invite_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
        'their_name' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-member-invite-email',
    ),
    'dosomething_clubs_owner_change_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-owner-change-email',
    ),
    'dosomething_clubs_new_admin_email' => array(
      'variables' => array(
        'invite_link' => NULL,
        'name' => NULL,
        'club' => NULL,
      ),
      'template' => 'dosomething-clubs-member-made-admin',
    ),
    'dosomething_clubs_approved_email' => array(
      'variables' => array(
        'approver' => NULL,
        'approvee' => NULL,
        'club_name' => NULL,
        'club_link' => NULL
      ),
      'template' => 'dosomething-clubs-approved-email',
    ),
    'dosomething_clubs_join_request_email' => array(
      'variables' => array(
        'requester' => NULL,
        'leader' => NULL,
        'club_name' => NULL,
        'club_link' => NULL
      ),
      'template' => 'dosomething-clubs-join-request-email',
    ),
    'dosomething_clubs_tell_leader_invite' => array(
      'variables' => array(
        'leader' => NULL,
        'approvee' => NULL,
        'club_name' => NULL,
        'club_link' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-leader-invite-email',
    ),
    'dosomething_clubs_role_change' => array(
      'variables' => array(
        'club_link' => NULL,
        'club' => NULL,
        'name' => NULL
      ),
      'template' => 'dosomething-clubs-new-role-email',
    ),
    'dosomething_clubs_member_deleted' => array(
      'variables' => array(
        'club_link' => NULL,
        'club_name' => NULL,
        'name' => NULL,
        'email' => NULL
      ),
      'template' => 'dosomething-clubs-member-deleted-email',
    ),
  );
}

function dosomething_clubs_is_club_member($gid) {
  global $user;

  return og_is_member($gid) || user_access('administer group', $user);
}

/**
 * Implements hook_menu().
 */
function dosomething_clubs_menu() {
  $items['create-club-logged-out'] = array(
    'title' => 'Start A Club',
    'page callback' => 'dosomething_clubs_create_club_anonymous',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['club_admin/approve/nojs/%/%'] = array(
    'page callback' => 'dosomething_clubs_approve',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_member',
    'access arguments' => array(3),
  );
  $items['club_admin/approve/ajax/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/approve/nojs/%/%'];

  $items['club/join/%'] = array(
    'page callback' => 'dosomething_clubs_join_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['club/join-by-invite/%/%'] = array(
    'page callback' => 'dosomething_clubs_join_page',
    'page arguments' => array(2, TRUE, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['club_admin/role-edit/nojs/%/%/%'] = array(
    'page callback' => 'dosomething_clubs_member_admin',
    'page arguments' => array(2,3,4,5),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_admin',
    'access arguments' => array(4),
  );
  $items['club_admin/role-edit/ajax/%/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/role-edit/nojs/%/%/%'];

  $items['club_admin/change-owner/nojs/%/%'] = array(
    'page callback' => 'dosomething_clubs_change_owner_process',
    'page arguments' => array(2,3,4),
    'type' => MENU_CALLBACK,
    'access callback' => 'dosomething_clubs_is_club_admin',
    'access arguments' => array(3),
  );

  $items['club_admin/change-owner/js/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['club_admin/change-owner/nojs/%/%'];

  return $items;
}

function dosomething_clubs_is_club_owner($owner, $uid = 0) {
  global $user;

  if ($owner == $uid || user_acces('administer group', $user)) {
    return true;
  }
  else {
    return false;
  }
}

function dosomething_clubs_change_owner_confirm_form($form, $form_state, $user, $club, $gid) {
  $form['confirm_title'] = array(
    '#markup' => 'Change Club Ownership',
    '#prefix' => '<h2>',
    '#suffix' => '</h2>'
  );

  $form['confirm_message'] = array(
    '#markup' => 'Are you <b>sure</b> you want to make ' . $user->name . ' the owner of the "' . $club->title . '" club? You will no longer be the leader, but you will retain administrator rights.',
    '#prefix' => '<p>',
    '#suffix' => '</p>'
  );

  $form['yep'] = array(
    '#type' => 'submit',
    '#value' => 'Yes, change the owner',
    '#attributes' => array(
      'class' => array('go-button'),
      'style' => 'margin: 10px'
    )
  );

  $form['nope'] = array(
    '#type' => 'button',
    '#value' => 'No! Take me back.',
    '#attributes' => array(
      'onclick' => 'javascript:window.history.go(-1)',
      'class' => array('go-button'),
      'style' => 'margin: 10px'
    )
  );

  $form_state['uid'] = $user->uid;
  $form_state['club'] = $club->nid;
  $form_state['gid'] = $gid;

  $form['#submit'][] = 'dosomething_clubs_do_change_owner';
  return $form;
}

function dosomething_clubs_change_owner($clubid, $userid) {
  $user = user_load($userid);
  $profile = profile2_load_by_user($user, 'main');

  $nid = og_load_entity_from_group($clubid)->nid;
  $node = node_load($nid);
  $node->uid = $user->uid;
  $node->field_email[LANGUAGE_NONE][0]['value'] = $user->mail;
  $node->field_name_last[LANGUAGE_NONE][0]['value'] = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];
  $node->field_name[LANGUAGE_NONE][0]['value'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];

  if (isset($profile->field_user_mobile[LANGUAGE_NONE][0]['value']) && !empty($profile->field_user_mobile[LANGUAGE_NONE][0]['value'])) {
    $phone = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
  }
  else {
    $phone = '';
  }

  $node->field_phone_required[LANGUAGE_NONE][0]['value'] = $phone;
  node_save($node);

  og_role_grant($clubid, $userid, DSCLUBS_ADMIN_ROLE);

  /**
    * Send an email to the new group owner, letting them know they now own the group.
    */
  $params = array(
    'name' => dosomething_general_get_full_name($user, 'private'),
    'club' => $node->title,
    'invite_link' => url(drupal_lookup_path('alias', 'node/' . $nid), array('absolute' => TRUE))
  );

  if (valid_email_address($user->mail)) {
     global $language;
     drupal_mail('dosomething_clubs', 'owner_change', $user->mail, $language, $params);
  }
}

function dosomething_clubs_do_change_owner($form, &$form_state) {
  // Repopulate the group with the new user's information.
  dosomething_clubs_change_owner($form_state['gid'], $form_state['uid']);

  drupal_set_message(t('Group owner successfully changed.'));
  $form_state['redirect'] = drupal_lookup_path('alias', 'node/' . $form_state['club']);
}

function dosomething_clubs_change_owner_process($jsstate, $gid, $uid) {
  if ($jsstate == 'nojs') {
    if (!empty($gid)) {
      $nid = og_load_entity_from_group($gid)->nid;
      if (!empty($nid)) {
        $n = node_load($nid);
        $u = user_load($uid);
      }
    }

    $f = drupal_get_form('dosomething_clubs_change_owner_confirm_form', $u, $n, $gid);
    return drupal_render($f);
  }
  else if ($jsstate == 'js') {
    dosomething_clubs_change_owner($gid, $uid);
    return json_encode(array(
      'status' => true
    ));
  }
}

/**
 * Implements hook_node_insert().
 */
function dosomething_clubs_node_insert($node) {
  if ($node->type == 'club') {
    $email = field_get_items('node', $node, 'field_email');
    $names = field_get_items('node', $node, 'field_name');
    $phone = field_get_items('node', $node, 'field_phone_required');
    $name = strlen($names[0]['value']) ? $names[0]['value'] : $email[0]['value'];

    $params = array(
      'name' => $name,
      'clubname' => $node->title,
      'clublink' => 'http://' . $_SERVER['HTTP_HOST'] . url('node/' . $node->nid),
    );
    if ($node->new_member) {
      $params['andwelcome'] = t(' and welcome to DoSomething.org');
    }

    global $language;

    dosomething_clubs_make_owner_admin($node->nid);
    drupal_mail('dosomething_clubs', 'welcome_email', $email[0]['value'], $language, $params);
    dosomething_general_mobile_commons_subscribe($phone[0]['value'], CLUBS_MCOMMONS_CAMPAIGN);
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_clubs_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome_email':
      $message['subject'] = t('Success! You have just started !club', array('!club' => $params['clubname']));
      $message['body'][] = theme('dosomething_clubs_welcome_email', $params);
      #$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      // That was causing crazy issues with emails.
      $message['headers']['Bcc'] = "'clubs+approval@dosomething.org','nadir@dosomething.org'";
      $message['headers']['From'] = 'Do Something Clubs <clubs@dosomething.org>';
      break;
    case 'invite_email':
      $message['subject'] = t('!name has invited you to join !club', array('!club' => $params['club'], '!name' => $params['name']));
      $message['body'][] = theme('dosomething_clubs_invite_email', $params);
      $message['headers']['From'] = $params['name'] . ' <clubs@dosomething.org>';
      break;
    case 'member_invite_email':
      $message['subject'] = t('!name has added you to "!club"', array('!name' => $params['name'], '!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_member_invite_email', $params);
      $message['headers']['From'] = $params['name'] . ' <clubs@dosomething.org>';
      break;
    case 'owner_change':
      $message['subject'] = t('You have been made the owner of !club', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_owner_change_email', $params);
      $message['headers']['From'] = 'DoSomething.org Clubs <clubs@dosomething.org>';
      break;
    case 'new_admin':
      $message['subject'] = t('You have been given admin privelages for "!club"', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_new_admin_email', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'approved_email':
      $message['subject'] = t('!person has approved your request to join "!club"', array('!person' => $params['approver'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_approved_email', $params);
      $message['headers']['From'] = $params['approver'] . ' <clubs@dosomething.org>';
      break;
    case 'join_request_email':
      $message['subject'] = t('!name has requested to join your "!club"', array('!name' => $params['requester'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_join_request_email', $params);
      $message['headers']['From'] = $params['requester'] . ' <clubs@dosomething.org>';
      break;
    case 'tell_leader_someone_invited_email':
      $message['subject'] = t('!name has joined "!club"', array('!name' => $params['approvee'], '!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_tell_leader_invite', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'role_change':
      $message['subject'] = t('Your title has been updated on "!club"', array('!club' => $params['club']));
      $message['body'][] = theme('dosomething_clubs_role_change', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
    case 'member_deleted':
      $message['subject'] = t('Your member profile has been unlinked from "!club"', array('!club' => $params['club_name']));
      $message['body'][] = theme('dosomething_clubs_member_deleted', $params);
      $message['headers']['From'] = 'DoSomething Clubs <clubs@dosomething.org>';
      break;
  }
}

/**
 * Implements hook_form_og_uid_add_users_alter().
 */
function dosomething_clubs_form_og_ui_add_users_alter(&$form, $form_state) {
  $form['og_user']['og_add_user_state'] = array(
    '#type' => 'value',
    '#value' => OG_STATE_ACTIVE,
  );
  $form['og_user']['og_add_user_membership_type'] = array(
    '#type' => 'value',
    '#value' => OG_MEMBERSHIP_TYPE_DEFAULT,
  );
}

/**
 * Modify the drupal mail system to send HTML emails.
 */
class DosomethingClubsMailSystem implements MailSystemInterface {
  public function format(array $message) {
    $message['body'] = implode("\n\n", $message['body']);
    return $message;
  }
  public function mail(array $message) {
    $mimeheaders = array();
    foreach ($message['headers'] as $name => $value) {
      $mimeheaders[] = $name . ': ' . mime_header_encode($value);
    }
    $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
    return mail(
      $message['to'],
      mime_header_encode($message['subject']),
      // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
      // on Unix and CRLF on Windows. Drupal automatically guesses the
      // line-ending format appropriate for your system. If you need to
      // override this, adjust $conf['mail_line_endings'] in settings.php.
      preg_replace('@\r?\n@', $line_endings, $message['body']),
      // For headers, PHP's API suggests that we use CRLF normally,
      // but some MTAs incorrectly replace LF with CRLF. See #234403.
      join("\n", $mimeheaders)
    );
  }
}

/**
 * Impelments hook_form_alter().
 */
function dosomething_clubs_form_club_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['state']['#title'] = 'What state is your school in?';
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['type']['#title'] = 'What kind of school is it?';
  $form['field_school_reference'][LANGUAGE_NONE][0]['target_id']['name']['#title'] = 'School name';

  global $user;
  $profile = profile2_load_by_user($user, 'main');

  $form['another'] = array(
    '#markup' => '<p id="dosomething-club-tag">DoSomething.org Club</p>',
    '#weight' => 4
  );
  $form['test'] = array(
    '#markup' => '<p id="club-name-live">The club name will be "<span>(Write something)</span> DoSomething.org Club"</p>',
    '#weight' => 4
  );

  $form['field_noschool_club_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Group Name');

  if (!user_is_logged_in()) {
    if ($_SESSION['shortform_email']) {
      $form['field_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $_SESSION['shortform_email'];
    }

    $form['not_logged_in_notice'] = array(
      '#markup' => t("It looks like you're not logged in. Fill out this form to create a DoSomething.org membership and create your club."),
      '#prefix' => '<div id="not-logged-in-notice" class="example-obtuse">',
      '#suffix' => '</div>',
      '#weight' => -1000
    );

    $form['parent_email'] = array(
      '#title' => t("Your Parent's email address:"),
      '#description' => t("Please give us your parent's email address so we can confirm you can join us!"),
      '#type' => 'textfield',
      '#weight' => -1
    );

    $form['password'] = array(
      '#title' => t('Password'),
      '#description' => t("This will be the password you use to login to your DoSomething.org account."),
      '#type' => 'password',
      '#required' => TRUE,
      '#weight' => 10
    );

    $form['new_member'] = array(
      '#type' => 'hidden',
      '#value' => 1
    );

    $form['#group_children']['password'] = 'group_club_leader_info';
    $form['#fieldgroups']['group_club_leader_info']->children[] = 'password';

    $form['#group_children']['parent_email'] = 'group_club_leader_info';
    $form['#fieldgroups']['group_club_leader_info']->children[] = 'parent_email';
  }
  else {
    if (isset($profile->field_user_address)) {
      $address = $profile->field_user_address[LANGUAGE_NONE][0];

      if (
          empty($form['field_club_address'][LANGUAGE_NONE][0]['value']['#default_value'])
          && empty($form['field_club_city'][LANGUAGE_NONE][0]['value']['#default_value'])
          && empty($form['field_club_state'][LANGUAGE_NONE]['#default_value'])
          && empty($form['field_club_zip'][LANGUAGE_NONE][0]['value']['#default_value'])
      ) {
        $form['field_club_address'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['thoroughfare'];
        $form['field_club_city'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['locality'];
        $form['field_club_state'][LANGUAGE_NONE]['#default_value'] = $address['administrative_area'];
        $form['field_club_zip'][LANGUAGE_NONE][0]['value']['#default_value'] = $address['postal_code'];
      }
    }

    $form['#submit'][] = 'dosomething_general_webform_email_and_mobile_subscribe';
  }

  $form['#submit'][] = 'dosomething_clubs_mailchimp';

  $form['#attached']['js'] = array(
    array(
      'data' => drupal_get_path('module', 'dosomething_clubs') . '/js/club-autofill.js',
      'options' => array(
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
        'every_page' => TRUE
      )
    )
  );

  $form['#attached']['css'] = array(
    array(
      'data' => drupal_get_path('module', 'dosomething_clubs') . '/css/clubs-form.css',
      'options' => array(
        'group' => CSS_LIBRARY,
        'preprocess' => FALSE,
        'every_page' => TRUE
      )
    )
  );
  #drupal_add_js(drupal_get_path('module', 'dosomething_clubs') . '/js/club-autofill.js');
  #drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs-form.css');
  $form['#validate'][] = 'dosomething_clubs_form_validate';

  // Take no action if this user is not authenticated.
  if ($user->uid == 0) {
    #$form['#submit'][] = 'dosomething_clubs_register_user';
    $form['#submit'][] = 'dosomething_login_register_block_submit';
    return;
  }
  // Only fill in data on forms that are ours or new forms.
  elseif ($form['nid']['#value'] == NULL || $form['#node']->uid == $user->uid) {
    // Load data.
    $profile = profile2_load_by_user($user, 'main');
    $augmented = FALSE;
    if ($profile) {
      $augmented = TRUE;
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
      if ($form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_first_name->value();
      }
      if ($form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_last_name->value();
      }
      // If the mobile number is empty, prepopulate it.
      if ($form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
        $form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_mobile->value();
      }
      // If we have a birthday, prepopulate the field.
      if (is_numeric($profile_wrapper->field_user_birthday->raw())) {
        $form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']  = date('Y-m-d H:i:s', $profile_wrapper->field_user_birthday->raw());
        // We want to capture birthdates but we don't want them updated here.
        // We'll set a form error below if they somehow manage to do this.
        $form['field_club_leader_birthdate']['#disabled'] = TRUE;
      }
    }
    // If this email isn't actually a magic mobile number, prepopulate the form
    // with it.
    if (substr($user->mail, -7) != '@mobile') {
      $augmented = TRUE;
      $form['field_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
    }
    if ($augmented) {
      // Attach our submit handler to update the user and profile objects with
      // newer data.
      $form['#submit'][] = 'dosomething_clubs_form_submit';
    }
  }
}

function dosomething_clubs_mailchimp(&$form, &$form_state) {
  $vals = $form_state['values'];
  $mid = $vals['field_mailchimp_group_id'][LANGUAGE_NONE][0]['value'];
  $email = $vals['field_email'][LANGUAGE_NONE][0]['value'];

  if (!empty($mid)) {
     dosomething_general_mailchimp_subscribe($email, $mid);
  }
}

function dosomething_clubs_make_owner_admin($nid) {
  global $user;
  $gid = og_get_group('node', $nid)->gid;
  og_role_grant($gid, $user->uid, DSCLUBS_ADMIN_ROLE);
}

function dosomething_clubs_register_user(&$form, &$form_state) {
  global $user;
  $values = $form_state['values'];
    if (!user_is_logged_in()) {
    // register a new user
    $form_state = array();
    $form_state['values']['name'] = $values['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['mail'] = $values['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['pass']['pass1'] = $values['password'];
    $form_state['values']['pass']['pass2'] = $values['password'];
    $form_state['values']['op'] = t('Create new account');
    drupal_form_submit('user_register_form', $form_state);
  }
}

function dosomething_clubs_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_719550') {
    $form['#submit'][] = 'dosomething_clubs_preserve_shortform_email';
  }
}

function dosomething_clubs_preserve_shortform_email(&$form, &$form_state) {
  $email = $form_state['input']['submitted']['field_webform_email'][LANGUAGE_NONE][0]['email'];
  $_SESSION['shortform_email'] = $email;
}

/**
 * Scholarship Application form validation callback.
 */
function dosomething_clubs_form_validate(&$form, &$form_state) {
  global $user;
  $error = 0;

  if (!user_is_logged_in()) {
    // 13 years in seconds
    $atleast = strtotime('13 years ago');
    $bday = strtotime($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']);

    if ($bday > $atleast) {
      form_set_error('parent_email', t("Please give us your parent's email address so we can check that you're okay to be here."));
    }
  }

  // If the email is set, make sure we can update the user's email address.
  if (isset($form_state['values']['field_email'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'] != '') {
    $mail = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $account = user_load_by_mail($mail);
    // If we found an account with that email address and the email address does
    // not belong to this user, set an error.
    if ($account && $account->uid != $user->uid) {
      form_set_error('field_email', t('That email address already belongs to a DoSomething.org member.  Do you have another account? Try !loggingin or !resetting', array(
        '!loggingin' => l('logging in', 'user', array(
          'attributes' => array(
            'class' => array('sign-in-popup')
          )
        )),
        '!resetting' => l('resetting your password', 'user/password')
      )));
      $error++;
    }
    if (!valid_email_address($mail)) {
      form_set_error('field_email', t('The email address provided is not a valid email address.'));
      $error++;
    }
  }
  // Don't let them change their birthdate on this form.
  if ((isset($form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']) && $form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value'] != '') && (isset($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value'] != '')) {
    if (substr($form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value'], 0, 10) != substr($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value'], 0, 10)) {
      form_set_error('field_club_leader_birthdate', 'Sorry you can\'t change your birthdate on this form. Please edit your profile to change your birthdate');
      $error++;
    }
  }
  if (isset($form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    $number = $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    if (strlen($number) != 10) {
      form_set_error('field_phone_required', t('We need a valid phone number with area code.'));
      $error++;
    }
  }

  // If a user is not logged in and is creating a club, fake the registration form.
  // This information will create a user in the system.
  if (!user_is_logged_in()) {
    $form_state['input']['first_name'] = $form_state['values']['first_name'] = $form_state['values']['field_name'][LANGUAGE_NONE][0]['value'];
    $form_state['input']['last_name'] = $form_state['values']['last_name'] = $form_state['values']['field_name_last'][LANGUAGE_NONE][0]['value'];
    $form_state['input']['parent_email'] = $form_state['values']['parent_email'];
    $form_state['values']['birthdate'] = $bday;
    $form_state['values']['phone'] = $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['pass'] = $form_state['values']['password'];
    $form_state['values']['email'] = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['mail'] = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $form_state['values']['month'] = date('m', $bday);
    $form_state['values']['day'] = date('d', $bday);
    $form_state['values']['year'] = date('Y', $bday);
  }
}

function dosomething_general_array_vals_multi($array,&$vals) {
  foreach ($array as $key => $value) {
      if (is_array($value)) {
          array_vals_multi($value,$vals);
      }else{
          $vals[] = $value; 
      }
  }
  return $vals;
}

/**
 * Scholarship Application form submission callback.
 */
function dosomething_clubs_form_submit(&$form, &$form_state) {
  global $user;
  $values = $form_state['values'];

  $campaigns = $form_state['values']['field_campaign_list'][LANGUAGE_NONE];

  foreach ($campaigns AS $key => $stuff) {
    $node = node_load($stuff['nid']);
    if (isset($node->field_campaign_mcommons) && !empty($node->field_campaign_mcommons[LANGUAGE_NONE][0]['value'])) {
      dosomething_general_mobile_commons_subscribe($number, $node->field_campaign_mcommons[LANGUAGE_NONE][0]['value']);
    }
  }

  // Update profile values with contact info from the application.
  $profile = profile2_load_by_user($user, 'main');
  if (isset($values['field_phone_required'][LANGUAGE_NONE][0]['value']) && $values['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    //Strip junk from the phone number:
    $number = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name'][LANGUAGE_NONE][0]['value']) && $values['field_name'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['field_name'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name_last'][LANGUAGE_NONE][0]['value']) && $values['field_name_last'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['field_name_last'][LANGUAGE_NONE][0]['value'];
  }
  $profile->save();

  if (isset($values['field_email'][LANGUAGE_NONE][0]['value']) && $values['field_email'][LANGUAGE_NONE][0]['value'] != '' && $values['field_email'][LANGUAGE_NONE][0]['value'] != $user->mail) {
    $variables = array(
      '@username' => $user->name,
      '@old_mail' => $user->mail,
      '@new_mail' => $values['field_email'][LANGUAGE_NONE][0]['value'],
    );
    watchdog('dosomething_clubs', 'Updating the email address for @username from @old_mail to @new_mail upon club creation', $variables);
    $user->mail = $values['field_email'][LANGUAGE_NONE][0]['value'];
    user_save($user);
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_clubs_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
  * Implements hook_module_implements_alter()
  */
function dosomething_clubs_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter' && isset($implementations['dosomething_clubs'])) {
    $group = $implementations['dosomething_clubs'];
    unset($implementations['dosomething_clubs']);
    $implementations['dosomething_clubs'] = $group;
  }
}

/**
  * We can't disable the OG Groups UI Module (too many requirements)
  * So let's remove the group tab the old fashioned way...
  * Implements hook_menu_alter()
  */
function dosomething_clubs_menu_alter(&$items) {
  unset($items['node/%/group']);
  unset($items['group/%/group']);
}

/**
 * Menu callback for anonymous user Create Club page.
 */
function dosomething_clubs_create_club_anonymous() {
  return array(
    'body' => array(
      '#markup' => t('Please login or become a member before starting a club.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
    'login_form' => array(
      'form' => drupal_get_form('user_login'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
  );
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function dosomething_clubs_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'club') {
    $form['title']['#value'] = 'club';
    $form['title']['#type'] = 'value';
    $form['title']['#required'] = FALSE;
  }
}

/**
 * Implement hook_node_submit().
 * 
 * Replace auto nodetitle functionality.
 */
function dosomething_clubs_node_save($node, $form, &$form_state) {
  dosomething_clubs_title($node, $form_state);
}

/**
 * Implement hook_node_submit().
 */
function dosomething_clubs_node_submit($node, $form, &$form_state) {
  dosomething_clubs_title($node, $form_state);
}

/**
 * Implement hook_node_presave().
 *
 * Replace auto nodetitle functionality
 */
function dosomething_clubs_node_presave($node) {
  dosomething_clubs_title($node);
}

function dosomething_clubs_title(&$node, $form = array()) {
  if ($node->type == 'club') {
    $noassoc = ($form ? $form['values']['field_no_school_associate'][LANGUAGE_NONE][0]['value'] : $node->field_no_school_associate[LANGUAGE_NONE][0]['value']);
    $real_name = ($form ? $form['values']['field_noschool_club_name'][LANGUAGE_NONE][0]['value'] : $node->field_noschool_club_name[LANGUAGE_NONE][0]['value']);

    if ($noassoc && trim($real_name) !== '') {
      $node->title = $real_name . ' DoSomething.org ' . t('Club');
    }
    else {
      $school_id = $node->field_school_reference[LANGUAGE_NONE][0]['target_id'];
      $school = array_shift(entity_load('ds_school', array($school_id)));
      $node->title = $school->name . ' DoSomething.org Club';
    }
  }
}

/**
 * Club invite a friend form.
 */
function dosomething_clubs_invite_form($form, &$form_state, $gid) {
  $form = array();

  $n = menu_get_object();
  $form_state['nid'] = $n->nid;

  $form['invite'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#attributes' => array(
      'placeholder' => 'Friend\'s email address',
      'style' => 'float: left; margin-right: 10px;'
    ),
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $gid,
    '#default_value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invite',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_invite_form_ajax',
    ),
  );

  //$form['#submit'][] = 'dosomething_clubs_invite_form_submit';

  return $form;
}

function dosomething_clubs_invite_form_ajax($form, &$form_state) {
  $gid = $form_state['values']['gid'];
  $invite = $form_state['values']['invite'];
  $nid = $form_state['nid'];

  if ($account = dosomething_general_load_user_by_mail_or_cell($invite)) {
    dosomething_clubs_join($gid, array('entity' => $account, 'state' => OG_STATE_ACTIVE));
    dosomething_clubs_invite_message($invite, $gid, FALSE, TRUE, $nid);
  }
  else {
    dosomething_clubs_no_account_join($invite);
    dosomething_clubs_invite_message($invite, $gid);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_invoke('#dosomething-clubs-invite-form input[name="invite"]', 'val', array('')),
      ajax_command_append('#dosomething-clubs-invite-form', 'Invitation sent!')
    ),
  );
}

/**
 * Club join form.
 */
function dosomething_clubs_join_form($form, &$form_state, $gid) {
  $form = array();

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $gid,
    '#default_value' => $gid,
  );

  $n = menu_get_object();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $n->nid,
    '#default_value' => $n->nid
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Join',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
  );

  if (!user_is_logged_in()) {
    $form['submit']['#attributes']['onclick'] = "return jQuery.fn.dsClubsSubmit()";
  }
  else {
    $form['#submit'][] = 'dosomething_clubs_join_form_submit';
  }

  return $form;
}

/**
 * Club member title form
 */
function dosomething_clubs_member_title_form($form, &$form_state, $gid, $uid) {
  $form = array();

  $current = NULL;
  $membership = og_get_group_membership($gid, 'user', $uid);
  if (isset($membership->field_membership_description) && !empty($membership->field_membership_description)) {
    $current = $membership->field_membership_description[LANGUAGE_NONE][0]['value'];
  }

  $form['#attributes'] = array(
    'class' => array('club-title-update'),
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#default_value' => $current,
    '#size' => 30,
    '#attributes' => array(
      'placeholder' => 'Position (President, VP, etc)',
    ),
  );

  $form_state['gid'] = $gid;
  $form_state['uid'] = $uid;

  $form['membership_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $membership->id,
    '#value' => $membership->id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_member_title_submit',
    ),
  );

  return $form;
}

function dosomething_clubs_member_title_submit($form, &$form_state) {
  $title = $form_state['values']['title'];
  $etid = $form_state['values']['membership_id'];
  $membership = reset(entity_load('og_membership', array($etid)));
  $membership->field_membership_description[LANGUAGE_NONE][0]['value'] = $title;
  entity_save('og_membership', $membership);

  global $language;
  $u = user_load($form_state['uid']);
  $node = og_load_entity_from_group($form_state['gid']);
  $params = array(
    'club' => $node->title,
    'club_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
    'name' => $u->name
  );
  drupal_mail('dosomething_clubs', 'role_change', $u->mail, $language, $params);

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      //ajax_command_invoke('.club-member form', 'hide'),
      ajax_command_replace('#member-title-'.$membership->etid, $title),
    ),
  );
}

/**
 * Submit handler for club join form.
 */
function dosomething_clubs_join_form_submit($form, &$form_state) {
  global $user;

  $gid = $form_state['values']['gid'];

  $n = node_load($form_state['values']['nid']);
  $u = user_load($n->uid);
  $p = profile2_load_by_user($u, 'main');

  $profile = profile2_load_by_user($user, 'main');

  $params = array(
    'requester' => $profile->field_user_first_name[LANGUAGE_NONE][0]['value'],
    'leader' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
    'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $n->nid),
    'club_name' => $n->title
  );

  drupal_mail('dosomething_clubs', 'join_request_email', $u->mail, $language, $params);

  dosomething_clubs_join($gid);
}

/**
 * Store a record of a member being invited to a team.
 */
function dosomething_clubs_no_account_join($email) {
  $data = array(
    'gid' => $gid,
    'invite' => $email,
  );
  drupal_write_record('dosomething_clubs_invites', $data, array('gid', 'invite'));
}

/**
 * Delete a record once someone signs up.
 */
function dosomething_clubs_account_created($contact) {
  if (!is_array($contact)) {
    $dc = array($contact);
  }
  else {
    $dc = $contact;
  }

  if (is_array($contact) && !empty($contact)) {
    db_delete('dosomething_clubs_invites')
      ->condition('invite', $dc, 'IN')
      ->execute();
  }
}

/**
 * Send an email/sms inviting them to a club.
 */
function dosomething_clubs_invite_message($contact, $gid, $is_reminder = FALSE, $is_member = FALSE, $node_id = 0) {
  global $language, $user;

  $params = array(
    'name' => dosomething_general_get_full_name($user, 'public'),
    'club' => og_load_entity_from_group($gid)->title,
    'invite_link' => dosomething_clubs_invite_link($gid),
    'email' => $contact
  );

  if (valid_email_address($contact)) {
    if ($is_member == TRUE) {
      $params['club_link'] = url(drupal_lookup_path('alias', 'node/' . $node_id), array(
        'absolute' => TRUE,
      ));
      $params['their_name'] = dosomething_login_find_user_by_email($contact);
     drupal_mail('dosomething_clubs', 'member_invite_email', $contact, $language, $params);
    }
    else {
      drupal_mail('dosomething_clubs', 'invite_email', $contact, $language, $params);
    }
  }
  else if (dosomething_general_valid_cell($contact)) {
    // sms_send
  }
}

/*function dosomething_clubs_invite_link($gid) {
  $url = 'club/join-by-invite/'.$gid.'/'.dosomething_clubs_invite_hash($gid);
  $url = url('user/registration', array(
    'absolute' => TRUE,
    'query' => array(
      'destination' => $url,
    ),
  ));
  return $url;
}
*/
function dosomething_clubs_entity_update($entity, $type) {
  if ($type == 'og_membership' && ($entity->original->state == 2)) {
    // It seems this is only called when a user is approved in OG Groups.
    // Sign them up for certain campaigns.
    global $user, $language;

    $person = $entity->original->etid;
    $person = user_load($person);
    $profile = profile2_load_by_user($person, 'main');

    $phone = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
    if (!empty($phone)) {
      dosomething_general_mobile_commons_subscribe($phone, CLUBS_MCOMMONS_CAMPAIGN);
    }

    $email = $person->mail;
    $my_name = dosomething_general_get_full_name($user, 'private');

    $node = og_load_entity_from_group($entity->original->gid);

    $params = array(
      'approver' => $my_name,
      'approvee' => $person->name,
      'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $node->nid),
      'club_name' => $node->title
    );

    drupal_mail('dosomething_clubs', 'approved_email', $email, $language, $params);
    if (!empty($email)) {
      //dosomething_general_infusionsoft_subscribe($email, ACTION_ID);
    }
  }
}

function dosomething_clubs_join_page($gid, $verify = FALSE, $hash = NULL) {
  global $user, $language;
  $node = og_load_entity_from_group($gid);
  $uri = entity_uri('node', $node);

  if ($verify) {
    if (is_null($hash) || ($hash !== dosomething_clubs_invite_hash($gid))) {
      drupal_set_message(t('The unique identifier is not correct for this club. Please request access to the club below.'), 'error');
    }
    else {
      $u = user_load($node->uid);
      $params = array(
        'leader' => dosomething_general_get_full_name($u, 'public'),
        'approvee' => $user->name,
        'club_link' => 'http://' . $_SERVER['HTTP_HOST'] . '/' . drupal_lookup_path('alias', 'node/' . $node->nid),
        'club_name' => $node->title,
        'email' => $u->mail
      );

      drupal_mail('dosomething_clubs', 'tell_leader_someone_invited_email', $u->mail, $language, $params);

      dosomething_clubs_join($gid, array('state' => OG_STATE_ACTIVE));
      dosomething_clubs_account_created($user->mail);
    }
  }
  else {
    dosomething_clubs_join($gid);
  }

  drupal_goto($uri['path']);
}

/**
 * Wrapper for og_group to make sure we start with pending state.
 */
function dosomething_clubs_join($gid, $args = array()) {
  global $user;

  $args += array(
    'state' => OG_STATE_PENDING,
  );

  og_group($gid, $args);
}

function dosomething_clubs_invite_hash($gid) {
  $nid = og_load_entity_from_group($gid)->nid;
  $hash = md5('ds_clubs'.$nid.$gid);
  return $hash;
}

function dosomething_clubs_invite_link($gid) {
  $url = 'club/join-by-invite/'.$gid.'/'.dosomething_clubs_invite_hash($gid);
  $url = url('user/registration', array(
    'absolute' => TRUE,
    'query' => array(
      'destination' => $url,
    ),
  ));
  return $url;
}

function dosomething_clubs_approve($ajax, $gid, $uid) {
  $values = array('entity' => user_load($uid), 'state' => OG_STATE_ACTIVE);
  og_group($gid, $values);

  if ($ajax === 'ajax') {
    $commands = array(
      ajax_command_remove('#club-member-' . $uid),
      ajax_command_append('#member-list-current', '<tr><td><h2>' . dosomething_clubs_member_icon($uid) . '</h2></td><td colspan="2">Reload the page to edit this member</td></tr>'),
      ajax_command_restripe('#member-list-current'),
    );

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_goto();
  }
}

function dosomething_clubs_member_icon($uid) {
  $account = user_load($uid);
  $name = dosomething_general_get_full_name($account);
  if ($name == ' ') {
    $name = $account->name;
  }
  return $name;
}

/**
 * Club member delete form
 */
function dosomething_clubs_member_delete_form($form, &$form_state, $gid, $uid) {
  $form = array();

  $membership = og_get_group_membership($gid, 'user', $uid);

  $form['#attributes'] = array(
    'class' => array('club-member-delete'),
  );

  $form['confirm'] = array(
    '#markup' => 'Are you sure?',
  );

  $form_state['uid'] = $uid;
  $form_state['gid'] = $gid;

  $form['membership_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $membership->id,
    '#value' => $membership->id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
    '#ajax' => array(
      'callback' => 'dosomething_clubs_member_delete_submit',
    ),
  );

  return $form;
}

function dosomething_clubs_member_delete_submit($form, &$form_state) {
  $etid = $form_state['values']['membership_id'];
  $uid = reset(entity_load('og_membership', array($etid)))->etid;
  entity_delete('og_membership', $etid);

    $u = user_load($form_state['uid']);
    $node = og_load_entity_from_group($form_state['gid']);

    $params = array(
      'name' => dosomething_general_get_full_name($u, 'private'),
      'club_name' => $node->title,
      'club_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
      'email' => $u->mail
    );

    drupal_mail('dosomething_clubs', 'member_deleted', $u->mail, $language, $params);

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      //ajax_command_invoke('.club-member form', 'hide'),
      ajax_command_remove('#club-member-'.$uid),
      ajax_command_restripe('#member-list-current, #member-list-pending'),
    ),
  );
}

function dosomething_clubs_member_admin($ajax, $operation, $gid, $uid) {
  $rid = DSCLUBS_ADMIN_ROLE;
  if ($operation == 'promote') {
    global $language;

    $u = user_load($uid);
    $node = og_load_entity_from_group($gid);

    $params = array(
      'name' => dosomething_general_get_full_name($u, 'private'),
      'club' => $node->title,
      'invite_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE))
    );

    drupal_mail('dosomething_clubs', 'new_admin', $u->mail, $language, $params);
    og_role_grant($gid, $uid, $rid);
  }
  else if ($operation == 'demote') {
    og_role_revoke($gid, $uid, $rid);
  }

  if ($ajax === 'ajax') {
    global $user;
    $commands = array(
      ajax_command_replace('#role-'.$uid, dosomething_clubs_role_link($gid, $uid)),
    );

    if ($user->uid == $uid && $operation == 'demote') {
      $commands[] = ajax_command_append('body', '<script>window.location.href = window.location.href;</script>');
    }
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_goto();
  }
}

function dosomething_clubs_is_club_admin($gid, $uid = NULL) {
  $account = NULL;
  if (is_null($uid)) {
    global $user;
    $account = $user;
  }
  else {
    $account = user_load($uid);
  }

  $leader = og_load_entity_from_group($gid)->uid;

  return in_array(DSCLUBS_ADMIN_ROLE, og_get_user_roles($gid, $account->uid)) || user_access('administer group', $account) || ($account->uid == $leader);
}

function dosomething_clubs_role_link($gid, $uid) {
  global $user;

  $role_url = 'club_admin/role-edit/nojs';
  $action = (dosomething_clubs_is_club_admin($gid, $uid)) ? 'demote' : 'promote';
  $tag = (dosomething_clubs_is_club_admin($gid, $uid)) ? 'Demote from Admin' : 'Promote to Admin';

  $classes = array('use-ajax');
  if ($uid == $user->uid) {
    // Reload the page class...
    $classes[] = 'demoting-myself';
  }
  return l($tag, "$role_url/$action/$gid/$uid", array('attributes' => array('class' => $classes, 'id' => 'role-'.$uid)));
}

function dosomething_clubs_page_alter(&$page) {
  $path = request_uri();
  if ($path == '/clubs') {
    drupal_add_css(drupal_get_path('module', 'dosomething_clubs') . '/css/clubs-landing.css', array(
     'group' => CSS_THEME,
     'weight' => 100
   ));
  }
}