<?php
/**
 * @file
 * Code for the dosomething_clubs feature.
 */

include_once('dosomething_clubs.features.inc');

/**
 * Implements hook_node_presave().
 */
function dosomething_clubs_node_presave($node) {
  if ($node->type == 'club' && $node->is_new) {
    $node->title .= ' Do Something Club';
  }
}

/**
 * Implements hook_og_ui_get_group_admin_alter().
 * Removes unwanted items from node/%/group.
 */
function dosomething_clubs_og_ui_get_group_admin_alter(&$data, $gid) {
  unset($data['roles']);
  unset($data['permissions']);
}

/**
 * Implements hook_theme().
 */
function dosomething_clubs_theme() {
  return array(
    'dosomething_clubs_welcome_email' => array(
      'variables' => array('name' => NULL),
      'template' => 'dosomething-clubs-welcome-email',
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function dosomething_clubs_node_insert($node) {
  if ($node->type == 'club') {
    $email = field_get_items('node', $node, 'field_email');
    $names = field_get_items('node', $node, 'field_name');
    $name = strlen($names[0]['value']) ? $names[0]['value'] : $email[0]['value'] ;

    $params = array(
      'name' => $name,
    );
    global $language;
    drupal_mail('dosomething_clubs', 'welcome_email', $email[0]['value'], $language, $params);
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_clubs_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome_email':
      $message['subject'] = t('Congratulations, your Club has been created!');
      $message['body'][] = theme('dosomething_clubs_welcome_email', array('name' => $params['name']));
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['headers']['Bcc'] = "'clubs+approval@dosomething.org','nadir@dosomething.org'";
      $message['headers']['From'] = 'Do Something Clubs <clubs@dosomething.org>';
      break;
  }
}

/**
 * Implements hook_form_og_uid_add_users_alter().
 */
function dosomething_clubs_form_og_ui_add_users_alter(&$form, $form_state) {
  $form['og_user']['og_add_user_state'] = array(
    '#type' => 'value',
    '#value' => OG_STATE_ACTIVE,
  );
  $form['og_user']['og_add_user_membership_type'] = array(
    '#type' => 'value',
    '#value' => OG_MEMBERSHIP_TYPE_DEFAULT,
  );
}

/**
 * Modify the drupal mail system to send HTML emails.
 */
class DosomethingClubsMailSystem implements MailSystemInterface {
  public function format(array $message) {
    $message['body'] = implode("\n\n", $message['body']);
    return $message;
  }
  public function mail(array $message) {
    $mimeheaders = array();
    foreach ($message['headers'] as $name => $value) {
      $mimeheaders[] = $name . ': ' . mime_header_encode($value);
    }
    $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
    return mail(
      $message['to'],
      mime_header_encode($message['subject']),
      // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
      // on Unix and CRLF on Windows. Drupal automatically guesses the
      // line-ending format appropriate for your system. If you need to
      // override this, adjust $conf['mail_line_endings'] in settings.php.
      preg_replace('@\r?\n@', $line_endings, $message['body']),
      // For headers, PHP's API suggests that we use CRLF normally,
      // but some MTAs incorrectly replace LF with CRLF. See #234403.
      join("\n", $mimeheaders)
    );
  }
}

/**
 * Impelments hook_form_alter().
 */
function dosomething_clubs_form_club_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Take no action if this user is not authenticated.
  if ($user->uid == 0) {
    return;
  }
  // Load data.
  $profile = profile2_load_by_user($user, 'main');
  $augmented = FALSE;
  if ($profile) {
    $augmented = TRUE;
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
    if ($form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
      $form['field_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_first_name->value();
    }
    if ($form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
      $form['field_name_last'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_last_name->value();
    }
    // If the mobile number is empty, prepopulate it.
    if ($form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
      $form['field_phone_required'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_mobile->value();
    }
    // If we have a birthday, prepopulate the field.
    if (is_numeric($profile_wrapper->field_user_birthday->raw())) {
      $form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']  = date('Y-m-d H:i:s', $profile_wrapper->field_user_birthday->raw());
      // We want to capture birthdates but we don't want them updated here.
      // We'll set a form error below if they somehow manage to do this.
      $form['field_club_leader_birthdate']['#disabled'] = TRUE;
    }
  }
  // If this email isn't actually a magic mobile number, prepopulate the form
  // with it.
  if (substr($user->mail, -7) != '@mobile') {
    $augmented = TRUE;
    $form['field_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
  }
  if ($augmented) {
    // Attach our submit handler to update the user and profile objects with
    // newer data.
    $form['#submit'][] = 'dosomething_clubs_form_submit';
    $form['#validate'][] = 'dosomething_clubs_form_validate';
  }
}

/**
 * Scholarship Application form validation callback.
 */
function dosomething_clubs_form_validate(&$form, &$form_state) {
  global $user;
  // If the email is set, make sure we can update the user's email address.
  if (isset($form_state['values']['field_email'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'] != '') {
    $mail = $form_state['values']['field_email'][LANGUAGE_NONE][0]['value'];
    $account = user_load_by_mail($mail);
    // If we found an account with that email address and the email address does
    // not belong to this user, set an error.
    if ($account && $account->uid != $user->uid) {
      form_set_error('field_email', t('You may not provide the email address of another user, do you have another account?'));
    }
    if (!valid_email_address($mail)) {
      form_set_error('field_email', t('The email address provided is not a valid email address.'));
    }
  }
  // Don't let them change their birthdate on this form.
  if (isset($form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value'] != '') {
    if ($form['field_club_leader_birthdate'][LANGUAGE_NONE][0]['#default_value']['value'] != $form_state['values']['field_club_leader_birthdate'][LANGUAGE_NONE][0]['value']) {
      form_set_error('field_club_leader_birthdate', 'Sorry you can\'t change your birthdate on this form. Please edit your profile to change your birthdate');
    }
  }
  if (isset($form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value']) && $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    $number = $form_state['values']['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    if (strlen($number) != 10) {
      form_set_error('field_phone_required', t('We need a valid phone number with area code.'));
    }
  }
}

/**
 * Scholarship Application form submission callback.
 */
function dosomething_clubs_form_submit(&$form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  // Update profile values with contact info from the application.
  $profile = profile2_load_by_user($user, 'main');
  if (isset($values['field_phone_required'][LANGUAGE_NONE][0]['value']) && $values['field_phone_required'][LANGUAGE_NONE][0]['value'] != '') {
    //Strip junk from the phone number:
    $number = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
    $number = preg_replace('/\D/', '', $number);
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $values['field_phone_required'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name'][LANGUAGE_NONE][0]['value']) && $values['field_name'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $values['field_name'][LANGUAGE_NONE][0]['value'];
  }
  if (isset($values['field_name_last'][LANGUAGE_NONE][0]['value']) && $values['field_name_last'][LANGUAGE_NONE][0]['value'] != '') {
    $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] = $values['field_name_last'][LANGUAGE_NONE][0]['value'];
  }
  $profile->save();

  if (isset($values['field_email'][LANGUAGE_NONE][0]['value']) && $values['field_email'][LANGUAGE_NONE][0]['value'] != '' && $values['field_email'][LANGUAGE_NONE][0]['value'] != $user->mail) {
    $variables = array(
      '@username' => $user->name,
      '@old_mail' => $user->mail,
      '@new_mail' => $values['field_email'][LANGUAGE_NONE][0]['value'],
    );
    watchdog('dosomething_clubs', 'Updating the email address for @username from @old_mail to @new_mail upon club creation', $variables);
    $user->mail = $values['field_email'][LANGUAGE_NONE][0]['value'];
    user_save($user);
  }
}
