<?php
/**
 * @file
 * Code for the dosomething_user_my_somethings feature.
 */

include_once('dosomething_user_my_somethings.features.inc');

/**
 * Implements hook_menu_alter().
 */
function dosomething_user_my_somethings_menu_alter(&$items) {
  // User's fullname should be title of page.
  $items['user/%user']['title callback'] = 'dosomething_user_my_somethings_get_full_name';
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_user_my_somethings_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function dosomething_user_my_somethings_webform_submission_insert($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings_' . $submission->uid, 'cache');
}

/**
 * Implements hook_webform_submission_update().
 */
function dosomething_user_my_somethings_webform_submission_update($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings_' . $submission->uid, 'cache');
}

/**
 * Implements hook_og_membership_insert().
 */
function dosomething_user_my_somethings_og_membership_insert($membership) {
  if ($membership->entity_type == 'user') {
    cache_clear_all('dosomething_user_my_somethings_' . $membership->etid, 'cache');
  }
}

/**
 * Member dashboard block for logged in users.
 */
function dosomething_user_my_somethings_member_block() {
  global $user;
  return array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_user_my_somethings') . '/js/show-member-items.js',
      ),
    ),
    'name' => array(
      '#type' => 'container',
      '#prefix' => '<a href="/user" class="ds-member-name-bar">',
      '#suffix' => '</a>',
      '#attributes' => array(
        'class' => array(
          'dosomething-login-user-name',
        ),
      ),
      'name' => array(
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => dosomething_user_my_somethings_get_full_name($user),
      ),
      'role' => array(
        '#prefix' => '<span class="user-role">( ',
        '#suffix' => ' )</span>',
        '#markup' => dosomething_user_my_somethings_user_role(),
      ),
    ),
    'collapsible' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'dosomething-user-block-collapsible',
        ),
      ),
      'profile' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'dosomething-login-profile',
          ),
        ),
        'completion' => dosomething_user_my_somethings_profile_completion(),
      ),
      'somethings' => dosomething_user_my_somethings_my_somethings(),
      'clubs' => dosomething_user_my_somethings_clubs(),
    ),
  );
}

/**
 * Markup for how much of the profile is finished.
 */
function dosomething_user_my_somethings_profile_completion() {
  global $user;
  $ratio = 0;
  if (module_exists('dosomething_roles')) {
    $ratio = dosomething_roles_get_user_percentage($user->uid);
  }

  return array(
    'header' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'profile-header',
        ),
      ),
      '#children' => t('My profile: %percent', array('%percent' => number_format($ratio, 0) . '%')) . l('Complete >>', 'user/' . $user->uid . '/edit/main'),
    ),
    'percentage' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'dosomething-login-percentage',
        ),
      ),
      'ratio' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'ratio',
          ),
          'data-ratio' => $ratio,
        ),
        'inner' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'inner',
            ),
            'style' => 'width: ' . $ratio . '%',
          ),
          '#children' => $ratio,
        ),
      ),
    ),
  );
}

/**
 * Get markup for My Current Somethings (sidebar version).
 */
function dosomething_user_my_somethings_my_somethings() {
  global $user;
  $items = array();

  $items = dosomething_user_my_somethings_my_current_something_links($user->uid);

  return array(
    'title' => array(
      '#prefix' => '<h2 class="my-somethings">',
      '#suffix' => '</h2>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => 'inner',
        ),
        '#children' => t('My Current Somethings'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array(
          'my-somethings',
        ),
      ),
    ),
  );
}

/**
 * Get a list of links for the different types of my somethings.
 * This populates the sidebar list of 'my current somethings'.
 *
 * @param $uid
 *  (int) a user id.
 * @return array
 */
function dosomething_user_my_somethings_my_current_something_links($uid) {
  $items = array();
  $account = user_load($uid);

  $cid = 'dosomething_user_my_somethings_' . $uid;
  $cache = cache_get($cid);

  $somethings_info = array(
    'grant_application' => array(
      'title' => t('Grant Applications'),
      'title_field' => 'field_webform_name',
    ),
    'project_report' => array(
      'title' => t('Project Reports'),
      'title_field' => 'field_project_title',
    ),
  );

  if (!is_object($cache) || !isset($cache->data['somethings'])) {
    $somethings = dosomething_user_my_somethings_get_my_somethings($uid, 'current');
    if (!is_object($cache)) {
      $cache = new stdClass();
      $cache->data = array();
    }
    $cache->data['somethings'] = $somethings;
    cache_set($cid, $cache->data);
  }
  else {
    $somethings = $cache->data['somethings'];
  }

  if (count($somethings)) {
    foreach ($somethings as $type => $something) {
      if (count($something)) {
        $items[$type] = array('data' => $somethings_info[$type]['title'], 'children' => array());
        foreach ($something as $submission) {
          // Note: This is not an actual submission object, but it has the right
          // info, so we're not loading it up as of now.
          $title = filter_xss($submission->{$somethings_info[$type]['title_field'] . '_value'});
          $node = node_load($submission->nid);
          $edit_access = dosomething_projects_general_webform_menu_submission_access($node, $submission, 'edit', $account);
          $link = $edit_access ? "node/{$node->nid}/submission/{$submission->sid}/edit" : 'webform-submission/' . $submission->sid;
          $items[$type]['children'][] = l($title, $link);
        }
      }
    }
  }

  if (!is_object($cache) || !isset($cache->data['report_backs'])) {
    $report_backs = dosomething_user_my_somethings_campaign_report_backs_needed($uid);
    if (!is_object($cache)) {
      $cache = new stdClass();
      $cache->data = array();
    }
    $cache->data['report_backs'] = $report_backs;
    cache_set($cid, $cache->data);
  }
  else {
    $report_backs = $cache->data['report_backs'];
  }

  if (count($report_backs)) {
    $items['campaign_report_back'] = array('data' => 'Campaign Sign Ups', 'children' => array());
    foreach($report_backs as $report_back) {
      $items['campaign_report_back']['children'][] = l($report_back->campaign_title, 'node/' . $report_back->report_back_entity_id);
    }
  }
  return $items;
}

/**
 * Get the markup for a list of user's clubs (sidebar version).
 */
function dosomething_user_my_somethings_clubs() {
  global $user;
  $items = array();

  // TODO: It would be nice to cache these memberships.
  $groups = dosomething_user_my_somethings_get_user_group_memberships($user->uid, 'club');
  if (count($groups)) {
    foreach ($groups as $group) {
     $items[] = l(filter_xss($group->title), 'node/' . $group->nid);
    }
  }
  else {
    $items[] = l(t('Start a club'), 'node/add/club');
  }

  return array(
    'title' => array(
      '#prefix' => '<h2 class="notifications">',
      '#suffix' => '</h2>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => 'inner',
        ),
        '#children' => t('My Clubs'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array(
          'notifications',
        ),
      ),
    ),
  );
}

/**
 * Show the user's role.
 */
function dosomething_user_my_somethings_user_role($account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  if (dosomething_roles_user_is_staff_member($account)) {
    return t('staff');
  }
  $current_role = dosomething_roles_get_current_role($account->uid);
  $exploded_role = explode(' ', trim($current_role));
  return filter_xss($exploded_role[0]);
}

/**
 * Get a user's full name as a string.
 *
 * @param $account
 *  (object) A standard user object.
 * @return string
 */
function dosomething_user_my_somethings_get_full_name($account) {
  $profile = profile2_load_by_user($account, 'main');
  $names = array();
  $name_fields = array('field_user_first_name', 'field_user_last_name');
  if (is_object($profile)) {
    foreach ($name_fields as $field_name) {
      $field = field_get_items('profile2', $profile, $field_name);
      if (isset($field[0]['safe_value']) && $field[0]['safe_value']) {
        $names[] = $field[0]['safe_value'];
      }
    }
  }
  return empty($names) ? filter_xss($account->name) : implode(' ', $names);
}

/**
 * Get a list of a user's webform submissions.
 *
 * @param $uid
 *  (int) a user id.
 * @param $type
 *  (string) The type of weform submission.
 * @param $title_field
 *  (string) The name of the title field for the webform type.
 * @param $is_draft
 *  (boolean_ Whether or not the submission is a draft.
 * @param $statuses
 *  (array) A list of statuses for filtering on project reports.
 * @return array
 */
function dosomething_user_my_somethings_get_submissions($uid, $type, $title_field, $is_draft = FALSE, $statuses = NULL) {
  $submissions = array();
  if (is_array($statuses)) {
    $available_statuses = array(
      2 => 'project idea',
      3 => 'ongoing project',
      4 => 'completed project',
    );
    $statuses = array_keys(array_intersect($available_statuses, $statuses));
  }
  try {
    $query = db_select('webform_submissions', 'ws');
    $query->innerJoin('node', 'n', 'ws.nid = n.nid');
    $query->innerJoin('field_data_' . $title_field, 't', 'ws.sid = t.entity_id');
    if (is_array($statuses)) {
     $query->innerJoin('field_data_field_project_type', 'pt', 'ws.sid = pt.entity_id');
    }
    $query->fields('ws', array('sid', 'submitted', 'uid', 'is_draft'));
    $query->fields('n', array('nid', 'type'));
    $query->fields('t', array($title_field . '_value'));
    $query->condition('ws.uid', $uid, '=');
    $query->condition('n.type', $type, '=');
    $query->condition('ws.is_draft', (int) $is_draft, '=');
    $query->condition('t.entity_type', 'webform_submission_entity', '=');
    if (is_array($statuses)) {
      $query->condition('pt.entity_type', 'webform_submission_entity', '=');
      $query->condition('pt.field_project_type_value', $statuses, 'IN');
    }
    $results = $query->execute();
    while ($result = $results->fetchObject()) {
      $submissions[$result->sid] = $result;
    }
  }
  catch (Exception $e) {
    return NULL;
  }
  return $submissions;
}

/**
 * Get a list of group memberships for a user based on node type.
 *  of group.  This assumes that the group is a node and the membership
 *  is for a user.
 */
function dosomething_user_my_somethings_get_user_group_memberships($uid, $node_type) {
  if (!module_exists('og')) {
    continue;
  }
  // There doesn't seem to be an og function to do exactly what we want
  // so we have our own.
  $groups = array();
  $query = db_select('og_membership', 'm');
  $query->innerJoin('og', 'o', 'o.gid = m.gid');
  $query->innerJoin('node', 'n', 'o.etid = n.nid');
  $query->fields('o', array('gid', 'etid'));
  $query->fields('n', array('nid', 'title'));
  $query->condition('o.entity_type', 'node', '=');
  $query->condition('m.etid', $uid, '=');
  $query->condition('n.type', $node_type, '=');
  $query->condition('o.state', OG_STATE_ACTIVE);
  $results = $query->execute();
  while ($result = $results->fetchObject()) {
    $groups[$result->etid] = $result;
  }
  return $groups;
}

/**
 * Build list of current/past somethings. These include:
 *   Grant applications (link to grant application form)
 *   Projects (links to project update form)
 *
 * @param $uid
 *  (int) a user id.
 * @param $era
 * (string) 'current' or 'past' somethings. 
 * @return array
 */
function dosomething_user_my_somethings_get_my_somethings($uid, $era) {
  $somethings_info = array(
    'grant_application' => array(
      'title_field' => 'field_webform_name',
      'draft' => $era == 'current' ? TRUE : FALSE,
      'statuses' => NULL,
    ),
    'project_report' => array(
      'title_field' => 'field_project_title',
      'draft' => FALSE,
      'statuses' => $era == 'current' ? array('ongoing project', 'project idea') : array('completed project'),
    ),
  );

  foreach ($somethings_info as $type => $info) {
    $somethings[$type] = dosomething_user_my_somethings_get_submissions($uid, $type, $info['title_field'], $info['draft'], $info['statuses']);
  }

  return $somethings;
}

/**
 * Implements hook_theme().
 */
function dosomething_user_my_somethings_theme() {
  return array(
    'dosomething_profile_info' => array(
      'template' => 'ds-profile-info',
      'variables' => array(
        'profile' => new stdClass,
        'account' => new stdClass,
        'dosomething_friends' => '',
      ),
    )
  );
}

/**
 * Get a list of campain report backs that a user has not submitted
 * for that user's campaign groups.
 */
function dosomething_user_my_somethings_campaign_report_backs_needed($uid) {
  $gids = array();
  $report_backs = array();
  $report_backs_entity_ids = array();
  $user_submissions = array();
  $incomplete_report_backs = array();

  if ($groups = dosomething_user_my_somethings_get_user_group_memberships($uid, 'campaign')) {
    foreach ($groups as $group) {
      $gids[] = $group->gid;
    }

    // Check that a campaign report back exists for each user's campaign.
    // Get campaign title and entity_id of that campaign's report back.
    $query = db_select('field_data_field_report_back_reference', 'f');
    $query->innerJoin('og', 'o', 'f.field_report_back_reference_nid = o.etid');
    $query->innerJoin('node', 'n', 'f.entity_id = n.nid');
    $query->addField('f', 'entity_id', 'report_back_entity_id');
    $query->addField('o', 'etid', 'campaign_entity_id');
    $query->addField('o', 'label', 'campaign_title');
    $query->condition('n.type', 'campaign_report_back', '=');
    $query->condition('o.gid', $gids, 'IN');
    $results = $query->execute();
    while ($result = $results->fetchObject()) {
      $report_backs[] = $result;
      $report_backs_entity_ids[] = $result->report_back_entity_id;
    }

    // From these existing campaign report backs, get the user's submissions.
    $db_query = db_select('webform_submissions', 'w');
    $db_query->fields('w', array('nid'));
    $db_query->condition('w.uid', $uid, '=');
    $db_query->condition('nid', $report_backs_entity_ids, 'IN');
    $results = $db_query->execute();
    while ($result = $results->fetchObject()) {
      $user_submissions[] = $result->nid;
    }

    // Check if user has a submission for each report back,
    // if not return that info.
    foreach ($report_backs as $report_back) {
      if (!in_array($report_back->report_back_entity_id, $user_submissions)) {
        $incomplete_report_backs[$report_back->report_back_entity_id] = $report_back;
      }
    }
  }
  return $incomplete_report_backs;
}

/**
 * Get a list of campaign report backs completed by user.
 */
function dosomething_user_my_somethings_campaign_report_backs_complete($uid) {
  $report_backs = db_query("SELECT DISTINCT(f.field_report_back_reference_nid) as campaign_entity_id FROM {webform_submissions} w
                            INNER JOIN {node} n ON w.nid = n.nid
                            INNER JOIN {field_data_field_report_back_reference} f ON f.entity_id = n.nid
                            WHERE w.bundle = 'campaign_report_back' AND w.uid = :uid", 
                            array(':uid' => $uid))->fetchAll();
  return $report_backs;
}

/**
 * Implements hook_preprocess_dosomething_profile_info().
 */
function dosomething_user_my_somethings_preprocess_dosomething_profile_info(&$variables) {
  // Extract the user and profile objects.
  $account = $variables['account'];
  $profile = entity_metadata_wrapper('profile2', $variables['profile']);

  $variables['member_status'] = dosomething_user_my_somethings_user_role($account);
  $variables['member_since'] = date('m/Y', $account->created);
  $variables['member_friends'] = $variables['dosomething_friends'];

  // Build the hometown value out of city and state.
  $address = $profile->field_user_address->value();
  $hometown = array(
    $address['locality'],
    $address['administrative_area'],
  );
  $variables['hometown'] = implode(', ', array_filter($hometown));
  if (empty($variables['hometown'])) {
    $variables['hometown'] = '-';
  }
}

/**
 * Get data for /user campaign report backs for current and past my somethings.
 */
function dosomething_user_my_somethings_campaign_list($uid, $era) {
  $somethings = array();
  if ($era == 'current') {
    $campaigns = dosomething_user_my_somethings_campaign_report_backs_needed($uid);
  }
  elseif ($era == 'past') {
    $campaigns = dosomething_user_my_somethings_campaign_report_backs_complete($uid);
  }
  foreach ($campaigns as $campaign) {
    $something = new stdClass();
    if (isset($campaign->report_back_entity_id)) {
      $report_back = node_load($campaign->report_back_entity_id);
      $something->uri = entity_uri('node', $report_back);
    }
    $campaign = node_load($campaign->campaign_entity_id);
    if (!isset($something->uri)) {
      $something->uri = entity_uri('node', $campaign);
    }
    $image = field_get_items('node', $campaign, 'field_campaign_main_image');
    $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
    $something->title = $campaign->title;
    $somethings[] = $something;
  }
  return $somethings;
}

/**
 * Get data for projects and grant applications for /user current and past my somethings.
 */
function dosomething_user_my_somethings_projects_grants_list($uid, $era) {
  $somethings = array();
  $account = user_load($uid);
  $types = dosomething_user_my_somethings_get_my_somethings($uid, $era); // gives project reports and grant apps
  if (count($types)) {
    foreach ($types as $type => $data) {
      if ($type == 'grant_application') {
        if (count($data)) {
          foreach ($data as $grant_app) {
            $submissions = entity_load('webform_submission_entity', array($grant_app->sid));
            $submission = array_shift($submissions);
            $grant_ref = field_get_items('webform_submission_entity', $submission, 'field_webform_grant_ref');
            // Note if the grant application does not reference a grant, it will not be listed.
            if (isset($grant_ref[0]['nid'])) {
              $grant = node_load($grant_ref[0]['nid']);
              $image = field_get_items('node', $grant, 'field_picture');
              $something = new stdClass();
              $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
              $node = node_load($submission->nid);
              $edit_access = dosomething_projects_general_webform_menu_submission_access($node, $submission, 'edit', $account);
              $something->uri = array('options' => array());
              $something->uri['path'] = $edit_access ? "node/{$node->nid}/submission/{$submission->sid}/edit" : 'webform-submission/' . $submission->sid;
              $something->title = $grant->title;
              $somethings[] = $something;
            }
          }
        } 
      }
      elseif ($type == 'project_report') {
        if (count($data)) {
          foreach ($data as $project) {
            $submissions = entity_load('webform_submission_entity', array($project->sid));
            $submission = array_shift($submissions);
            $image = field_get_items('webform_submission_entity', $submission, 'field_picture');
            $something = new stdClass();
            $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
            $something->uri = entity_uri('webform_submission_entity', $submission);
            $something->check_path = TRUE;
            $title = field_get_items('webform_submission_entity', $submission, 'field_project_title');
            $something->title = isset($title[0]['value']) ? $title[0]['value'] : t('New Project');
            $somethings[] = $something;
          }
        }
      }
    }
  }
  return $somethings;
}

/**
 * Content for the current somethings and past somethings panes.
 */
function dosomething_user_my_somethings_display($uid, $era = 'current') {
  $cid = 'dosomething_user_my_somethings_' . $uid;
  $cache = cache_get($cid);
  if (!is_object($cache) || !isset($cache->data[$era])) {
    $campaigns = dosomething_user_my_somethings_campaign_list($uid, $era);
    $somethings = dosomething_user_my_somethings_projects_grants_list($uid, $era);
    $all_somethings = array_merge($campaigns, $somethings);
    if (!is_object($cache)) {
      $cache = new stdClass();
      $cache->data = array();
    }
    $cache->data[$era] = $all_somethings;
    cache_set($cid, $cache->data);
  }
  else {
    $all_somethings = $cache->data[$era];
  }
  if (!count($all_somethings)) {
    switch ($era) {
      case 'current':
        $empty_text = t('You do not have any active somethings. Join a campaign, or start a grant application or project!');
        break;
      case 'past':
        $empty_text = t('You do not have any past somethings. Complete a campaign report back, or finish a grant application or project!');
        break;
    }
    $element = array(
      '#type' => 'markup',
      '#markup' => $empty_text,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }
  else {
    foreach ($all_somethings as $delta => $something) {
      // Some webform submissions need a conditional path.
      // We don't want it cached, so we add a flag to check the path.
      // We can expand this if there are more pieces have conditional paths.
      if (isset($something->check_path) && $something->check_path && $era == 'current') {
        if (module_exists('dosomething_projects_general') && $something->uri['options']['entity_type'] = 'webform_submission_entity') {
          $submission = $something->uri['options']['entity'];
          $node = node_load($submission->nid);
          $edit_access = dosomething_projects_general_webform_menu_submission_access($node, $submission, 'edit');
        }
      }
      $element[$delta] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'something-item',
          ),
        ),
        'image' => array(
          '#theme' => 'image_formatter',
          '#item' => $something->image,
          '#image_style' => 'my_somethings',
          '#path' => array(
            'path' => $something->uri['path'],
            'options' => $something->uri['options'] + array(
              'attributes' => array(
                'class' => array('mysomethings-image'),
              ),
            ),
          ),
        ),
        'description' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'something-description',
            ),
          ),
          'title' => array(
            '#type' => 'link',
            '#title' => t($something->title),
            '#href' => $something->uri['path'],
            '#prefix' => '<div class="my-somethings-title">',
            '#suffix' => '</div>',
          ),
          'complete-this' => array(
            '#type' => 'link',
            '#title' => t('Complete this') . ' »',
            '#href' => $something->uri['path'],
            '#prefix' => '<div class="my-somethings-link">',
            '#suffix' => '</div>',
            '#access' => $era == 'current' ? TRUE : FALSE
          ),
        ),
      );
	  if ($edit_access) {
	    $element[$delta]['complete-this']['#href'] = "node/{$node->nid}/submission/{$submission->sid}/edit";
	  }
    }
  }
  return $element;
}
