<?php
/**
 * @file
 * Code for the dosomething_user_my_somethings feature.
 */

include_once('dosomething_user_my_somethings.features.inc');

/**
 * Implements hook_menu_alter().
 */
function dosomething_user_my_somethings_menu_alter(&$items) {
  // Use full name as page title instead of username
  $items['user/%user']['title callback'] = 'dosomething_general_get_full_name';
  $items['user/%user']['title arguments'][] = 'private';
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function dosomething_user_my_somethings_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function dosomething_user_my_somethings_webform_submission_insert($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings:' . $submission->uid, 'cache', TRUE);
}

/**
 * Implements hook_webform_submission_update().
 */
function dosomething_user_my_somethings_webform_submission_update($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings:' . $submission->uid, 'cache', TRUE);
}

/**
 * Implements hook_og_membership_insert().
 */
function dosomething_user_my_somethings_og_membership_insert($membership) {
  if ($membership->entity_type == 'user') {
    cache_clear_all('dosomething_user_my_somethings:' . $membership->etid, 'cache', TRUE);
  }
}

/**
 * Member dashboard block for logged in users.
 */
function dosomething_user_my_somethings_member_block() {
  global $user;
  return array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_user_my_somethings') . '/js/show-member-items.js',
      ),
    ),
    'name' => array(
      '#type' => 'container',
      '#prefix' => '<a href="/user" class="ds-member-name-bar">',
      '#suffix' => '</a>',
      '#attributes' => array(
        'class' => array(
          'dosomething-login-user-name',
        ),
      ),
      'name' => array(
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => dosomething_general_get_full_name($user, 'private'),
      ),
      // 'role' => array(
        // '#prefix' => '<span class="user-role">( ',
        // '#suffix' => ' )</span>',
        // '#markup' => dosomething_user_my_somethings_user_role(),
      // ),
    ),
    'collapsible' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'dosomething-user-block-collapsible',
        ),
      ),
      'profile' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'dosomething-login-profile',
          ),
        ),
        'completion' => dosomething_user_my_somethings_profile_completion(),
      ),
      'somethings' => dosomething_user_my_somethings_my_current_somethings(),
      'past_somethings' => dosomething_user_my_somethings_my_past_somethings(),
    ),
  );
}

/**
 * Markup for how much of the profile is finished.
 */
function dosomething_user_my_somethings_profile_completion($account = FALSE, $sidebar = TRUE) {
  if (!$account) {
    global $user;
    $account = clone $user;
  }
  $ratio = 0;
  if (module_exists('dosomething_roles')) {
    $ratio = dosomething_roles_get_user_percentage($account->uid);
  }

  $complete_text = !empty($sidebar) ? 'Profile %percent complete' : '%percent complete';

  return array(
    'percentage' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('dosomething-login-percentage'),
      ),
      'ratio' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('ratio'),
          'data-ratio' => $ratio,
        ),
        'inner' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('inner'),
            'style' => 'width: ' . $ratio . '%',
          ),
        ),
        'label' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('label'),
          ),
          '#children' => t($complete_text, array('%percent' => number_format($ratio, 0) . '%')),
        ),
      ),
    ),
    'footer' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('profile-footer'),
      ),
      'complete-profile' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('complete-profile'),
        ),
        '#children' => t('Complete your profile now'),
      ),
      'complete-link' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('complete-link'),
        ),
        '#children' => l('Go', 'user/' . $account->uid . '/complete-profile'),
      ),
    ),
  );
}

/**
 * Get markup for my somethings (sidebar version). Renamed 'Doing It' for theming purposes.
 */
function dosomething_user_my_somethings_my_current_somethings() {
  global $user;

  $items = array();

  $data = dosomething_user_my_somethings_get_my_somethings_cached($user->uid, 'current');

  // 'title' - List title.
  // 'title_field' - Object field to use for the item title.
  // 'link_path' - Pattern to use for generating the item's link.
  // 'link_id_field' - Object field to use for the %id replacement.
  $somethings_info = array(
    'grant_application' => array(
      'title' => t('Grant Applications'),
      'title_field' => 'title',
      'link_path' => 'webform-submission/%id',
      'link_id_field' => 'sid',
    ),
    'project_report' => array(
      'title' => t('Project Reports'),
      'title_field' => 'field_project_title_value',
      'link_path' => 'webform-submission/%id',
      'link_id_field' => 'sid',
    ),
    'report_back' => array(
      'title' => t('Campaign Sign Ups'),
      'title_field' => 'campaign_title',
      'link_path' => 'node/%id',
      'link_id_field' => 'report_back_entity_id',
    ),
  );

  foreach (array_filter($data) as $type => $somethings) {
    $conf = $somethings_info[$type];
    $items[$type] = array('data' => $conf['title'], 'children' => array());
    foreach ($somethings as $s) {
      $title = filter_xss($s->{$conf['title_field']});
      $link = strtr($conf['link_path'], array('%id' => $s->{$conf['link_id_field']}));
      $items[$type]['children'][] = l($title, $link);
    }
  }

  if (empty($items)) {
    $items[] = t('You are not doing anything. Join a campaign, or start a grant application or project!');
  }

  return array(
    'title' => array(
      '#prefix' => '<h3 class="doing-it">',
      '#suffix' => '</h3>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('inner'),
        ),
        '#children' => t('Doing It'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('doing-it'),
      ),
    ),
  );
}

/**
 * Get markup for my past somethings (sidebar version).
 * Renamed 'Done It' for theming purposes.
 */
function dosomething_user_my_somethings_my_past_somethings() {
  global $user;

  $items = array();

  $data = dosomething_user_my_somethings_get_my_somethings_cached($user->uid, 'past');

  // 'title' - List title.
  // 'title_field' - Object field to use for the item title.
  // 'link_path' - Pattern to use for generating the item's link.
  // 'link_id_field' - Object field to use for the %id replacement.
  $somethings_info = array(
    'grant_application' => array(
      'title' => t('Grant Applications'),
      'title_field' => 'title',
      'link_path' => 'webform-submission/%id',
      'link_id_field' => 'sid',
    ),
    'project_report' => array(
      'title' => t('Project Reports'),
      'title_field' => 'field_project_title_value',
      'link_path' => 'webform-submission/%id',
      'link_id_field' => 'sid',
    ),
    'report_back' => array(
      'title' => t('Campaign Sign Ups'),
      'title_field' => 'campaign_title',
      'link_path' => 'node/%id',
      'link_id_field' => 'campaign_entity_id',
    ),
    'club' => array(
      'title' => t('Clubs'),
      'title_field' => 'title',
      'link_path' => 'node/%id',
      'link_id_field' => 'nid',
    )
  );
  foreach (array_filter($data) as $type => $somethings) {
    $conf = $somethings_info[$type];
    $items[$type] = array('data' => $conf['title'], 'children' => array());
    foreach ($somethings as $s) {
      $title = filter_xss($s->{$conf['title_field']});
      $link = strtr($conf['link_path'], array('%id' => $s->{$conf['link_id_field']}));
      $items[$type]['children'][] = l($title, $link);
    }
  }

  if (empty($items)) {
    $items[] = t('You have not done anything. Complete a campaign report back, or finish a grant application or project!');
  }

  return array(
    'title' => array(
      '#prefix' => '<h3 class="done-it">',
      '#suffix' => '</h3>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('inner'),
        ),
        '#children' => t('Done It'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('done-it'),
      ),
    ),
  );
}

/**
 * Get the markup for a list of user's clubs (sidebar version). Renamed 'Done It' for theming purposes.
 */
function dosomething_user_my_somethings_clubs($account = NULL) {
  global $user;
  if (empty($account)) {
    $account = clone $user;
  }
  $items = array();

  // Get the club info from the past somethings.
  $somethings = dosomething_user_my_somethings_get_my_somethings_cached($account->uid, 'past');
  if (!empty($somethings['club'])) {
    foreach ($somethings['club'] as $group) {
     $items[] = l(filter_xss($group->title), 'node/' . $group->nid);
    }
  }
  else {
    $items[] = l(t('Start a club'), 'node/add/club');
  }

  return array(
    'title' => array(
      '#prefix' => '<h3 class="done-it">',
      '#suffix' => '</h3>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('inner'),
        ),
        '#children' => t('Done It'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('done-it'),
      ),
    ),
  );
}

/**
 * Show the user's role.
 */
function dosomething_user_my_somethings_user_role($account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  if (dosomething_roles_user_is_staff_member($account)) {
    return t('staff');
  }
  $current_role = dosomething_roles_get_current_role($account->uid);
  $exploded_role = explode(' ', trim($current_role));
  return filter_xss($exploded_role[0]);
}

/**
 * Get a list of a user's webform submissions.
 *
 * @param $uid
 *  (int) a user id.
 * @param $type
 *  (string) The type of weform submission.
 * @param $title_field
 *  (string) The name of the title field for the webform type.
 * @param $is_draft
 *  (boolean_ Whether or not the submission is a draft.
 * @param $statuses
 *  (array) A list of statuses for filtering on project reports.
 * @return array
 */
function dosomething_user_my_somethings_get_submissions($uid, $type, $title_field, $is_draft = FALSE, $statuses = NULL) {
  $submissions = array();
  if (is_array($statuses)) {
    // Lookup the ids of valid statuses.
    $available_statuses = array(
      2 => 'project idea',
      3 => 'ongoing project',
      4 => 'completed project',
    );
    $statuses = array_keys(array_intersect($available_statuses, $statuses));
  }
  try {
    $query = db_select('webform_submissions', 'ws');
    $query->innerJoin('node', 'n', 'ws.nid = n.nid');
    $query->innerJoin('field_data_' . $title_field, 't', 'ws.sid = t.entity_id');
    if (is_array($statuses)) {
     $query->innerJoin('field_data_field_project_type', 'pt', 'ws.sid = pt.entity_id');
    }
    $query->fields('ws', array('sid', 'submitted', 'uid', 'is_draft'));
    $query->fields('n', array('nid', 'type', 'title'));
    $query->fields('t', array($title_field . '_value'));
    $query->condition('ws.uid', $uid, '=');
    $query->condition('n.type', $type, '=');
    $query->condition('ws.is_draft', (int) $is_draft, '=');
    $query->condition('t.entity_type', 'webform_submission_entity', '=');
    if (is_array($statuses)) {
      $query->condition('pt.entity_type', 'webform_submission_entity', '=');
      $query->condition('pt.field_project_type_value', $statuses, 'IN');
    }
    $results = $query->execute();
    while ($result = $results->fetchObject()) {
      $submissions[$result->sid] = $result;
    }
  }
  catch (Exception $e) {
    return NULL;
  }
  return $submissions;
}

/**
 * Get a list of group memberships for a user based on node type.
 *  of group.  This assumes that the group is a node and the membership
 *  is for a user.
 */
function dosomething_user_my_somethings_get_user_group_memberships($uid, $node_type) {
  if (!module_exists('og')) {
    continue;
  }
  // There doesn't seem to be an og function to do exactly what we want
  // so we have our own.
  $groups = array();
  $query = db_select('og_membership', 'm');
  $query->innerJoin('og', 'o', 'o.gid = m.gid');
  $query->innerJoin('node', 'n', 'o.etid = n.nid');
  $query->fields('o', array('gid', 'etid'));
  $query->fields('n', array('nid', 'title'));
  $query->condition('o.entity_type', 'node');
  $query->condition('m.etid', $uid);
  $query->condition('m.entity_type', 'user');
  $query->condition('n.type', $node_type);
  $query->condition('n.status', 1);
  $query->condition('o.state', OG_STATE_ACTIVE);
  $results = $query->execute();
  while ($result = $results->fetchObject()) {
    $groups[$result->etid] = $result;
  }
  return $groups;
}

/**
 * A caching wrapper for dosomething_user_my_somethings_get_my_somethings().
 */
function dosomething_user_my_somethings_get_my_somethings_cached($uid, $era) {
  $cid = "dosomething_user_my_somethings:$uid:$era";
  $cache = cache_get($cid);
  if (!$cache || empty($cache->data)) {
    $cache = new stdClass();
    $cache->data = dosomething_user_my_somethings_get_my_somethings($uid, $era);
    cache_set($cid, $cache->data);
  }
  return $cache->data;
}

/**
 * Build list of current/past somethings. These include:
 *   Grant applications (link to grant application form)
 *   Projects (links to project update form)
 *   Campaign Reportbacks
 *   Clubs
 *
 * @param $uid
 *  (int) a user id.
 * @param $era
 * (string) 'current' or 'past' somethings.
 * @return array
 */
function dosomething_user_my_somethings_get_my_somethings($uid, $era) {
  $somethings = array();

  $somethings_info = array(
    'grant_application' => array(
      'title_field' => 'field_webform_name',
      'draft' => $era == 'current' ? TRUE : FALSE,
      'statuses' => NULL,
    ),
    'project_report' => array(
      'title_field' => 'field_project_title',
      'draft' => FALSE,
      'statuses' => ($era == 'current') ? array('ongoing project', 'project idea') : array('completed project'),
    ),
  );
  foreach ($somethings_info as $type => $info) {
    $somethings[$type] = dosomething_user_my_somethings_get_submissions($uid, $type, $info['title_field'], $info['draft'], $info['statuses']);
  }

  // TODO: This is kind hacky but I'm going to try to get this all moved into
  // one big thing that just gets cached heavily.
  if ($era == 'past') {
    $somethings['report_back'] = dosomething_user_my_somethings_campaign_report_backs_complete($uid);
    $somethings['club'] = dosomething_user_my_somethings_get_user_group_memberships($uid, 'club');
  }
  else if ($era == 'current') {
    $somethings['report_back'] = dosomething_user_my_somethings_campaign_report_backs_needed($uid);
  }

  return $somethings;
}

/**
 * Implements hook_theme().
 */
function dosomething_user_my_somethings_theme() {
  return array(
    'dosomething_profile_info' => array(
      'template' => 'ds-profile-info',
      'variables' => array(
        'profile' => new stdClass,
        'account' => new stdClass,
        'dosomething_friends' => '',
      ),
    )
  );
}

/**
 * Get a list of campain report backs that a user has not submitted
 * for that user's campaign groups.
 */
function dosomething_user_my_somethings_campaign_report_backs_needed($uid) {
  $report_backs = array();

  if ($groups = dosomething_user_my_somethings_get_user_group_memberships($uid, 'campaign')) {
    $gids = array();
    foreach ($groups as $group) {
      $gids[] = $group->gid;
    }

    // Figure out the campaign's this user has signed up for. Gather the
    // campaign title and entity_id of that campaign's report back.
    $query = db_select('og_membership', 'om');
    $query->innerJoin('og', 'o', 'om.gid = o.gid');
    $query->innerJoin('node', 'n', 'om.etid = n.nid');
    $query->addField('om', 'etid', 'report_back_entity_id');
    $query->addField('o', 'etid', 'campaign_entity_id');
    $query->addField('o', 'label', 'campaign_title');
    $query->condition('om.entity_type', 'node');
    $query->condition('n.type', 'campaign_report_back');
    $query->condition('n.status', 1);
    $query->condition('o.gid', $gids, 'IN');
    $report_backs = $query->execute()->fetchAllAssoc('report_back_entity_id');

    if (!empty($report_backs)) {
      // If they've submitted a report back, remove the campaign from the list.
      $db_query = db_select('webform_submissions', 'w');
      $db_query->fields('w', array('nid'));
      $db_query->condition('w.uid', $uid, '=');
      $db_query->condition('nid', array_keys($report_backs), 'IN');
      foreach ($db_query->execute() as $result) {
        unset($report_backs[$result->nid]);
      }
    }
  }

  return $report_backs;
}

/**
 * Get a list of campaign report backs completed by user.
 */
function dosomething_user_my_somethings_campaign_report_backs_complete($uid) {
  $report_backs = db_query("SELECT DISTINCT(o.etid) as campaign_entity_id, (o.label) AS campaign_title FROM {webform_submissions} w
                            INNER JOIN {og_membership} om ON w.sid = om.etid
                            INNER JOIN {og} o ON om.gid = o.gid
                            WHERE w.bundle = 'campaign_report_back' AND o.entity_type = 'node' AND w.uid = :uid",
                            array(':uid' => $uid))->fetchAllAssoc('campaign_entity_id');
  return $report_backs;
}

/**
 * Implements hook_preprocess_dosomething_profile_info().
 */
function dosomething_user_my_somethings_preprocess_dosomething_profile_info(&$variables) {
  // Extract the user and profile objects.
  $account = $variables['account'];

  if($variables['profile']) {
    // Reset the profile in case the user just updated it.
    $profile = profile2_load($variables['profile']->pid, TRUE);
    $profile = entity_metadata_wrapper('profile2', $profile);
  }

  $variables['member_fullname'] = dosomething_general_get_full_name($account, 'private');
  $variables['member_status'] = dosomething_user_my_somethings_user_role($account);
  $variables['member_since'] = date('m/d/Y', $account->created);
  $variables['member_clubs'] = dosomething_user_my_somethings_clubs($account);
  $variables['member_clubs']['title']['#access'] = FALSE;
  $profile_completion = dosomething_user_my_somethings_profile_completion($account, FALSE);
  $variables['member_percentage'] = $profile_completion['percentage'];
  $variables['member_vitals'] = dosomething_user_my_somethings_counter($account->uid);
  // Don't show a user picture if there isn't one in the account.
  $picture = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'alt' => t('Member Profile Picture'),
      'title' => '',
    ),
  );
  if (isset($account->picture)) {
    $picture['#image_style'] = 'action_results_thumbnail';
    $picture['#item']['uri'] = $account->picture->uri;
  }
  else {
    $link = fboauth_action_link_properties('ds_connect');
    $picture['#item']['uri'] = drupal_get_path('module', 'dosomething_user_my_somethings') . '/member-connect.png';
    $picture['#path'] = array(
      'path' => $link['href'],
      'options' => $link,
    );
  }
  $variables['member_picture'] = $picture;

  // Check to see if the profile object was loaded, if not, assign some junk
  // values to prevent the user page from blowing up.
  // NOTE: is_object($profile) complains that $profile is not a variable while
  // isset($profile) does not.
  $variables['member_school'] = '';
  $variables['hometown'] = '';
  if (isset($profile)) {
    $address = $profile->field_user_address->value();
    if (isset($address->name)) {
      $variables['member_school'] = $address->name;
    }
    // Kick out any city and state info we've got on them.
    $citystate = array_filter(array($address['locality'], $address['administrative_area']));
    $variables['hometown'] = check_plain(implode(', ', $citystate));
  }
}

/**
 * Fetch the longer version of their somethings...
 *
 * - Campaign Report Backs
 * - Grant Applications
 * - Project Report Backs
 */
function dosomething_user_my_somethings_fetch_long($uid, $era) {
  $account = user_load($uid);

  $somethings = array();

  // gives project reports, grant apps, and campaign report backs.
  $types = dosomething_user_my_somethings_get_my_somethings_cached($uid, $era);
  foreach ($types as $type => $data) {
    if ($type == 'report_back') {
      foreach ($data as $entity) {
        // Use the thumbnail if present.
        $campaign = node_load($entity->campaign_entity_id);
        $image = field_get_items('node', $campaign, 'field_campain_logo_thumbnail');
        if (empty($image[0]['uri'])) {
          $image = field_get_items('node', $campaign, 'field_campaign_main_image');
        }

        $something = new stdClass();
        $something->type = 'campaign';
        $something->title = $campaign->title;
        $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
        $something->uri = entity_uri('node', $campaign);
        if (isset($entity->report_back_entity_id)) {
          $report_back = node_load($entity->report_back_entity_id);
          $something->uri = entity_uri('node', $report_back);
        }
        $somethings[] = $something;
      }
    }
    else if ($type == 'grant_application') {
      foreach ($data as $entity) {
        $submission = entity_load_single('webform_submission_entity', $entity->sid);
        $grant_ref = field_get_items('webform_submission_entity', $submission, 'field_webform_grant_ref');
        // Note if the grant application does not reference a grant, it will not be listed.
        if (isset($grant_ref[0]['nid'])) {
          $grant = node_load($grant_ref[0]['nid']);
          $image = field_get_items('node', $grant, 'field_picture');
          $node = node_load($submission->nid);
          $edit_access = webform_submission_access($node, $submission, 'edit', $account);

          $something = new stdClass();
          $something->type = 'grant_application';
          $something->title = $grant->title;
          $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
          $something->uri = array('options' => array());
          $something->uri['path'] = ($edit_access && $era == 'current') ? "node/{$node->nid}/submission/{$submission->sid}/edit" : 'webform-submission/' . $submission->sid;
          $somethings[] = $something;
        }
      }
    }
    elseif ($type == 'project_report') {
      foreach ($data as $entity) {
        $submission = entity_load_single('webform_submission_entity', $entity->sid);
        $image = field_get_items('webform_submission_entity', $submission, 'field_picture');
        $title = field_get_items('webform_submission_entity', $submission, 'field_project_title');

        $something = new stdClass();
        $something->type = 'project_report';
        $something->title = isset($title[0]['value']) ? $title[0]['value'] : t('New Project');
        $something->image = isset($image[0]['uri']) ? $image[0] : NULL;
        $something->uri = entity_uri('webform_submission_entity', $submission);
        $something->check_path = TRUE;
        $somethings[] = $something;
      }
    }
  }

  return $somethings;
}

/**
 * Content for the current and past somethings panes.
 */
function dosomething_user_my_somethings_display($uid, $era = 'current', $all = TRUE) {
  $all_somethings = dosomething_user_my_somethings_fetch_long($uid, $era);

  if (empty($all_somethings)) {
    if ($era == 'current') {
      $empty_text = t('You are not doing anything. Join a campaign, or start a grant application or project!');
    }
    else {
      $empty_text = t('You have not done anything. Complete a campaign report back, or finish a grant application or project!');
    }
    $element = array(
      '#type' => 'markup',
      '#markup' => $empty_text,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }
  else {
    if ($all) {
      $image_style = 'my_somethings';
      $more_link = '';
    }
    else {
      if (count($all_somethings) > 4) {
        $path = ($era == 'current') ? 'doing-it' : 'done-it';
        $more_link = l('More »', 'user/' . $uid . '/' . $path);
      }
      $all_somethings = array_slice($all_somethings, 0, 4);
      $image_style = 'project_related_thumb';
    }

    foreach ($all_somethings as $delta => $something) {
      // Set default access for the edit link to FALSE.
      $edit_access = FALSE;
      // Some webform submissions need a conditional path.
      // We don't want it cached, so we add a flag to check the path.
      // We can expand this if there are more pieces that have conditional paths.
      if (isset($something->check_path) && $something->check_path && $era == 'current') {
        if (module_exists('dosomething_projects_general') && $something->uri['options']['entity_type'] = 'webform_submission_entity') {
          $submission = $something->uri['options']['entity'];
          $node = node_load($submission->nid);
          $edit_access = webform_submission_access($node, $submission, 'edit');
        }
      }
      $element[$delta] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('views-row'),
        ),
        'image' => array(
          '#theme' => 'image_formatter',
          '#item' => $something->image,
          '#image_style' => $image_style,
          '#path' => array(
            'path' => $something->uri['path'],
            'options' => $something->uri['options'] + array(
              'attributes' => array(
                'class' => array('pane-narrow-thumb'),
              ),
            ),
          ),
        ),
        'description' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('something-description'),
          ),
          'title' => array(
            '#type' => 'link',
            '#title' => t($something->title),
            '#href' => $something->uri['path'],
            '#prefix' => '<div class="views-field-title">',
            '#suffix' => '</div>',
          ),
        ),
      );
      if ($edit_access) {
        $element[$delta]['description']['complete-this']['#href'] = "node/{$node->nid}/submission/{$submission->sid}/edit";
      }
    }
    if (!empty($more_link)) {
      $element['more'] = array(
        '#prefix' => '<span class="more-link-right">',
        '#suffix' => '</span>',
        '#markup' => $more_link,
      );
    }
  }
  return $element;
}

/**
 * Returns themed user profile counter.
 */
function dosomething_user_my_somethings_counter($uid) {
  $somethings = dosomething_user_my_somethings_get_my_somethings_cached($uid, 'past');
  $campaigns_completed = count($somethings['report_back']);

  // We need all project_reports don't just use the past ones.
  $projects = dosomething_user_my_somethings_get_submissions($uid, 'project_report', 'field_project_title');
  $projects_uploaded = count($projects);

  $items = array();
  $items['campaigns_completed'] = array(
    'title' => t('Campaigns Completed'),
    'value' => $campaigns_completed,
  );
  $items['projects_uploaded'] = array(
    'title' => t('Projects Uploaded'),
    'value' => $projects_uploaded,
  );

  return theme('dosomething_stats_counter', array('items' => $items));
}

/**
 * Content for stuff you need to do and stuff you've done.
 */
function dosomething_user_my_somethings_stuff_need_display($uid, $era = 'current') {
  $all_somethings = dosomething_user_my_somethings_fetch_long($uid, $era);

  $profile_fields = dosomething_user_my_somethings_profile_fields_complete($uid, $era);
  $all_somethings = array_merge($profile_fields, $all_somethings);

  if ($era == 'past') {
    $clubs = dosomething_user_my_somethings_clubs_list($uid);
    $all_somethings = array_merge($all_somethings, $clubs);
  }

  // Get output ready.
  if (empty($all_somethings)) {
    return array();
  }

  $items = array();
  foreach ($all_somethings as $delta => $something) {
    // Set default access for the edit link to FALSE.
    $edit_access = FALSE;
    // Some webform submissions need a conditional path.
    // We don't want it cached, so we add a flag to check the path.
    // We can expand this if there are more pieces have conditional paths.
    if (isset($something->check_path) && $something->check_path && $era == 'current') {
      if (module_exists('dosomething_projects_general') && $something->uri['options']['entity_type'] = 'webform_submission_entity') {
        $submission = $something->uri['options']['entity'];
        $node = node_load($submission->nid);
        $edit_access = webform_submission_access($node, $submission, 'edit');
      }
    }

    if ($era == 'current') {
      $title = t("Stuff You Need To Do");
      switch ($something->type) {
        case 'campaign':
          $items[] = l(t('Report back on @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'project_report':
          $items[] = l(t('Complete project @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'grant_application':
          $items[] = l(t('Complete grant application @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'profile_field':
          $items[] = l(t('Add @title', array('@title' => $something->title)), "user/$uid/edit/main");
          break;
      }
    }
    else {
      $title = t("Stuff You've Done");
      switch ($something->type) {
        case 'campaign':
          $items[] = t('Reported back on @title', array('@title' => $something->title));
          break;

        case 'project_report':
          $items[] = t('Completed project @title', array('@title' => $something->title));
          break;

        case 'grant_application':
          $items[] = t('Completed application @title', array('@title' => $something->title));
          break;

        case 'club':
          $items[] = t('Joined @title', array('@title' => $something->title));
          break;

        case 'profile_field':
          $items[] = t('Added @title', array('@title' => $something->title));
          break;
      }
    }

    $output = array(
      'title' => array(
        '#prefix' => '<h3>',
        '#suffix' => '</h3>',
        'inner' => array(
          '#type' => 'container',
          '#attributes' => array('class' => 'stuff-header'),
          '#children' => $title,
        ),
      ),
      'list' => array(
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => array('class' => 'profile-stuff'),
      ),
    );
  }

  return $output;
}

/**
 * Get and format a user's clubs for 'Stuff You've Done'.
 */
function dosomething_user_my_somethings_clubs_list($uid) {
  $somethings = array();
  $clubs = dosomething_user_my_somethings_get_user_group_memberships($uid, 'club');
  if ($clubs) {
    foreach ($clubs as $club) {
      $something = new stdClass();
      $something->title = $club->title;
      $something->type = 'club';
      $somethings[] = $something;
    }
  }
  return $somethings;
}

/**
 * Figure out which user profile fields are complete.
 */
function dosomething_user_my_somethings_profile_fields_complete($uid, $era) {
  $fields = array();
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  $check_fields = array(
    'field_user_birthday',
    'field_user_first_name',
    'field_user_last_name',
    'field_user_hearabout',
    'field_user_mobile',
    'field_school_reference',
  );

  if (is_object($profile)) {
    foreach ($check_fields as $field_name) {
      if ($era == 'current') {
        if (empty($profile->$field_name)) {
          $field_info = field_info_instance('profile2', $field_name, 'main');
          $something = new stdClass();
          $something->title = $field_info['label'];
          $something->type = 'profile_field';
          $fields[] = $something;
        }
      }
      else {
        if (!empty($profile->$field_name)) {
          $field_info = field_info_instance('profile2', $field_name, 'main');
          $something = new stdClass();
          $something->title = $field_info['label'];
          $something->type = 'profile_field';
          $fields[] = $something;
        }
      }
    }
  }
  return $fields;
}

