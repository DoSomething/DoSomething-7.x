<?php
/**
 * @file
 * Code for the dosomething_user_my_somethings feature.
 */

include_once('dosomething_user_my_somethings.features.inc');

/**
 * Implements hook_menu_alter().
 */
function dosomething_user_my_somethings_menu_alter(&$items) {
  // Use full name as page title instead of username
  $items['user/%user']['title callback'] = 'dosomething_general_get_full_name';
  $items['user/%user']['title arguments'][] = 'private';
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function dosomething_user_my_somethings_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function dosomething_user_my_somethings_webform_submission_insert($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings:' . $submission->uid, 'cache', TRUE);
}

/**
 * Implements hook_webform_submission_update().
 */
function dosomething_user_my_somethings_webform_submission_update($node, $submission) {
  cache_clear_all('dosomething_user_my_somethings:' . $submission->uid, 'cache', TRUE);
}

/**
 * Implements hook_og_membership_insert().
 */
function dosomething_user_my_somethings_og_membership_insert($membership) {
  if ($membership->entity_type == 'user') {
    cache_clear_all('dosomething_user_my_somethings:' . $membership->etid, 'cache', TRUE);
  }
}

/**
 * Implements hook_user_update().
 */
function dosomething_user_my_somethings_user_update(&$edit, $account, $category) {
  cache_clear_all("dosomething_user_my_somethings:$account->uid:percent", 'cache', FALSE);
}

/**
 * Member dashboard block for logged in users.
 */
function dosomething_user_my_somethings_member_block() {
  global $user;
  return array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_user_my_somethings') . '/js/show-member-items.js',
      ),
    ),
    'name' => array(
      '#type' => 'container',
      '#prefix' => '<a href="/user" class="ds-member-name-bar">',
      '#suffix' => '</a>',
      '#attributes' => array(
        'class' => array(
          'dosomething-login-user-name',
        ),
      ),
      'name' => array(
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => dosomething_general_get_full_name($user, 'private'),
      ),
      // 'role' => array(
        // '#prefix' => '<span class="user-role">( ',
        // '#suffix' => ' )</span>',
        // '#markup' => dosomething_user_my_somethings_user_role(),
      // ),
    ),
    'collapsible' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'dosomething-user-block-collapsible',
        ),
      ),
      'profile' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'dosomething-login-profile',
          ),
        ),
        'completion' => dosomething_user_my_somethings_profile_completion(),
      ),
      'somethings' => dosomething_user_my_somethings_my_current_somethings(),
      'past_somethings' => dosomething_user_my_somethings_my_past_somethings(),
    ),
  );
}

/**
 * Markup for how much of the profile is finished.
 */
function dosomething_user_my_somethings_profile_completion($account = FALSE, $sidebar = TRUE) {
  if (!$account) {
    global $user;
    $account = clone $user;
  }

  $ratio = 0;
  if (module_exists('dosomething_roles')) {
    // The get user percentage function is kind of expensive, we could cache it
    // in that module but it'd need to re-implement all the cache clear hooks
    // that are already implemented here. So, let's just cache the copy here
    // where we know it'll get invalidated correctly.
    $cid = "dosomething_user_my_somethings:$account->uid:percent";
    $cache = cache_get($cid);
    if (!$cache || empty($cache->data)) {
      $cache = new stdClass();
      $cache->data = dosomething_roles_get_user_percentage($account->uid);
      cache_set($cid, $cache->data);
    }
    $ratio = $cache->data;
  }

  $complete_text = !empty($sidebar) ? 'Profile %percent complete' : '%percent complete';

  return array(
    'percentage' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('dosomething-login-percentage'),
      ),
      'ratio' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('ratio'),
          'data-ratio' => $ratio,
        ),
        'inner' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('inner'),
            'style' => 'width: ' . $ratio . '%',
          ),
        ),
        'label' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('label'),
          ),
          '#children' => t($complete_text, array('%percent' => number_format($ratio, 0) . '%')),
        ),
      ),
    ),
    'footer' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('profile-footer'),
      ),
      'complete-profile' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('complete-profile'),
        ),
        '#children' => t('Complete your profile now'),
      ),
      'complete-link' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('complete-link'),
        ),
        '#children' => l('Go', 'user/' . $account->uid . '/complete-profile'),
      ),
    ),
  );
}

/**
 * Build the array of sidebar links for the somethings.
 *
 * @param $config
 *   Array with the following require keys:
 *   - 'title' - List title.
 *   - 'title_field' - Object field to use for the item title.
 *   - 'link_path' - Pattern to use for generating the item's link.
 *   - 'link_id_fields' - Array with property names to be replaced in the path.
 * @param $uid
 *   User id.
 * @param $era
 *   String 'current' or 'past'.
 * @return nested array of HTML links, keyed by type.
 */
function dosomething_user_my_somethings_make_links($config, $uid, $era) {
  $items = array();

  $data = dosomething_user_my_somethings_get_my_somethings_cached($uid, $era);
  foreach (array_filter($data) as $type => $somethings) {
    if (isset($config[$type])) {
      $c = $config[$type];
      $items[$type] = array('data' => isset($c['title']) ? $c['title'] : '', 'children' => array());

      foreach ($somethings as $s) {
        if ($c['title_field']) {
          $title = filter_xss($s->{$c['title_field']});
          $replacements = array();
          foreach ($c['link_id_fields'] as $field) {
            $replacements['%' . $field] = $s->$field;
          }
          $link = strtr($c['link_path'], $replacements);

          $items[$type]['children'][] = l($title, $link);
        }
      }
    }
  }

  return $items;
}

/**
 * Get markup for my somethings (sidebar version). Renamed 'Doing It' for theming purposes.
 */
function dosomething_user_my_somethings_my_current_somethings() {
  global $user;

  $defaults = array(
    'title_field' => 'title',
    'link_path' => 'node/%nid/submission/%sid/edit',
    'link_id_fields' => array('nid', 'sid'),
  );

  $project_defaults = array(
    'title_field' => 'title',
    'link_path' => 'webform-submission/%sid',
    'link_id_fields' => array('nid', 'sid'),
  );

  $somethings_info = array(
    'grant_application' => array(
      'title' => t('Grant Applications'),
    ) + $defaults,
    'scholarship_application_with_rec' => array(
      'title' => t('Scholarship Applications'),
    ) + $defaults,
    'project_report' => array(
      'title' => t('Project Reports'),
      'title_field' => 'field_project_title_value',
    ) + $project_defaults,
    'campaign_report_back' => array(
      'title' => t('Campaigns'),
      'title_field' => 'campaign_title',
      'link_path' => 'node/%report_back_entity_id',
      'link_id_fields' => array('report_back_entity_id'),
    ),
  );
  $items = dosomething_user_my_somethings_make_links($somethings_info, $user->uid, 'current');

  if (empty($items)) {
    $items[] = t('You are not doing anything. Join a campaign, or start a grant application or project!');
  }

  return array(
    'title' => array(
      '#prefix' => '<h3 class="doing-it">',
      '#suffix' => '</h3>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('inner'),
        ),
        '#children' => t('Doing It'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('doing-it'),
      ),
    ),
  );
}

/**
 * Get markup for my past somethings (sidebar version).
 * Renamed 'Done It' for theming purposes.
 */
function dosomething_user_my_somethings_my_past_somethings() {
  global $user;

  $defaults = array(
    'title_field' => 'title',
    'link_path' => 'webform-submission/%sid',
    'link_id_fields' => array('sid'),
  );

  $somethings_info = array(
    'grant_application' => array(
      'title' => t('Grant Applications'),
    ) + $defaults,
    'scholarship_application_with_rec' => array(
      'title' => t('Scholarship Applications'),
      'title_field' => 'title',
      'link_path' => 'node/%campaign_nid',
      'link_id_fields' => array('campaign_nid'),
    ),
    'project_report' => array(
      'title' => t('Project Reports'),
      'title_field' => 'field_project_title_value',
      'link_path' => 'webform-submission/%sid',
      'link_id_fields' => array('sid'),
    ),
    'campaign_report_back' => array(
      'title' => t('Campaigns'),
      'title_field' => 'campaign_title',
      'link_path' => 'node/%campaign_entity_id',
      'link_id_fields' => array('campaign_entity_id'),
    ),
    // Hard coding some of this to pics for pets until we know what the other
    // stuff will look like.
    'fb_app_data_gathering_form' => array(
      'title' => t('Facebook Campaigns'),
      'link_path' => 'picsforpets',
    ) + $defaults,
  );
  $items = dosomething_user_my_somethings_make_links($somethings_info, $user->uid, 'past');

  // More pics for pets hard coding. Just show it once.
  if (isset($items['fb_app_data_gathering_form']['children'][1])) {
    $items['fb_app_data_gathering_form']['children'] = array($items['fb_app_data_gathering_form']['children'][0]);
  }

  if (empty($items)) {
    $items[] = t('Come on Do Something! Complete a campaign report back, or finish a grant application or project!');
  }

  return array(
    'title' => array(
      '#prefix' => '<h3 class="done-it">',
      '#suffix' => '</h3>',
      'inner' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('inner'),
        ),
        '#children' => t('Done It'),
      ),
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('done-it'),
      ),
    ),
  );
}

/**
 * Show the user's role.
 */
function dosomething_user_my_somethings_user_role($account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  if (dosomething_roles_user_is_staff_member($account)) {
    return t('staff');
  }
  $current_role = dosomething_roles_get_current_role($account->uid);
  $exploded_role = explode(' ', trim($current_role));
  return filter_xss($exploded_role[0]);
}

/**
 * Get a list of group memberships for a user based on node type.
 *  of group.  This assumes that the group is a node and the membership
 *  is for a user.
 */
function dosomething_user_my_somethings_get_user_group_memberships($uid, $node_type) {
  if (!module_exists('og')) {
    return array();
  }

  // There doesn't seem to be an og function to do exactly what we want
  // so we have our own.
  return db_query("SELECT o.gid AS gid, o.etid AS etid, n.nid AS nid, n.title AS title, n.type AS type
      FROM {og_membership} m
      INNER JOIN {og} o ON o.gid = m.gid AND o.entity_type = 'node'
      INNER JOIN {node} n ON n.nid = o.etid
      WHERE m.entity_type = 'user' AND m.etid = :uid
        AND o.state = :og_active
        AND n.type = :node_type AND n.status = 1",
    array('uid' => $uid, 'node_type' => $node_type, 'og_active' => OG_STATE_ACTIVE)
  )->fetchAllAssoc('etid');
}

/**
 * A caching wrapper for dosomething_user_my_somethings_get_my_somethings().
 */
function dosomething_user_my_somethings_get_my_somethings_cached($uid, $era) {
  $cid = "dosomething_user_my_somethings:$uid:$era";
  $cache = cache_get($cid);
  if (!$cache || empty($cache->data)) {
    $cache = new stdClass();
    $cache->data = dosomething_user_my_somethings_get_my_somethings($uid, $era);
    cache_set($cid, $cache->data);
  }

  return $cache->data;
}

/**
 * Build list of current/past somethings. These include:
 * - Grant applications (link to grant application form)
 * - Projects (links to project update form)
 * - Campaign Reportbacks
 *
 * @param $uid
 *   (int) a user id.
 * @param $era
 *   (string) 'current' or 'past' somethings.
 * @return array
 *   Possible keys: 'grant_application', 'project_report', 'campaign_report_back'
 */
function dosomething_user_my_somethings_get_my_somethings($uid, $era) {
  $somethings = array();

  // Setup a basic query for looking up webform submissions.
  $base_query = db_select('webform_submissions', 'ws');
  $base_query->innerJoin('node', 'n', 'ws.nid = n.nid');
  $base_query->fields('ws', array('sid', 'submitted', 'uid', 'is_draft'));
  $base_query->fields('n', array('nid', 'type', 'title'));
  $base_query->condition('ws.uid', $uid);

  // Grant applications
  $query = clone $base_query;
  $query->condition('n.status', 1);
  $query->condition('n.type', 'grant_application');
  $query->condition('ws.is_draft', $era == 'current');
  $somethings['grant_application'] = $query->execute()->fetchAllAssoc('sid');

  // Project reports
  $query = clone $base_query;
  $query->condition('n.type', 'project_report');
  $query->condition('ws.is_draft', FALSE);
  $query->innerJoin('field_data_field_project_title', 't', 'ws.sid = t.entity_id');
  $query->condition('t.entity_type', 'webform_submission_entity');
  $query->fields('t', array('field_project_title_value'));
  $query->innerJoin('field_data_field_project_type', 'pt', 'ws.sid = pt.entity_id');
  $query->condition('pt.entity_type', 'webform_submission_entity');
  // current is 'project idea' and 'ongoing project', past is 'completed project'
  $statuses = ($era == 'current') ? array(2, 3) : array(4);
  $query->condition('pt.field_project_type_value', $statuses, 'IN');
  $somethings['project_report'] = $query->execute()->fetchAllAssoc('sid');

  // Scholarship applications
  $query = clone $base_query;
  $query->innerJoin('og_membership', 'om', "om.etid = n.nid AND om.entity_type = 'node'");
  $query->innerJoin('og', 'og', 'og.gid = om.gid');
  $query->addField('og', 'etid', 'campaign_nid');
  $query->condition('n.type', 'scholarship_application_with_rec');
  $query->condition('ws.is_draft', $era == 'current');
  $somethings['scholarship_application_with_rec'] = $query->execute()->fetchAllAssoc('sid');

  if ($era == 'past') {
    // Facebook app submissions.
    $query = clone $base_query;
    $query->condition('n.type', 'fb_app_data_gathering_form');
    $query->condition('ws.is_draft', FALSE);
    $somethings['fb_app_data_gathering_form'] = $query->execute()->fetchAllAssoc('sid');

    // Campaign report backs.
    $somethings['campaign_report_back'] = dosomething_user_my_somethings_campaign_report_backs_complete($uid);
  }
  else if ($era == 'current') {
    $somethings['campaign_report_back'] = dosomething_user_my_somethings_campaign_report_backs_needed($uid);
  }

  return $somethings;
}

/**
 * Implements hook_theme().
 */
function dosomething_user_my_somethings_theme() {
  return array(
    'dosomething_profile_info' => array(
      'template' => 'ds-profile-info',
      'variables' => array(
        'profile' => new stdClass,
        'account' => new stdClass,
        'dosomething_friends' => '',
      ),
    )
  );
}

/**
 * Get a list of campain report backs that a user has not submitted
 * for that user's campaign groups.
 */
function dosomething_user_my_somethings_campaign_report_backs_needed($uid) {
  // Our goal is to figure out which campaigns they have submitted a
  // campaign_sign_up webform submission but not a campaign_report_back webform
  // submission. We could do this in one query with a NOT EXISTS sub-query but
  // it performs worse than separating it into two simpler queries.

  // First, find the user's campaign_sign_ups, follow those up to the campaign,
  // then back down to the campaign_report_back node.
  $report_backs = db_query("SELECT campaign.nid AS campaign_entity_id, campaign.title AS campaign_title, reportNode.nid AS report_back_entity_id
    FROM {node} campaign
    INNER JOIN {og} campaignGroup ON campaign.nid = campaignGroup.etid AND campaignGroup.entity_type = 'node'
    INNER JOIN {og_membership} singupMem ON singupMem.gid = campaignGroup.gid AND singupMem.entity_type = 'node'
    INNER JOIN {og_membership} reportMem ON reportMem.gid = campaignGroup.gid AND reportMem.entity_type = 'node'
    INNER JOIN {node} signupNode ON signupNode.nid = singupMem.etid
    INNER JOIN {node} reportNode ON reportNode.nid = reportMem.etid
    INNER JOIN {webform_submissions} signupSub ON signupSub.nid = signupNode.nid
    WHERE campaign.type = 'campaign' AND campaign.status = 1
      AND campaignGroup.state = 1
      AND signupNode.type = 'campaign_sign_up' AND signupNode.status = 1
      AND reportNode.type = 'campaign_report_back' AND reportNode.status = 1
      AND signupSub.uid = :uid",
    array('uid' => $uid)
  )->fetchAllAssoc('report_back_entity_id');

  // Then we run a second query to find all their campaign_report_back
  // submissions and remove any of them from the list.
  $submitted = db_query("SELECT reportNode.nid AS report_back_entity_id
      FROM {webform_submissions} reportSub
      INNER JOIN {node} reportNode ON reportNode.nid = reportSub.nid
      WHERE reportSub.uid = :uid AND reportNode.type = 'campaign_report_back'",
    array('uid' => $uid)
  )->fetchCol('report_back_entity_id');
  foreach ($submitted as $entity_id) {
    unset($report_backs[$entity_id]);
  }

  return $report_backs;
}

/**
 * Get a list of campaign report backs completed by user.
 */
function dosomething_user_my_somethings_campaign_report_backs_complete($uid) {
  return db_query("SELECT o.etid AS campaign_entity_id, o.label AS campaign_title
      FROM {webform_submissions} w
      INNER JOIN {node} n ON w.nid = n.nid
      INNER JOIN {og_membership} om ON om.etid = n.nid AND om.entity_type = 'node'
      INNER JOIN {og} o ON o.gid = om.gid
      WHERE n.type = 'campaign_report_back' AND w.uid = :uid",
    array(':uid' => $uid)
  )->fetchAllAssoc('campaign_entity_id');
}

/**
 * Implements hook_preprocess_dosomething_profile_info().
 */
function dosomething_user_my_somethings_preprocess_dosomething_profile_info(&$variables) {
  // Extract the user and profile objects.
  $account = $variables['account'];

  if($variables['profile']) {
    // Reset the profile in case the user just updated it.
    $profile = profile2_load($variables['profile']->pid, TRUE);
  }

  $variables['member_fullname'] = dosomething_general_get_full_name($account, 'private');
  $variables['member_status'] = dosomething_user_my_somethings_user_role($account);
  $variables['member_since'] = date('m/d/Y', $account->created);
  $profile_completion = dosomething_user_my_somethings_profile_completion($account, FALSE);
  $variables['member_percentage'] = $profile_completion['percentage'];
  $variables['member_vitals'] = dosomething_user_my_somethings_counter($account->uid);
  // Don't show a user picture if there isn't one in the account.
  $picture = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'alt' => t('Member Profile Picture'),
      'title' => '',
    ),
  );
  if (isset($account->picture)) {
    $picture['#image_style'] = 'action_results_thumbnail';
    $picture['#item']['uri'] = $account->picture->uri;
  }
  else {
    $link = fboauth_action_link_properties('ds_connect');
    $picture['#item']['uri'] = drupal_get_path('module', 'dosomething_user_my_somethings') . '/member-connect.png';
    $picture['#path'] = array(
      'path' => $link['href'],
      'options' => $link,
    );
  }
  $variables['member_picture'] = $picture;

  // Check to see if the profile object was loaded, if not, assign some junk
  // values to prevent the user page from blowing up.
  // NOTE: is_object($profile) complains that $profile is not a variable while
  // isset($profile) does not.
  $variables['member_school'] = '';
  $variables['hometown'] = '';
  if (isset($profile)) {
    $address = field_get_items('profile2', $profile, 'field_user_address');
    if (isset($address->name)) {
      $variables['member_school'] = $address->name;
    }
    // Kick out any city and state info we've got on them.
    $citystate = array_filter(array($address['locality'], $address['administrative_area']));
    $variables['hometown'] = check_plain(implode(', ', $citystate));
  }
}

/**
 * Given an array of objects extract a property from each and return in an array.
 *
 * @param $array
 *   Array of objects.
 * @param $properties
 *   Array of property names to gather.
 *
 * @return
 *   Array keyed by property names, with values extracted.
 */
function _dosomething_user_my_somethings_extract($array, $properties) {
  $ret = array();
  foreach ($properties as $name) {
    $ret[$name] = array();
  }

  foreach ($array as $item) {
    foreach ($properties as $name)
    if (isset($item->$name)) {
      $ret[$name][] = $item->$name;
    }
  }
  return $ret;
}

/**
 * Fetch the longer version of their somethings.
 *
 * These include images and are designed to be used on the user's profile page.
 *
 * - Campaign Report Backs
 * - Grant Applications
 * - Project Report Backs
 */
function dosomething_user_my_somethings_fetch_long($uid, $era) {
  $account = user_load($uid);

  $results = array();

  // gives project reports, grant apps, and campaign report backs.
  $somethings = dosomething_user_my_somethings_get_my_somethings_cached($uid, $era);

  foreach (array_filter($somethings) as $type => $data) {
    switch ($type) {
      case 'campaign_report_back':
        $ids = _dosomething_user_my_somethings_extract($data, array('campaign_entity_id'));
        $nodes = entity_load('node', $ids['campaign_entity_id']);
        foreach ($data as $entity) {
          if (empty($entity->campaign_entity_id)) {
            continue;
          }

          // Use the campaign's logo if present or fallback to the main image.
          $campaign = $nodes[$entity->campaign_entity_id];
          $image = field_get_items('node', $campaign, 'field_campain_logo_thumbnail');
          if (empty($image[0]['uri'])) {
            $image = field_get_items('node', $campaign, 'field_campaign_main_image');
          }

          $something = array(
            'type' => 'campaign',
            'title' => $campaign->title,
            'image' => isset($image[0]['uri']) ? $image[0] : NULL,
            'uri' => entity_uri('node', $campaign),
          );
          if (isset($entity->report_back_entity_id)) {
            $something['uri'] = entity_uri('node', node_load($entity->report_back_entity_id));
          }
          $results[] = (object) $something;
        }
        break;

      case 'grant_application':
        $ids = _dosomething_user_my_somethings_extract($data, array('sid'));
        $submissions = entity_load('webform_submission_entity', $ids['sid']);
        foreach ($data as $entity) {
          if (isset($submissions[$entity->sid])) {
            $grant_app = $submissions[$entity->sid];

            // If they reference a project and we can load it, use its image.
            $project_ref = field_get_items('webform_submission_entity', $grant_app, 'field_webform_project_submission');
            if (isset($project_ref[0]['target_id']) && $project = entity_load_single('webform_submission_entity', $project_ref[0]['target_id'])) {
              $image = field_get_items('webform_submission_entity', $project, 'field_picture');
            }

            $something = array(
              'type' => $type,
              'title' => $entity->title,
              'image' => isset($image[0]['uri']) ? $image[0] : NULL,
              'uri' => entity_uri('webform_submission_entity', $grant_app),
              'check_path' => TRUE,
            );

            $results[] = (object) $something;
          }
        }
        break;

      case 'project_report':
        $ids = _dosomething_user_my_somethings_extract($data, array('sid'));
        $submissions = entity_load('webform_submission_entity', $ids['sid']);
        foreach ($data as $entity) {
          if (isset($submissions[$entity->sid])) {
            $submission = $submissions[$entity->sid];
            $image = field_get_items('webform_submission_entity', $submission, 'field_picture');
            // Technically this value was already load in the bare $entity we
            // started with but when we reloaded it we lost it.
            $title = field_get_items('webform_submission_entity', $submission, 'field_project_title');
            $something = array(
              'type' => $type,
              'title' => isset($title[0]['value']) ? $title[0]['value'] : t('New Project'),
              'image' => isset($image[0]['uri']) ? $image[0] : array('uri' => 'public://u/sitewide/do_something_0.png'),
              'uri' => entity_uri('webform_submission_entity', $submission),
              'check_path' => TRUE,
            );
            $results[] = (object) $something;
          }
        }
        break;

      case 'fb_app_data_gathering_form':
        // NOTE: Hard coding some pics for pets stuff in here. Generalize when
        // we know what the general case is.

        // Pics for pets only wants one link...
        $entity = reset($data);
        if (!empty($entity->sid)) {
          $something = array(
            'type' => $type,
            'title' => t('Pics for Pets'),
            'image' => array('uri' => 'public://campaigns/logos/logo.png'),
            'uri' => array('path' => 'picsforpets', 'options' => array()),
            'check_path' => FALSE,
          );
          $results[] = (object) $something;
        }
        break;

      case 'scholarship_application_with_rec':
        $ids = _dosomething_user_my_somethings_extract($data, array('sid', 'campaign_nid'));
        $submissions = entity_load('webform_submission_entity', $ids['sid']);
        $nodes = entity_load('node', $ids['campaign_nid']);
        foreach ($data as $entity) {
          if (isset($submissions[$entity->sid])) {
            $submission = $submissions[$entity->sid];
            $campaign = $nodes[$entity->campaign_nid];

            // Use the campaign's logo if present or fallback to the main image.
            $image = field_get_items('node', $campaign, 'field_campain_logo_thumbnail');
            if (empty($image[0]['uri'])) {
              $image = field_get_items('node', $campaign, 'field_campaign_main_image');
            }

            $something = array(
              'type' => 'scholarship_application',
              'title' => $campaign->title,
              'image' => isset($image[0]['uri']) ? $image[0] : NULL,
              'uri' => entity_uri('node', $campaign),
            );
            if ($era == 'present') {
              $something['check_path'] = TRUE;
              $something['uri'] = entity_uri('webform_submission_entity', $submission);
            }

            $results[] = (object) $something;
          }
        }
        break;

      default: // Kick *something* for webforms.
        $ids = _dosomething_user_my_somethings_extract($data, array('sid'));
        $submissions = entity_load('webform_submission_entity', $ids['sid']);
        foreach ($data as $entity) {
          if (isset($submissions[$entity->sid])) {
            $submission = $submissions[$entity->sid];
            $something = array(
              'type' => $type,
              'title' => $entity->title,
#              'image' => isset($image[0]['uri']) ? $image[0] : NULL,
              'uri' => entity_uri('webform_submission_entity', $submission),
              'check_path' => TRUE,
            );
            $results[] = (object) $something;
          }
        }
        break;
    }
  }

  return $results;
}

/**
 * Content for the current and past somethings panes.
 */
function dosomething_user_my_somethings_display($uid, $era = 'current', $all = TRUE) {
  $all_somethings = dosomething_user_my_somethings_fetch_long($uid, $era);
  if (empty($all_somethings)) {
    if ($era == 'current') {
      $empty_text = t('You are not doing anything. Join a campaign, or start a grant application or project!');
    }
    else {
      $empty_text = t('You have not done anything. Complete a campaign report back, or finish a grant application or project!');
    }
    $element = array(
      '#type' => 'markup',
      '#markup' => $empty_text,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }
  else {
    if ($all) {
      $image_style = 'my_somethings';
      $more_link = '';
    }
    else {
      if (count($all_somethings) > 4) {
        $path = ($era == 'current') ? 'doing-it' : 'done-it';
        $more_link = l('More »', 'user/' . $uid . '/' . $path);
      }
      $all_somethings = array_slice($all_somethings, 0, 4);
      $image_style = 'project_related_thumb';
    }

    foreach ($all_somethings as $delta => $something) {
      // Set default access for the edit link to FALSE.
      $edit_access = FALSE;
      // Some webform submissions need a conditional path.
      // We don't want it cached, so we add a flag to check the path.
      // We can expand this if there are more pieces that have conditional paths.
      if (!empty($something->check_path) && $era == 'current') {
        if (module_exists('dosomething_projects_general') && $something->uri['options']['entity_type'] = 'webform_submission_entity') {
          $submission = $something->uri['options']['entity'];
          $node = node_load($submission->nid);
          $edit_access = webform_submission_access($node, $submission, 'edit');
        }
      }
      
      $element[$delta] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('views-row'),
        ),
        'image' => array(
          '#theme' => 'image_formatter',
          '#item' => $something->image,
          '#image_style' => $image_style,
          '#path' => array(
            'path' => $something->uri['path'],
            'options' => $something->uri['options'] + array(
              'attributes' => array(
                'class' => array('pane-narrow-thumb'),
              ),
            ),
          ),
        ),
        'description' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('something-description'),
          ),
          'title' => array(
            '#type' => 'link',
            '#title' => t($something->title),
            '#href' => $something->uri['path'],
            '#prefix' => '<div class="views-field-title">',
            '#suffix' => '</div>',
          ),
        ),
      );
      if ($edit_access) {
        $element[$delta]['description']['complete-this']['#href'] = "node/{$node->nid}/submission/{$submission->sid}/edit";
      }
    }
    if (!empty($more_link)) {
      $element['more'] = array(
        '#prefix' => '<span class="more-link-right">',
        '#suffix' => '</span>',
        '#markup' => $more_link,
      );
    }
  }
  return $element;
}

/**
 * Returns themed user profile counter.
 */
function dosomething_user_my_somethings_counter($uid) {
  $somethings = dosomething_user_my_somethings_get_my_somethings_cached($uid, 'past');
  $campaigns_completed = count($somethings['campaign_report_back']);

  // We need all project_reports, not just the past ones.
  $query = db_select('webform_submissions', 'ws');
  $query->innerJoin('node', 'n', 'ws.nid = n.nid');
  $query->addExpression('COUNT(*)');
  $query
    ->condition('ws.uid', $uid)
    ->condition('ws.is_draft', FALSE)
    ->condition('n.type', 'project_report');
  $projects_uploaded = $query->execute()->fetchField();

  $items = array();
  $items['campaigns_completed'] = array(
    'title' => t('Campaigns Completed'),
    'value' => $campaigns_completed,
  );
  $items['projects_uploaded'] = array(
    'title' => t('Projects Uploaded'),
    'value' => $projects_uploaded,
  );

  return theme('dosomething_stats_counter', array('items' => $items));
}

/**
 * Content for stuff you need to do and stuff you've done.
 */
function dosomething_user_my_somethings_stuff_need_display($uid, $era = 'current') {
  $all_somethings = dosomething_user_my_somethings_fetch_long($uid, $era);
  $profile_fields = dosomething_user_my_somethings_profile_fields_complete($uid, $era);
  $all_somethings = array_merge($profile_fields, $all_somethings);

  if (empty($all_somethings)) {
    return array();
  }

  $items = array();
  foreach ($all_somethings as $delta => $something) {
    // Set default access for the edit link to FALSE.
    $edit_access = FALSE;
    // Some webform submissions need a conditional path.
    // We don't want it cached, so we add a flag to check the path.
    // We can expand this if there are more pieces have conditional paths.
    if (!empty($something->check_path) && $era == 'current') {
      if (module_exists('dosomething_projects_general') && $something->uri['options']['entity_type'] = 'webform_submission_entity') {
        $submission = $something->uri['options']['entity'];
        $node = node_load($submission->nid);
        $edit_access = webform_submission_access($node, $submission, 'edit');
      }
    }

    if ($era == 'current') {
      $title = t("Stuff You Need To Do");
      switch ($something->type) {
        case 'campaign':
          $items[] = l(t('Report back on @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'project_report':
          $items[] = l(t('Complete project @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'grant_application':
          $items[] = l(t('Complete grant application @title', array('@title' => $something->title)), $something->uri['path']);
          break;

        case 'profile_field':
          $items[] = l(t('Add @title', array('@title' => $something->title)), "user/$uid/edit/main");
          break;
      }
    }
    else {
      $title = t("Stuff You've Done");
      switch ($something->type) {
        case 'campaign':
          $items[] = t('Reported back on @title', array('@title' => $something->title));
          break;

        case 'project_report':
          $items[] = t('Completed project @title', array('@title' => $something->title));
          break;

        case 'grant_application':
          $items[] = t('Completed application @title', array('@title' => $something->title));
          break;

        case 'profile_field':
          $items[] = t('Added @title', array('@title' => $something->title));
          break;
      }
    }

    $output = array(
      'title' => array(
        '#prefix' => '<h3>',
        '#suffix' => '</h3>',
        'inner' => array(
          '#type' => 'container',
          '#attributes' => array('class' => 'stuff-header'),
          '#children' => $title,
        ),
      ),
      'list' => array(
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => array('class' => 'profile-stuff'),
      ),
    );
  }

  return $output;
}

/**
 * Figure out which user profile fields are complete.
 */
function dosomething_user_my_somethings_profile_fields_complete($uid, $era) {
  $fields = array();
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  $check_fields = array(
    'field_user_birthday',
    'field_user_first_name',
    'field_user_last_name',
    'field_user_hearabout',
    'field_user_mobile',
    'field_school_reference',
  );

  if (is_object($profile)) {
    foreach ($check_fields as $field_name) {
      if ($era == 'current') {
        if (empty($profile->$field_name)) {
          $field_info = field_info_instance('profile2', $field_name, 'main');
          $something = new stdClass();
          $something->title = $field_info['label'];
          $something->type = 'profile_field';
          $fields[] = $something;
        }
      }
      else {
        if (!empty($profile->$field_name)) {
          $field_info = field_info_instance('profile2', $field_name, 'main');
          $something = new stdClass();
          $something->title = $field_info['label'];
          $something->type = 'profile_field';
          $fields[] = $something;
        }
      }
    }
  }
  return $fields;
}
