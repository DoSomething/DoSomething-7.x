<?php
/**
 * @file
 * Code for the dosomething_drives feature.
 */

define('DS_DRIVE_GOAL_FIELD', 'drive_goal');

include_once 'dosomething_drives.features.inc';

/**
 * Implements hook_init().
 *
 * If the campaign is team-based and the Team Redirect checkbox on the campaign node is
 * checked, then instead of showing the campaign home page, we want to redirect to the
 * user's team page. We do this on hook_init to catch it early.
 *
 * Note that this behavior can be overridden by passing ?skip_redirect to the URL. This
 * will prevent the redirect from occurring.
 */
function dosomething_drives_init() {
  $node = menu_get_object();
  if (isset($node->nid) && $node->type == 'campaign') {
    if (isset($node->field_team_redirect) && isset($node->field_team_redirect[LANGUAGE_NONE]) && $node->field_team_redirect[LANGUAGE_NONE][0]['value'] == 1 && !arg(2)) {
      if (!isset($_GET['skip_redirect']) && user_is_logged_in()) {
        $path = drupal_lookup_path('alias', 'node/'.$node->nid);
        $team = teams_get_my_teams_for_url($path);
        if (!empty($team)) {
          drupal_goto('team/'.$path.'/'.array_shift($team));
        }
      }
    }
  }
}

/**
* Implements hook_ctools_plugin_directory().
*/
function dosomething_drives_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_form_alter().
 *
 * We'll be executing this code on the drive_form content type webform. This content type
 * is used for adding metadata to a team related to the time when a drive will be taking
 * place. It contains fields like time, date, and location. It is filled out by drive
 * admins and is linked to from the drive panels content type plugin.
 *
 * This hook_form_alter sets the group_audience of the form and prefills the drive goal
 * if the user filled it out on the campaign_sign_up before filling out the drive_form.
 */
function dosomething_drives_form_alter(&$form, &$form_state, $form_id) {
  // quick escape if we're on the wrong form.
  if (strpos($form_id, 'webform_client_form_') !== 0 || empty($form_state['webform_entity']) || $form_state['webform_entity']['bundle'] != 'drive_form') {
    return;
  }

  if (isset($_GET['gid']) && is_numeric($_GET['gid'])) {
    $gid = $_GET['gid'];
    $entity_form = &$form['submitted'];
    $node = $form['#node'];

    $entity_form['group_audience']['#access'] = FALSE;
    $entity_form['group_audience'][LANGUAGE_NONE][0]['gid']['#default_value'] = $gid;

    $reference = og_load_entity_from_group($gid);
    if ($cid = dosomething_drives_get_drive_cid(node_load($reference->nid))) {
      $entity_form['field_'.DS_DRIVE_GOAL_FIELD][LANGUAGE_NONE][0]['value']['#default_value'] = $reference->data[$cid]['value'][0];
    }
    $entity_form['field_team_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $reference->field_team_name[LANGUAGE_NONE][0]['value'];
  }
  $form['#submit'][] = 'dosomething_drives_drive_submit';
}

/**
 * Submit handler for drive form submission.
 *
 * We want to update the parent submission (campaign_sign_up) team name and goal
 * fields so they display properly on submission of a drive_form.
 */
function dosomething_drives_drive_submit(&$form, &$form_state) {
  $submitted = $form_state['webform_entity']['submission']->submitted;
  $gid = $submitted['group_audience'][LANGUAGE_NONE][0]['gid'];
  $goal = $submitted['field_'.DS_DRIVE_GOAL_FIELD][LANGUAGE_NONE][0]['value'];
  $team_name = $submitted['field_team_name'][LANGUAGE_NONE][0]['value'];

  $reference = og_load_entity_from_group($gid);
  $reference_node = node_load($reference->nid);

  $save = false;
  
  if ($cid = dosomething_drives_get_drive_cid($reference_node)) {
  $webform_field = &$reference->data[$cid]['value'][0];
    if ($webform_field != $goal) {
      $webform_field = $goal;
      $save = TRUE;
    }
  }

  $old_name = &$reference->field_team_name[LANGUAGE_NONE][0]['value'];
  if ($old_name != $team_name) {
    $old_name = $team_name;
    $save = TRUE;
  }

  if ($save) {
    entity_save('webform_submission_entity', $reference);
  }
}

/**
 * We return the CID of a webform_component with the form key equal to
 * DS_DRIVE_GOAL_FIELD. This way, we don't have to add drive_goal as an entity
 * field on all campaign_sign_ups, and can add it instead via webform only
 * on drive-type campaigns.
 */
function dosomething_drives_get_drive_cid($node) {
  static $cid;

  if (!isset($cid)) {
    $cid = false;
    foreach ($node->webform['components'] as $component) {
      if ($component['form_key'] == DS_DRIVE_GOAL_FIELD) {
        $cid = $component['cid'];
      }
    }
  }

  return $cid;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure we come after webform_entity.
 */
function dosomething_drives_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['dosomething_drives'])) {
    $group = $implementations['dosomething_drives'];
    unset($implementations['dosomething_drives']);
    $implementations['dosomething_drives'] = $group;
  }
}

/**
 * Implements hook_menu().
 */
function dosomething_drives_menu() {
  $items = array();

  // join a drive by URL instead of filling out a submission
  $items['drive/join/%'] = array(
    'page callback' => 'dosomething_drives_join',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
 * Menu callbck for joining a drive by URL.
 */
function dosomething_drives_join($gid, $uid = FALSE, $redirect = TRUE) {
  teams_join_with_webform_submission($gid, $uid, $redirect);
}

/**
 * Get the nid of the drive_form for a campaign. The drive_form node should have group_audience
 * set to the campaign node.
 */
function dosomething_drives_get_drive_nid($campaign_group) {
  $gid = $campaign_group->gid;
  // entity field query where we filter by group_group field
  $q = new EntityFieldQuery();
  $result = $q
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'drive_form')
    ->fieldCondition('group_audience', 'gid', $gid)
    ->execute();

  if (is_array($result) && !empty($result)) {
    $result = reset($result);
    return reset($result)->nid;
  }

  return 0;
}

/**
 * Implements hook_teams_added_email_alter().
 *
 * Set the type of this email to drive.
 */
function dosomething_drives_teams_added_email_alter(&$params, $gid) {
  if (!dosomething_drives_is_drive($gid)) return;

  $params['type'] = 'drive';
}

/**
 * Implements hook_teams_invite_email_alter().
 */
function dosomething_drives_teams_invite_email_alter(&$params, $gid) {
  if (!dosomething_drives_is_drive($gid)) return;

  $params['type'] = 'drive';
  $params['link'] = url("drive/join/$gid", array('absolute' => true));
}

/**
 * Check if a group is a drive or just a team.
 */
function dosomething_drives_is_drive($gid) {
  $submission = og_load_entity_from_group($gid);
  $node = node_load($submission->nid);
  $is_drive = true;
  foreach ($node->field_signup_magic_fields[LANGUAGE_NONE] as $enabled_field) {
    // short-circuit if this is a team and not a drive
    if ($enabled_field['value'] == 'field_leader_info') {
      return false;
    }
  }
  return true;
}

/**
 * This is for Be the Match functionality ONLY.
 */
function dosomething_drives_form_webform_client_form_724779_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'dosomething_drives_match_email';
}

function dosomething_drives_match_email($form, &$form_state) {
  if (!isset($form_state['values']['submitted_tree']['give_a_spit_action_kit'])) return;

  if ($form_state['values']['submitted_tree']['give_a_spit_action_kit'][0] == 'yes') {
    $vals['email'] = $form_state['values']['submitted_tree']['field_webform_email'][LANGUAGE_NONE][0]['email'];
    $vals['mobile'] = $form_state['values']['submitted_tree']['field_webform_mobile'][LANGUAGE_NONE][0]['value'];
    $address_fields = array('address_1', 'address_2', 'city', 'state');
    $school = reset(entity_load('ds_school', array($form_state['values']['submitted_tree']['field_webform_school_reference'][LANGUAGE_NONE][0]['target_id'])));
    $school_type = ($school->type == 1) ? 'High School' : 'College';
    $vals['school'] = $school_type . ': ' . $school->name;
    foreach ($address_fields as $field) {
      $vals[$field] = $form_state['values']['submitted_tree'][$field];
    }
    $email = 'recruitment@nmdp.org';
    drupal_mail('dosomething_drives', 'be_the_match', $email, $language, $vals);
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_drives_mail($key, &$message, $params) {
  switch ($key) {
    case 'be_the_match':
      $message['subject'] = t('Give a Spit Signup from @email', array('@email' => $params['email']));
      $message['body'][] = drupal_html_to_text(theme('dosomething_drives_match', $params));
      $message['headers']['From'] = $params['email'] . '<' . $params['email'] . '>';
      $message['headers']['Reply-To'] = $params['email'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_drives_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_drives_match' => array(
      'path' => $path,
      'variables' => array(),
      'template' => 'be-the-match',
    ),  
  );
}
