<?php
/**
 * @file
 * Code for the dosomething_webform feature.
 */

include_once('dosomething_webform.features.inc');

/**
 * Implements hook_node_load().
 */
function dosomething_webform_node_load($nodes, $types) {
  foreach ($nodes as &$node) {
    // Suppress all 'You have already submitted this form' messages.
    if (isset($node->webform)) {
      $node->webform['submit_notice'] = 0;

      $draft_types = array('grant_application', 'scholarship_application');
      if (in_array($node->type, $draft_types)) {
        $node->webform['allow_draft'] = 1;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dosomething_webform_form_alter(&$form, &$form_state, $form_id) {
  $node_types = array('grant_application', 'scholarship_application');
  if (strpos($form_id, 'webform_client_form_') === 0) {
    if (in_array($form['#node']->type, $node_types)) {
      if (isset($form['actions']['draft'])) {
        $form['actions']['draft']['#validate'][] = 'dosomething_webform_webform_submission_draft_validate';
      }
      $form['#validate'][] = 'dosomething_webform_webform_validate';
    }
    // Alter the button values for all webforms.
    if (isset($form['actions']['previous'])) {
      $form['actions']['previous']['#value'] = t('BACK');
    }
    if (isset($form['actions']['next'])) {
      $form['actions']['next']['#value'] = t('NEXT');
    }
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#value'] = t('SUBMIT');
    }
    if (isset($form['actions']['draft'])) {
      $form['actions']['draft']['#value'] = t('or save draft');
      $form['actions']['draft']['#weight'] = 100;
    }
    // Add page numbering to all multistep forms.
    if (isset($form['details']['page_count']['#value']) && $form['details']['page_count']['#value'] > 1) {
      $page_count = $form['details']['page_count']['#value'];
      $page_num = $form['details']['page_num']['#value'];
      $ratio = 100 * ($page_num - 1) / $page_count;
      $form['submitted']['dosomething_webform_numbering'] = array(
        '#weight' => -100,
        '#type' => 'container',
        'numbering' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'dosomething-webform-page-number',
            ),
          ),
          '#children' => t('Page !page_num of !page_count', array('!page_num' => $page_num, '!page_count' => $page_count)),
        ),
        'percentage' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'dosomething-webform-percentage',
            ),
          ),
          'ratio' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'ratio',
              ),
              'data-ratio' => $ratio,
            ),
            'inner' => array(
              '#type' => 'container',
              '#attributes' => array(
                'class' => array(
                  'inner',
                ),
                'style' => 'width: ' . $ratio . '%',
              ),
            ),
            'label' => array(
              '#type' => 'container',
              '#attributes' => array(
                'class' => array(
                  'label',
                ),
              ),
              '#children' => t('!percent complete', array('!percent' => number_format($ratio, 0) . '%')),
            ),
          ),
        ),
      );
    }
  }
}

/**
 * Validation callback for webform draft submissions.
 */
function dosomething_webform_webform_submission_draft_validate(&$form, &$form_state) {
  // Don't throw required field errors for required fields.
  // This is a draft and fields should only be required on submission.
  // Make sure to add back any errors that are not required field related.
  $errors = form_get_errors();
  form_clear_error();
  $messages = drupal_get_messages('error');
  $pattern = '/field is required.$/';

  // Add any unrelated errors.
  if (count($messages['error'])) {
    foreach ($messages['error'] as $message) {
      if (!preg_match($pattern, $message)) {
        if (!in_array($message, $errors)) {
          drupal_set_message($message, 'error');
        }
      }
    }
  }
  // Set the form errors so that the form will not save.
  if (count($errors)) {
    foreach ($errors as $name => $error) {
      if (!preg_match($pattern, $error)) {
        form_set_error($name, $error);
      }
    }
  }
}

/**
 * Custom validation on webforms.
 */
function dosomething_webform_webform_validate($form, &$form_state) {
  // This is here to fix an issue with the webform module which
  // forces the form to be submitted twice before it will work.
  // This shouldn't be a problem when the form is invalid.
  // It is very similar to an issue with the profile2 module
  // See http://drupal.org/node/1040038 for details.
  $form_state['rebuild'] = FALSE;
}

