<?php
/**
 * @file
 * Code for the dosomething_projects_general feature.
 */

include_once('dosomething_projects_general.features.inc');

/**
 * Implements hook_ctools_plugin_directory().
 */
function dosomething_projects_general_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_mail().
 */
function dosomething_projects_general_mail($key, &$message, $params) {
  switch ($key) {
    case 'project_report_participant':
      $message['subject'] = t('Invitation to join Do Something Project');
      $message['body'][] = $params['message'];
      break;
    case 'project_report_participant_user':
      $message['subject'] = t('Welcome to the Do Something Projects Program');
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements_hook_form_BASE_FORM_ID_alter().
 */
function dosomething_projects_general_form_webform_client_form_alter(&$form, &$form_state) {
  global $user;
  $node_types = array(
    'project_report',
    'campaign_report_back',
  );
  if (!in_array($form['#node']->type, $node_types)) {
    return;
  }

  $form_state['previous_participants'] = array();
  $submission = isset($form['#submission']) ? $form['#submission'] : NULL;
  if (!empty($submission) && $submission->sid && !$submission->is_draft) {
    // Pass along previous participants so they don't get contacted again.
    if (!empty($form['#submission']->field_participants[LANGUAGE_NONE])) {
      foreach ($form['#submission']->field_participants[LANGUAGE_NONE] as $item) {
        $form_state['previous_participants'][] = $item['value'];
      }
    }
  }

  $form['#submit'][] = 'dosomething_projects_general_participants_submit';
  $form['#validate'][] = 'dosomething_projects_general_participants_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_projects_general_form_club_node_form_alter(&$form, &$form_state) {
  // TODO: Deal with node status.
  $form_state['previous_participants'] = array();
  $node = isset($form['#node']) ? $form['#node'] : NULL;
  if (!empty($node) && $node->nid) {
    // Pass along previous participants so they don't get contacted again.
    if (!empty($form['#node']->field_participants[LANGUAGE_NONE])) {
      foreach ($form['#node']->field_participants[LANGUAGE_NONE] as $item) {
        $form_state['previous_participants'][] = $item['value'];
      }
    }
  }
  $form['#submit'][] = 'dosomething_projects_general_node_participants_submit';
  $form['#validate'][] = 'dosomething_projects_general_node_participants_validate';
}

/**
 * Project submission submit callback.
 */
function dosomething_projects_general_participants_submit($form, &$form_state) {
  // Don't do anything for an incomplete webform.
  if (empty($form_state['webform_completed']) || !isset($form_state['values']['details']['sid']) || !module_exists('og')) {
    return;
  }

  // Load up the group and create if it doesn't already exist.
  $group = og_get_group('webform_submission_entity', $form_state['values']['details']['sid'], TRUE, array(OG_STATE_ACTIVE, OG_STATE_PENDING));
  if (!isset($group->gid)) {
    $group->save();
  }
  $submission = $form_state['webform_entity']['submission'];
  if (isset($submission->field_participants) && !empty($submission->field_participants[LANGUAGE_NONE])) {
    foreach ($submission->field_participants[LANGUAGE_NONE] as $delta => $item) {
      // Make sure contact was not already dealt with.
      $key = array_search($item['value'], $form_state['previous_participants']);
      if ($key === FALSE) {
        global $base_url, $language;
        $title = $submission->field_project_title[LANGUAGE_NONE][0]['value'];

        if ($account = dosomething_general_load_user_by_mail_or_cell($item['value'])) {
          og_group($group->gid, array('entity' => $account));
          $sid = $form_state['values']['details']['sid'];
          $message = "<p>Hey,</p><p>Your account on DoSomething.org has been officially added to the '$title' project page. Check out your project's page by going to $base_url/webform-submission/$sid. From this page you can now update the DoSomething.org community on the project, add your other members to the project page, and lots more.</p><p>If you have any questions, email Celia at clubs@dosomething.org (she's super helpful).</p><p>Thanks!</p>";
          drupal_mail('dosomething_projects_general', 'project_report_participant_user', $item['value'], $language, array('message' => $message));
        }
        else {
          // Otherwise send a message to the user.
          $submission_account = user_load($form_state['values']['details']['uid']);
          $profile = profile2_load_by_user($submission_account, 'main');
          $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
          // TODO: Sending message and mail means no sanitization.
          $first = $profile_wrapper->field_user_first_name->value();
          $last = $profile_wrapper->field_user_last_name->value();
          if (valid_email_address($item['value'])) {
            $message = "<p>Hey,</p><p> $first $last has invited you to join '$title' on DoSomething.org</p><p>All you have to do is head over to $base_url and fill out the form to become a DoSomething.org member. Then you'll be able to update the DoSomething.org community on the projects we're working on, add our other members to the project profile page, and lots more. Not to mention the fact that you can win prizes, scholarships, and grants, just for being a DoSomething.org member.</p><p>If you have any questions, email Celia at clubs@dosomething.org (she's super helpful).</p>";
            drupal_mail('dosomething_projects_general', 'project_report_participant', $item['value'], $language, array('message' => $message));
          }
          else if ($number = dosomething_general_valid_cell($item['value'])) {
            // Custom message for sms_send since we can't exceed 160 characters
            $message = 'Your friend has given you access to the Do Something community! We\'ll send weekly stats, ways to take action, and opps for prizes. (text STOP to opt out)';
            sms_send($number, $message);
          }
        }
      }
      else {
        // Remove contact value from previous list.
        unset($form_state['previous_participants'][$key]);
      }
    }
  }

  // If anyone is left in the previous list, then remove them from the group.
  if (!empty($form_state['previous_participants'])) {
    foreach ($form_state['previous_participants'] as $contact_value) {
      if ($account = dosomething_general_load_user_by_mail_or_cell($contact_value)) {
        og_ungroup($group->gid, 'user', $account);
      }
    }
  }

  if ($form['#node']->type == 'project_report') {
    $form_state['redirect'] = 'webform-submission/' . $form_state['values']['details']['sid'];
  }
}

/**
 * Node submission submit callback.
 */
function dosomething_projects_general_node_participants_submit($form, &$form_state) {
  // Load up the group and create it if it doesn't already exist.
  $group = og_get_group('node', $form_state['values']['nid'], TRUE);
  $nid = $form_state['values']['nid'];
  $title = $form_state['node']->title;
  $submission_account = user_load($form_state['values']['uid']);
  $full_name = dosomething_general_get_full_name($submission_account);

  // Invite the people to become members and add current members to the group.
  if (count($form_state['values']['field_participants'][LANGUAGE_NONE])) {

    foreach ($form_state['values']['field_participants'][LANGUAGE_NONE] as $delta => $item) {
      if (!is_array($item) || !$item['value']) {
        continue;
      }
      // Make sure contact was not already dealt with.
      $key = array_search($item['value'], $form_state['previous_participants']);
      if ($key === FALSE) {
        if ($account = dosomething_general_load_user_by_mail_or_cell($item['value'])) {
          og_group($group->gid, array('entity' => $account));
          $message = '<p>Hey,</p><p>Your account on DoSomething.org has been officially added to the "' . $title . '" club. Check out your project\'s page by going to ' . $base_url . '/node/' . $nid . '. From this page you can now update the DoSomething.org community on the club, add your other members to the club page, and lots more.</p><p>If you have any questions, email Celia at clubs@dosomething.org (she\'s super helpful).</p><p>Thanks!</p>';
          drupal_mail('dosomething_projects_general', 'project_report_participant_user', $item['value'], $language, array('message' => $message));
        }
        else {
          if (valid_email_address($item['value'])) {
            // Since the user is not in the system, send a message to the user.
            // Sending message and mail means no sanitization.
            $message = '<p>Hey,</p><p>' . $full_name . ' has invited you to join "' . $title . '" on DoSomething.org</p><p>All you have to do is head over to '. $base_url . ' and fill out the form to become a DoSomething.org member. Then you\'ll be able to update the DoSomething.org community on the projects we\'re working on, add our other members to the club profile page, and lots more. Not to mention the fact that you can win prizes, scholarships, and grants, just for being a DoSomething.org member.</p><p>If you have any questions, email Celia at clubs@dosomething.org (she\'s super helpful).</p>';

            drupal_mail('dosomething_projects_general', 'project_report_participant', $item['value'], $language, array('message' => $message));
          }
          else if ($number = dosomething_general_valid_cell($item['value'])) {
            // Custom message for sms_send since we can't exceed 160 characters
            $message = 'Your friend has given you access to the Do Something community! We\'ll send weekly stats, ways to take action, and opps for prizes. (text STOP to opt out)';
            sms_send($number, $message);
          }
        }
      }
      else {
        // Remove contact value from previous list.
        unset($form_state['previous_participants'][$key]);
      }
    }
  }

  // If anyone is left in the previous_participants  list,
  // then remove them from the group ince they were removed.
  if (count($form_state['previous_participants'])) {
    foreach ($form_state['previous_participants'] as $contact_value) {
      if ($account = dosomething_general_load_user_by_mail_or_cell($contact_value)) {
        og_ungroup($group->gid, 'user', $account);
      }
    }
  }
}

/**
 * Validation callback to check email or mobile entry.
 */
function dosomething_projects_general_participants_validate($form, &$form_state) {
  if (!isset($form_state['values']['submitted']['field_participants'])) {
    return;
  }
  else {
    // Work around for bug in webform_entity.
    unset($form_state['values']['submitted']['personal_information']['field_project_clubs'][LANGUAGE_NONE]['add_more']);
    unset($form_state['values']['submitted']['field_participants'][LANGUAGE_NONE]['add_more']);
  }
  foreach ($form_state['values']['submitted']['field_participants'][LANGUAGE_NONE] as $delta => $item) {
    if (!is_array($item) || !$item['value']) {
      continue;
    }

    if (!valid_email_address($item['value'])) {
      if (!$number = dosomething_general_valid_cell($item['value'])) {
        form_set_error('field_participants][' . LANGUAGE_NONE . '][' . $delta, t('%value is not a valid e-mail address or mobile number.', array('%value' => $item['value'])));
      }
      else {
        // Store then cleaned up version of the phone number.
        $item['value'] = $number;
      }
    }
  }
}

/**
 * Validation callback for specific node forms related to projects.
 */
function dosomething_projects_general_node_participants_validate($form, &$form_state) {
  if (!isset($form_state['values']['field_participants']) || !count($form_state['values']['field_participants'])) {
    return;
  }
  foreach ($form_state['values']['field_participants'][LANGUAGE_NONE] as $delta => &$item) {
    if (!is_array($item) || !$item['value']) {
      continue;
    }

    if (!valid_email_address($item['value'])) {
      if (!$number = dosomething_general_valid_cell($item['value'])) {
        form_set_error('field_participants][' . LANGUAGE_NONE . '][' . $delta, t('%value is not a valid e-mail address or mobile number.', array('%value' => $item['value'])));
      }
      else {
        // Store then cleaned up version of the phone number.
        $item['value'] = $number;
      }
    }
  }
}



/**
 * Implements hook_entity_insert().
 */
function dosomething_projects_general_entity_insert($entity, $type) {
  // When user signs up for site, check for projects to which they're committed,
  // and sign them up for the group.
  if ($type == 'profile2') {
    $account = user_load($entity->uid);
    dosomething_projects_general_add_user_to_connected_groups($account, $entity);
  }
}

/**
 * Implements hook_entity_presave().
 */
function dosomething_projects_general_entity_presave($entity, $type) {
  // When user updates profile, replace email and phone number on projects
  // with which they are participating.
  if ($type == 'profile2') {
    if ($entity->pid) {
      $profile = profile2_load($entity->pid);
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
      $entity_wrapper = entity_metadata_wrapper('profile2', $entity);
      if ($entity_wrapper->field_user_mobile->value() != $profile_wrapper->field_user_mobile->value()) {
        // Add user to projects with their new email
        // Update projects with the old email to use the new email.
        dosomething_projects_general_add_user_to_connected_groups(NULL, $entity);
        dosomething_projects_general_update_participants_contact_value($entity_wrapper->field_user_mobile->value(), $profile_wrapper->field_user_mobile->value());
      }
    }
  }
  else if ($type == 'user') {
    if (!empty($entity->uid)) {
      $account = user_load($entity->uid);
      if ($entity->mail != $account->mail) {
        // Add user to projects with their new email
        // Update projects with the old email to use the new email.
        dosomething_projects_general_add_user_to_connected_groups($entity);
        dosomething_projects_general_update_participants_contact_value($entity->mail, $account->mail);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_projects_general_form_dosomething_login_register_popup_form_alter(&$form, &$form_state) {
  // When user signs up for site, check for projects to which they're committed,
  // and sign them up for the group.
  $form['#submit'][] = 'dosomething_projects_general_register_form_submit';
}

/**
 * Submission callback for dosomething_login_register_popup_form.
 */
function dosomething_projects_general_register_form_submit($form, &$form_state) {
  // This is also being run on hook_entity_insert for profiles.
  // If we start creating them in a normal way,
  // then we can get rid of this form_alter.
  dosomething_projects_general_add_user_to_connected_groups($form_state['account'], $form_state['profile']);
}

/**
 * Add user to submission groups that they've participated in.
 * We look at the values in the field_participants field to determine this.
 * Only provide the account or profile if it is being updated.
 *
 * @param $account
 *  Loaded user object (OPTIONAL).
 * @param $profile
 *  Profile2 object related to the account (OPTIONAL)
 *
 * @return array
 *  List of submissions to which the user was added.
 */
function dosomething_projects_general_add_user_to_connected_groups($account = NULL, $profile = NULL) {
  // Make sure at least one parameter exists.
  if (is_null($account) && is_null($profile)) {
    return array();
  }

  $cell = '';
  $email = !is_null($account) ? $account->mail : '';
  if (!is_null($profile)) {
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
    $cell = $profile_wrapper->field_user_mobile->value();
  }
  $submissions = dosomething_projects_general_find_connected_submissions($email, $cell);
  foreach (array('node', 'webform_submission_entity') as $entity_type) {
    if (!empty($submissions[$entity_type])) {
      // Make sure we have the account for associating the group.
      if (is_null($account)) {
        $account = user_load($profile->uid);
      }
      foreach ($submissions[$entity_type]  as $id => $entity) {
        $group = og_get_group($entity_type, $id, TRUE);
        if (!isset($group->gid)) {
          $group->save();
        }
        og_group($group->gid, array('entity' => $account, 'save' => FALSE, 'force reload' => FALSE));
      }
    }
  }
  return array_keys($submissions);
}

/**
 * Find submissions where the given email and cell numbers were marked as participants.
 * This uses the field_paricipants field to determine who participated in the project.
 *
 * @param $email
 *  A valid email address.
 * @param $cell
 *  A valid cell phone number containing only digits.
 *
 * @return EntityFieldQuery response or empty array.
 */
function dosomething_projects_general_find_connected_submissions($email, $cell) {
  $values = array();
  foreach (array($email, $cell) as $value) {
    if ($value) {
      $values[] = $value;
    }
  }
  if (!empty($values)) {
    try {
      $query = new EntityFieldQuery();
        $results = $query->entityCondition('entity_type', array('webform_submission_entity', 'node'), 'IN')
        ->fieldCondition('field_participants', 'value', $values, 'IN')
        ->execute();
      return $results;
    }
    catch (Exception $e) {
      watchdog_exception('dosomething_projects_general', $e);
    }
  }
  return array();
}

/**
 * Update the values in the field_participants field.
 *
 * @param $new_value
 *  The new value of the email or phone.
 * @param $old_value
 *  The previous value of the email or phone.
 *
 * @return int
 *  Number of rows affected by update.
 */
function dosomething_projects_general_update_participants_contact_value($new_value, $old_value) {
  try {
    $count = db_update('field_data_field_participants')
    ->fields(array('field_participants_value' => $new_value))
    ->condition('field_participants_value', $old_value)
    ->execute();
  }
  catch (Exception $e) {
    $count = 0;
    watchdog_exception('dosomething_projects_general', $e);
  }
  return $count;
}
