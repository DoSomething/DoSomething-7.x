<?php
/**
 * @file
 * Code for the dosomething_petitions feature.
 */

include_once 'dosomething_petitions.features.inc';

define('PETITIONS_NUM_EMAILS', 0);
define('PETITIONS_INFUSIONSOFT', 1648);
define('PETITIONS_MCOMMONS', 117371);

function dosomething_petitions_page_alter(&$page) {
  if (preg_match('#\/petition\/(.*?)#i', request_uri())) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:type',
        'content' => 'dosomethingapp:petition',
      ),
    );
    drupal_add_html_head($element, 'petitions_og_type');
  }
}

/**
 * Implements hook_form_alter().
 */
function dosomething_petitions_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') === 0 && isset($form_state['webform_entity']) && $form_state['webform_entity']['bundle'] == 'petition') {
    global $user, $submitted_form;

    $form['hidden-email-link'] = array(
      '#markup' => l(t('Share with email'), 'contact-scraper/' . $node->nid, array(
        'attributes' => array(
          'class' => array('hidden-email-link'),
          'onclick' => 'return invite_find_emails(' . $node->nid . ')',
          'style' => 'display: none',
        ),
      )),
      '#weight' => 0,
    );

    if (!user_is_logged_in()) {
      $form['fav_color'] = array(
        '#type' => 'textfield',
        '#title' => t('What is your favorite color?'),
        '#attributes' => array(
          'style' => 'display: none'
        )
      );

      $form['#validate'][] = 'dosomething_petitions_captcha';
      /*$form['actions']['submit']['#ajax'] = array(
        'callback' => 'dosomething_petitions_register',
      );*/
    }
    else {
      $profile = profile2_load_by_user($user, 'main');
      $entity_form = &$form['submitted'];
      $field = &$entity_form['field_webform_email_or_cell'][LANGUAGE_NONE][0]['value'];
      $fname = &$entity_form['field_webform_first_name'][LANGUAGE_NONE][0]['value'];
      $lname = &$entity_form['field_webform_last_name'][LANGUAGE_NONE][0]['value'];

      if ($profile) {
        $profile_first = field_get_items('profile2', $profile, 'field_user_first_name');
        $profile_last = field_get_items('profile2', $profile, 'field_user_last_name');

        if (isset($profile_first[0]['value']) && $profile_first[0]['value'] != '') {
          $fname['#default_value'] = $profile_first[0]['value'];
        }
        if (isset($profile_last[0]['value']) && $profile_last[0]['value'] != '') {
          $lname['#default_value'] = $profile_last[0]['value'];
        }
      }
      // If this email isn't actually a magic mobile number, prepopulate the form with it.
      if (substr($user->mail, -7) != '@mobile' && $field['#default_value'] == '') {
        $field['#default_value'] = $user->mail;
      }
      else {
        if ($profile) {
          // If we have a profile and don't have a value for the mobile number, provide the one from the profile as a default.
          $mobile = field_get_items('profile2', $profile, 'field_user_mobile');
          if (isset($mobile[0]['value']) && $field['#default_value'] == '') {
            $field['#default_value'] = $mobile[0]['value'];
          }
        }  
      }
    }

    $form['actions']['submit']['#value'] = 'SIGN THIS';
    $form['actions']['submit']['#attributes'] = array('class' => array('go-button'));

    $form['#submit'][] = 'dosomething_petitions_opt_in';
  }
}

function dosomething_petitions_captcha(&$form, &$form_state) {
  $vals = $form_state['values'];
  if (isset($vals['fav_color']) && !empty($vals['fav_color'])) {
    form_set_error('form', t('Sorry, there was an error in completing your form request.'));
  }
}

function dosomething_petitions_send_goal_email($email, $nid, $goal, $count) {
  $signers = db_query("
  SELECT DISTINCT u.mail
  FROM webform_submissions
    LEFT JOIN `users` u ON (`u`.`uid` = `webform_submissions`.`uid`)
  WHERE `webform_submissions`.`uid` <> 0
    AND `webform_submissions`.`nid` = " . $nid . "
  ")->fetchAll();

  $node = node_load($nid);
  $a = user_load($node->uid);
  $p = profile2_load_by_user($a, 'main');
  $author = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
  if (!trim($author)) {
    $author = $a->name;
  }

  $sims = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'petition')
    ->condition('status', 0, '!=')
    ->condition('nid', $node->nid, '!=')
    ->orderBy('RAND()')
    ->execute()
    ->fetchAll();

  foreach ($sims AS $key => $pet) {
    $similars .= $pet->title . ': ' . url(drupal_lookup_path('alias', 'node/' . $pet->nid), array('absolute' => TRUE)) . "\r\n";
  }

  $params = array(
    'name' => '',
    'petition' => $node->title,
    'petition_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
    'author' => $author,
    'goal' => $node->field_petition_goal[LANGUAGE_NONE][0]['value'],
    'petition_recipient' => $node->field_petition_target[LANGUAGE_NONE][0]['value'],
    'similar_petitions' => $similars
  );

  if ($email !== 'petitions_goal_reached') {
    $params['more_to_goal'] = t('Our goal is to reach !goal signatures.  Help us cross the finish line.', array('!goal' => $params['goal']));
  }

  global $language;
  foreach ($signers AS $e) {
    drupal_mail('dosomething_petitions', $email, $e->mail, $language, $params);
  }
}

function dosomething_petitions_goal_email($goal, $nid) {
  $count = webform_get_submission_count($nid);

  if ($count == $goal) {
    dosomething_petitions_send_goal_email('petitions_goal_reached', $nid, $goal, $count);
    // Email everyone about goal reached
  }
  else {
    /* Holding on this for now (9-13-12) until we can get everything sorted out with when and where to do it.
       
    $milestones = array(25000);

    foreach ($milestones AS $stone) {
      if ($count > $stone) continue;
      else {
        if ($count == $stone && $stone < $goal) {
          dosomething_petitions_send_goal_email('petitions_milestone_reached', $nid, $goal);
          // Mail everyone that we reached milestone
        }
        else continue;
      }
    }*/
  }
}

/**
 * Submission callback for petition webforms
 */
function dosomething_petitions_opt_in($form, $form_state) {
  $sub = $form['#submission']->submitted;
  $val = $sub['field_webform_email_or_cell'][LANGUAGE_NONE][0]['value'];

  if (valid_email_address($val)) {
    global $language, $user;

    $node = node_load($form_state['values']['details']['nid']);

    // Check database to see if a record exists for this email.
    // If so, email the original sign-er
    $invited = db_select('dosomething_petitions_invites', 'i')
      #->join('users', 'u', 'i.uid = u.uid')
      ->fields('i')
      #->fields('u', array('name', 'mail'))
      ->condition('i.nid', $node->nid, '=')
      ->condition('i.invite', $val, '=')
      ->range(0, 1)
      ->execute()
      ->fetchAssoc();

    if (!empty($invited)) {
      if ($invited['uid']) {
        $ui = user_load($invited['uid']);
        $up = profile2_load_by_user($ui, 'main');
        if (!empty($up->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
          $name = $up->field_user_first_name[LANGUAGE_NONE][0]['value'];
        }
        else {
          $name = $user->name;
        }

        if (!$user->uid) {
          $guest = dosomething_general_load_user_by_mail_or_cell($val);
          $prof = profile2_load_by_user($guest, 'main');
          if (!empty($prof->field_user_first_name[LANGUAGE_NONE][0]['value']) && !empty($prof->field_user_last_name[LANGUAGE_NONE][0]['value'])) {
            $invitee = $prof->field_user_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $prof->field_user_last_name[LANGUAGE_NONE][0]['value'];
          }
          else {
            $invitee = $guest->name;
          }
        }
        else {
          $uprof = profile2_load_by_user($user, 'main');
          if (!empty($uprof->field_user_first_name[LANGUAGE_NONE][0]['value']) && !empty($uprof->field_user_last_name[LANGUAGE_NONE][0]['value'])) {
            $invitee = $uprof->field_user_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $uprof->field_user_last_name[LANGUAGE_NONE][0]['value'];
          }
          else {
            $invitee = $user->name;
          }
        }

        $params = array(
          'name' => $name,
          'invitee' => $invitee,
          'petition' => $node->title,
          'petition_link' => str_replace('%23', '#', url(drupal_lookup_path('alias', 'node/' . $node->nid) . '#contacts', array('absolute' => TRUE))),
        );

        drupal_mail('dosomething_petitions', 'invite_signed', $ui->mail, $language, $params);
        // Remove invite from user
        /*db_delete('dosomething_petitions_invites')
          ->condition('invite', $val)
          ->condition('nid', $node->nid)
          ->execute();*/
      }
    }

    if ($user->uid) {
      $profile = profile2_load_by_user($user, 'main');
      $name = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
      if (!trim($name)) {
        $name = $user->name;
      }
    }
    else {
      $name = t('Guest');
    }

    dosomething_petitions_goal_email($node->field_petition_goal[LANGUAGE_NONE][0]['value'], $node->nid);
    $a = user_load($node->uid);
    $p = profile2_load_by_user($a, 'main');
    $author = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
    if (!trim($author)) {
      $author = $a->name;
    }

    /** Scrapped 9/12/12
      * This email would be duplicated if they invited their friends.
      * So this email just won't happen.
      * ---
    $params = array(
      'name' => $name,
      'petition' => $node->title,
      'petition_link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
      'author' => $author
    );
    drupal_mail('dosomething_petitions', 'thanks_for_signing', $val, $language, $params);*/
    dosomething_general_infusionsoft_subscribe($val, PETITIONS_INFUSIONSOFT);
  }
  else if (dosomething_general_valid_cell($val)) {
    dosomething_general_mobile_commons_subscribe($val, PETITIONS_MCOMMONS);
  }
}

/**
 * AJAX callback for unauthenticated user petition submission
 */
function dosomething_petitions_register($form, &$form_state) {
  $is_user = dosomething_general_load_user_by_mail_or_cell($form['#submission']->submitted['field_webform_email_or_cell'][LANGUAGE_NONE][0]['value']);

  $is_user = ($is_user !== FALSE);

  $commands = array();
  $errors = form_get_errors();
  if ($errors) {
    $error_list = '';
    foreach ($errors AS $key => $error) {
       $error_list .= '<li>' . $error . '</li>';
    }

    $fake_error_template = '<div class="messages error">
      <h2 class="element-invisible">Error message</h2>
      <ul>' . $error_list . '</ul></div>
    ';
    $commands[] = ajax_command_before('#page-title', $fake_error_template);
  }
  else {
    $commands[] = ajax_command_invoke('#dosomething-login-register-popup-form', 'dsPetitionSubmit', array($form_state['redirect'][0], $is_user));
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/**
 * Make sure we do our hook_form_alter after webform_entity does
 */
function dosomething_petitions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['dosomething_petitions'])) {
    $group = $implementations['dosomething_petitions'];
    unset($implementations['dosomething_petitions']);
    $implementations['dosomething_petitions'] = $group;
  }
}

/**
 * Implements hook_node_insert().
 */
/*function dosomething_petitions_node_insert($node) {
  if ($node->type == 'petition') {
    $node->webform['redirect_url'] = 'webform-post-submit-associate/%nid/%sid';
    webform_node_update($node);
  }
}*/

function dosomething_petitions_panels_pre_render($display) {
  if ($display->layout == 'petitions') {
    drupal_add_css(drupal_get_path('module', 'dosomething_petitions') . '/dosomething_petitions.css');
    drupal_add_js(drupal_get_path('module', 'dosomething_petitions') . '/dosomething_petitions.js', array('weight' => 500));
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_petitions_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Refer a friend via email form.
 */
function dosomething_petitions_email_form($form, &$form_state, $nid) {
  $form = array();
  $node = node_load($nid);

  global $user;
  $profile = profile2_load_by_user($user, 'main');
  $h = array(
    'title' => $node->title,
    'id' => $node->nid,
    'link' => url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE)),
    'me' => $profile->field_user_first_name[LANGUAGE_NONE][0]['value']
  );

  $form['invite_data'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => 'invite_data'
    ),
    '#default_value' => $node->nid
  );

  for ($i = 0; $i < PETITIONS_NUM_EMAILS; $i++) {
    $form['email_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'Friend\'s email',
    );
  }

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
    '#default_value' => $nid,
  );
  /*$form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Share This',
    '#attributes' => array(
      'class' => array('go-button'),
    ),
  );

  $form['#submit'][] = 'dosomething_petitions_email_form_submit';*/

  return $form;
}

/**
 * Petitions email form submit handler.
 */
function dosomething_petitions_email_form_submit($form, $form_state) {
  global $user, $language;
  $node = node_load($form_state['values']['nid']);
  $url = entity_uri('node', $node);
  $url = url($url['path'], array('absolute' => true));
  $name = dosomething_petitions_name($node->nid);

  $params = array(
    'title' => $node->title,
    'first_name' => $name['first'],
    'last_name' => $name['last'],
    'full_name' => $name['full'],
    'summary' => $node->field_petition_about[LANGUAGE_NONE][0]['summary'],
    'signatures' => number_format($node->field_petition_goal[LANGUAGE_NONE][0]['value']),
    'who' => $node->field_petition_target[LANGUAGE_NONE][0]['value'],
    'url' => $url,
  );

  for ($i = 0; $i < PETITIONS_NUM_EMAILS; $i++) {
    $email = $form_state['values']['email_'.$i];
    if (valid_email_address($email)) {
      drupal_mail('dosomething_petitions', 'petition_invite', $email, $language, $params);
      dosomething_petitions_store_email($node->nid, $user->uid, $email);
    }
  }
  drupal_set_message(t('Great! We\'ll send them a link to this petition. Share with more friends below.'));
}

function dosomething_petitions_store_email($nid, $uid, $invite) {
  $data = array(
    'nid' => $nid,
    'uid' => $uid,
    'invite' => $invite,
    'timestamp' => REQUEST_TIME
  );
  drupal_write_record('dosomething_petitions_invites', $data);
}

/**
 * Implements hook_mail().
 */
function dosomething_petitions_mail($key, &$message, $params) {
  switch ($key) {
    case 'petition_invite':
      $message['subject'] = t('@title', array('@title' => $params['title']));
      $message['headers']['From'] = t('@name <@email>', array('@name' => $params['first_name'] . ' ' . $params['last_name'], '@email' => $params['inviter_email']));
      $message['body'][] = theme('ds_petitions_invite', $params);
      break;
    case 'thanks_for_signing':
      $message['subject'] = t('!name sent you a message', array('!name' => $params['author']));
      $message['body'][] = theme('ds_petitions_thanks_for_signing', $params);
      $message['headers']['From'] = $params['author'] . ' <petitions-no-reply@dosomething.org>';
      #$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'petitions_goal_reached':
      $message['subject'] = t('!name has sent you a message - We made it!', array('!name' => $params['author']));
      $message['body'][] = theme('petitions_goal_reached', $params);
      $message['headers']['From'] = $params['author'] . ' <petitions@dosomething.org>';
      break;
    case 'petitions_milestone_reached':
      $message['subject'] = t('!name has sent you a message - Well done', array('!name' => $params['author']));
      $message['body'][] = theme('ds_petitions_milestone_reached', $params);
      $message['headers']['From'] = $params['author'] . ' <petitions@dosomething.org>';
      break;
    case 'thanks_for_inviting':
      $message['subject'] = t('!author has sent you a message', array('!author' => $params['author']));
      $message['body'][] = theme('petitions_thanks_for_inviting', $params);
      $message['headers']['From'] = $params['author'] . ' <petition@dosomething.org>';
      break;
    case 'invite_signed':
      $message['subject'] = t('You got !invitee to sign', array('!invitee' => $params['invitee']));
      $message['body'][] = theme('petitions_invitee_signed', $params);
      $message['headers']['From']  = 'DoSomething.org <help@dosomething.org>';
      break;
  }
}

/**
 *  Implements hook_mandrill_mail_alter()
 *  Tells Mandrill to maintain the "From" name and email, instead of changing them before mailing.
 */
function dosomething_petitions_mandrill_mail_alter(&$mandrill_message, &$message) {
  if ($message['module'] == 'dosomething_petitions') {
    if (isset($message['headers']['From']) && !empty($message['headers']['From']) && $mandrill_message['from_name'] !== $message['headers']['From']) {
      $mandrill_message['from_name'] = $message['headers']['From'];
    }

    if (isset($message['headers']['Sender']) && !empty($message['headers']['Sender']) && $mandrill_message['from_email'] !== $message['headers']['Sender']) {
      $mandrill_message['from_email'] = $message['headers']['Sender'];
    }
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_petitions_theme($existing, $type, $theme, $path) {
  return array(
    'ds_petitions_invite' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'ds-petitions-invite',
    ),
    'ds_petitions_thanks_for_signing' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => NULL,
        'petition' => NULL,
        'petition_link' => NULL,
        'author' => NULL,
        'goal' => NULL,
        'more_to_goal' => NULL
      ),
      'template' => 'ds-petitions-thanks-for-signing',
    ),
    'petitions_goal_reached' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => NULL,
        'petition' => NULL,
        'petition_link' => NULL,
        'author' => NULL,
        'petition_recipient' => NULL,
        'goal' => NULL,
        'similar_petitions' => NULL
      ),
      'template' => 'ds-petitions-goal-reached',
    ),
    'petitions_milestone_reached' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => NULL,
        'petition' => NULL,
        'petition_link' => NULL,
        'author' => NULL
      ),
      'template' => 'ds-petitions-milestone-reached',
    ),
    'petitions_thanks_for_inviting' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => NULL,
        'petition' => NULL,
        'author' => NULL,
        'petition_link' => NULL
      ),
      'template' => 'ds-petitions-thanks-for-inviting',
    ),
    'petitions_invitee_signed' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'name' => NULL,
        'petition' => NULL,
        'invitee' => NULL,
        'petition_link' => TRUE
      ),
      'template' => 'ds-petitions-invitee-signed',
    ),
  );
}

function dosomething_petitions_name($nid) {
  global $user;
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $conditions = array('nid' => $nid);

  if ($user->uid) {
    $conditions['uid'] = $user->uid;
  }
  else {
    $conditions['remote_addr'] = ip_address();
  }

  $submission = end(webform_get_submissions($conditions));
  $first_name = $submission->field_webform_first_name[LANGUAGE_NONE][0]['value'];
  $last_name = $submission->field_webform_last_name[LANGUAGE_NONE][0]['value'];

  if (empty($first_name)) {
    $profile = profile2_load_by_user($user, 'main');

    if (is_object($profile)) {
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
      $first_name = $profile_wrapper->field_user_first_name->value();
      $last_name = $profile_wrapper->field_user_last_name->value();
    }
  }

  $last_init = substr($last_name, 0, 1);
  $full_name = "$first_name $last_init.";

  if (empty($first_name)) {
    $full_name = 'Your Friend';
  }

  return array(
    'first' => $first_name,
    'last' => $last_name,
    'full' => $full_name,
  );
}

function dosomething_petitions_contact_scraper_emails() {
  $emails = array();
  $node = node_load(intval(basename(request_uri())));

  $a = user_load($node->uid);
  $p = profile2_load_by_user($a, 'main');
  $author = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
  if (!trim($author)) {
    $author = $a->name;
  }

  $node->link = url(drupal_lookup_path('alias', 'node/' . $node->nid), array('absolute' => TRUE));
  $node->goal = number_format($node->field_petition_goal[LANGUAGE_NONE][0]['value']);

  global $user;
  $p = profile2_load_by_user($user, 'main');
  if (isset($p->field_user_first_name[LANGUAGE_NONE][0]['value']) && !empty($p->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
    $me = $p->field_user_first_name[LANGUAGE_NONE][0]['value'];
    $last = $p->field_user_last_name[LANGUAGE_NONE][0]['value'];
  }
  else {
    $me = $user->name;
  }

  // Petitions "client email" link information
  $e = theme('ds_petitions_invite', array(
    'title' => $node->title,
    'nid' => $node->nid,
    'signatures' => $node->goal,
    'url' => $node->link,
    'first_name' => $me
  ));
  $emails['petition']['client_email']['title'] = $node->title . t('- Sign the petition!');
  $emails['petition']['client_email']['body'] = $e;


  // Petitions "You've been invited" email
  $emails['petition']['invited']['group'] = 'dosomething_petitions';
  $emails['petition']['invited']['email'] = 'petition_invite';
  $emails['petition']['invited']['params'] = array(
      'title' => $node->title,
      'signatures' => $node->goal,
      'url' => $node->link,
      'first_name' => $me,
      'last_name' => $last,
      'inviter_email' => $user->mail
    );
  $emails['petition']['invited']['store_function'] = 'dosomething_petitions_store_email';

  // Petitions "Thanks for inviting friends" email
  $emails['petition']['inviter']['group'] = 'dosomething_petitions';
  $emails['petition']['inviter']['email'] = 'thanks_for_inviting';
  $emails['petition']['inviter']['params'] = array(
    'name' => $me,
    'petition' => $node->title,
    'author' => $author,
    'petition_link' => $node->link . '#contacts'
  );

  return $emails;
}