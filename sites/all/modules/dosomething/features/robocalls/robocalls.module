<?php
/**
 * @file
 * Code for the DoSomething Robocalls feature.
 */

include_once 'robocalls.features.inc';
define('MCOMMONS_ROBOCALL_CAMPAIGN', 18301);
define('ROBOCALLS_WEBFORM_NID', 723327);//724089
define('MAX_CALLS_PER_DAY', 1);
define('ROUND_TO', 10);
define('ROBOCALLS_TAXONOMY_ID', variable_get('robocalls_taxonomy_vocab', 25));
define('ROBOCALLS_FEATURED_CELEB_TAG', 'Says Hayyy to Your Friends');
define('ROBOCALLS_MCOMMONS_ALPHAS_CAMPAIGN', 144433);

function robocalls_is_robo_page($page = '') {
  if (empty($page)) {
    $page = request_path();
  }
  if (strpos(request_uri(), 'calloffame')) {
    return true;
  }

  return false;
}

/**
 *  Implements hook_panels_pre_render()
 */
function robocalls_panels_pre_render($display) {
  if (robocalls_is_robo_page()) {
    // Adds Robocalls CSS
    drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/robocalls.css', array(
        'group' => CSS_THEME,
        'weight' => 3000
    ));

    // Adds Robocalls JS
    drupal_add_js(drupal_get_path('module', 'robocalls') . '/js/robocalls.js', array(
        'weight' => -100,
        'cache' => FALSE
    ));
  }
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function robocalls_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 *  Sends a phone call request to Mobile Commons.
 *
 *  @param $mobile
 *    The phone number to call.
 *
 *  @param $name (optional)
 *    The name of the person who is calling.
 *
 *  @param $opt_in_path
 *    The numeric Mobile Commons opt in path ID
 *
 *  @return
 *    An object as defined from drupal_http_request()
 */
function robocalls_mcommons_call($mobile, $name = '', $opt_in_path) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&person[user_s_name]=" . urlencode($name) . "&mconnect=$opt_in_path",
  );

  drupal_http_request($api_opt_in_path_url, $options);
}

/**
 *  Implements hook_module_implements_alter()
 */
function robocalls_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['robocalls'])) {
    $group = $implementations['robocalls'];
    unset($implementations['robocalls']);
    $implementations['robocalls'] = $group;
  }
}

function robocalls_get_celebrities() {
  $celebs = array();
  foreach (taxonomy_get_tree(ROBOCALLS_TAXONOMY_ID) AS $key => $celeb) {
    if ($celeb->parents[0] > 0 && $celeb->name != '???') {
      $celebs[$celeb->tid] = $celeb->name;
    }
  }

  return $celebs;
}

/**
 *  Implements hook_form_alter()
 */
function robocalls_form_alter(&$form, $form_state, $form_id) {
  global $term_info, $flags, $user;

  // Remove any query strings...they screw up the action later!
  $action = preg_replace('#(\?.*)?$#', '', $form_state['build_info']['args'][0]->webform['action']);
  if (strpos($form_id, 'webform_client_form_') === 0 && isset($form_state['webform_entity']) && $form_state['webform_entity']['bundle'] == 'robo_calls') {
    // Load the taxonomy term.
    $term = taxonomy_term_load(arg(2));

    // Try and load your profile information -- first name and cell
    $profile = profile2_load_by_user($user, 'main');
    $first_name = $mobile = '';
    if (isset($profile->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
      $first_name = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
    }
    if (isset($profile->field_user_mobile[LANGUAGE_NONE][0]['value'])) {
      $mobile = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
    }

    // Load the form information.
    $u = &$form['submitted'];

    // Placeholder and theoretical population of my name
    $u['field_celeb_your_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Name');
    if (!empty($first_name)) {
      $u['field_celeb_your_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $first_name;
    }

#    $u['field_celeb_your_name']['#access'] = FALSE;

    // Placeholder and theoretical population of my number
    $u['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Number');
    if (!empty($mobile)) {
      $u['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $mobile;
    }

    if (user_is_logged_in()) {
      $u['field_celeb_your_password']['#access'] = FALSE;
      if (!empty($first_name)) {
        $u['field_celeb_your_name']['#access'] = FALSE;
      }
      if (!empty($mobile)) {
        $u['field_celeb_your_phone']['#access'] = FALSE;
      }
    }

    // Placeholder for my password
    $u['field_celeb_your_password'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Password');

    // Set the celebrity chooser as the term ID
    $u['field_celebrity_chooser'][LANGUAGE_NONE]['#default_value'][] = $term->tid;

    // Set the mobile commons ID
    $u['field_mobile_commons_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $term->field_call_mobile_commons_id[LANGUAGE_NONE][0]['value'];

    // Set placeholder for all friend mobile fields
    $friend_fields = array(
      'field_celeb_friend_phone',
      'field_celeb_friend_phone_2',
      'field_celeb_friend_phone_3',
      'field_celeb_friend_phone_4',
      'field_celeb_friend_phone_5',
      'field_celeb_friend_phone_6',
    );
    foreach ($friend_fields AS $field) {
      $u['your_friends_info'][$field][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Friend\'s Number');
    }

    $form['more_stuff'] = array(
      '#markup' => '<a href="#" class="add-more-friends">Send to more friends</a>',
      '#weight' => 25,
    );

    drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/robocalls_celeb.css', array(
      'group' => CSS_THEME,
      'weight' => 9999
    ));

    $form['actions']['submit']['#value'] = t('Send The Call!');
    $form['#validate'][] = 'robocalls_celeb_form_validation';
    $form['#submit'][] = 'robocalls_celeb_form_submission';
  }
  else {
    if ($action == '/robo-calls/homepage-webform') {
      $u =& $form['submitted'];

      $u['my_info']['my_name']['#attributes']['placeholder'] = t('My Name');
      $u['my_info']['my_number']['#attributes']['placeholder'] = t('My Number');
      $u['my_info']['my_password']['#attributes']['placeholder'] = t('My Password');

      // Get celebrities and populate the select box.
      $celebs = robocalls_get_celebrities();

      $settings = array(
        'celebs' => $celebs
      );
      drupal_add_js(array('calloffame' => $settings), 'setting');

      $u['friends_info']['primary_friend']['select_call']['#options'] += $celebs;

      // Make sure the password field is a password field.
      $u['my_info']['my_password']['#type'] = 'password';


      $form['more_stuff'] = array(
        '#markup' => '<a href="#" class="add-more-friends-front">Send to more friends</a>',
        '#weight' => 25,
      );

      // Change the "submit" button text to "Send the call!"
      $form['actions']['submit']['#value'] = t('Send The Call!');
      $form['#submit'][] = 'robocalls_test';
    }
    else if (request_uri() == '/calloffame/walkthrough') {
      $u =& $form['submitted'];
      $u['friends_number']['#attributes']['placeholder'] = t("Friend's Number");

      $u['page_3']['#access'] = false;
      $u['my_number']['#access'] = false;
      global $user;
      $p = profile2_load_by_user($user, 'main');
      $form_state['input']['my_number'] = '610-368-3195';
      if ($p->field_user_mobile[LANGUAGE_NONE][0]['value']) {
        $form_state['input']['my_number'] = $p->field_user_mobile[LANGUAGE_NONE][0]['value'];
        $form_state['values']['my_number'] = $p->field_user_mobile[LANGUAGE_NONE][0]['value'];
        $u['my_number']['#default_value'] = $p->field_user_mobile[LANGUAGE_NONE][0]['value'];
      }

      $form['#submit'][] = 'robocalls_blah';
    }
  }
}

function robocalls_celeb_form_validation($form, &$form_state) {
  require_once DRUPAL_ROOT . '/includes/password.inc';

  if ($account = dosomething_general_find_user_by_cell($form_state['values']['submitted']['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'])) {
    if (!user_check_password($form_state['values']['submitted']['field_celeb_your_password'][LANGUAGE_NONE][0]['value'], $account)) {
      form_set_error('password', t('That is not the correct password for this account.'));
      $error++;
    }
  }

  if ($error > 0) {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

function robocalls_blah($form, &$form_state) {
  if (isset($form_state['input']['submitted']['friends_number'])) {
    #$form_state['values']['my_number'] = '610-368-3195';
    #$form_state['input']['my_number'] = '610-368-3195';
    #$form_state['values']['submitted_tree']['my_number'] = '610-368-3195';
    #$form_state['input']['submitted']['my_number'] = '610-368-3195';
    #drupal_form_submit('webform_client_form_727831', $form_state);
    #echo '<pre>', print_r($form_state['values']), '</pre>'; exit;

    #drupal_goto('calloffame');
  }

#  echo '<pre>', print_r($form_state['clicked_button']['value']), '</pre>'; exit;
}

/**
 *  Implements hook_webform_select_options_info()
 */
function robocalls_webform_select_options_info() {
  return array(
    'calls' => array(
      'title' => t('Project Prank Calls'),
      'options callback' => 'robocalls_get_celebrities',
    ),
  );
}


function robocalls_celeb_form_submission($form, &$form_state) {
  $s = $form_state['input']['submitted'];
  $your_cell = $s['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];
  dosomething_api_user_log_in($your_cell);

  $friend_fields = array(
    'field_celeb_friend_phone',
    'field_celeb_friend_phone_2',
    'field_celeb_friend_phone_3',
    'field_celeb_friend_phone_4',
    'field_celeb_friend_phone_5',
    'field_celeb_friend_phone_6',
  );

  $friends = array();
  // Add all friend fields to the friends array
  foreach ($friend_fields AS $field) {
    $friends[] = $form_state['input']['submitted']['your_friends_info'][$field][LANGUAGE_NONE][0]['value'];
  }

  // Add any additional friend fields, if applicable.
  if (!empty($form_state['input']['submitted']['additional_friends']) && is_array($form_state['input']['submitted']['additional_friends'])) {
    $friends += $form_state['input']['submitted']['additional_friends'];
  }

  // Strip any non-numeric characters to ensure we only get unique phone numbers.
  array_walk($friends, function(&$val, $key) {
    $val = preg_replace('#[^0-9]#', '', $val);
  });

  // Get only unique phone numbers.
  $friends = array_unique($friends);

  // Send the call(s)!
  $call = dosomething_general_telapi_request('718-578-7681', $friends, 'blah');

  // Redirect back home, with a GET variable with the call information.
  if (!empty($call)) {
    drupal_goto($_SERVER['HTTP_REFERER'] . '?c=' . base64_encode(serialize($call)));
  }
}

function robocalls_test($form, &$form_state) {
  $my = array(
    'name' => $form_state['input']['submitted']['my_info']['my_name'],
    'cell' => $form_state['input']['submitted']['my_info']['my_name'],
    'pass' => $form_state['input']['submitted']['my_info']['my_name'],
  );

  $friends = array(
    $form_state['input']['submitted']['friends_info']['primary_friend']['friends_number'] => $form_state['input']['submitted']['friends_info']['primary_friend']['select_call'],
  );

  foreach ($form_state['input']['submitted']['friends_info']['primary_friend']['more_calls'] AS $key => $call) {
    if ($form_state['input']['submitted']['friends_info']['primary_friend']['more_friends'][$key]) {
      $friends[$form_state['input']['submitted']['friends_info']['primary_friend']['more_friends'][$key]] = $call;
    }
  }
}

/**
 *  Calls errors (if applicable) and commands through AJAX.
 */
function robocalls_ajax_call($form, &$form_state) {
  $commands = array();
  $errors = form_get_errors();
  if ($errors) {
    $error_list = '';
    foreach ($errors AS $key => $error) {
       $error_list .= '<li>' . $error . '</li>';
    }

    $fake_error_template = '<div class="messages error">
	    <h2 class="element-invisible">Error message</h2>
	    <ul>' . $error_list . '</ul></div>
    ';
    $commands[] = ajax_command_before('#page-title', $fake_error_template);
  }
  else {
    $commands[] = ajax_command_invoke('#dosomething-login-register-popup-form', 'dsRobocallsSubmit', array($form_state['goto'], $form_state['input']['submitted']['celeb_call_information']['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']));
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/**
 *  Implements hook_menu()
 */
function robocalls_menu() {
  $items['call-post-associate/%'] = array(
    'page callback' => 'robocalls_call_post_associate',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
  * So here's the problem:
  * If a user is NOT logged in, they shouldn't be able to send a call.
  * That being said, we can't throw an error at them or they'll ignore it!
  * So they receive the log-in / register box.  IF they log in/register,
  * their submission is associated with them.  After the association, we bring them
  * here, which, now that they're logged in, calls them.  HOWEVER! This should only
  * be called for calls that should have "called now"...otherwise there's no point.
  */
function robocalls_call_post_associate($data) {
  $code = base64_decode($data);
  $info = json_decode($code);

  if (!$info->passed_limit && ($info->sn == 1) && dosomething_general_valid_cell($info->phone)) {
     robocalls_mcommons_call($info->phone, $info->myname, $info->mconnect_id);
  }

  $goto = $info->redirect;
  unset($info->sn, $info->phone, $info->myname, $info->redirect);
  $newcode = base64_encode(json_encode($info));

  drupal_goto($goto . '?done=' . $newcode);
}

/**
 *  Ponders over whether or not phone numbers have already been called today.
 *  If so, populates the $form_state['already_called'] array with those phone numbers.
 *
 *  @param $form
 *    The $form_state array
 *
 *  @param $numbers
 *    An array of phone numbers
 *
 *  @return
 *    Nothing.  Alters the $form variable with appropriate responses.
 */
function robocalls_handle_already_called(&$form, $numbers) {
  $limit = $form['input']['call_limit'];

  $last_night = strtotime('midnight');
  $tonight = strtotime('11:59pm');

  $q = new EntityFieldQuery;
  $result = $q
  ->entityCondition('entity_type', 'webform_submission_entity')
  ->propertyCondition('nid', $form['values']['details']['nid'])
  ->propertyCondition('submitted', array($last_night, $tonight), 'BETWEEN')
  ->propertyOrderBy('submitted', 'DESC')
  ->fieldCondition('field_celeb_friend_phone', 'value', array('610-368-3195'), 'IN')
  ->fieldCondition('field_celebrity_chooser', 'tid', $form['chosen_celeb'], '=')
  ->execute();

  $calls = entity_load('webform_submission_entity', array_keys($result['webform_submission_entity']));
  $fields = array(
    'field_celeb_friend_phone',
    'field_celeb_friend_phone_2',
    'field_celeb_friend_phone_3',
    'field_celeb_friend_phone_4',
    'field_celeb_friend_phone_5',
  );

  $called = array();
  foreach ($calls AS $key => $call) {
    foreach ($fields AS $cfield) {
      if (!empty($call->{$cfield}[LANGUAGE_NONE][0]['value']) && in_array($call->{$cfield}[LANGUAGE_NONE][0]['value'], $numbers)) {
        $called[$call->{$cfield}[LANGUAGE_NONE][0]['value']]++;
      }
    }
  }

  $form['already_called'] = array();
  foreach ($called AS $number => $times) {
    if ($times >= $limit) {
      $form['already_called'][$number] = 1;
    }
  }
}

/**
 *  Validate call information.
 */
function robocalls_call_validate(&$form, &$form_state) {
  $s = $form_state['input']['submitted']/*['celeb_call_information']*/;
  $stime = $s['field_celeb_date'][LANGUAGE_NONE][0]['value'];
 
  // Gathers taxonomy term information
  $pi = $s['field_celebrity_chooser'][LANGUAGE_NONE];
  $p = taxonomy_get_parents($pi);
  $p = current($p);
  $parent_name = $p->field_short_name[LANGUAGE_NONE][0]['value'];

  $t = taxonomy_term_load($pi);
  $term_name = $t->name;

  $error = 0;

  $numbers = array(
    1 => $s['field_celeb_friend_phone'][LANGUAGE_NONE][0]['value'],
    2 => $s['field_celeb_friend_phone_2'][LANGUAGE_NONE][0]['value'],
    3 => $s['field_celeb_friend_phone_3'][LANGUAGE_NONE][0]['value'],
    4 => $s['field_celeb_friend_phone_4'][LANGUAGE_NONE][0]['value'],
    5 => $s['field_celeb_friend_phone_5'][LANGUAGE_NONE][0]['value'],
  );

  $scholarship = !empty($t->field_celeb_scholarship_langauge[LANGUAGE_NONE][0]['value']);
  if ($scholarship) {
    $fields = array(
      1 => 'field_celeb_friend_phone',
      #2 => 'field_celeb_friend_phone_2',
      #3 => 'field_celeb_friend_phone_3',
      #4 => 'field_celeb_friend_phone_4',
      #5 => 'field_celeb_friend_phone_5',
    );

    foreach ($fields AS $key => $field) {
      if (empty($numbers[$key]) || !dosomething_general_valid_cell($numbers[$key])) {
        form_set_error('submitted][' . $field, t('We\'ll need 5 friends\' phone numbers, and they all must be a valid cell phone # (xxx) xxx-xxxx'));
        $error++;
      }
    }
  }

  $sn = 0;
  $sn = intval($form_state['input']['submitted']['field_celeb_send_now'][LANGUAGE_NONE]);
  $form['#submission']->submitted['field_celeb_send_now'][LANGUAGE_NONE][0]['value'] = $sn;
  $form['#submission']->field_celeb_send_now[LANGUAGE_NONE][0]['value'] = $sn;
  $form_state['values']['submitted']['field_celeb_send_now'][LANGUAGE_NONE][0]['value'] = $sn;

  $mconnect = $form['submitted']['webform_entity_form']['#entity']->input['mobile_commons_id'];
  if (empty($mconnect)) {
    $mconnect = $t->field_call_mobile_commons_id[LANGUAGE_NONE][0]['value'];
  }

  $form['#submission']->field_mobile_commons_id[LANGUAGE_NONE][0]['value'] = $mconnect;
  $form['#submission']->submitted['field_mobile_commons_id'][LANGUAGE_NONE][0]['value'] = $mconnect;
  $form_state['values']['submitted']['field_mobile_commons_id'][LANGUAGE_NONE][0]['value'] = $mconnect;

  // Turn it into 24 hours for mktime...
  if ($stime['ampm'] == 'pm' && $stime['hour'] <> 12) {
    $stime['hour'] += 12;
  }
  elseif ($stime['ampm'] == 'am' && $stime['hour'] == 12){
    $stime['hour'] = 0;
  }

  $nst = mktime($stime['hour'], $stime['minute'], 0, $stime['month'], $stime['day'], $stime['year']);

  $form_state['my_number'] = $s['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];
  $form_state['friend_number'] = $s['field_celeb_friend_phone'][LANGUAGE_NONE][0]['value'];
  $form_state['chosen_celeb'] = $s['field_celebrity_chooser'][LANGUAGE_NONE];

  // If they're submitting for a date that's already passed, no bananas!
  if (time() > $nst && $sn) {
    form_set_error('form', "Sorry, we can't send a call from the past.");
    $error++;
  }

  if (!$form_state['my_number'] || !dosomething_general_valid_cell($form_state['my_number'])) {
    form_set_error('submitted][field_celeb_your_phone', 'Your phone number must be a valid cell phone number (xxx)xxx-xxxx.');
    $error++;
  }

  if (!$form_state['friend_number'] || !dosomething_general_valid_cell($form_state['friend_number'])) {
    form_set_error('submitted][field_celeb_friend_phone', 'Your friend\'s phone number must be a valid cell phone number (xxx)xxx-xxxx.');
    $error++;
  }

  if (!$form_state['chosen_celeb'] || $form_state['chosen_celeb'] == '_none') {
    form_set_error('submitted][field_celebrity_chooser', "Please choose a celebrity.");
    $error++;
  }

  /** Robocalls Flood Control
    * If a phone number has been used MAX_CALLS_PER_DAY times,
    * the submission will fail.  This will prevent people from
    * flooding a phone number with too many phone calls in a day.
    */
  robocalls_handle_already_called($form_state, $numbers);

  if ($error && user_is_logged_in()) {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 *  Submission handling for calls.
 */
function robocalls_call_submit(&$form, &$form_state) {
   $sub = &$form['#submission']->submitted/*['celeb_call_information']*/;

   $parent_name = $term_name = '';

   // Gathers taxonomy term information
   $pi = $sub['field_celebrity_chooser'][LANGUAGE_NONE][0]['tid'];
   $p = taxonomy_get_parents($pi);
   $p = current($p);
   $parent_name = $p->field_short_name[LANGUAGE_NONE][0]['value'];

   $t = taxonomy_term_load($pi);
   $term_name = $t->name;

   $friend_phone = $sub['field_celeb_friend_phone'][LANGUAGE_NONE][0]['value'];
   $user_name = $sub['field_celeb_your_name'][LANGUAGE_NONE][0]['value'];
   $my_phone = $sub['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];

   $send_now =  $sub['field_celeb_send_now'][LANGUAGE_NONE][0]['value'];

   $mconnect_id = $form['submitted']['webform_entity_form']['#entity']->input['mobile_commons_id'];
   if (empty($mconnect_id) && !empty($form_state['values']['submitted_tree']['field_mobile_commons_id'][LANGUAGE_NONE][0]['value'])) {
      $mconnect_id = $form_state['values']['submitted_tree']['field_mobile_commons_id'][LANGUAGE_NONE][0]['value'];
   }

   if (!$send_now && !$form_state['already_called'][$friend_phone] && user_is_logged_in()) {
     robocalls_mcommons_call($friend_phone, $user_name, $mconnect_id);
   }

   $scholarship = !empty($t->field_celeb_scholarship_langauge[LANGUAGE_NONE][0]['value']);
   if ($scholarship) {
    for ($i = 2; $i <= 5; $i++) {
      $field = 'field_celeb_friend_phone_' . $i;
      $p = $sub[$field][LANGUAGE_NONE][0]['value'];
      if (!empty($p) && dosomething_general_valid_cell($p)) {
        if (!$send_now && !$form_state['already_called'][$p] && user_is_logged_in()) {
          robocalls_mcommons_call($p, $user_name, $mconnect_id);
        }
      }
    }
   }

   // If we've already called number(s), delete the submission because it failed.
   if (!empty($form_state['already_called'])) {
     $sid = $form_state['values']['details']['sid'];
     entity_delete('webform_submission_entity', $sid);
   }

   /**
     * If a user is logged in and doesn't have a cell phone connected with their
     * account yet, attach it to their account and save.
     */
   if (user_is_logged_in()) {
     global $user;
     $profile = profile2_load_by_user($user, 'main');
     if (!$profile->field_user_mobile[LANGUAGE_NONE][0]['value'] || $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] !== $my_phone) {
        $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $my_phone;
        $profile->save();
     }
   }

   dosomething_general_mobile_commons_subscribe($my_phone, ROBOCALLS_MCOMMONS_ALPHAS_CAMPAIGN);

  $code = base64_encode(json_encode(array(
     'name' => $term_name,
     'cause' => $parent_name,
     'passed_limit' => !empty($form_state['already_called']),
     'sn' => $send_now,
     'phone' => $friend_phone,
     'myname' => $user_name,
     'redirect' => $_SERVER['HTTP_REFERER'],
     'mconnect_id' => $mconnect_id
  )));

	/**
	  * If a user is NOT logged in (and are in the process of registering / logging in), their
	  * post will (obviously) not have their name attached to it.  So when they DO log in / register,
	  * let's make sure that we assign this submission to this user.
	  */
   if (!user_is_logged_in()) {
      $form_state['goto'] = 'webform-post-submit-associate/' . $form_state['values']['details']['nid'] . '/' . $form_state['values']['details']['sid'] . '?destination=call-post-associate/' . $code;
   }
   else {
      // Otherwise, they ARE logged in so whatever.
      $form_state['redirect'] = $_SERVER['HTTP_REFERER'] . '?done=' . $code;
      $_GET['redirect'] = ($form_state['redirect']);
   }
}

/**
 *  Implements hook_page_alter()
 */
function robocalls_page_alter(&$page) {
   global $term_info, $flags;

  if (request_uri() == '/calloffame/about') {
    drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/robocalls.css', array(
        'group' => CSS_THEME,
        'weight' => 10
    ));
  }

   if (isset($term_info)) {
      $url = array(
       '#tag' => 'meta',
       '#attributes' => array(
          'property' => 'og:url', 
          'content' => url(substr(request_uri(), 1), array('absolute' => true)),
        ),
      );

      $tdesc = $ttitle = '';
      switch ($term_info['flag']) {
        case 'Animals':
          $tdesc = t('4 million shelter animals were euthanized last year because they couldn\'t find homes, find out how to do something about it here.');
          $ttitle = t('Let your friends know about animals in need with a phone call from !name', array('!name' => $term_info['name']));
        break;
        case 'Birthday':
          $tdesc = t('Is your friend a huge fan of !name? Well, you\'re in luck, click here to have them call your friend and wish them a Happy Birthday now!', array('!name' => $term_info['name']));
          $ttitle = t('Wish your firends a happy birthday with a phone call from !name', array('!name' => $term_info['name']));
        break;
        case 'Voting':
          $tdesc = t('1.9 million people couldn\'t find their voting location during the last Presidential election, make sure your friends know where theirs is this November 6th.');
          $ttitle = t('Help your friends find their V-Spot with a phone call from !name', array('!name' => $term_info['name']));
        break;
      }

      $title = array(
       '#tag' => 'meta',
       '#attributes' => array(
          'property' => 'og:title', 
          'content' => $ttitle
        ),
      );

      $desc = array(
       '#tag' => 'meta',
       '#attributes' => array(
          'property' => 'og:description', 
          'content' => $tdesc
        ),
      );
      $image = array(
       '#tag' => 'meta',
       '#attributes' => array(
          'property' => 'og:image', 
          'content' => 'http://files.dosomething.org/files/' . str_replace(drupal_realpath('public://'), '', drupal_realpath($term_info['image']))
        ),
      );
      drupal_add_html_head($url, 'robocalls_url');
      drupal_add_html_head($title, 'robocalls_title');
      drupal_add_html_head($desc, 'robocalls_desc');
      drupal_add_html_head($image, 'robocalls_img');

      $flag = $term_info['flag'];
   }
}

/**
 *  Removes the celebrity you're looking at from the swipe-gallery
 */
function robocalls_unset_celeb_from_tid(&$view, $tid) {
  foreach ($view->result AS $key => $celeb) {
    if ($celeb->tid == $tid) {
      unset($view->result["$key"]);
      break;
    }
  }
}

/**
  * Implements hook_views_pre_render()
  *
  * Alters celebrity blocks to include ribbons for:
  * - Birthday calls (defined by checkbox in celebrity creation.  Arbitrary number of these.)
  * - Most Popular (defined by celebrity with most submissions.  Only one.)
  * - New Celeb (defined by most recently created celebrity -- given by date of sound file creation.  Only one.
  */
function robocalls_views_pre_render(&$view) {
   global $flags, $term_info;

   if ($view->name == 'cause_its_your_birthday') {
      $pop = db_query("SELECT `field_celebrity_chooser_tid` AS `tid`, COUNT(*) AS `c` FROM {field_data_field_celebrity_chooser} GROUP BY `field_celebrity_chooser_tid` ORDER BY `c` DESC LIMIT 1")->fetchAssoc();
      $popular = $pop['tid'];

      if (!empty($view->result[0]->view_name) && $view->result[0]->view_name == 'cause_its_your_birthday:block_robocalls_choose_another_celeb') {
        robocalls_unset_celeb_from_tid($view, $term_info['tid']);
      }

      $latest = array('stamp' => 0, 'key' => 0);
      $bdays = array();
      foreach ($view->result AS $key => $info) {
         $no = 0;
         $parent = key(taxonomy_get_parents($info->tid));

         $bday = (isset($info->_field_data['tid']['entity']->field_birthday_call[LANGUAGE_NONE][0]['value']) && $info->_field_data['tid']['entity']->field_birthday_call[LANGUAGE_NONE][0]['value'] == 1);

         $p = taxonomy_term_load($parent);
         if (!empty($p->name)) {
            if (!$no) $view->result["$key"]->taxonomy_term_data_description .= '<div class="robocall-flag ' . strtolower($p->name) . '">' . $p->name . '</div>';
         }
      }

      $flags = array();
    }
}