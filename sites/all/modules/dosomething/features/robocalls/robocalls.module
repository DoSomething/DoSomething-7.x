<?php
/**
 *  @file
 *  Robo calls, also known as Project Prank, is a product that
 *  sends phone calls to a user "on behalf of" a celebrity.
 *  A user can select a celebrity from a list, input their friends'
 *  phone numbers, and we'll send the call.
 *
 *  The product can be found at /prank.  All associated celebrities
 *  should follow the "/prank/[celebrity name]" standard.
 *
 *  Project Prank uses TelAPI to send phone calls, and Mobile Commons
 *  to send text messages.
 *
 *  @see http://www.telapi.com
 *  @see http://dosomething.mcommons.org
 *  @see dosomething_general_telapi_request() in dosomething_general.module
 *
 */

include_once 'robocalls.features.inc';
define('MCOMMONS_ROBOCALL_CAMPAIGN', 18301);
define('ROBOCALLS_WEBFORM_NID', 723327);//724089
define('MAX_CALLS_PER_DAY', 1);
define('ROUND_TO', 10);
define('ROBOCALLS_TAXONOMY_ID', variable_get('robocalls_taxonomy_vocab', 25));
define('ROBOCALLS_MCOMMONS_ALPHAS_CAMPAIGN', 144433);
define('ROBO_PATH', 'prank');

/**
 *  Implements hook_init()
 */
function robocalls_init() {
  if (robocalls_is_robo_page()) {
    $robocalls = robocalls_load_config();

    drupal_set_title(t($robocalls['title']));
  }
}

/**
 *  Loads the configuration file for robocalls and returns it.
 *
 *  @return array
 *    The array of options for robo calls
 */
function robocalls_load_config() {
  global $robocalls;

  if (!isset($robocalls)) {
    require drupal_get_path('module', 'robocalls') . '/plugin.php';
  }

  return $robocalls;
}

/**
 *  Implements hook_webform_select_options_info()
 */
function robocalls_webform_select_options_info() {
  return array(
    'calls' => array(
      'title' => t('Project Prank Calls'),
      'options callback' => 'robocalls_get_celebrities',
    ),
  );
}

/**
 *  Gets all celebrities.
 *
 *  @return array
 *    An array of celebrities, with keys as the TID and values as
 *    the name of the celebrity.
 */
function robocalls_get_celebrities() {
  $celebs = array();
  foreach (taxonomy_get_tree(ROBOCALLS_TAXONOMY_ID) AS $key => $celeb) {
    if ($celeb->parents[0] > 0 && $celeb->name != '???') {
      $celebs[$celeb->tid] = $celeb->name;
    }
  }

  return $celebs;
}

/**
 *  Confirms that the page you're currently on is a robocalls page
 *
 *  @param string $page
 *    A string identifier for your preferred page.
 *
 *  @return bool
 *    Boolean true if the current request URI matches $page, or false otherwise.
 */
function robocalls_is_robo_page($page = '') {
  if (empty($page)) {
    $page = request_path();
  }

  if (preg_match('#^(calloffame|' . ROBO_PATH . ')#', $page)) {
    return true;
  }

  return false;
}

/**
 *  Implements hook_menu()
 */
function robocalls_menu() {
  $items = array();

  $items['prank/xml/%'] = array(
    'page callback' => 'robocalls_call_xml',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  $items['prank/call-done'] = array(
    'page callback' => 'robocalls_call_completed',
    'access callback' => TRUE,
  );

  $items['prank/beta-response'] = array(
    'page callback' => 'robocalls_beta_response',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 *  TelAPI call completion callback.  Receives a request from TelAPI
 *  when a call is in session, and when the call is completed.  Sends a text
 *  to the user who received the phone call afterwards.
 */
function robocalls_call_completed() {
  // Confirm that we're only responding to a completed call.
  if ($_REQUEST['CallStatus'] == 'completed') {
    if (
      (isset($_REQUEST['From']) && dosomething_general_valid_cell($_REQUEST['From']))
      && (isset($_REQUEST['To']) && dosomething_general_valid_cell($_REQUEST['To']))
    ) {
      // Assuming the call is complete, send the text message!
      dosomething_general_mobile_commons_subscribe_with_friends($_REQUEST['From'], 0, array($_REQUEST['To']), 146913);
    }
  }
}

/**
 *  After a beta receives a phone call, they get a text message thanking them for
 *  getting the call.  If they respond with their friends' numbers, we send that same
 *  call to their friends.
 *
 *  @return string|xml
 *    Mobile Commons XML response for the beta.
 */
function robocalls_beta_response() {
  // Ignore everything if we don't receive a response from the user.
  if (!isset($_REQUEST['args'])) {
    dosomething_general_sms_mdata_response(t('Sorry, we didn\'t catch that.  Txt us ur friends\' #s and we\'ll send this call to them.'));
    drupal_exit();
  }

  // Ignore if there is no phone number associated with this text message.
  if (!isset($_REQUEST['phone_number_without_country_code'])) {
    return;
  }

  // Strip all non-numeric characters from the response and attempt to grab phone 10-digit phone numbers, optionally preceded with a 1.
  preg_match_all('#1?(\d{3}\d{3}\d{4})#', preg_replace('#[^0-9]#', '', $_REQUEST['args']), $numbers);

  // Attempt to get my number.
  $my_number = preg_replace('#[^0-9]#', '', $_REQUEST['phone_number_without_country_code']);

  // Assuming your phone number is a phone number.
  if (!empty($my_number) && dosomething_general_valid_cell($my_number)) {
    $id = $my_number = $n = '';

    // Attempt to get the last record of the call you (the beta) were a part of.
    $call = db_select('call_records', 'r')
      ->fields('r', array('call_id'))
      ->condition('beta', $my_number)
      ->orderBy('timestamp', 'DESC')
      ->range(0, 1)
      ->execute()->fetchAll();

    // Get the ID of the celebrity for that call.
    $id = reset($call)->call_id;

    // If numbers (from above) is not empty, place calls!
    if (!empty($numbers) && is_array($numbers) && isset($numbers[1])) {
      foreach ($numbers[1] AS $key => $number) {
        // Format the phone number to be uniform throughout.
        $n .= preg_replace('#(\d{3})(\d{3})(\d{4})#', '(\\1) \\2-\\3', $number) . ($key == (count($numbers[1]) - 2) ? ' and ' : ($key == (count($numbers[1]) - 1) ? '.' : ', '));

        // Send the TelAPI request.
        dosomething_general_telapi_request('718-578-7681'/*$my_number*/, $number, $id);

        // Make a record of the call.
        robocalls_record_call('718-578-7681'/*$my_number*/, $number, $id);
      }
    }
    // If we didn't get any phone numbers, let 'em know.
    else {
      dosomething_general_sms_mdata_response(t('Sorry, it doesn\'t look like you sent us any phone numbers.  Txt us ur friends\' #s to send them this call.'));
      return;
    }

    dosomething_general_sms_mdata_response(t('Great, we\'ve sent this call to !numbers.  Txt back with more #s to send more calls.', array('!numbers' => $n)));
  }
  // How didn't we get their phone number?
  else {
    dosomething_general_sms_mdata_response(t('Whoa.  We didn\'t get your phone number.  Txt us back with ur friends\' #s to send them this call.'));
  }

  // Fin.
  drupal_exit();
}

/**
 *  Makes a record of the call, for gamma ftaf and for data purposes.
 *
 *  @param int|string $alpha
 *    The alpha's phone number.  Stripped of non-numeric character
 *    in this function so both strings and integers are allowed.
 *
 *  @param int|string $beta
 *    The beta's phone number.  Stripped of non-numeric character
 *    in this function so both strings and integers are allowed.
 *
 *  @param int $call_id
 *    The id of the celebrity who called.
 *
 */
function robocalls_record_call($alpha, $beta, $call_id) {
  $record = array(
    'timestamp' => REQUEST_TIME,
    'alpha' => preg_replace('#[^0-9]#', '', $alpha),
    'beta' => preg_replace('#[^0-9]#', '', $beta),
    'call_id' => $call_id,
  );

  // Make a record.
  drupal_write_record('call_records', $record);
}

/**
 *  Builds the Inbound XML document for TelAPI services
 *
 *  @param integer $tid
 *    The taxonomy term ID for the celebrity to call.
 *
 *  @return xml|string
 *    Returns the Inbound XML document, as specified by TelAPI library.
 */
function robocalls_call_xml($tid) {
  // If no tid specified, end now.
  if (!intval($tid)) {
    return;
  }

  // Load the term in question.
  $term = taxonomy_term_load($tid);

  // Make sure we actually have a call to play.  
  if (!isset($term->field_celeb_call[LANGUAGE_NONE][0]['uri'])) {
    return;
  }

  // Load the TelAPI InboundXML library
  $path = libraries_get_path('telapi');
  require_once $path . '/library/TelApi/InboundXML.php';

  // Build the InboundXML object
  $xml = new TelApi_InboundXML();
  //$xml->say('This is a call from do something dot org', array('voice' => 'woman'));
  $xml->play(file_create_url($term->field_celeb_call[LANGUAGE_NONE][0]['uri']));

  // Spit out the XML
  echo $xml;
  exit;
}

/**
 *  Implements hook_panels_pre_render()
 */
function robocalls_page_alter(&$page) {
  if (robocalls_is_robo_page()) {
    $robocalls = robocalls_load_config();
    
    $p = request_path();
    // Adds Robocalls CSS
    foreach ($robocalls['css'] AS $path => $styles) {
      if (preg_match('#^' . $path . '#', $p)) {
        foreach ($styles AS $style) {
          drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/' . $style, array(
            'group' => CSS_THEME,
            'weight' => 3000
          ));
        }
      }
    }

    // Add robocalls javascript
    foreach ($robocalls['js'] AS $path => $scripts) {
      if (preg_match('#^' . $path . '#', $p)) {
        foreach ($scripts AS $script) {
          drupal_add_js(drupal_get_path('module', 'robocalls') . '/js/' . $script, array(
            'weight' => -100,
            'cache' => FALSE
          ));   
        }
      }
    }

    // Loads Facebook.
    drupal_add_library('connections', 'facebook');
  }
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function robocalls_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}


/**
 *  Implements hook_module_implements_alter()
 */
function robocalls_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['robocalls'])) {
    $group = $implementations['robocalls'];
    unset($implementations['robocalls']);
    $implementations['robocalls'] = $group;
  }
}

/**
 *  Implements hook_form_alter()
 */
function robocalls_form_alter(&$form, $form_state, $form_id) {
  global $term_info, $flags, $user;

  // Remove any query strings...they screw up the action later!
  $action = preg_replace('#(\?.*)?$#', '', $form_state['build_info']['args'][0]->webform['action']);
  if (strpos($form_id, 'webform_client_form_') === 0 && isset($form_state['webform_entity']) && $form_state['webform_entity']['bundle'] == 'robo_calls') {
    // Load the taxonomy term.
    $term = taxonomy_term_load(arg(2));

    // Try and load your profile information -- first name and cell
    $profile = profile2_load_by_user($user, 'main');
    $first_name = $mobile = '';
    if (isset($profile->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
      $first_name = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
    }
    if (isset($profile->field_user_mobile[LANGUAGE_NONE][0]['value'])) {
      $mobile = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
    }

    // Load the form information.
    $u = &$form['submitted'];

    // Placeholder and theoretical population of my name
    $u['field_celeb_your_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Name');
    if (!empty($first_name)) {
      $u['field_celeb_your_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $first_name;
    }

#    $u['field_celeb_your_name']['#access'] = FALSE;

    // Placeholder and theoretical population of my number
    $u['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Number');
    if (!empty($mobile)) {
      $u['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $mobile;
    }

    if (user_is_logged_in()) {
      $u['field_celeb_your_password']['#access'] = FALSE;
      if (!empty($first_name)) {
        $u['field_celeb_your_name']['#access'] = FALSE;
      }
      if (!empty($mobile)) {
        $u['field_celeb_your_phone']['#access'] = FALSE;
      }
    }

    // Placeholder for my password
    $u['field_celeb_your_password'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('* My Password');

    // Set the celebrity chooser as the term ID
    $u['field_celebrity_chooser'][LANGUAGE_NONE]['#default_value'][] = $term->tid;

    // Set the mobile commons ID
    $u['field_mobile_commons_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $term->field_call_mobile_commons_id[LANGUAGE_NONE][0]['value'];

    // Set placeholder for all friend mobile fields
    $friend_fields = array(
      'field_celeb_friend_phone',
      'field_celeb_friend_phone_2',
      'field_celeb_friend_phone_3',
      'field_celeb_friend_phone_4',
      'field_celeb_friend_phone_5',
      'field_celeb_friend_phone_6',
    );
    foreach ($friend_fields AS $field) {
      $u['your_friends_info'][$field][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Friend\'s Number');
    }

    $form['more_stuff'] = array(
      '#markup' => '<a href="#" class="add-more-friends">Send to more friends</a>',
      '#weight' => 25,
    );

    drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/robocalls_celeb.css', array(
      'group' => CSS_THEME,
      'weight' => 9999
    ));

    // On hold 3/6/13
    /*$form['need-help'] = array(
      '#prefix' => '<p class="need-help">',
      '#markup' => l(t('Need Help?'), ROBO_PATH . '/walkthrough'),
      '#suffix' => '</p>',
      '#weight' => 10000,
    );*/

    $form['actions']['submit']['#value'] = t('Send The Call!');
    $form['#validate'][] = 'robocalls_celeb_form_validation';
    $form['#submit'][] = 'robocalls_celeb_form_submission';
  }
  else {
    if ($action == '/robo-calls/homepage-webform') {
      $u =& $form['submitted'];

      $me = dosomething_api_user_fetch_data(array(
        'profile' => array(
          'field_user_first_name' => 'name',
          'field_user_mobile' => 'mobile'
        ),
      ));

      $u['my_info']['my_name']['#attributes']['placeholder'] = t('* My Name');
      if (!empty($me['name'])) {
        $u['my_info']['my_name']['#default_value'] = $me['name'];
      }

      // Placeholder and theoretical population of my number
      $u['my_info']['my_number']['#attributes']['placeholder'] = t('* My Number');
      if (!empty($me['mobile'])) {
        $u['my_info']['my_number']['#default_value'] = $me['mobile'];
      }

      $u['my_info']['my_password']['#attributes']['placeholder'] = t('* My Password');

      if (user_is_logged_in()) {
        $u['my_info']['my_password']['#access'] = FALSE;
        $i = 0;
        if ($me['name']) {
          $u['my_info']['my_name']['#access'] = FALSE;
          $i++;
        }
        if ($me['mobile']) {
          $u['my_info']['my_number']['#access'] = FALSE;
          $i++;
        }

        if ($i == 2) {
          $u['my_info']['#access'] = false;
        }
      }

      // Get celebrities and populate the select box.
      $celebs = robocalls_get_celebrities();

      $settings = array(
        'celebs' => $celebs
      );
      drupal_add_js(array('calloffame' => $settings), 'setting');

      $u['friends_info']['primary_friend']['friends_number']['#attributes']['placeholder'] = t('Friend\'s Number');
      $u['friends_info']['primary_friend']['select_call']['#options'] += $celebs;

      // Make sure the password field is a password field.
      $u['my_info']['my_password']['#type'] = 'password';


      $form['more_stuff'] = array(
        '#markup' => '<a href="#" class="add-more-friends-front">Send to more friends</a>',
        '#weight' => 25,
      );

      // Change the "submit" button text to "Send the call!"
      $form['actions']['submit']['#value'] = t('Send The Call!');
      /* On hold 3/6/13
      $form['need-help'] = array(
        '#prefix' => '<p class="need-help">',
        '#markup' => l(t('Need Help?'), ROBO_PATH . '/walkthrough'),
        '#suffix' => '</p>',
        '#weight' => 10000,
      );*/

      $form['#validate'][] = 'robocalls_homepage_form_validation';
      $form['#submit'][] = 'robocalls_homepage_form_submission';

      if (intval(basename(request_path()))) {
        $submission = array_shift(entity_load('webform_submission_entity', array(intval(basename(request_path())))));
        if ($tid = $submission->data[5]['value'][0]) {
          $term = taxonomy_term_load($tid);
          drupal_add_js(array('call' => array(
            'celeb_tid' => $tid,
            'celeb_path' => url(drupal_lookup_path('alias', 'taxonomy/term/' . $tid), array('absolute' => TRUE)),
            'celeb_image' => file_create_url($term->field_celeb_photo[LANGUAGE_NONE][0]['uri']),
            'celeb_name' => $term->name
          )), 'setting');
        }
      }
/*
      if (isset($_SESSION['front_page_call'])) {
        $i = $_SESSION['front_page_call'];
        unset($_SESSION['front_page_call']);
        drupal_add_js(array('call' => $i), 'setting');
      }*/
    }
    else if (request_uri() == '/' . ROBO_PATH . '/walkthrough') {
      $u =& $form['submitted'];
      $u['friends_number']['#attributes']['placeholder'] = t("Friend's Number");

      $u['my_number']['#attributes']['placeholder'] = t('My Number');
      $u['my_name']['#attributes']['placeholder'] = t('My Name');
      $u['my_password']['#attributes']['placeholder'] = t('My Password');

      if (user_is_logged_in()) {
        $me = dosomething_api_user_fetch_data(array(
          'profile' => array(
            'field_user_first_name' => 'name',
            'field_user_mobile' => 'mobile'
          ),
        ));
        $u['my_number']['#value'] = $me['mobile'];
        $u['my_name']['#value'] = $me['name'];
      }

      if (isset($u['my_password'])) {
        $u['my_password']['#type'] = 'password';
        if (user_is_logged_in()) {
          $u['my_password']['#access'] = FALSE;
        }
      }

      $form['#submit'][] = 'robocalls_walkthrough_submission';
    }
  }
}

/**
 *  Handles generic validation for all Robocalls forms.
 *
 *  @param array $my_info
 *     An array of the user's information.  Must include:
 *        - number (Phone number)
 *        - password (Password)
 *
 *  @param array $friends_info
 *     An array of arrays, including the friends' information.
 *     array[friends]
 *        - Phone numbers of all friends.
 *     array[calls]
 *        - The Call IDs, with keys matching the phone # key.
 */
function robocalls_general_validation($my_info, $friends) {
  $error = 0;

  // Confirm user information is correct...assuming they're not logged in.
  if (!user_is_logged_in()) {
    if (!empty($my_info) && is_array($my_info)) {
      // Confirm the password is correct.
      require_once DRUPAL_ROOT . '/includes/password.inc';
      if ($account = dosomething_api_user_lookup($my_info['number'])) {
        if (!user_check_password($my_info['password'], $account)) {
          form_set_error('password', t('Sorry, that password does not match the account in question..'));
          $error++;
        }
      }

      // Confirm the phone number is correct.
      if (!dosomething_general_valid_cell($my_info['number'])) {
        form_set_error('number', t('Your phone number must be valid.'));
        $error++;
      }
    }
  }

  $bad_numbers = $bad_callids = 0;
  // Double check all friends' phone numbers and callids
  foreach ($friends['numbers'] AS $key => $number) {
    // If the phone number is *not* empty
    if (!empty($number)) {

      // If not a valid cell phone number...
      if (!dosomething_general_valid_cell($number)) {
        $bad_numbers++;
      }

      // If the call is invalid or empty.
      if (empty($friends['calls'][$key])) {
        $bad_callids++;
      }
    }
    else if (empty($number)) {
      // If the call *is* empty, and it's the first (required) number...
      if ($key == 0) {
        $bad_numbers++;
      }

      // If the call is empty, and it's the first phone number.
      if (empty($friends['calls'][$key]) && $key == 0) {
        $bad_callids++;
      }
    }
  }

  // Verify first (primary) friend's phone number.
  if ($bad_numbers > 0) {
    form_set_error('friends', t('Your friends\' numbers must all be valid cell phone numbers.'));
    $error++;
  }

  // Verify first (primary) friend's call id
  if ($bad_callids > 0) {
    form_set_error('select_call', t('All friends must have valid calls to send.'));
    $error++;
  }

  return $error;
}

/**
 *  Either creates, or logs in a user, depending on their account status.
 *
 *  @param array $info
 *    An array containing:
 *      - Name
 *      - Cell
 *      - Password
*     Confirms the existence (or lack thereof) of a user and plans accordingly.
 */
function robocalls_create_or_log_in_user($info = array('name' => '', 'cell' => '', 'password' => '')) {
  // Only run this if a user is not logged in.
  if (user_is_logged_in()) {
    return;
  }

  $your_cell = $info['cell'];
  $your_name = $info['name'];
  $your_password = $info['password'];

  $account = dosomething_api_user_log_in($your_cell);

  if (empty($account)) {
    $account = dosomething_api_user_create(array(
      'name' => $your_name,
      'mobile' => $your_cell,
      'password' => $your_password
    ));

    if (!empty($account)) {
      dosomething_api_user_log_in($your_cell);
    }
  }
}

/**
 *  Handles homepage form validation.
 */
function robocalls_homepage_form_validation($form, &$form_state) {
  $v = $form_state['input']['submitted'];
  $my = $v['my_info'];
  $friend = $v['friends_info']['primary_friend'];

  // Put the first friend's information into a tidy array for validation.
  $friends = array(
    'numbers' => array(
      $friend['friends_number']
    ),
    'calls' => array(
      $friend['select_call']
    ),
  );

  // Confirm there actually *are* more friends.
  if (!empty($friend['more_friends']) && is_array($friend['more_friends'])) {
    // Add friends' information to that tidy array...for validation.
    foreach ($friend['more_friends'] AS $key => $number) {
      $friends['numbers'][] = $number;
      $friends['calls'][] = $friend['more_calls'][$key];
    }
  }

  $error = robocalls_general_validation(array(
    'number' => $my['my_number'],
    'password' => $my['my_password'],
  ), $friends);

  // If errors, return home.
  if ($error > 0) {
    drupal_goto('prank');
  }
  else {
    // Otherwise, if not logged in...log in! or register.
    if (!user_is_logged_in()) {
      robocalls_create_or_log_in_user(array('name' => $my['my_name'], 'cell' => $my['my_number'], 'password' => $my['my_password']));
    }
  }
}

/**
 *  Handles submissions from homepage webform.
 */
function robocalls_homepage_form_submission($form, &$form_state) {
  $my = array(
    'name' => $form_state['input']['submitted']['my_info']['my_name'],
    'cell' => $form_state['input']['submitted']['my_info']['my_number'],
    'pass' => $form_state['input']['submitted']['my_info']['my_password'],
  );

  if (empty($my['cell'])) {
    $my = dosomething_api_user_fetch_data(array(
      'profile' => array(
        'field_user_first_name' => 'name',
        'field_user_mobile' => 'cell'
      ),
    ));
  }

  $f = $form_state['input']['submitted']['friends_info']['primary_friend'];
  $friends = array(
    $f['friends_number'] => $f['select_call'],
  );

  foreach ($f['more_calls'] AS $key => $call) {
    if ($f['more_friends'][$key]) {
      if (!$friends[$f['more_friends'][$key]]) {
        $friends[$f['more_friends'][$key]] = $call;
      }
    }
  }

  $i = 0;
  foreach ($friends AS $number => $callid) {
    if ($i == 0) {
      $call = dosomething_general_telapi_request('718-578-7681'/*$my['cell']*/, $number, $callid); 
    }
    else {
      dosomething_general_telapi_request('718-578-7681'/*$my['cell']*/, $number, $callid);
    }

    robocalls_record_call('718-578-7681'/*$my['cell']*/, $number, $callid);
  }

  if (!empty($call)) {
  /*  $cid = array_shift($friends);
    $celeb = taxonomy_term_load($cid);

    $c = array(
      'call_sid' => $call->sid,
      'celeb_tid' => $cid,
      'celeb_image' => file_create_url($celeb->field_celeb_photo[LANGUAGE_NONE][0]['uri']),
      'celeb_name' => $celeb->name
    );
    $_SESSION['front_page_call'] = $c;
  */
    $sid = $form_state['values']['details']['sid'];
    drupal_goto(ROBO_PATH . '/' . $sid);
  }
}

/**
 *  Handles validation of celebrity page submissions.
 */
function robocalls_celeb_form_validation($form, &$form_state) {
  $v = $form_state['input']['submitted'];

  // Get all the fields that have or could have phone numbers.
  $friend_fields = array(
    'field_celeb_friend_phone',
    'field_celeb_friend_phone_2',
    'field_celeb_friend_phone_3',
    'field_celeb_friend_phone_4',
    'field_celeb_friend_phone_5',
    'field_celeb_friend_phone_6',
  );

  $f = array();
  // Add all friend fields to the friends array
  foreach ($friend_fields AS $field) {
    if (!empty($v['your_friends_info'][$field][LANGUAGE_NONE][0]['value'])) {
      $f[] = $v['your_friends_info'][$field][LANGUAGE_NONE][0]['value'];
    }
  }

  // Add any additional friend fields, if applicable.
  if (!empty($v['additional_friends']) && is_array($v['additional_friends'])) {
    $f += $v['additional_friends'];
  }

  // Strip any non-numeric characters to ensure we only get unique phone numbers.
  $k = 0;

  // Walk through and strip extraneous characters.
  array_walk($f, function(&$val, &$huh, &$key) {
    $val = preg_replace('#[^0-9]#', '', $val);
  });

  // Get the call...
  $call = $v['field_celebrity_chooser'][LANGUAGE_NONE];

  // Get only unique phone numbers.
  $f = array_unique($f);
  // Reset keys to match calls...
  sort($f);

  // Fill the friends array with data.
  $friends = array();
  $friends['numbers'] = $f;
  $friends['calls'] = array_fill(0, count($f), $call);

  // Check for errors
  $error = robocalls_general_validation(array(
    'number' => $v['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'],
    'password' => $v['field_celeb_your_password'][LANGUAGE_NONE][0]['value'],
  ), $friends);
/*
  require_once DRUPAL_ROOT . '/includes/password.inc';

  if ($account = dosomething_general_find_user_by_cell($form_state['values']['submitted']['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'])) {
    if (!user_check_password($form_state['values']['submitted']['field_celeb_your_password'][LANGUAGE_NONE][0]['value'], $account)) {
      form_set_error('password', t('That is not the correct password for this account.'));
      $error++;
    }
  }*/

  // If errors, send back to the celeb page.
  if ($error > 0) {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
  // Otherwise, if not logged in...log in! or register.
  else {
    if (!user_is_logged_in()) {
      $v = $form_state['values']['submitted'];
      $your_cell = $v['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];
      $your_name = $v['field_celeb_your_name'][LANGUAGE_NONE][0]['value'];
      $your_password = $v['field_celeb_your_password'][LANGUAGE_NONE][0]['value'];

      robocalls_create_or_log_in_user(array('name' => $your_name, 'cell' => $your_cell, 'password' => $your_password));
    }
  }
}

/**
 *  Handles submissions from celeb page.
 */
function robocalls_celeb_form_submission($form, &$form_state) {
  $s = $form_state['input']['submitted'];

  $friend_fields = array(
    'field_celeb_friend_phone',
    'field_celeb_friend_phone_2',
    'field_celeb_friend_phone_3',
    'field_celeb_friend_phone_4',
    'field_celeb_friend_phone_5',
    'field_celeb_friend_phone_6',
  );

  $friends = array();
  // Add all friend fields to the friends array
  foreach ($friend_fields AS $field) {
    $friends[] = $form_state['input']['submitted']['your_friends_info'][$field][LANGUAGE_NONE][0]['value'];
  }

  // Add any additional friend fields, if applicable.
  if (!empty($form_state['input']['submitted']['additional_friends']) && is_array($form_state['input']['submitted']['additional_friends'])) {
    $friends += $form_state['input']['submitted']['additional_friends'];
  }

  // Strip any non-numeric characters to ensure we only get unique phone numbers.
  array_walk($friends, function(&$val, $key) {
    $val = preg_replace('#[^0-9]#', '', $val);
  });

  // Get only unique phone numbers.
  $friends = array_unique($friends);

  // Send the call(s)!
  $call = dosomething_general_telapi_request('718-578-7681', $friends, 'blah');

  // Redirect back home, with a GET variable with the call information.
  if (!empty($call)) {
    foreach ($friends AS $friend) {
      robocalls_record_call('718-578-7681', $friend, 12345);
    }
    drupal_goto($_SERVER['HTTP_REFERER'] . '?c=' . base64_encode(serialize($call)));
  }
}


/**
 *  Handles submissions from the walkthrough.
 */
function robocalls_walkthrough_submission($form, &$form_state) {
  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#value'] == 'Submit') {
    // Mindfuck of the day: The submitted data is NOT all stored in form_state['input']['submitted']...!
    $submitted = $form_state['webform_entity']['submission']->submitted;

    if (!user_is_logged_in()) {
      robocalls_create_or_log_in_user(array('name' => $submitted['my_name'], 'cell' => $submitted['my_number'], 'password' => $submitted['my_password']));
    }

    $call = dosomething_general_telapi_request($submitted['my_number'], $submitted['friends_number'], $submitted['choose_a_celebrity']);

    $sid = $form_state['values']['details']['sid'];

    // Redirect back home, with a GET variable with the call information.
    if (!empty($call)) {
      robocalls_record_call($submitted['my_number'], $submitted['friends_number'], $submitted['choose_a_celebrity']);
      drupal_goto(ROBO_PATH . '/' . $sid, array('query' => array('c' => base64_encode(serialize($call)))));
    }
  }
}