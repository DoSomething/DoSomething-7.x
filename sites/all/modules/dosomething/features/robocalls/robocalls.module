<?php
/**
 * @file
 * Code for the DoSomething Robocalls feature.
 */

include_once 'robocalls.features.inc';
define('MCOMMONS_ROBOCALL_CAMPAIGN', 18301);
define('ROBOCALLS_WEBFORM_NID', 723327);
define('MAX_CALLS_PER_DAY', 1);

function robocalls_panels_pre_render($display) {
  if ($display->layout == 'flexible:cause_calls' || $display->layout == 'flexible:cause_calls_landing') {
    drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/dosomething_robocall.css', array(
        'group' => CSS_THEME,
        'weight' => 10
    ));

    drupal_add_js(drupal_get_path('module', 'robocalls') . '/js/robocalls.js', array(
        'weight' => -100,
        'cache' => FALSE
    ));
  }
}

// To-do: Add to dosomething_sms module mobile_commons_sms (submit it to drupal.org)
function robocalls_mcommons_call($mobile, $name = '', $opt_in_path) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&person[user_s_name]=" . urlencode($name) . "&mconnect=$opt_in_path",
  );

  drupal_http_request($api_opt_in_path_url, $options);
}

function robocalls_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['robocalls'])) {
    $group = $implementations['robocalls'];
    unset($implementations['robocalls']);
    $implementations['robocalls'] = $group;
  }
}

function robocalls_form_alter(&$form, &$form_state, $form_id) {
  global $term_info, $flags;
  if (strpos($form_id, 'webform_client_form_') === 0 && isset($form_state['webform_entity']) && $form_state['webform_entity']['bundle'] == 'robo_calls') {
    $termid = arg(2);
    $term = taxonomy_term_load($termid);
    $u = &$form['submitted']/*['celeb_call_information']*/;

    if (!empty($term)) {
       $term_info = array();
       $term_info['parent'] = key(taxonomy_get_parents($term->tid));
       $term_info['tid'] = $term->tid;

      $form['call_limit'] = array(
        '#type' => 'hidden',
        '#value' => $term->field_call_limit[LANGUAGE_NONE][0]['value']
      );
	}

    $form['extras'] = array(
       '#type' => 'container',
       '#attributes' => array(
          'class' => array('robocalls-extras-container')
       ));

    $form['extras']['fb_container'] = array(
       '#type' => 'container',
       '#attributes' => array(
          'class' => array('robocalls-fb-container')
       ),
       '#weight' => 6,
  	);

    $form['extras']['fb_container']['connect_with_facebook'] = array(
       '#type' => 'button',
       '#value' => t("Share on Facebook"),
       '#weight' => 6,
       '#attributes' => array(
          'class' => array('robocalls-fb-find-friends-birthdays'),
       )
    );

    $form['actions']['submit']['#attributes']['class'] = array('go-button robocalls-submit');
    $form['extras']['fb_container']['submit_button'] = $form['actions']['submit'];
    $form['actions']['submit']['#access'] = FALSE;

    /*$form['extras']['well_send_to'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="well-send-to">We\'ll send a birthday message to:<ul></ul></div>',
        '#weight' => 6
	);

    $form['or_send_now'] = array(
        '#type' => 'checkbox',
        '#title' => t("Or send NOW!"),
        '#weight' => 5,
        '#attributes' => array(
           'class' => array('robocalls-send-message-now')
        )
    );*/

    if (isset($term->tid) && !empty($term->tid)) {
        $form['preview'] = array(
           '#type' => 'container',
           '#attributes' => array(
              'class' => array('robocalls-preview-button-container')
		));

        $form['preview']['preview_now'] = array(
           '#markup' => '<p><h3>Preview Your Call!</h3></p>'
        );

        $form['preview']['audio'] = array(
           '#markup' => '<audio id="robocalls-preview-audio" src="/files/causecalls/' . $term->field_celeb_call[LANGUAGE_NONE][0]['filename'] . '"></audio>'
        );

        $form['preview']['button'] = array(
           '#markup' => l('<img src="/' . drupal_get_path('module', 'robocalls') . '/images/robocall-preview.png" alt="" />', 'files/causecalls/' . $term->field_celeb_call[LANGUAGE_NONE][0]['filename'], array('html' => TRUE, 'attributes' => array('id' => 'robocalls_preview_link')))
        );
    }

#    $form['actions']['submit']['#value'] = 'SEND IT!';
 #   $form['actions']['submit']['#attributes'] = array('class' => array('go-button'));
    if (!user_is_logged_in()) {
       $form['extras']['fb_container']['submit_button']['#ajax'] = array(
         'callback' => 'robocalls_ajax_call',
       );
    }

    /**
      * If a user is logged in, pre-populate:
      * - Cell #
      * - First name
      */

    if (isset($term->field_timed_call) && !empty($term->field_timed_call)) {
      $date = (strtotime($term->field_timed_call[LANGUAGE_NONE][0]['value']) + 18000);
      $predate = date('Y-m-d H:i:00', $date);
      $u['field_celeb_date'][LANGUAGE_NONE][0]['#default_value']['value'] = $predate;
      $form['pointless'] = array(
        '#type' => 'hidden',
        '#value' => date('F j, Y', $date),
        '#attributes' => array('id' => array('pointless-hidden-box'))
      );
      $u['field_celeb_date']['#attributes']['class'] = array('robocalls-timed-form-times');
    }
    else
    {
      $form['extras']['fb_container']['field_celeb_send_now'] = $u['field_celeb_send_now'];
      $form['extras']['fb_container']['field_celeb_send_now']['#weight'] = 0;
      $form['extras']['fb_container']['field_celeb_send_now']['#attributes']['id'] = 'or-send-now-button';
    }
    $u['field_celeb_send_now']['#access'] = FALSE;

    if (user_is_logged_in()) {
       global $user;
       $profile = profile2_load_by_user($user, 'main');

       // Cell number
       if (!empty($profile->field_user_mobile[LANGUAGE_NONE][0]['value'])) {
          $u['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile->field_user_mobile[LANGUAGE_NONE][0]['value'];
       }

       // First name
       if (!empty($profile->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
          $u['field_celeb_your_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
       }
    }

    drupal_add_js(drupal_get_path('module', 'robocalls') . '/js/robocalls.js', array(
       'weight' => -100,
       'cache' => FALSE
    ));

    if (isset($_GET['done'])) {
       // Pop up the "Done!" pop up
       drupal_add_js(drupal_get_path('module', 'robocalls') . '/js/robocalls_done.js', array(
         'weight' => -99,
         'cache' => FALSE
       ));
    }

    $u['field_celebrity_chooser'][LANGUAGE_NONE]['#default_value'][] = $term->tid;

    if ($term->field_birthday_call[LANGUAGE_NONE][0]['value'] != 1 && !$predate) {
      #$u['field_celeb_date']['#attributes']['style'] = 'display: none;';
    }
    else {
      $form['extras']['is_bday_call'] = array(
         '#type' => 'hidden',
         '#value' => 1,
         '#weight' => 6,
      );
    }

    $form_state['side_bar'] = false;
    if (isset($term->tid) && !empty($term->tid)) {
       unset($u['top_disclaimer']);
       unset($u['step_2']);
    }
    else {
       $form_state['side_bar'] = true;
       drupal_add_css(drupal_get_path('module', 'robocalls') . '/css/robocalls_remote_webform.css', array(
         'group' => CSS_THEME,
         'weight' => 10
       ));
    }

    if (!isset($form_state['return_to'])) {
       $form_state['return_to'] = $_SERVER['REQUEST_URI'];
    }

    $form['#validate'][] = 'robocalls_call_validate';
    $form['#submit'][] = 'robocalls_call_submit';
    $form['#redirect'] = $form_state['return_to'];
  }
}

function robocalls_ajax_call($form, &$form_state) {
  $commands = array();
  $errors = form_get_errors();
  if ($errors) {
    $error_list = '';
    foreach ($errors AS $key => $error) {
       $error_list .= '<li>' . $error . '</li>';
    }

    $fake_error_template = '<div class="messages error">
	    <h2 class="element-invisible">Error message</h2>
	    <ul>' . $error_list . '</ul></div>
    ';
    $commands[] = ajax_command_before('#page-title', $fake_error_template);
  }
  else {
    $commands[] = ajax_command_invoke('#dosomething-login-register-popup-form', 'dsRobocallsSubmit', array($form_state['goto'], $form_state['input']['submitted']['celeb_call_information']['field_celeb_your_phone'][LANGUAGE_NONE][0]['value']));
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}


function robocalls_call_validate(&$form, &$form_state) {
  $s = $form_state['input']['submitted']/*['celeb_call_information']*/;
  $form_state['my_number'] = $s['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];
  $form_state['friend_number'] = $s['field_celeb_friend_phone'][LANGUAGE_NONE][0]['value'];
  $form_state['chosen_celeb'] = $s['field_celebrity_chooser'][LANGUAGE_NONE];
  $error = 0;

  if (!$form_state['my_number'] || !dosomething_general_valid_cell($form_state['my_number'])) {
    form_set_error('submitted][field_celeb_your_phone', 'Your phone number must be a valid cell phone number (xxx)xxx-xxxx.');
    $error++;
  }

  if (!$form_state['friend_number'] || !dosomething_general_valid_cell($form_state['friend_number'])) {
    form_set_error('submitted][field_celeb_friend_phone', 'Your friend\'s phone number must be a valid cell phone number (xxx)xxx-xxxx.');
    $error++;
  }

  if (!$form_state['chosen_celeb'] || $form_state['chosen_celeb'] == '_none') {
    form_set_error('submitted][field_celebrity_chooser', "Please choose a celebrity.");
    $error++;
  }

  /** Robocalls Flood Control
    * If a phone number has been used MAX_CALLS_PER_DAY times,
    * the submission will fail.  This will prevent people from
    * flooding a phone number with too many phone calls in a day.
    */
  $last_night = strtotime('midnight');
  $tonight = strtotime('11:59pm');

  $sn = $form_state['input']['field_celeb_send_now'][LANGUAGE_NONE];
  $form['#submission']->submitted['field_celeb_send_now'][LANGUAGE_NONE][0]['value'] = $sn;
  $form['#submission']->field_celeb_send_now[LANGUAGE_NONE][0]['value'] = $sn;
  $form_state['values']['submitted']['field_celeb_send_now'][LANGUAGE_NONE][0]['value'] = $sn;

  $limit = $form_state['input']['call_limit'];


  $form_state['already_called'] = 0;
  $q = new EntityFieldQuery;
  $result = $q
  ->entityCondition('entity_type', 'webform_submission_entity')
  ->propertyCondition('nid', $form_state['values']['details']['nid'])
  ->propertyCondition('submitted', array($last_night, $tonight), 'BETWEEN')
  ->propertyOrderBy('submitted', 'DESC')
  ->fieldCondition('field_celeb_friend_phone', 'value', $form_state['friend_number'], '=')
  ->fieldCondition('field_celebrity_chooser', 'tid', $form_state['chosen_celeb'], '=')
  ->execute();
  if (count($result['webform_submission_entity']) >= $limit) {
    #form_set_error('form', "Sorry, this phone number can only be called " . MAX_CALLS_PER_DAY . " times a day.  Wait until tomorrow and try again!");
    #$error++;
    $form_state['already_called'] = $limit;
  }

  if ($error && user_is_logged_in()) {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

function robocalls_call_submit(&$form, &$form_state) {
   $sub = &$form['#submission']->submitted/*['celeb_call_information']*/;

   $friend_phone = $sub['field_celeb_friend_phone'][LANGUAGE_NONE][0]['value'];
   $user_name = $sub['field_celeb_your_name'][LANGUAGE_NONE][0]['value'];
   $my_phone = $sub['field_celeb_your_phone'][LANGUAGE_NONE][0]['value'];

   $send_now =  $sub['field_celeb_send_now'][LANGUAGE_NONE][0]['value'];

   if ((!$form_state['input']['is_bday_call'] || $send_now) && !$form_state['already_called']) {
     robocalls_mcommons_call($friend_phone, $user_name, MCOMMONS_ROBOCALL_CAMPAIGN);
   }

   if ($form_state['already_called'])
   {
    $sid = $form_state['values']['details']['sid'];
    entity_delete('webform_submission_entity', array((int) $sid));
   }

   /**
     * If a user is logged in and doesn't have a cell phone connected with their
     * account yet, attach it to their account and save.
     */
   if (user_is_logged_in()) {
    global $user;
    $profile = profile2_load_by_user($user, 'main');
    if (!$profile->field_user_mobile[LANGUAGE_NONE][0]['value'] || $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] !== $my_phone) {
       $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $my_phone;
       $profile->save();
    }
   }

   /**
     * If this form was submitted from the side bar, we can't gather the correct
     * term information through Javascript...so generate a JSON code (name & cause) to pass back.
     * We'll revisit this code in the JavaScript, unencode it, and use it to "fill out"
     * the pop-up form with the correct information.
     */
   if ($form_state['side_bar']) {
      $pi = $sub['field_celebrity_chooser'][LANGUAGE_NONE][0]['tid'];
      $p = taxonomy_get_parents($pi);
      $p = current($p);
      $parent_name = $p->name;

      $t = taxonomy_term_load($pi);
      $term_name = $t->name;

      $code = base64_encode(json_encode(array(
         'name' => $term_name,
         'cause' => $parent_name,
         'passed_limit' => intval($form_state['already_called'])
      )));
   }
   else {
      // Otherwise, we'll have all the information we need because we're on the same page.
      $code = 'true';
   }

	/**
	  * If a user is NOT logged in (and are in the process of registering / logging in), their
	  * post will (obviously) not have their name attached to it.  So when they DO log in / register,
	  * let's make sure that we assign this submission to this user.
	  */
   if (!user_is_logged_in()) {
      $form_state['goto'] = 'webform-post-submit-associate/' . $form_state['values']['details']['nid'] . '/' . $form_state['values']['details']['sid'] . '?destination=' . $form_state['return_to'] . '?done=' . $code;
   }
   else {
      // Otherwise, they ARE logged in so whatever.
      $form_state['redirect'] = $_SERVER['HTTP_REFERER'] . '?done=' . $code;
      $_GET['redirect'] = ($form_state['redirect']);
   }
}

function robocalls_page_alter(&$page) {
   global $term_info, $flags;
   if (isset($term_info)) {
      $flag = '';
      if (in_array($term_info['tid'], $flags['bdays'])) {
         $flag = 'Birthday Call';
      }
      else if ($flags['latest']['tid'] == $term_info['tid']) {
         $flag = 'New Celeb';
      }
      else if ($flags['popular'] == $term_info['tid']) {
         $flag = 'Most Popular';
      }

      $page['content']['system_main'][(user_is_logged_in() ? 'content' : 'main')]['#markup'] = str_replace('Image flag!', ($flag ? '<div class="main-robocall-flag">' . $flag . '</div>' : ''), $page['content']['system_main'][(user_is_logged_in() ? 'content' : 'main')]['#markup']);
   }
}


/**
  * Alters celebrity blocks to include ribbons for:
  * - Birthday calls (defined by checkbox in celebrity creation.  Arbitrary number of these.)
  * - Most Popular (defined by celebrity with most submissions.  Only one.)
  * - New Celeb (defined by most recently created celebrity -- given by date of sound file creation.  Only one.
  */
function robocalls_views_pre_render(&$view) {
   global $flags, $term_info;

   if ($view->name == 'cause_its_your_birthday') {
      $pop = db_query("SELECT `field_celebrity_chooser_tid` AS `tid`, COUNT(*) AS `c` FROM {field_data_field_celebrity_chooser} GROUP BY `field_celebrity_chooser_tid` ORDER BY `c` DESC LIMIT 1")->fetchAssoc();
      $popular = $pop['tid'];

      $latest = array('stamp' => 0, 'key' => 0);
      $bdays = array();
      foreach ($view->result AS $key => $info) {
         $no = 0;
         $parent = key(taxonomy_get_parents($info->tid));
         if ($term_info['tid'] == $info->tid) {
            $no = 1;
         }

         // Birthday call flag -- set when a celeb has the "Birthday Call" checkbox checked.
         if (isset($info->_field_data['tid']['entity']->field_birthday_call[LANGUAGE_NONE][0]['value']) && $info->_field_data['tid']['entity']->field_birthday_call[LANGUAGE_NONE][0]['value'] == 1) {
            if (!$no) $view->result["$key"]->taxonomy_term_data_description .= '<div class="robocall-flag">Birthday Call</div>';
            $bdays[] = $info->tid;
		 }

         // Most Popular flag -- set for the celeb with the most submissions.
         if ($info->tid == $popular) {
            if (!$no) $view->result["$key"]->taxonomy_term_data_description .= '<div class="robocall-flag">Most Popular</div>';
         }

         // New Celeb flag -- set for the most-recently-added celeb
         $stamp = $info->_field_data['tid']['entity']->field_celeb_call[LANGUAGE_NONE][0]['timestamp'];
         if ($stamp > $latest['stamp']) {
            $latest = array(
              'stamp' => $stamp,
              'key' => $key,
              'tid' => $info->tid,
              'no' => $no
            );
		 }

         // If we're on a cause call celebrity page, remove the celebrity you're seeing
         // from the "Choose another celebrity" scroll.
         if ($view->current_display == 'block_robocalls_choose_another_celeb') {
            global $term_info;
            $parent = key(taxonomy_get_parents($info->tid));
            if ($term_info['tid'] == $info->tid) {
               unset($view->result["$key"]);
               continue;
            }
		}
	  }

      $flags = array();
      $flags['latest'] = $latest;
      $flags['popular'] = $popular;
      $flags['bdays'] = $bdays;

      // New Celeb Flag -- Set from information above
      if (!$latest['no']) $view->result["{$latest['key']}"]->taxonomy_term_data_description .= '<div class="robocall-flag">New Celeb</div>';

      #$days_before_new_celeb_flag_expires = 1;
      #if ((time() - $latest['stamp']) < ($days_before_new_celeb_flag_expires*60*60*24))
   }
}