<?php
/**
 * @file
 * Code for the Dosomething - Grant Application feature.
 */

include_once('dosomething_grant_application.features.inc');

/**
 *  Implements hook_views_query_alter()
 */
function dosomething_grant_application_views_query_alter($view, $query) {
  // Hide this conditional from the actual archive page.  That's rather counter-productive.
  if ($view->name == 'grants_application_queues' && $view->current_display != 'page_7') {
    // Dirty dirty fix for archiving on the grants applications.  113 is the entityqueue ID for the archive group.
    $query->fields['archived'] = array(
      'field' => 'IF (FIND_IN_SET(113, (SELECT GROUP_CONCAT(entity_id) FROM field_data_eq_webform_submission_entity where field_data_eq_webform_submission_entity.eq_webform_submission_entity_target_id = webform_submissions.sid)), 1, 0)',
      'table' => '',
      'alias' => 'archived',
    );

    // Make sure we don't include archived items.
    $query->add_groupby('webform_submissions.sid');
    $query->add_having(1, 'archived', '0', '=');
  }
}

/**
 * Implements hook_form_alter().
 */
function dosomething_grant_application_form_alter(&$form, &$form_state, $form_id) {

  // Note that dosomething_grant_application,
  // dosomething_scholarship_application, dosomething_campaign_report_back, and
  // dosomething_campaign_sign_up all prepopulate data from the user's user and
  // main profile object and update those objects with newer data.  The code is
  // not *quite* common enough to completely generalize, so there is some
  // duplication.  If you need to make a change here you likely need to make it
  // in the other places as well.

  // Make sure we're dealing with the right form.
  if (strpos($form_id, 'webform_client_form_') !== 0 || empty($form_state['webform_entity']) || $form_state['webform_entity']['bundle'] != 'grant_application') {
    return;
  }

  global $user;
  // Take no action if this user is not authenticated.
  if ($user->uid == 0) {
    return;
  }

  // Load data.
  $profile = profile2_load_by_user($user, 'main');

  $augmented = FALSE;

  if ($profile) {
    $augmented = TRUE;
    // Load data.
    $profile = profile2_load_by_user($user, 'main');
    // Get a shortcut to our part of the form.
    $entity_form = &$form['submitted'];
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
    // If  the name is empty, prepoulate it with the user's name from her profile.
    if (!isset($entity_form['field_webform_name']) || $entity_form['field_webform_name'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
      $entity_form['field_webform_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_first_name->value() . ' ' . $profile_wrapper->field_user_last_name->value() ;
    }

    // If we have a birthday, prepopulate the field.
    if (is_numeric($profile_wrapper->field_user_birthday->raw())) {
      $entity_form['field_webform_birthdate'][LANGUAGE_NONE][0]['#default_value']['value']  = date('Y-m-d H:i:s', $profile_wrapper->field_user_birthday->raw());
    }


    // If the mobile number is empty, prepopulate it.
    if (!isset($entity_form['field_webform_mobile']) || $entity_form['field_webform_mobile'][LANGUAGE_NONE][0]['value']['#default_value'] == '') {
      $entity_form['field_webform_mobile'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_wrapper->field_user_mobile->value();
    }

    // If no address is yet set on this form, prepoulate it with the one from the user's profile.
    if ($form['#submission'] == array()) {
      $entity_form['field_webform_address'][LANGUAGE_NONE][0]['#address'] = $profile_wrapper->field_user_address->value();
    }
  }

  // If this email isn't actually a magic mobile number, prepopulate the form with it.
  if (substr($user->mail, -7) != '@mobile') {
    $augmented = TRUE;
    $entity_form['field_webform_email'][LANGUAGE_NONE][0]['email']['#default_value'] = $user->mail;
  }

  if ($augmented) {
    // Attach our submit handler to update the user and profile objects with newer data.
    // These are the same as dosomething_scholarship_application's handling.
    $form['#submit'][] = 'dosomething_scholarship_application_form_validate';
    $form['#validate'][] = 'dosomething_scholarship_application_form_submit';
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * We can only disable our elements if we come after webform_entity, make
 * sure we do.
 */
function dosomething_grant_application_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['dosomething_grant_application'])) {
    $group = $implementations['dosomething_grant_application'];
    unset($implementations['dosomething_grant_application']);
    $implementations['dosomething_grant_application'] = $group;
  }
}


 /**
 * Actions to take when a new Grant Application entry is made.
 *
 * @param array $node
 *   Standard node array created in the webform submission.
 * @param array $submission
 */
//@todo: remove this when dosomething_subscribe_webform_submission_insert() is working.
function dosomething_grant_application_webform_submission_insert($node, $submission) {
  
  if ($node->type == 'grant_application') {

    // Phone
    if (strlen($mobile[0]['value']) > 0) {
      
      $merge_vars['MMERGE7'] = $mobile[0]['value'];
      
      // Add user to Mobile Commons group
      // https://secure.mcommons.com/campaigns/112513/opt_in_paths/150463
      $mobile_commons_subscribe_results = dosomething_general_mobile_commons_subscribe($mobile[0]['value'], 150463);
      
    }
    else {
      $merge_vars = array();
    }
    
    // Subscribe user to MailChimp
    if (isset($params['email'])) {
      dosomething_general_mailchimp_subscribe($params['email'], 'Grants2013', $merge_vars);
    }

  }

}
