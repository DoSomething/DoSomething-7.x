<?php
/**
 * @file
 * Code for the dosomething_profile feature.
 */

include_once('dosomething_profile.features.inc');

/**
* Implementation of hook_ctools_plugin_directory().
*/
function dosomething_profile_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

function dosomething_profile_my_friends($uid, $image_style = NULL) {
  $images = array();
  $results = db_select('facebook_friends')
    ->fields('facebook_friends', array('fbid'))
    ->condition('uid', $uid, '=')
    ->execute();
  while ($result = $results->fetchObject()) {
    if ($uid = db_query('SELECT uid from {fboauth_users} WHERE fbid = :fbid', array(':fbid' => $result->fbid))->fetchField()) {
      $images[] = theme('dosomething_general_facebook_friend_pic', array('fbid' => $result->fbid, 'uid' => $uid, 'image_style' => $image_style));
    }
  }
  if (!empty($images)) {
    $images = theme('item_list', array('items' => $images));
  }
  return $images;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_profile_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'dosomething_profile') . '/alter_school_state.js',
  );
  $form['picture']['#access'] = FALSE;
}


/**
 * Implements hook_user_login().
 */
function dosomething_profile_user_login(&$edit, $account) {
  if ($account->uid) {
  // Check if they have connected through Facebook.
    if ($fbid = db_query('SELECT fbid from {fboauth_users} WHERE uid = :uid', array(':uid' => $account->uid))->fetchField()) {
      $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
      if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
        $picture_result = drupal_http_request('https://graph.facebook.com/' . $fbid . '/picture?type=large');
        $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '.jpg');
        $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);

        // Check to make sure the picture isn't too large for the site settings.
        $max_dimensions = variable_get('user_picture_dimensions', '85x85');
        file_validate_image_resolution($picture_file, $max_dimensions);

        // Update the user record.
        $picture_file->uid = $account->uid;
        $picture_file = file_save($picture_file);
        file_usage_add($picture_file, 'user', 'user', $account->uid);
        db_update('users')
          ->fields(array(
          'picture' => $picture_file->fid,
          ))
          ->condition('uid', $account->uid)
          ->execute();
      }
    }
  }
}

