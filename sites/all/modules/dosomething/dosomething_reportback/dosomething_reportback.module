<?php

/**
 * @file
 * dosomething_reportback.module
 **/

include_once 'dosomething_reportback.views.inc';

/**
 * Inserts a record into the dosomething_reportbacks table.
 *
 * @param int $uid
 *   User Uid of user submitting the reportback.
 * @param int $nid
 *   Node Nid of node that user is submitting the reportback for.
 * @param string $data
 *   Any data to store along with the record. Probably won't be used once we Mongo.
 *
 * @return array
 *   Array containing the rbid of the newly inserted dosomething_reportbacks record, and its $uid and $org_code.
 */
function dosomething_reportback_insert_reportback($uid, $nid, $org_code, $data = NULL) {
  $rbid = db_insert('dosomething_reportbacks')
    ->fields(array(
      'uid' => $uid,
      'nid' => $nid,
      'org_code' => $org_code,
      'timestamp' => REQUEST_TIME,
      'data' => $data,
      ))
    ->execute();
  return array(
    'rbid' => $rbid,
    'uid' => $uid,
    'org_code' => $org_code,
  );
}

/**
 * Inserts a record into the dosomething_reportback_files table.
 *
 * @param int $rbid
 *   Reportback id.
 * @param int $fid
 *   File id
 */
function dosomething_reportback_insert_reportback_file($rbid, $fid) {
  return db_insert('dosomething_reportback_files')
    ->fields(array(
      'rbid' => $rbid,
      'fid' => $fid,
      ))
    ->execute();
}

/**
 * Returns count of records in dosomething_reportbacks for given $uid and $nid.
 */
function dosomething_reportback_get_count_user_reportbacks($uid, $nid) {
  // This function isn't used it yet.
  // @todo: As is, this is going to be scanning thousands and thousands of records 
  // anytime a project node is visited.  Perhaps we can store nid's on the user profile.
	$result = db_select('dosomething_reportbacks', 'rb', array('target' => 'slave'))
    ->fields('rb', array('uid'))
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->execute();
  return $result->rowCount();
}

/**
 * Checks if a user is able to submit a reportback for a given $node.
 *
 * @param Object $user
 *   Loaded user to check.
 * @param Object $node
 *   Loaded node for which to check reportback max # of records and user submissions.
 *
 * @return boolean
 *   TRUE if user is able to reportback on the node.
 */
function dosomething_reportback_can_user_reportback($user, $node) {
  // If no max value set, or max value is set to 0, unlimited submissions:
  if (!isset($node->field_max_num_reportbacks[LANGUAGE_NONE][0]['value']) || $node->field_max_num_reportbacks[LANGUAGE_NONE][0]['value'] == 0) {
    return TRUE;
  }
  // If administrator, reportback all you wanna:
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  // Get number of reportbacks for user:
  $num_reportbacks = dosomething_reportback_get_count_user_reportbacks($user->uid, $node->nid);
  // Return whether or not num_reportbacks is less than the max num reportbacks:
  return ($num_reportbacks < $node->field_max_num_reportbacks[LANGUAGE_NONE][0]['value']);
}

/**
 * Form constructor for the user/node reportback form.
 *
 * @param Object $node
 *   The loaded node for which user is reporting back.
 *
 * @see dosomething_reportback_form_validate()
 * @see dosomething_reportback_form_submit()
 *
 * @ingroup forms
 */
function dosomething_reportback_form($form, &$form_state, $node) {
  // If node has reportback fields, render as form elements:
  if (isset($node->field_reportback_fields[LANGUAGE_NONE][0]['value'])) {
    // Load form field labels from the node:
    $form_fields = dosomething_reportback_get_reportback_field_values($node);
    // Loop through form_fields:
    foreach ($form_fields as $form_field) {
      $field_name = $form_field['name'];
      $field_desc = '';
      if ($form_field['desc']) {
        $field_desc = $form_field['desc'];
      }
      $form[$field_name] = array(
        '#type' => 'textarea',
        '#required' => TRUE,
        '#title' => $form_field['label'],
        '#description' => $field_desc,
      ); 
    }
  }
  $image_desc = '';
  if (isset($node->field_reportback_image_copy[LANGUAGE_NONE][0]['value'])) {
    $image_desc = $node->field_reportback_image_copy[LANGUAGE_NONE][0]['value'];
  }
  // Handle image uploads via plupload module:
  if (module_exists('plupload')) {
    $form['reportback_images'] = array(
      '#type' => 'plupload',
      '#title' => t('Pictures'),
      '#description' => $image_desc,
      '#required' => TRUE,
      '#submit_element' => '#edit-reportback-submit',
      '#upload_validators' => array(
        'file_validate_extensions' => array('jpg jpeg gif png'),
      ),
      '#plupload_settings' => array(
        'runtimes' => 'html5',
        'chunk_size' => '1mb',
      ),
    );
  }
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['reportback_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('btn', 'primary', 'large')),
  );
  return $form;
}

/**
 * Form submission handler for dosomething_reportback_form().
 */
function dosomething_reportback_form_submit($form, &$form_state) {
  global $user;
  $rb_data = array();
  $values = $form_state['values'];
  // Load node to find relevant reportback values.
  $node = node_load($values['nid']);

  // If node has reportback fields, loop through values to store in the reportback data field.
  if (isset($node->field_reportback_fields[LANGUAGE_NONE][0]['value'])) {
    // Load form field labels from the node:
    $form_fields = dosomething_reportback_get_reportback_field_values($node);
    // Loop through form_fields:
    foreach ($form_fields as $form_field) {
      $field_name = $form_field['name'];
      // Store the submitted value.
      $rb_data[$field_name] = $values[$field_name];
    }
  }

  // Insert record into dosomething_reportbacks table and store its rbid.
  $reportback = dosomething_reportback_insert_reportback($user->uid, $node->nid, $node->field_organization_code[LANGUAGE_NONE][0]['value'], serialize($rb_data));
 
  // Save files from plupload form element. 
  // See plupload_test_submit(), contains logic for why to not use file_move, etc.
  $i = 0;
  foreach ($form_state['values']['reportback_images'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = dosomething_reportback_get_file_destination($reportback, $uploaded_file['name'], $i);
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      // Insert dosomething_reportback_files record.
      dosomething_reportback_insert_reportback_file($reportback['rbid'], $file->fid);
      $i++;
    }
    else {
      form_set_error('reportback_images', "Upload of {$uploaded_file['name']} failed.");
    }
  }
  
  // Set success message from node:
  if (isset($node->field_reportback_success_msg[LANGUAGE_NONE][0]['value'])) {
    $success_msg = $node->field_reportback_success_msg[LANGUAGE_NONE][0]['value'];
  }
  // Else use default message if doesnt exist:
  else {
    $success_msg = 'Thanks for your submission!';
  }
  drupal_set_message($success_msg);
}

/**
 * For a given reportback array and filename, return the file directory/path destination to save file to. 
 */
function dosomething_reportback_get_file_destination($rb, $filename, $index = 0) {
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  $directory_name = 'reportbacks/' . $rb['org_code'];
   // Use pathinfo to grab source file's file extension:
  $pathinfo = pathinfo($filename);
  $file_name =  $rb['uid'] . '-' . $rb['rbid'] . '-' . $index .'.' . $pathinfo['extension'];
  return file_stream_wrapper_uri_normalize($scheme . $directory_name . '/' . $file_name);
}

/**
 * Return the values of the "Reportback Fields" field collection in a given node.
 *
 * @param Object $node
 *   Loaded node for which to return values from.
 *
 */
function dosomething_reportback_get_reportback_field_values($node) {
  $values = array();
  $field_collection_fields = field_get_items('node', $node, 'field_reportback_fields');
  $ids = array();
  foreach ($field_collection_fields as $fc_field) {
    $ids[] = $fc_field['value'];
  }
  if (!empty($ids)) {
    $items = field_collection_item_load_multiple($ids);
    $i = 0;
    foreach ($items as $item) {
      $values[$i]['field_collection_item_id'] = $item->item_id;
      $reportback_fld_label = field_get_items('field_collection_item', $item, 'field_reportback_fld_label');
      $values[$i]['label'] = $reportback_fld_label[0]['value'];
      $reportback_fld_name = field_get_items('field_collection_item', $item, 'field_reportback_fld_name');
      $values[$i]['name'] = $reportback_fld_name[0]['value'];
      $reportback_fld_desc = field_get_items('field_collection_item', $item, 'field_reportback_fld_desc');
      $values[$i]['desc'] = $reportback_fld_desc[0]['value'];
      $i++;
    }
  }
  return $values;
}

/**
 * Implements hook_file_delete.
 */
function dosomething_reportback_file_delete($file) {
  // Delete all reportback_files records associated with the file.
  db_delete('dosomething_reportback_files')->condition('fid', $file->fid)->execute();
}
