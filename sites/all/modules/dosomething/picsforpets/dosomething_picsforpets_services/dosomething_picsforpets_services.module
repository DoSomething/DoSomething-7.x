<?php
/**
 * @file
 * Code for the dosomething_picsforpets_services feature.
 */

include_once 'dosomething_picsforpets_services.features.inc';

/**
 * Implements hook_services_resources().
 */
function dosomething_picsforpets_services_services_resources() {
  return array(
    'dosomething_views' => array(
      'retrieve' => array(
        'help' => 'Retrieves a view.',
        'file' => array(
          'type' => 'inc',
          'module' => 'services_views',
          'name' => 'services_views.resource',
        ),
        'callback' => 'services_views_retrieve',
        'access callback' => 'dosomething_picsforpets_services_views_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          'view_name' => array(
            'name' => 'view_name',
            'type' => 'string',
            'description' => 'The name of the view to get.',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          'display_id' => array(
            'name' => 'display_id',
            'type' => 'string',
            'description' => 'The display ID of the view to get.',
            'source' => array('param' => 'display_id'),
            'optional' => TRUE,
            'default value' => 'service',
          ),
          'args' => array(
            'name' => 'args',
            'type' => 'array',
            'description' => 'A list of arguments to pass to the view.',
            'source' => array('param' => 'args'),
            'optional' => TRUE,
            'default value' => array(),
          ),
          'offset' => array(
            'name' => 'offset',
            'type' => 'int',
            'description' => 'The number of the entry for the page begin with.',
            'source' => array('param' => 'offset'),
            'optional' => TRUE,
            'default value' => 0,
          ),
          'limit' => array(
             'name' => 'limit',
             'type' => 'int',
             'description' => 'The total number of entries to list.',
             'source' => array('param' => 'limit'),
             'optional' => TRUE,
             'default value' => 10,
           ),
           'format_output' => array(
             'name' => 'format_output',
             'type' => 'bool',
             'description' => 'Whether to return the raw data results or style the results.',
             'source' => array('param' => 'format_output'),
             'optional' => TRUE,
             'default value' => FALSE,
           ),
           'filters' => array(
             'name' => 'filters',
             'type' => 'array',
             'description' => 'A list of filters to pass to the view.  These are defined by the exposed filters on your view.  Example call: <code>/views/your_view?filters[nid]=12345</code>',
             'source' => array('param' => 'filters'),
             'optional' => TRUE,
             'default value' => array(),
           ),
        ),
      ),
    ),
    'sharing' => array(
      'create' => array(
        'help' => 'Submits a share to the database.',
        'file' => array(
          'type' => 'inc',
          'module' => 'dosomething_picsforpets_services',
          'name' => 'dosomething_picsforpets_services.share',
        ),
        'callback' => 'dosomething_picsforpets_services_submit_share',
        'access callback' => 'sharing_access',
        'args' => array(
          'info' => array(
            'name' => 'pet_id',
            'type' => 'int',
            'description' => 'The ID of the pet to share.',
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
    ),
    // My Animals service
    'my-animals' => array(
      'retrieve' => array(
        'help' => 'Retrieve My Animals based off of facebook user id.',
        'file' => array(
          'type' => 'inc',
          'module' => 'dosomething_picsforpets_services',
          'name' => 'dosomething_picsforpets_services.myanimals',
        ),
        'callback' => 'dosomething_picsforpets_services_get_my_animals',
        'access callback' => 'sharing_access',
        'args' => array(
          'info' => array(
            'name' => 'uid',
            'type' => 'int',
            'description' => 'A Drupal user ID to gather submitted-pets from.',
            'source' => array('param' => 'uid'),
            'optional' => FALSE,
          ),
        ),
      ),
    )
  );
}

function sharing_access() {
  return TRUE;
}

/**
 * Access callback for service views.
 */
function dosomething_picsforpets_services_views_access($op = 'view', $args = array()) {
  // We are only allowing this view.  We couldn't use the Services view because
  // it sends raw data that doesn't really mean anything to the app.
  if ($args['view_name'] == 'pics_for_pets_gallery' && in_array($args['display_id'], array('service', 'service_shared_pets', 'most_shared'))) {
    return services_views_access($op, $args);
  }
  return FALSE;
}

/**
 * Implements hook_webform_resource_alter().
 */
function dosomething_picsforpets_services_services_resources_alter(&$resources) {
  // We need webofrm services to work with webofrm entity, so we use out
  // own callback in order to handle the $form_state structure.
  $resources['webform_submission']['create']['callback'] = '_dosomething_picsforpets_services_submission_resource_create';
}

/**
 * Creates a new webform submission based on submitted values.
 *
 * Note that this function uses drupal_form_submit() to create new submissions,
 * which may require very specific formatting. The full implications of this
 * are beyond the scope of this comment block. The Googles are your friend.
 *
 * @param $data
 *   Array with required properties:
 *   'nid' - webform node id.
 *   'submission' - nested array of webform values.
 *   'is_draft' - optional Boolean indicating if the submission is complete,
 *     defaults to TRUE.
 *
 * @return
 *   An associative array contained the new submission id.
 *
 * @see drupal_form_submit()
 */
function _dosomething_picsforpets_services_submission_resource_create($data) {
  // Creation has a little different flow. Services forces us to POST create
  // requests to the resource's root and package up the node id with the rest
  // of the submission information.

  // Adds backwards compatability with regression fixed in #1083242
  $submission = _services_arg_value($data, 'webform_submission');
  // Move the node id out out of the array.
  $nid = $submission['nid'];
  unset($submission['nid']);
  $node = node_load($nid);
  $default_op = empty($node->webform['submit_text']) ? t('Submit') : t($node->webform['submit_text']);

  // For overidden op's on individual webforms
  $form = drupal_get_form('webform_client_form_' . $node->nid, $node);
  if (isset($form['actions']['submit']['#value'])) {
    $default_op = $form['actions']['submit']['#value'];
  }

  // Load the required includes for drupal_execute
  module_load_include('module', 'webform');

  // Prepare form state
  $form_state = array();
  // Webform entity fields need to be outside of the 'submitted' array.
  $form_state['values'] = $submission;
  $form_state['values']['submitted'] = $submission;
  $form_state['values']['op'] = variable_get('services_webform_submit_button_resource_create', $default_op);
  unset($form_state['values']['webform_submission']);

  // Submit form programmatically
  drupal_form_submit('webform_client_form_' . $node->nid, $form_state, $node, array());

  if ($errors = form_get_errors()) {
    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
  }
  // Fetch $sid out of $form_state
  $sid = $form_state['values']['details']['sid'];
  return array('nid' => $nid, 'sid' => $sid);
}

