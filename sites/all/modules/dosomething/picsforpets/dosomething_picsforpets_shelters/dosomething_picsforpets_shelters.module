<?php
/**
 * @file
 * Code for the dosomething_picsforpets_shelters feature.
 */

include_once 'dosomething_picsforpets_shelters.features.inc';

/**
 * Implements hook_form_BASE_FORM_ID_alter();
 */
function dosomething_picsforpets_shelters_form_shelter_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_pfp_address']['und'][0]['country']['#access'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function dosomething_picsforpets_shelters_menu() {
  $items['pics-for-pets/shelter-search'] = array(
    'title' => t('Search for a Shelter'),
    'access callback' => TRUE,
    'page callback' => 'dosomething_picsforpets_shelters_lookup',
    'page arguments' => array(2),
  );
  return $items;
}

function dosomething_picsforpets_shelters_lookup_form($form, &$form_state, $zip) {
  $form = array();
  $form['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Zip:'),
    '#required' => TRUE,
    '#weight' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 0,
  );
  if (!empty($form_state['input']['zip'])) {
    $shelter_nids = dosomething_picsforpets_shelters_get_shelters_by_zip($form_state['input']['zip']);
    $markup = dosomething_picsforpets_shelters_formatted_results($shelter_nids);
  }
  if (!empty($zip) && empty($form_state['input']['zip'])) {
    // Auto populate the results.
    $shelter_nids = dosomething_picsforpets_shelters_get_shelters_by_zip($zip);
    $markup = dosomething_picsforpets_shelters_formatted_results($shelter_nids);
  }
  if (!empty($markup)) {
    $form['results_title'] = array(
      '#markup' => '<h2>' . t('Shelters near you:') . '</h2>',
      '#weight' => 1,
    );
    $form['results'] = array(
      '#markup' => $markup,
      '#weight' => 2,
    );
  }
  return $form;
}

#function dosomething_picsforpets_shelters_lookup($content, $arg1 = NULL) {
function dosomething_picsforpets_shelters_lookup($arg1 = NULL, $arg2 = NULL, $arg3 = NULL, $arg4 = NULL) {
  if ($arg1 == 'json') {
    return dosomething_picsforpets_shelters_lookup_json();
  }
  else {
    return drupal_get_form('dosomething_picsforpets_shelters_lookup_form', $arg1);
  }
}

function dosomething_picsforpets_shelters_lookup_json() {
  // Currently just a stub
  echo 'All your results are belong to JSON.';
  die();
}

function dosomething_picsforpets_shelters_formatted_results($nids, $type = 'html') {
  $markup = '';
  switch ($type) {
    case 'html':
    default:
      foreach ($nids as $nid) {
        $shelter = node_load($nid);
        $address = field_get_items('node', $shelter, 'field_pfp_address');
        $markup .= '<h3>' . check_plain($shelter->title) . '</h3>';
        $markup .= '<p>';
        $markup .= empty($address[0]['thoroughfare']) ? '' : check_plain($address[0]['thoroughfare']) . '<br />';
        $markup .= empty($address[0]['premise']) ? '' : check_plain($address[0]['premise']) . '<br />';
        $markup .= empty($address[0]['locality']) ? '' : check_plain($address[0]['locality']);
        $markup .= !empty($address[0]['locality']) && !empty($address[0]['administrative_area']) ? ', ' : '';
        $markup .= empty($address[0]['administrative_area']) ? '' : check_plain($address[0]['administrative_area']);
        $markup .= '</p>';
        $hours = field_get_items('node', $shelter, 'field_pfp_hours');
        $markup .= empty($hours) ? '' : '<p>Hours:<br />' . $hours[0]['safe_value'] . '</p>';
      }
  }
  return $markup;
}

/**
 * Return a set of node id numbers of shelters sorted by proximity to a certain
 * point.
 *
 * @parap $zip
 *   The zip code to search around.
 * @param $start
 *   The location of the first result to return from the list of resutls.
 * @param $number
 *   The number of results to return.
 *
 * @return
 *  An array of node id numbers keyed by position in the result set.
 */
function dosomething_picsforpets_shelters_get_shelters_by_zip($zip, $start = 0, $number = 10) {
  // Initialize an array to hold the nids and act as our return value.
  $nids = array();
  if (!is_numeric($start) || !is_numeric($number)) {
    // Maybe someone is up to something funny.
    return $nids;
  }
  // First get the lat an long from the zipcode variable.
  $result = db_query_range('SELECT latitude, longitude FROM {zipcodes} WHERE zip = :zip', 0, 1, array(':zip' => $zip))->fetchAssoc();
  if (!$result) {
    // We got a bad zipcode that couldn't be looked up so just give back an
    // empty array.
    return $nids;
  }
  else {
    $lat = $result['latitude'];
    $lon = $result['longitude'];
  }
  // To be safe we'll cast the $start and $number variables to integers.
  // This method of calculating the distacne between two point based on Lat and
  // Long is based on the Haverside formula. Many examples of the same generated
  // query can be found around the web.
  // Ex: http://www.marketingtechblog.com/calculate-distance/
  $result = db_query_range('SELECT entity_id, (((ACOS(SIN((:lat * PI()/180)) * SIN((field_pfp_geo_data_lat * PI()/180)) + COS((:lat * PI()/180)) * COS((field_pfp_geo_data_lat * PI()/180)) * COS(((:lon - field_pfp_geo_data_lon) * PI()/180)))) * 180/PI()) * 60 * 1.1515) AS distance FROM field_data_field_pfp_geo_data WHERE field_pfp_geo_data_lat IS NOT NULL AND field_pfp_geo_data_lon IS NOT NULL AND entity_type = :entity_type AND bundle = :bundle ORDER BY distance ASC', (int) $start, (int) $number, array(':lat' => $lat, 'lon' => $lon, ':entity_type' => 'node', ':bundle' => 'shelter'));
  $nids = $result->fetchCol(0);
  return $nids;
}
