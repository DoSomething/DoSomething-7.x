<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillUnitMailTestCase extends WebTestSuite {
  
  const TEST_EMAIL1 = 'dlee+test01@dosomething.org';
  const TEST_EMAIL2 = 'dlee+test02@dosomething.org';
  protected $auth_user;
  protected $campaign;

  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_mail() function.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    $this->auth_user = $this->factory->create('User', array(
      'name' => 'DS Mandrill Test',
      'mail' => self::TEST_EMAIL1,
      'first_name' => 'First',
    ));

    // Bugs
    // $this->campaign = $this->factory->create('Campaign', array()); 
  }

  /**
   * @see dosomething_mandrill_mail_common()
   */
  public function testMailCommon() {

    $message = array();
    $params['FNAME'] = 'First';

    dosomething_mandrill_mail_common($message, $params);

    // Expected default "common" values
    $this->assertTrue(is_string($message['from_name']), 'Default \'from_name\' is a string.');
    $this->assertTrue($message['from_name'] == 'DoSomething.org', '\'from_name\' set to \'Dosomething.org\'');

    $this->assertEqual($params['FNAME'], $message['params']['FNAME'],
         '$params[\'FNAME\']: ' . $params['FNAME'] . ' assigned to $message[\'params\'][\'FNAME\']');
    $this->assertTrue(strlen($message['params']['CAMPAIGNS']) > 0, 'CAMPAIGNS value returned.');
    $this->assertTrue(
      strpos($message['params']['CAMPAIGNS'], '<ul>') !== FALSE &&
      strpos($message['params']['CAMPAIGNS'], '</ul>') !== FALSE &&
      strpos($message['params']['CAMPAIGNS'], '<li>') !== FALSE,
      'CAMPAIGNS markup found.');

  }

  /**
   * @see dosomething_mandrill_mail_firstname()
   */
  public function testMandrillMailFirstName() {

      $fnames = array(
        'First',
        'first',
        'fiRSt',
        'FIRST',
      );

      foreach($fnames as $fname) {

        $params['FNAME'] = $fname;
        dosomething_mandrill_mail_firstname($message, $params);
        $this->assertEqual('First', $message['params']['FNAME'],
         'First Name: First => ' . $message['params']['FNAME']);

      }

      $fnames = array(
        'the first',
        'THE FIRST',
        'tHe fIrSt',
      );

      foreach($fnames as $fname) {

        $params['FNAME'] = $fname;
        dosomething_mandrill_mail_firstname($message, $params);
        $this->assertEqual('The First', $message['params']['FNAME'],
         'First Name: The First => ' . $message['params']['FNAME']);

      }

      $fnames = array(
        'the-first',
        'THE-FIRST',
        'tHe-fIrSt',
      );

      foreach($fnames as $fname) {

        $params['FNAME'] = $fname;
        dosomething_mandrill_mail_firstname($message, $params);
        $this->assertEqual('The-First', $message['params']['FNAME'],
         'First Name: The First => ' . $message['params']['FNAME']);

      }

  }

  /**
   * @see dosomething_mandrill_mail_tag_assignment()
   */
  public function testMailTagAssignment() {

    $tags = array(
      'test tag one',
      'test tag two 4567890123456789012345678901234567890xxxxxxx', // tag that exceeds 50 characters
      '_test_tag_three',
      );

    $tag_assignments = dosomething_mandrill_mail_tag_assignment($tags);

    $this->assertTrue($tags[0] == $tag_assignments[0], 'Tag: ' . $tag_assignments[0] . ' OK');
    $this->assertTrue(strlen($tag_assignments[1]) <= 50 , 'Tag: ' . $tags[1] . ' => ' .$tag_assignments[1] . ' less than 50 characters.');
    $this->assertTrue($tag_assignments[2] == "-test_tag_three", 'Tag: ' . $tag_assignments[2] . ', leading \'_\' changed to \'-\'');
    $this->assertTrue(count($tag_assignments) == 3, 'Three tags returned.');

  }
  
  /**
   * @see dosomething_mandrill_mail_petition()
   */
  public function testMailPetition() {

    $message = array();
    $params['TITLE'] = 'Test Petition Title';
    $params['URL'] = '/petitions';

    dosomething_mandrill_mail_petition($message, $params);

    $this->assertTrue(isset($message['from_name']), '$message[\'from_name\'] is set.');
    $this->assertTrue($message['from_name'] == 'Ben at DoSomething.org' , 'Petition default from_name set to \'Ben at DoSomething.org\'');
    $this->assertTrue(isset($message['subject']), '$message[\'subject\'] is set.');
    $this->assertTrue(strpos($message['subject'], $params['TITLE']) !== FALSE, '$message[\'subject\'] contains petition title.');
    $this->assertTrue(in_array('petition', $message['tags']), '\'petition\' tag assigned.');
    $this->assertTrue(in_array($params['TITLE'], $message['tags']), '\'' . $params['TITLE'] . '\' tag assigned.');
    $this->assertTrue($params['TITLE'] == $message['params']['TITLE'], 'TITLE merge var assigned.');
    $this->assertTrue('http://www.dosomething.org' . $params['URL'] == $message['params']['URL'], 'URL merge var assigned.');

  }
  
  /**
   * @see dosomething_mandrill_dispatch_password_reset()
   *
   * Reference: Entry Point
   */
  public function testMailDispatchPasswordReset() {

    $account = $this->auth_user;
    $message_status = dosomething_mandrill_dispatch_password_reset($account);

    $this->assertTrue(strpos($message_status['params']['URL'], '/user/reset/') !== FALSE, 'Reset URL returned from Mandrill');
    $this->assertTrue($message_status['params']['ACCOUNT'] == $account->name, 'Account name \'' . $message_status['params']['ACCOUNT'] . '\' returned from Mandrill');
    $this->assertTrue($message_status['params']['FNAME'] == 'First', 'First name \'' . $message_status['params']['FNAME'] . '\' returned from Mandrill');
    $this->assertTrue($message_status['result'] == TRUE, 'Mandrill API reported success sending Password Reset message to ' . $message_status['to']);

  }

  /**
   * @see dosomething_mandrill_dispatch_password_reset()
   *
   * Reference: Entry Point
   */
  public function testMailDispatchCampaignSignup() {

    // Test to see if "DoSomething - Test Mandrill template is set up
    // The template entry is needed to test sending a Mandrill transactional
    // message with the ds-testing key.
    $mandrill_template = entity_load_single('mandrill_template_map', 'dosomething_test');
    $email = self::TEST_EMAIL1;
    $params = array('FNAME' => 'FIrST');

    $this->assertTrue($mandrill_template->mailsystem_key == 'dosomething_mandrill_ds-testing', 'The DS Testing Mandrill template is connected.');

    // @todo: Campaign factory bug - remove campaign specific node_load once the
    // campaign factory is working.
    // $campaign = $this->campaign;
    $node = node_load(731105); // Grandparents Gone Wired campaign
    // $this->assertTrue($campaign->field_mandrill_key == 'ds-testing', 'The DS Testing Mandrill template is connected.');

    $keys = field_get_items('node', $node, 'field_mandrill_key');
    $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
		$key = $key['#markup'];

    $this->assertTrue($key != NULL, 'The DS Testing Mandrill key is set.');
    // $this->assertTrue($key == 'ds-testing', 'The DS Testing Mandrill key is set.');
    $this->assertTrue($key == 'GGWired13', 'The DS Testing Mandrill key is set to ' . $key . ' as expected.');

    $message_status = dosomething_mandrill_dispatch_campaign_signup($email, $node, $params);

    $this->assertTrue($message_status['key'] == $key, 'Mandrill API reported key \'GGWired13\' sent with campaign signup message for Campaign Signup.');
    $this->assertTrue($message_status['params']['FNAME'] == 'First', 'First name \'' . $message_status['params']['FNAME'] . '\' returned from Mandrill API on Campaign Signup.');
    $this->assertTrue($message_status['result'] == TRUE, 'Mandrill API reported success sending Campaign Signup message to ' . $message_status['to']);

  }

  /**
   * @see dosomething_mandrill_get_targetstamp()
   *
   * Pass a date string and return the timestamp. If the date value is NULL
   * return the timestamp for the start of the day.
   */
  public function testGetTargetTimestamp() {

    // Drip and date provided
    $target_date = '2013-11-18';  // 1384732800 - one week (604800) Mon, 11 Nov 2013 05:00:00 GMT
    $target_stamp = dosomething_mandrill_get_targetstamp(1, $target_date);

    // Epoch timestamp: 1384146000
    $this->assertTrue($target_stamp == 1384146000, 'Date string \'2013-11-18\' to time stamp 1384146000 : Mon, 11 Nov 2013 05:00:00 GMT');
    
    // Parameters not provided
    $target_stamp = dosomething_mandrill_get_targetstamp();
    $nextweek_stamp =  mktime(0, 0, 0, date('m'), date('d') - 7, date('Y'));

    $this->assertTrue($target_stamp == $nextweek_stamp, 'Returned timestamp for drip 1 as of today when passed NULL');

    // Date outside of the first user creation date - return error (-1)
    $target_date = '1900-11-18';
    $target_stamp = dosomething_mandrill_get_targetstamp(1, $target_date);

    $this->assertTrue($target_stamp == -1, 'Returned error timestamp for date outside of DS user date range.');

    // Invalid date resulting a timestamp outside of the first user creation to
    // the current date range
    $target_date = '11-2013-11';
    $target_stamp = dosomething_mandrill_get_targetstamp(1, $target_date);

    $this->assertTrue($target_stamp == -1, 'Returned error timestamp for invalid date.');
  }

  /**
   * @see dosomething_mandrill_get_drip_dispatch_momm_data()
   *
   * Test collection of user accounts that have signed up for the MOMM campaign
   * on a supplied date.
   */
  public function testDispatchDripMOMMData() {

    //  Fri, 01 Nov 2013 00:00:00 GMT - a date when the campaign was active
    $target_stamp = 1383264000;

    list($to, $merge_vars) = dosomething_mandrill_get_drip_dispatch_momm_data($target_stamp);

    // Are the returned values in an array format
    $this->assertTrue(is_array($to), '$to returned as an array');
    $this->assertTrue(is_array($merge_vars), '$merge_vars returned as an array');

    // Test random returned merge_var values
    $target_index = rand(1, count($to));
    $this->assertTrue($to[$target_index]['email'] == $merge_vars[$target_index]['rcpt'], '$to[' . $target_index . '][\'email\'] matches $merge_vars[' . $target_index . '][\'rcpt\']');
    $this->assertTrue($to[$target_index]['name'] == $merge_vars[$target_index]['vars'][0]['content'], '$to[' . $target_index . '][\'name\'] matches $merge_vars[' . $target_index . '][0][\'content\']');

  }

  /**
   * @see dosomething_mandrill_dispatch_drip()
   *
   * Test triggering sending test messages to the MOMM campaign drip.
   */
  public function testDispatchDripMOMM() {

    $op = 'dsdrip-momm13';
    $target_drop = 1;
    $target_date = '2013-11-15';
    $test_flag = TRUE;

    $dispatch_result = dosomething_mandrill_dispatch_drip($op, $target_drop, $target_date, $test_flag);

    $this->assertTrue(is_int(strpos($dispatch_result['send_status'], 'Success sending')), 'Test MOMM drip messages sent successfully. Operation: ' . $op . ', Drop: ' . $target_drop . ', Target Date: ' . $target_date);
    $this->assertTrue($dispatch_result['sent'], $dispatch_result['sent'] . ' sent successfully for MOMM drip.');

    // Invalid op
    $op = 'dsdrip-invalid';
    $target_drop = 1;
    $target_date = '2013-11-15';
    $test_flag = TRUE;

    $dispatch_result = dosomething_mandrill_dispatch_drip($op, $target_drop, $target_date, $test_flag);
    $this->assertTrue(is_int(strpos($dispatch_result['send_status'], 'No recipients found')), 'Invalid test drip $op did not send messages as expected.');

    // Invalid drop
    $op = 'dsdrip-momm13';
    $target_drop = 10;
    $target_date = '2013-11-15';
    $test_flag = TRUE;

    $dispatch_result = dosomething_mandrill_dispatch_drip($op, $target_drop, $target_date, $test_flag);
    $this->assertTrue(is_int(strpos($dispatch_result['send_status'], 'No recipients found')), 'Invalid test drip $target_drop did not send messages as expected.');

    // Invalid date
    $op = 'dsdrip-momm13';
    $target_drop = 1;
    $target_date = '11-2003-15';
    $test_flag = TRUE;

    $dispatch_result = dosomething_mandrill_dispatch_drip($op, $target_drop, $target_date, $test_flag);
    $this->assertTrue(is_int(strpos($dispatch_result['send_status'], 'Invalid target timestamp')), 'Invalid test drip $target_date did not send messages as expected.');

    // Invalid data
    $op = 'dsdrip-momm13';
    $target_drop = 1;
    $target_date = '2013-11-15';
    $test_flag = 1; // Not boolean, send invalid test data

    $dispatch_result = dosomething_mandrill_dispatch_drip($op, $target_drop, $target_date, $test_flag);
    $this->assertTrue(is_int(strpos($dispatch_result['send_status'], 'Error sending')), 'Invalid formatted test drip data did not send messages as expected.');

  }

  /**
   * @see dosomething_mandrill_dispatch_drip()
   *
   * Test triggering sending test messages to the MOMM campaign drip.
   */
  public function testPrepForDispatch() {

    $to = array(
      0 => array(
        'email' => self::TEST_EMAIL1,
			  'name'  => 'First Name'
      ),
      1 => array(
        'email' => self::TEST_EMAIL2,
			  'name'  => 'Second Name'
      )
    );

    $merge_vars = array(
      0 => array(
        'rcpt' => self::TEST_EMAIL1,
			  'vars' => array(
				  array(
					  'name' => 'FNAME',
					  'content' => 'First',
				  ),
        ),
      ),
      1 => array(
        'rcpt' => self::TEST_EMAIL2,
			  'vars' => array(
				  array(
					  'name' => 'FNAME',
					  'content' => 'Second',
				  ),
        ),
      ),
    );

    dosomething_mandrill_prep_for_dispatch($to, $merge_vars, $message);

    $this->assertTrue(is_array($message['message']['to']), '$message[\'message\'][\'to\'] is formatted correctly.');
    $this->assertTrue(is_array($message['message']['merge_vars']), '$message[\'message\'][\'merge_vars\'] is formatted correctly.');

    $random_index = rand(0, count($to) - 1);
    $this->assertTrue($message['message']['merge_vars'][$random_index]['rcpt'] == $message['message']['to'][$random_index]['email'], '$message[\'message\'][\'merge_vars\'][' . $random_index . '] == $message[\'message\'][\'to\'][' . $random_index . ']');

  }

}