<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillUnitMailTestCase extends DrupalUnitTestCase {
  
  protected $tests;
  protected $message;
  protected $params;
  protected $to;
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail Unit Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_mail() function.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.tests');
    $this->tests = dosomething_mandrill_tests();
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.unit_test_data.hook_mail');

  }

  /**
   * @see dosomething_mandrill_mail()
   */
  public function testMandrillMail() {
    
    foreach ($this->tests as $test) {
      
      list($this->message, $this->params, $this->to) = dosomething_mandrill_unit_test_data_hook_mail($test);
      
      // $message is passed by reference to dosomething_mandrill_mail(), keep
      // track of the $message value before and after to test the input vs
      // output of the dosomething_mandrill_mail() function.
      $message_pre = $this->message;
      $message = $message_pre;
      dosomething_mandrill_mail($test, $message, $this->params);
      $message_post = $message;
      
      if ($test == 'petition') {
        $this->subtestMandrillMailForPetition($message_pre, $message_post);
      }
      
    }
    
  }
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mail() function
   */
  public function subtestMandrillMailForPetition($message_pre, $message_post) {

    // Test returned $message values
    // to
    $this->assertEqual($message_pre['to'], $message_post['to'],
      "<strong>Petition:</strong> \$message]['to'] equals expected value -> " . $message_post['to']);
        
    // message merge_vars - dosomething_mandrill_mail
    $this->assertEqual($message_pre['params']['FNAME'], $message_post['params']['FNAME'],
      "<strong>Petition:</strong> \$message]['params']['FNAME'] equals expected value -> " . $message_post['params']['FNAME']);
    $this->assertEqual($message_pre['params']['LNAME'], $message_post['params']['LNAME'],
      "<strong>Petition:</strong> \$message]['params']['LNAME'] equals expected value -> " . $message_post['params']['LNAME']);
    $this->assertEqual($message_pre['params']['TITLE'], $message_post['params']['PETITION'],
      "<strong>Petition:</strong> \$message]['params']['TITLE'] / ['PETITION'] equals expected output -> " . $message_post['params']['PETITION']);
    $this->assertEqual('http://www.dosomething.org' . $message_pre['params']['URL'], $message_post['params']['PETITIONURL'],
      "<strong>Petition:</strong> \$message]['params']['URL'] / ['PETITIONURL'] equals expected value -> " . $message_post['params']['PETITIONURL']);
    
    // params merge_vars - dosomething_mandrill_mail
    $this->assertEqual($this->params['TITLE'], $message_post['params']['PETITION'],
      "<strong>Petition:</strong> \$this->params['TITLE'] equals expected value -> " . $message_post['params']['PETITION']);
    $this->assertEqual($this->params['URL'], substr($message_post['params']['PETITIONURL'], 26),
      "<strong>Petition:</strong> \$this->params['URL'] equals expected value -> " . $message_post['params']['PETITIONURL']);
    
    // tags - dosomething_mandrill_mail
    $this->assertEqual('petition', $message_post['tags'][0],
      "<strong>Petition:</strong> \$message]['tags'][0] equals 'petition'.");
    $this->assertEqual(substr($message_pre['params']['TITLE'], 0, 50), $message_post['tags'][1],
      "<strong>Petition:</strong> \$message]['tags'][1] equals expected value -> " . $message_post['tags'][1]);
    
  }
  
}