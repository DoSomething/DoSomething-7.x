<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillUnitMailTestCase extends WebTestSuite {
  
  const TEST_EMAIL = 'dlee+test@dosomething.org';
  protected $auth_user;

  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail Unit Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_mail() function.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    $this->auth_user = $this->factory->create('User', array(
      'name' => 'DS Mandrill Test',
      'mail' => self::TEST_EMAIL,
      'first_name' => 'First',
    ));
        
  }

  /**
   * @see dosomething_mandrill_mail_common()
   */
  public function testMailCommon() {

    $message = array();
    $params['FNAME'] = 'First';

    dosomething_mandrill_mail_common($message, $params);

    // Expected default "common" values
    $this->assertTrue(is_string($message['from_name']), 'Default \'from_name\' is a string.');
    $this->assertTrue($message['from_name'] == 'DoSomething.org', '\'from_name\' set to \'Dosomething.org\'');

    $this->assertEqual($params['FNAME'], $message['params']['FNAME'],
         '$params[\'FNAME\']: ' . $params['FNAME'] . ' assigned to $message[\'params\'][\'FNAME\']');
    $this->assertTrue(strlen($message['params']['CAMPAIGNS']) > 0, 'CAMPAIGNS value returned.');
    $this->assertTrue(
      strpos($message['params']['CAMPAIGNS'], '<ul>') !== FALSE &&
      strpos($message['params']['CAMPAIGNS'], '</ul>') !== FALSE &&
      strpos($message['params']['CAMPAIGNS'], '<li>') !== FALSE,
      'CAMPAIGNS markup found.');

  }

  /**
   * @see dosomething_mandrill_mail_firstname()
   */
  public function testMandrillMailFirstName() {

      // @todo: "First Name", "First-Name"
      $fnames = array(
        'First',
        'first',
        'fiRSt',
        'FIRST'
      );

      foreach($fnames as $fname) {

        $params['FNAME'] = $fname;
        dosomething_mandrill_mail_firstname($message, $params);
        $this->assertEqual('First', $message['params']['FNAME'],
         'First Name: First => ' . $message['params']['FNAME']);

      }

  }

  /**
   * @see dosomething_mandrill_mail_tag_assignment()
   */
  public function testMailTagAssignment() {

    $tags = array(
      'test tag one',
      'test tag two 4567890123456789012345678901234567890xxxxxxx', // tag that exceeds 50 characters
      '_test_tag_three',
      );

    $tag_assignments = dosomething_mandrill_mail_tag_assignment($tags);

    $this->assertTrue($tags[0] == $tag_assignments[0], 'Tag: ' . $tag_assignments[0] . ' OK');
    $this->assertTrue(strlen($tag_assignments[1]) <= 50 , 'Tag: ' . $tags[1] . ' => ' .$tag_assignments[1] . ' less than 50 characters.');
    $this->assertTrue($tag_assignments[2] == "-test_tag_three", 'Tag: ' . $tag_assignments[2] . ', leading \'_\' changed to \'-\'');
    $this->assertTrue(count($tag_assignments) == 3, 'Three tags returned.');

  }
  
  /**
   * @see dosomething_mandrill_mail_petition()
   */
  public function testMailPetition() {

    $message = array();
    $params['TITLE'] = 'Test Petition Title';
    $params['URL'] = '/petitions';

    dosomething_mandrill_mail_petition($message, $params);

    $this->assertTrue(isset($message['from_name']), '$message[\'from_name\'] is set.');
    $this->assertTrue($message['from_name'] == 'Ben at DoSomething.org' , 'Petition default from_name set to \'Ben at DoSomething.org\'');
    $this->assertTrue(isset($message['subject']), '$message[\'subject\'] is set.');
    $this->assertTrue(strpos($message['subject'], $params['TITLE']) !== FALSE, '$message[\'subject\'] contains petition title.');
    $this->assertTrue(in_array('petition', $message['tags']), '\'petition\' tag assigned.');
    $this->assertTrue(in_array($params['TITLE'], $message['tags']), '\'' . $params['TITLE'] . '\' tag assigned.');
    $this->assertTrue($params['TITLE'] == $message['params']['TITLE'], 'TITLE merge var assigned.');
    $this->assertTrue('http://www.dosomething.org' . $params['URL'] == $message['params']['URL'], 'URL merge var assigned.');

  }
  
  /**
   * @see dosomething_mandrill_dispatch_password_reset()
   */
  public function testMailDispatchPasswordReset() {

    $account = $this->auth_user;
    $message_status = dosomething_mandrill_dispatch_password_reset($account);

    $this->assertTrue(strpos($message_status['params']['URL'], '/user/reset/') !== FALSE, 'Reset URL returned from Mandrill');
    $this->assertTrue($message_status['params']['ACCOUNT'] == $account->name, 'Account name \'' . $message_status['params']['ACCOUNT'] . '\' returned from Mandrill');
    $this->assertTrue($message_status['params']['FNAME'] == 'First', 'First name \'' . $message_status['params']['FNAME'] . '\' returned from Mandrill');
    $this->assertTrue($message_status['result'] == TRUE, 'Mandrill API reported success sending Password Reset message to ' . $message_status['to']);

  }
  
  /**
   * @see dosomething_mandrill_target_stamp()
   *
   * Pass a date string and return the timestamp. If the date value is NULL
   * return the timestamp for the start of the day.
   */
  public function testTargetStamp() {

    // Drip and date provided
    $target_date = '2013-11-18';  // 1384732800 - one week (604800) Mon, 11 Nov 2013 05:00:00 GMT
    $target_stamp = dosomething_mandrill_target_stamp(1, $target_date);

    // Epoch timestamp: 1384146000
    $this->assertTrue($target_stamp == 1384146000, 'Date string \'2013-11-18\' to time stamp 1384146000 : Mon, 11 Nov 2013 05:00:00 GMT');
    
    // Parameters not provided
    $target_stamp = dosomething_mandrill_target_stamp();
    $nextweek_stamp =  mktime(0, 0, 0, date('m'), date('d') - 7, date('Y'));

    $this->assertTrue($target_stamp == $nextweek_stamp, 'Returned timestamp for drip 1 as of today when passed NULL');

  }
  
  /**
   * @see dosomething_mandrill_dispatch_drip_momm_query()
   *
   * Test collection of user accounts that have signed up for the MOMM campaign
   * on a supplied date.
   */
  public function testDispatchDripMOMM() {

    //  Fri, 01 Nov 2013 00:00:00 GMT - a date when the campaign was active
    $target_stamp = 1383264000;

    list($to, $merge_vars) = dosomething_mandrill_dispatch_drip_momm_query($target_stamp);

    // Are the returned values in an array format
    $this->assertTrue(is_array($to), '$to returned as an array');
    $this->assertTrue(is_array($merge_vars), '$merge_vars returned as an array');

    // Test random returned merge_var values
    $target_index = rand(1, count($to));
    $this->assertTrue($to[$target_index]['email'] == $merge_vars[$target_index]['rcpt'], '$to[' . $target_index . '][\'email\'] matches $merge_vars[' . $target_index . '][\'rcpt\']');
    $this->assertTrue($to[$target_index]['name'] == $merge_vars[$target_index]['vars'][0]['content'], '$to[' . $target_index . '][\'name\'] matches $merge_vars[' . $target_index . '][0][\'content\']');

  }

}