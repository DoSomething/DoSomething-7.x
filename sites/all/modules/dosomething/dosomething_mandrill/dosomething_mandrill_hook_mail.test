<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillUnitMailTestCase extends WebTestSuite {
  
  protected $tests;
  protected $message;
  protected $params;
  protected $to;
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail Unit Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_mail() function.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    // Load list of test scenarios
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.tests');
    $this->tests = dosomething_mandrill_tests();
    
    // Load test data related to each scenario
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.unit_test_data.hook_mail');

  }
  
    /**
   * @see dosomething_mandrill_mail()
   */
  public function testMandrillMail() {
    
    foreach ($this->tests as $test) {
    
    $bla = TRUE;
    if ($bla) {
      $bla = TRUE;
    }
      
      list($this->message, $this->params, $this->to) = dosomething_mandrill_unit_test_data_hook_mail($test);
      
      // $message is passed by reference to dosomething_mandrill_mail(), keep
      // track of the $message value before and after to test the input vs
      // output of the dosomething_mandrill_mail() function.
      $message_pre = $this->message;
      $message = $message_pre;
      dosomething_mandrill_mail($test, $message, $this->params);
      $message_post = $message;
      
      if ($test == 'petition') {
        $this->subtestMandrillMailForPetition($message_pre, $message_post);
      }
      
    }
    
  }

  /**
   * @see dosomething_mandrill_mail_firstname()
   */
  public function testMandrillMailFirstName() {
    
      $message = array();
      
      $params['FNAME'] = 'Second';
      dosomething_mandrill_mail_firstname($message, $params);
      $this->assertEqual('Second', $message['params']['FNAME'],
         'First Name: First => ' . $message['params']['FNAME']);
      
      $params['FNAME'] = 'first';
      dosomething_mandrill_mail_firstname($message, $params);
      $this->assertEqual('First', $message['params']['FNAME'],
         'First Name: first => ' . $message['params']['FNAME']);
      
      $params['FNAME'] = 'fiRSt';
      dosomething_mandrill_mail_firstname($message, $params);
      $this->assertEqual('First', $message['params']['FNAME'],
         'First Name: fiRStt => ' . $message['params']['FNAME']);
      
      $params['FNAME'] = 'FIRST';
      dosomething_mandrill_mail_firstname($message, $params);
      $this->assertEqual('First', $message['params']['FNAME'],
         'First Name: FIRST => ' . $message['params']['FNAME']);
      
      // @todo: "First Name", "First-Name"
    
  }
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mail() function
   */
  public function subtestMandrillMailForPetition($message_pre, $message_post) {

    // Test returned $message values
    // to
    $this->assertEqual($message_pre['to'], $message_post['to'],
      "Petition: \$message]['to'] == " . $message_post['to']);
        
    // message merge_vars - dosomething_mandrill_mail
    $this->assertEqual($message_pre['params']['FNAME'], $message_post['params']['FNAME'],
      "Petition: \$message]['params']['FNAME'] == " . $message_post['params']['FNAME']);
    $this->assertEqual($message_pre['params']['LNAME'], $message_post['params']['LNAME'],
      "Petition: \$message]['params']['LNAME'] == " . $message_post['params']['LNAME']);
    $this->assertEqual($message_pre['params']['TITLE'], $message_post['params']['TITLE'],
      "Petition: \$message]['params']['TITLE'] / ['TITLE'] == " . $message_post['params']['TITLE']);
    $this->assertEqual('http://www.dosomething.org' . $message_pre['params']['URL'], $message_post['params']['URL'],
      "Petition: \$message]['params']['URL'] / ['URL'] == " . $message_post['params']['URL']);
    
    // params merge_vars - dosomething_mandrill_mail
    $this->assertEqual($this->params['TITLE'], $message_post['params']['TITLE'],
      "Petition: \$this->params['TITLE'] == " . $message_post['params']['TITLE']);
    $this->assertEqual($this->params['URL'], substr($message_post['params']['URL'], 26),
      "Petition: \$this-> == " . $message_post['params']['URL']);
    
    // tags - dosomething_mandrill_mail
    $this->assertEqual('petition', $message_post['tags'][0],
      "Petition: \$message]['tags'][0] == 'petition'.");
    $this->assertEqual(substr($message_pre['params']['TITLE'], 0, 50), $message_post['tags'][1],
      "Petition: \$message]['tags'][1] == " . $message_post['tags'][1]);
    
  }
  
}