<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system at the
 * hook_mail_alter point and beyond.
 *
 * See Mandrill API send-template method for details
 * mail-template: https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
 */
class DoSomethingMandrillMailAlterUnitTestCase extends WebTestSuite  {
  
  const TEST_EMAIL = 'dlee+test@dosomething.org';
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail_alter Unit Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_<mail system>_mail_alter() function and related functions.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
  }
    
  /**
   * @see dosomething_mandrill_mail_alter_to()
   *
   * Test constructing the $to array for submission to the Mandrill API.
   *
   */
  public function testMailAlterTo() {

    // Pass email address as a string
    $mandrill_params = array();
    $message['to'] = self::TEST_EMAIL;
    $message['params']['FNAME'] = 'First';

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertTrue(self::TEST_EMAIL == $mandrill_params['message']['to'][0]['email'], 'Passed the string email: ' . self::TEST_EMAIL . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue($message['params']['FNAME'] == $mandrill_params['message']['to'][0]['name'], 'Passed FNAME: ' . $message['params']['FNAME'] . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue('to' == $mandrill_params['message']['to'][0]['type'], 'Message \'to\' type set to \'to\'');

    // Pass single email as an array
    $mandrill_params = array();
    $message['to'] = array(
      0 => array(
        'email' => self::TEST_EMAIL,
      ),
    );
    $message['params']['FNAME'] = 'Second';

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertTrue($message['to'][0]['email'] == $mandrill_params['message']['to'][0]['email'], 'Passed the array email: ' . self::TEST_EMAIL . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue($message['params']['FNAME'] == $mandrill_params['message']['to'][0]['name'], 'Passed FNAME: ' . $message['params']['FNAME'] . ' to $mardrill_params as array was formatted correctly.');
    $this->assertTrue('to' == $mandrill_params['message']['to'][0]['type'], 'Message \'to\' type passed as array set to \'to\'');
    
    // Pass several email addresses as array
    $mandrill_params = array();
    $message['to'] = array(
      0 => array(
        'email' => self::TEST_EMAIL,
      ),
      1 => array(
        'email' => self::TEST_EMAIL,
      ),
      2 => array(
        'email' => self::TEST_EMAIL,
      ),
      
    );

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertTrue(count($mandrill_params['message']['to']) == 3, 'Passed the array of several email entries, $mardrill_params was formatted correctly.');

  }

  /**
   * @see dosomething_mandrill_mail_alter_from_name()
   *
   * Test constructing the $to array for submission to the Mandrill API.
   */
  public function testMailAlterFromName() {

    $mandrill_params = array();
    $from_name = 'Test from_name';
    $message['from_name'] = $from_name;

    dosomething_mandrill_mail_alter_from_name($mandrill_params, $message);

    $this->assertTrue($mandrill_params['message']['from_name'] == $from_name, '\'from_name\' in $mandrill_params == $message');

  }
  
  /**
   * @see dosomething_mandrill_mail_alter_tags()
   *
   * Test constructing the $tags array for submission to the Mandrill API.
   */
  public function testMailAlterTags() {

    // $mandrill_params only tag(s) - there will always be one based on $key
    $mandrill_params = array(
      'message' => array(
        'tags' => array(
          0 => 'params tag',
        ),
      ),
    );
    $message = array();
    dosomething_mandrill_mail_alter_tags($mandrill_params, $message);

    $this->assertTrue(count($mandrill_params['message']['tags']) == 1, 'One \'tags\' found in $mandrill_params.');

    // $mandrill_params and $message tag(s)
    $mandrill_params = array(
      'message' => array(
        'tags' => array(
          0 => 'params tag',
        ),
      ),
    );
    $message['tags'] = array(
      0 => 'tag zero',
      1 => 'tag one',
    );
    dosomething_mandrill_mail_alter_tags($mandrill_params, $message);

    $this->assertTrue(count($mandrill_params['message']['tags']) == 3, 'Three \'tags\' found in $mandrill_params with $message assigments.');

  }

}
