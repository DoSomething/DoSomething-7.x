<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system at the
 * hook_mail_alter point and beyond.
 */
class DoSomethingMandrillMailAlterUnitTestCase extends WebTestSuite  {
  
  const TEST_EMAIL = 'dlee+test@dosomething.org';
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail_alter Tests',
      'description' => 'DoSomething Mandrill mail tests for the dosomething_mandrill_<mail system>_mail_alter() function and related functions.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
  }
    
  /**
   * @see dosomething_mandrill_mail_alter_to()
   *
   * Test constructing the $to array for submission to the Mandrill API based on
   * mail-template: https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
   *
   */
  public function testMailAlterTo() {

    // Pass email address as a string
    $mandrill_params = array();
    $message['to'] = self::TEST_EMAIL;
    $message['params']['merge_vars'][0]['FNAME'] = 'First';

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertTrue(self::TEST_EMAIL == $mandrill_params['message']['to'][0]['email'], 'Passed the string email: ' . self::TEST_EMAIL . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue($message['params']['merge_vars'][0]['FNAME'] == $mandrill_params['message']['to'][0]['name'], 'Passed FNAME: ' . $message['params']['merge_vars'][0]['FNAME'] . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue('to' == $mandrill_params['message']['to'][0]['type'], 'Message \'to\' type set to \'to\'');

    // Pass single email as an array
    $mandrill_params = array();
    $message['to'] = array(
      0 => array(
        'email' => self::TEST_EMAIL,
      ),
    );
    $message['params']['merge_vars'][0]['FNAME'] = 'Second';

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertTrue($message['to'][0]['email'] == $mandrill_params['message']['to'][0]['email'], 'Passed the array email: ' . self::TEST_EMAIL . ' to $mardrill_params was formatted correctly.');
    $this->assertTrue($message['params']['merge_vars'][0]['FNAME'] == $mandrill_params['message']['to'][0]['name'], 'Passed FNAME: ' . $message['params']['merge_vars'][0]['FNAME'] . ' to $mardrill_params as array was formatted correctly.');
    $this->assertTrue('to' == $mandrill_params['message']['to'][0]['type'], 'Message \'to\' type passed as array set to \'to\'');
    
    // Pass several email addresses as array
    $mandrill_params = array();
    $message['to'] = array(
      0 => array(
        'email' => self::TEST_EMAIL,
      ),
      1 => array(
        'email' => self::TEST_EMAIL,
      ),
      2 => array(
        'email' => self::TEST_EMAIL,
      ),
      
    );

    dosomething_mandrill_mail_alter_to($mandrill_params, $message);

    $this->assertEqual(count($mandrill_params['message']['to']), 3, 'Passed the array of several email entries, $mardrill_params was formatted correctly.');

  }

  /**
   * @see dosomething_mandrill_mail_alter_from_name()
   *
   * Test constructing the $to array for submission to the Mandrill API based on
   * mail-template: https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
   */
  public function testMailAlterFromName() {

    $mandrill_params = array();
    $from_name = 'Test from_name';
    $message['from_name'] = $from_name;

    dosomething_mandrill_mail_alter_from_name($mandrill_params, $message);

    $this->assertTrue($mandrill_params['message']['from_name'] == $from_name, '\'from_name\' in $mandrill_params == $message');

  }

  /**
   * @see dosomething_mandrill_mail_alter_tags()
   */
  public function testMailAlterTags() {

    $mandrill_params['message']['tags'] = array('params_tags_one');
    $message['tags'] = array();

    $mandrill_params_pre = $mandrill_params['message']['tags'];

    dosomething_mandrill_mail_alter_tags($mandrill_params, $message);

    $this->assertTrue(count($mandrill_params['message']['tags']) == 1, 'Tag assignment from $mandrill_params only has one entry');
    $this->assertTrue($mandrill_params_pre[0] == $mandrill_params['message']['tags'][0], 'Tag assignment $mandrill_params only worked');

    $mandrill_params['message']['tags'] = array('params_tags_one');
    $message['tags'] = array('message_tag_one', 'message_tag_two');

    $mandrill_params_pre = $mandrill_params['message']['tags'];

    dosomething_mandrill_mail_alter_tags($mandrill_params, $message);

    $this->assertTrue(count($mandrill_params['message']['tags']) == 3, 'Tag assignment from both $mandrill_params and $message has three entries');
    $this->assertTrue($mandrill_params_pre[0] == $mandrill_params['message']['tags'][0] &&
                      $message['tags'][0] == $mandrill_params['message']['tags'][1] &&
                      $message['tags'][1] == $mandrill_params['message']['tags'][2], 'Tag assignment from pre $mandrill_params and $message to $mandrill_params worked');

  }

  /**
   * @see dosomething_mandrill_mail_alter_global_merge_vars()
   */
  public function testMailAlterGlobalMergeVars() {

    $mandrill_params = array();
    $message['subject'] = 'Test Subject';
    $message['from'] = 'Test From';
    $message['params']['message']['global_merge_vars'] = array(
      0 => array(
        'name' => 'FNAME',
        'content' => 'First'
      ),
      1 => array(
        'name' => 'CAMPAIGNS',
        'content' => 'Test campaign markup'
      )
    );

    dosomething_mandrill_mail_alter_global_merge_vars($mandrill_params, $message);

    $this->assertTrue($mandrill_params['message']['global_merge_vars'][0]['name'] == 'subject',  '\'global_merge_vars\' item 0 is "subject"');
    $this->assertTrue($message['subject'] == $mandrill_params['message']['global_merge_vars'][0]['content'], '"subject" assigned in \'global_merge_vars\'');
    $this->assertTrue($mandrill_params['message']['global_merge_vars'][1]['name'] == 'from',  '\'global_merge_vars\' item 1 is "from"');
    $this->assertTrue($message['from'] == $mandrill_params['message']['global_merge_vars'][1]['content'], '"from" assigned in \'global_merge_vars\'');
    $this->assertTrue($mandrill_params['message']['global_merge_vars'][2]['name'] == 'domain',  '\'global_merge_vars\' item 2 is "domain"');
    $this->assertTrue(strpos($mandrill_params['message']['global_merge_vars'][2]['content'], 'http://') !== FALSE, '"domain" value assignment found in \'global_merge_vars\'');

    $this->assertTrue($mandrill_params['message']['global_merge_vars'][3]['name'] == 'FNAME',  '\'global_merge_vars\' item 3 is "FNAME"');
    $this->assertTrue($message['params']['message']['global_merge_vars'][0]['content'] == $mandrill_params['message']['global_merge_vars'][3]['content'], '"FNAME" assigned in \'global_merge_vars\'');
    $this->assertTrue($mandrill_params['message']['global_merge_vars'][4]['name'] == 'CAMPAIGNS',  '\'global_merge_vars\' item 4 is "CAMPAIGNS"');
    $this->assertTrue($message['params']['message']['global_merge_vars'][1]['content'] == $mandrill_params['message']['global_merge_vars'][4]['content'], '"CAMPAIGNS" assigned in \'global_merge_vars\'');

  }

}
