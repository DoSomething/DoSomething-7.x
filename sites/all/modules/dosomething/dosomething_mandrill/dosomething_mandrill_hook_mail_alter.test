<?php



/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillUnitMailAlterUnitTestCase extends DrupalUnitTestCase {
  
  protected $tests;
  protected $message;
  protected $mandrill_params;
  protected $to;
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill hook_mail_alter Unit Tests',
      'description' => 'DoSomething Mandrill mail unit tests for the dosomething_mandrill_<mailsystem>_mail_alter() function.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.tests');
    $this->tests = dosomething_mandrill_tests();
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.unit_test_data.hook_mail_alter');

  }
  
  /**
   * @see dosomething_mandrill_mandrill_mail_alter()
   */
  public function testMandrillMandrillMailAlter() {
    
    foreach ($this->tests as $test) {
      
      list($this->mandrill_params, $this->message) = dosomething_mandrill_unit_test_data_hook_mandrill_mail_alter($test);
      
      // $message is passed by reference to dosomething_mandrill_mail(), keep
      // track of the $message value before and after to test the input vs
      // output of the dosomething_mandrill_mail() function.
      $mandrill_params_pre = $this->mandrill_params;
      $mandrill_params = $this->mandrill_params;
      dosomething_mandrill_mandrill_mail_alter(&$mandrill_params, $this->message);
      $mandrill_params_post = $mandrill_params;

      if ($test == 'petition') {
        $this->subtestMandrillMandrillMailAlterForPetition($mandrill_params_pre, $mandrill_params_post);
      }

    }

  }
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mandrill_mail_alter() function
   */
  public function subtestMandrillMandrillMailAlterForPetition($mandrill_params_pre, $mandrill_params_post) {
  
    // Test returned $message values
    // to
    $this->assertEqual($mandrill_params_post['message']['to'][0]['email'], $this->message['to'],
      "<strong>Petition \$to:</strong> - hook_mailsystem_mail_alter ['message']['to'][0]['email'] equals expected to value -> " . $this->message['to']);
    $this->assertEqual($mandrill_params_post['message']['to'][0]['name'], $this->message['params']['FNAME'],
      "<strong>Petition \$to:</strong> - hook_mailsystem_mail_alter ['message']['to'][0]['name'] equals expected to value -> " . $this->message['params']['FNAME']);
    
    // tags
    $this->assertEqual($mandrill_params_post['message']['tags'][0], 'dosomething_mandrill_petition',
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][0] equals expected tag value -> dosomething_mandrill_petition");
    $this->assertEqual($mandrill_params_post['message']['tags'][1], 'petition',
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][1] equals expected tag value -> petition");
    $this->assertEqual($mandrill_params_post['message']['tags'][2], substr($mandrill_params_post['params']['PETITION'], 0, 50),
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][2] equals expected tag value -> " . substr($mandrill_params_post['params']['PETITION'], 0, 50));
    
    // params & message - merge_vars
    $this->assertEqual($this->message['params']['FNAME'], $mandrill_params_post['params']['FNAME'],
      "<strong>Petition FNAME:</strong> - hook_mailsystem_mail_alter ['params']['FNAME'] equals expected value -> " . $this->message['params']['FNAME']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][3]['name'] == 'FNAME', "Found FNAME in ['message']['global_merge_vars'][3]['name']");
    $this->assertEqual($this->message['params']['FNAME'], $mandrill_params_post['message']['global_merge_vars'][3]['content'],
      "<strong>Petition gloabal_merge_var FNAME:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][3]['content'] equals expected value -> " . $this->message['params']['FNAME']);
    
    $this->assertEqual($this->message['params']['LNAME'], $mandrill_params_post['params']['LNAME'],
      "<strong>Petition LNAME:</strong> - hook_mailsystem_mail_alter ['params']['LNAME'] equals expected value -> " . $this->message['params']['LNAME']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][4]['name'] == 'LNAME', "Found LNAME in ['message']['global_merge_vars'][4]['name']");
    $this->assertEqual($this->message['params']['LNAME'], $mandrill_params_post['message']['global_merge_vars'][4]['content'],
      "<strong>Petition global_merge_var LNAME:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][4]['content'] equals expected value -> " . $this->message['params']['LNAME']);
    
    $this->assertEqual($this->message['params']['PETITION'], $mandrill_params_post['params']['PETITION'],
      "<strong>Petition PETITION:</strong> - hook_mailsystem_mail_alter ['params']['PETITION'] equals expected value -> " . $this->message['params']['PETITION']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][5]['name'] == 'PETITION', "Found PETITION in ['message']['global_merge_vars'][5]['name']");
    $this->assertEqual($this->message['params']['PETITION'], $mandrill_params_post['message']['global_merge_vars'][5]['content'],
      "<strong>Petition global_merge_var PETITION:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][5]['content'] equals expected value -> " . $this->message['params']['PETITION']);
    
    $this->assertEqual($this->message['params']['PETITIONURL'], $mandrill_params_post['params']['PETITIONURL'],
      "<strong>Petition PETITIONURL:</strong> - hook_mailsystem_mail_alter ['params']['PETITIONURL'] equals expected value -> " . $this->message['params']['PETITIONURL']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][6]['name'] == 'PETITIONURL', "Found PETITIONURL in ['message']['global_merge_vars'][6]['name']");
    $this->assertEqual($this->message['params']['PETITIONURL'], $mandrill_params_post['message']['global_merge_vars'][6]['content'],
      "<strong>Petition global_merge_var PETITIONURL:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][6]['content'] equals expected value -> " . $this->message['params']['PETITIONURL']);
     
  } 

}