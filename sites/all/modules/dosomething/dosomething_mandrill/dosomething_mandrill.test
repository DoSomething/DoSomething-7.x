<?php
/*
 * @file
 * Unit Tests for DoSomething.org Mandrill transaction message system
 */
class DoSomethingMandrillTestCase extends WebTestSuite {
  
  protected $tests;
  protected $message;
  
  public static function getInfo() {
    return array(
      'name' => 'DoSomething Mandrill Tests',
      'description' => 'DoSomething Mandrill mail tests that perform unit tests as well as monitor the response from the Mandrill API.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
    
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.tests');
    $this->tests = dosomething_mandrill_tests();
    
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.unit_test_data.hook_mail');
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.unit_test_data.hook_mail_alter');
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.dispatch_test_data');

  }
    
  /**
   * @see dosomething_mandrill_dispatch()
   *
   * Run a series of data sets through the dosomething_mandrill_dispatch()
   * function to monitor the response from the Mandrill API.
   */
  public function testMandrillDispatch() {
    
    foreach ($this->tests as $test) {
      
      if ($test == 'petition') {
        
        // UNIT TEST - dosomething_mandrill_mail()
        list($this->message, $this->params, $this->to) = dosomething_mandrill_unit_test_data_hook_mail($test);
      
        /* $message is passed by reference to dosomething_mandrill_mail(), keep
         * track of the $message value before and after to test the input vs
         * output of the dosomething_mandrill_mail() function.
         */
        $message_pre = $this->message;
        $message = $message_pre;
        dosomething_mandrill_mail($test, $message, $this->params);
        $message_post = $message;
      
        $this->subtestMandrillMailForPetition($message_pre, $message_post);
        
        // UNIT TEST - dosomething_mandrill_mandrill_mail_alter()
      
        list($this->mandrill_params, $this->message) = dosomething_mandrill_unit_test_data_hook_mandrill_mail_alter($test);
      
        /* $message is passed by reference to dosomething_mandrill_mail(), keep
         *track of the $message value before and after to test the input vs
         * output of the dosomething_mandrill_mail() function.
         */
        $mandrill_params_pre = $this->mandrill_params;
        $mandrill_params = $this->mandrill_params;
        dosomething_mandrill_mandrill_mail_alter(&$mandrill_params, $this->message);
        $mandrill_params_post = $mandrill_params;

        $this->subtestMandrillMandrillMailAlterForPetition($mandrill_params_pre, $mandrill_params_post);
        
        // TRANSACTION TEST - dosomething_mandrill_dispatch()
        
        $bla = TRUE;
        if ($bla) {
          $bla = TRUE;
        }
      
        list($to, $key, $this->message) = dosomething_mandrill_dispatch_test_data($test);
        $dispatch_results = dosomething_mandrill_dispatch($to, $key, $this->message);

        $this->subtestMandrillDispatchForPetition($dispatch_results);
        
      }

    }

  }
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mail() function
   */
  public function subtestMandrillMailForPetition($message_pre, $message_post) {

    // Test returned $message values
    // to
    $this->assertEqual($message_pre['to'], $message_post['to'],
      "<strong>Petition:</strong> \$message]['to'] equals expected value -> " . $message_post['to']);
        
    // message merge_vars - dosomething_mandrill_mail
    $this->assertEqual($message_pre['params']['FNAME'], $message_post['params']['FNAME'],
      "<strong>Petition:</strong> \$message]['params']['FNAME'] equals expected value -> " . $message_post['params']['FNAME']);
    $this->assertEqual($message_pre['params']['LNAME'], $message_post['params']['LNAME'],
      "<strong>Petition:</strong> \$message]['params']['LNAME'] equals expected value -> " . $message_post['params']['LNAME']);
    $this->assertEqual($message_pre['params']['TITLE'], $message_post['params']['PETITION'],
      "<strong>Petition:</strong> \$message]['params']['TITLE'] / ['PETITION'] equals expected output -> " . $message_post['params']['PETITION']);
    $this->assertEqual('http://www.dosomething.org' . $message_pre['params']['URL'], $message_post['params']['PETITIONURL'],
      "<strong>Petition:</strong> \$message]['params']['URL'] / ['PETITIONURL'] equals expected value -> " . $message_post['params']['PETITIONURL']);
    
    // params merge_vars - dosomething_mandrill_mail
    $this->assertEqual($this->params['TITLE'], $message_post['params']['PETITION'],
      "<strong>Petition:</strong> \$this->params['TITLE'] equals expected value -> " . $message_post['params']['PETITION']);
    $this->assertEqual($this->params['URL'], substr($message_post['params']['PETITIONURL'], 26),
      "<strong>Petition:</strong> \$this->params['URL'] equals expected value -> " . $message_post['params']['PETITIONURL']);
    
    // tags - dosomething_mandrill_mail
    $this->assertEqual('petition', $message_post['tags'][0],
      "<strong>Petition:</strong> \$message]['tags'][0] equals 'petition'.");
    $this->assertEqual(substr($message_pre['params']['TITLE'], 0, 50), $message_post['tags'][1],
      "<strong>Petition:</strong> \$message]['tags'][1] equals expected value -> " . $message_post['tags'][1]);
    
  }
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mandrill_mail_alter() function
   */
  public function subtestMandrillMandrillMailAlterForPetition($mandrill_params_pre, $mandrill_params_post) {
  
    // Test returned $message values
    // to
    $this->assertEqual($mandrill_params_post['message']['to'][0]['email'], $this->message['to'],
      "<strong>Petition \$to:</strong> - hook_mailsystem_mail_alter ['message']['to'][0]['email'] equals expected to value -> " . $this->message['to']);
    $this->assertEqual($mandrill_params_post['message']['to'][0]['name'], $this->message['params']['FNAME'],
      "<strong>Petition \$to:</strong> - hook_mailsystem_mail_alter ['message']['to'][0]['name'] equals expected to value -> " . $this->message['params']['FNAME']);
    
    // tags
    $this->assertEqual($mandrill_params_post['message']['tags'][0], 'dosomething_mandrill_petition',
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][0] equals expected tag value -> dosomething_mandrill_petition");
    $this->assertEqual($mandrill_params_post['message']['tags'][1], 'petition',
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][1] equals expected tag value -> petition");
    $this->assertEqual($mandrill_params_post['message']['tags'][2], substr($mandrill_params_post['params']['PETITION'], 0, 50),
      "<strong>Petition Tag:</strong> - hook_mailsystem_mail_alter ['message']['tags'][2] equals expected tag value -> " . substr($mandrill_params_post['params']['PETITION'], 0, 50));
    
    // params & message - merge_vars
    $this->assertEqual($this->message['params']['FNAME'], $mandrill_params_post['params']['FNAME'],
      "<strong>Petition FNAME:</strong> - hook_mailsystem_mail_alter ['params']['FNAME'] equals expected value -> " . $this->message['params']['FNAME']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][3]['name'] == 'FNAME', "Found FNAME in ['message']['global_merge_vars'][3]['name']");
    $this->assertEqual($this->message['params']['FNAME'], $mandrill_params_post['message']['global_merge_vars'][3]['content'],
      "<strong>Petition gloabal_merge_var FNAME:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][3]['content'] equals expected value -> " . $this->message['params']['FNAME']);
    
    $this->assertEqual($this->message['params']['LNAME'], $mandrill_params_post['params']['LNAME'],
      "<strong>Petition LNAME:</strong> - hook_mailsystem_mail_alter ['params']['LNAME'] equals expected value -> " . $this->message['params']['LNAME']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][4]['name'] == 'LNAME', "Found LNAME in ['message']['global_merge_vars'][4]['name']");
    $this->assertEqual($this->message['params']['LNAME'], $mandrill_params_post['message']['global_merge_vars'][4]['content'],
      "<strong>Petition global_merge_var LNAME:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][4]['content'] equals expected value -> " . $this->message['params']['LNAME']);
    
    $this->assertEqual($this->message['params']['PETITION'], $mandrill_params_post['params']['PETITION'],
      "<strong>Petition PETITION:</strong> - hook_mailsystem_mail_alter ['params']['PETITION'] equals expected value -> " . $this->message['params']['PETITION']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][5]['name'] == 'PETITION', "Found PETITION in ['message']['global_merge_vars'][5]['name']");
    $this->assertEqual($this->message['params']['PETITION'], $mandrill_params_post['message']['global_merge_vars'][5]['content'],
      "<strong>Petition global_merge_var PETITION:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][5]['content'] equals expected value -> " . $this->message['params']['PETITION']);
    
    $this->assertEqual($this->message['params']['PETITIONURL'], $mandrill_params_post['params']['PETITIONURL'],
      "<strong>Petition PETITIONURL:</strong> - hook_mailsystem_mail_alter ['params']['PETITIONURL'] equals expected value -> " . $this->message['params']['PETITIONURL']);
    $this->assertTrue($mandrill_params_post['message']['global_merge_vars'][6]['name'] == 'PETITIONURL', "Found PETITIONURL in ['message']['global_merge_vars'][6]['name']");
    $this->assertEqual($this->message['params']['PETITIONURL'], $mandrill_params_post['message']['global_merge_vars'][6]['content'],
      "<strong>Petition global_merge_var PETITIONURL:</strong> - hook_mailsystem_mail_alter ['message']['global_merge_vars'][6]['content'] equals expected value -> " . $this->message['params']['PETITIONURL']);
     
  } 
  
  /*
   * Unit tests for petition data sent to the dosomething_mandrill_mandrill_mail_alter() function
   */
  public function subtestMandrillDispatchForPetition($dispatch_results) {
    
            $bla = TRUE;
        if ($bla) {
          $bla = TRUE;
        }
  
    // Response from Mandrill API
    $this->assertTrue($dispatch_results['result'] == TRUE, "Transactional message sent successfully to key: " . $dispatch_results['key']);
    
    // params
    $this->assertEqual($dispatch_results['params']['FNAME'], $this->message['FNAME'],
      "<strong>Petition Dispatch FNAME:</strong> -  equals expected value -> " . $this->message['FNAME']);
    $this->assertEqual($dispatch_results['params']['LNAME'], $this->message['LNAME'],
      "<strong>Petition Dispatch LNAME:</strong> -  equals expected value -> " . $this->message['LNAME']);
    $this->assertEqual($dispatch_results['params']['PETITION'], $this->message['TITLE'],
      "<strong>Petition Dispatch PETITION:</strong> -  equals expected value -> " . $this->message['TITLE']);
    $this->assertEqual($dispatch_results['params']['PETITIONURL'], 'http://www.dosomething.org' . $this->message['URL'],
      "<strong>Petition Dispatch PETITIONURL:</strong> -  equals expected value -> " . $this->message['URL']);
    
    // tags
    $this->assertTrue($dispatch_results['tags'][0] == 'petition', "Tag 'petition' assigned successfully.");
    $this->assertTrue($dispatch_results['tags'][1] == $this->message['TITLE'], "Tag TITLE assigned successfully as: " . $dispatch_results['tags'][1]);
     
  } 

}