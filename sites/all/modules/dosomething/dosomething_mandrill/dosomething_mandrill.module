<?php
/**
 * @file
 * A collection of functionality related to website transactional email messages using the Mandrill service.
 *
 */

/**
 * Impliments hook_webform_submission_insert($node, $submission)
 *
 * Respond to webform submission from the content type: Campaign Contact Form
 * /admin/structure/types/manage/campaign_contact_form to trigger a Mandrill
 * transaction (template based) email message.
 *
 * Use the "mandrill_key" field value to determine what MailSystem
 * (/admin/config/system/mailsystem) key to use when sending the message via
 * a Mandrill Template entry: /admin/config/services/mandrill/templates
 * 
 * We're currently using Webform 7.x-3.18
 */

function dosomething_mandrill_webform_submission_insert($node, $submission) {
  
  // Only respond to Campaign Report Back submissions
  if ($node->type == 'campaign_report_back') {
    
    // Must be 'dosomething_mandrill' to trigger ManndrillMailSystem use based on entries in the MailSystem module
    // /admin/config/system/mailsystem
    $module = 'dosomething_mandrill';
    
    // Lookup the key value based on the webform submission
    // Load field_mandrill_key values on node (could be more than one in the future)
    // field_get_items($entity_type, $entity, $field_name, $langcode = NULL)
    $keys = field_get_items('node', $node, 'field_mandrill_key');
    
    // Get the specific value of the filed - need to look at display formatter (defaults to "default")
    // field_view_value($entity_type, $entity, $field_name, $item, $display = array(), $langcode = NULL)
    $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
    $key = $key['#markup'];
    
    // Lookup the email address to send the message to based on the webform submission or user account
    // Register the $global $user object
    global $user;
        
    // Check for anonymous user
    if ($user->uid == 0) {
      
      // Check for email field in form submission
      
    }
    else {
      $to = $user->mail;
    }

    
    $language = language_default();
    
    // Empty as current campaign signup messages do not contain merge_vars.
    // @todo: Add support specific list of merge_var values, *|FNAME|* for example
    $params = array();
    
    // @todo: Adjust "from" email address to reflect the source campaign. Currently I don't think
    // users responding to these messages results in anyone reading the message.
    $from = NULL;
    
    // Send transactional message
    // drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
    $message = drupal_mail('dosomething_mandrill', $key, $to, $language, $params, $from, TRUE);
    
    /**
     * $send: If TRUE, drupal_mail() will call drupal_mail_system()->mail() to deliver the message, and store
     * the result in $message['result']. Modules implementing hook_mail_alter() may cancel sending by setting
     * $message['send'] to FALSE.
     */
    
    // Log results if there was an error sending
    if ($message['result'] == FALSE) {
      
      // watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)
      watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to via %source (%nid).',
                array('%to' => $to, '%source' => $node->type, '%nid' => $node->nid), WATCHDOG_ERROR);
      
    }
    
  }
  
}

/**
 * Implements hook_mail().
 *
 * Example use:
 *
 * drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
 * $result = drupal_mail('dosomething_mandrill', 'dosomething-plain', $to, $language, $params,  $from, TRUE);
 *
 * $params: Contans merge var values for the individual transactional message or global merge var values when sending to more than one email address,
 *   for example to club members or a group in a school where the message can be customized on both the individual email address as weell as values
 *   specific to the group / batch of messages.
 *
 * if (isset($result['result']) && $result['result'] == 'true') {
 *   drupal_set_message(t('Mandrill test email sent from %from to %to.', array('%from' => $result['from'], '%to' => $result['to'])), 'status');
 * }
 */
function dosomething_mandrill_mail($key, &$message, $params) {
    
  switch ($key) {
    
    case 'dsplain':
    case 'dssignup':
    case 'dsrp':
    case 'dsreg':      
        
      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      
      // Consider populating the language 
      // global $language;

      break;

    default:      

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
    
  }

}

/*
 * Impliments hook_mail_alter()
 *
 * From Mandill module readme.txt
 * 
 * &$message: An array containing the message data. Keys in this array include:
 *
 * 'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
 * 'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the PHP e-mail validation filter.
 * 'from': The address the message will be marked as being from, which is either a custom address or the site-wide default email address.
 * 'subject': Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.
 * 'body': An array of strings containing the message text. The message body is created by concatenating the individual array strings into a
 *    single text string using "\n\n" as a separator.
 * 'headers': Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.
 * 'params': An array of optional parameters supplied by the caller of drupal_mail() that is used to build the message before hook_mail_alter() is invoked.
 * 'language': The language object used to build the message before hook_mail_alter() is invoked.
 * 'send': Set to FALSE to abort sending this email message.
 *
 * If you would like to use additional template (or other) Mandrill API variables not implemented in this module, set them in hook_mail_alter under:
 *
 * $params['mandrill']. Have a look at mandrill.mail.inc to learn more.
 * (Search for "mandrill parameters".)
 *
 *"message": {
 *  "merge_vars": [
 *    {
 *      "rcpt": "recipient.email@example.com",
 *        "vars": [
 *          {
 *            "name": "mergeVar1",
 *            "content": "mergeVar1 content"
 *          }
 *        ]
 *    }
 *  ],
 *}
 *
 * http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7
 *
 */

function dosomething_mandrill_mail_alter(&$mandrill_params, $message) {
  
  $global_merge_vars = array();
  $global_merge_vars[] = array(
    'name' => 'subject',
    'content' => $message['subject'],
  );
  $global_merge_vars[] = array(
    'name' => 'from',
    'content' => $message['from'],
  );
  $global_merge_vars[] = array(
    'name' => 'domain',
    'content' => $GLOBALS['base_url'] . $GLOBALS['base_path'],
  );

  if (!empty($message['params'])) {
    foreach ($message['params'] as $name => $content) {
      if(is_string($content)) {
        $global_merge_vars[] = array(
          'name' => $name,
          'content' => $content,
        );
      }
    }
  }

  $merge_vars = array();
  if (!empty($mandrill_params['message']['to'])) {
    foreach ($mandrill_params['message']['to'] as $i => $rcpt) {
      $vars = array();
      $vars[] = array(
        'name' => 'to',
        'content' => $rcpt['email'],
      );
      $merge_vars[] = array(
        'rcpt' => $rcpt['email'],
        'vars' => $vars,
      );
    }
  }  

  $mandrill_params['message']['global_merge_vars'] = $global_merge_vars;

  if (!empty($merge_vars)) {
    $mandrill_params['message']['merge_vars'] = $merge_vars;
  }
  

}