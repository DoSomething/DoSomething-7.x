<?php
/**
 * @file
 * A collection of functionality related to website transactional email messages using the Mandrill service.
 *
 * Mandrill API reference for send-template:
 * https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
 *
 * Follow the structure outlined by the send-template method when sending "dispatch"es.
 */

define('WEEK', 604800); // 60*60*24*7

/*
 * Implements hook_theme()
 */
function dosomething_mandrill_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_mandrill_campaign_listing' => array(
      'variables' => array('campaigns' => NULL),
      'template' => 'templates/dosomething-mandrill-campaign-listing',
    ),
  );
}

/**
 * Implements hook_webform_submission_insert()
 *
 * Respond to webform submission from the content type: Campaign Contact Form
 * /admin/structure/types/manage/campaign_contact_form to trigger a Mandrill
 * transaction (template based) email message.
 *
 * Use the "mandrill_key" field value to determine what MailSystem
 * (/admin/config/system/mailsystem) key to use when sending the message via
 * a Mandrill Template entry: /admin/config/services/mandrill/templates
 * 
 */
function dosomething_mandrill_webform_submission_insert($node, $submission) {

  // Campaign Report Back submissions
  if ($node->type == 'campaign_report_back') {

    // Must be 'dosomething_mandrill' to trigger ManndrillMailSystem use based on entries in the MailSystem module
    // /admin/config/system/mailsystem
    $module = 'dosomething_mandrill';

    // Lookup the key value based on the webform submission
    // Load field_mandrill_key values on node (could be more than one in the future)
    // field_get_items($entity_type, $entity, $field_name, $langcode = NULL)
    $keys = field_get_items('node', $node, 'field_mandrill_key');

    // Skip if field_mandrill_key not defined
    if ($keys != FALSE) {

      // Collect specific mandrill key value
      // Get the specific value of the filed - need to look at display formatter (defaults to "default")
      // field_view_value($entity_type, $entity, $field_name, $item, $display = array(), $langcode = NULL)
      $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
      $key = $key['#markup'];

      // Lookup the email address to send the message to based on the webform submission or user account
      // Register the $global $user object
      global $user;

      // Check for authenticated user making a report back, anonymous submissions
      // are not allowed
      if ($user->uid != 0) {
        
        $to = $user->mail;
        // merge var support for user first name
        $profile = profile2_load_by_user($user, 'main');
        $message['FNAME'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];

        // User the site default, perhaps someday we'll deal in other languages other than
        $language = language_default();

        // @todo: Adjust "from" email address to reflect the source campaign. Currently I don't think
        // users responding to these messages result in anyone reading the message.
        $from = NULL;

        // Check for missing Email, ex: mobile submission / user
        if (valid_email_address($to)) {
          
          $message_status = dosomething_mandrill_dispatch($to, $key, $message);

          // Log results
          if ($message_status['result'] == FALSE) {
            watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to via %source (%nid).',
              array('%to' => $to, '%source' => $node->type, '%nid' => $node->nid), WATCHDOG_ERROR);
          }
          
        }
        
      }

    }
    else {

      // flag that campaign_report_back or campaign_contact_form does not have a mandrill_key setting
      watchdog('dosomething_mandrill', 'Mandrill transactional message for campaign_report_back or campaign_contact_form
                via %source (%nid) not sent as key was undefined in node.',
                array('%source' => $node->type, '%nid' => $node->nid), WATCHDOG_WARNING);

    }

  }

}

/**
 * dosomething_mandrill_dispatch
 *
 * NOTE: See http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/email_example/email_example.module
 * for fully functional example.
 *
 * Triggers the sending of a Mandrill transactional email message using a target Mandrill template.
 * If a specific template is not provided then default to a general DoSomething themed template
 *
 * @param string|array $to
 *   Email address(es) to send to (required)
 *
 * @param string $key = 'dsplain'
 *   The mail system key value as defined in /admin/config/system/mailsystem.
 *   The key is assigned to a Mandrill template in the Mandrill Template module:
 *   /admin/config/services/mandrill/templates The key setting determines what
 *   mail system and Mandrill template to use when sending a message.
 * 
 * @param array $message
 *   Custom message content to be merged into the Mandrill template. The values can
 *   be any item listed structured in the Mandrill API for send-template.
 *
 *   Variables within the custom message text or within the template that will be
 *   dynamically replace with custom content specific to each message. Variables
 *   are denoted in the Mandrill template with *|<some name>|*
 *
 * @param boolean $test_flag
 *   Enable replacement of gather data via the database with test data. This flag is
 *   used in development to ensure the dispatch functionality is working without
 *   using actual member account info.
 *
 * @return array $message_status
 *   Response from Mandrill API
 */
function dosomething_mandrill_dispatch($to, $key = 'dsplain', $message = NULL, $test_flag = FALSE) {

  $language = language_default();
  $from = NULL;

  // Replace with test $message and $to values
  if ($test_flag) {
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.test_data');
    list($message, $to) = dosomething_mandrill_test_data($key, $test_flag);
  }

  $message_status = drupal_mail('dosomething_mandrill', $key, $to, $language, $message, $from, TRUE);

  // Log results
	is_array($to) ? $to = print_r($to, TRUE) : $to;
  if ($message_status['result'] == FALSE) {
    watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to using the Mandrill %key.',
              array('%to' => $to, '%key' => $key), WATCHDOG_ERROR);
  }
	else {  // log sent message
		watchdog('dosomething_mandrill', 'To: %to - Key: %key.',
              array('%to' => $to, '%key' => $key), WATCHDOG_INFO);
	}
  
  return $message_status;

}

/**
 * Implements hook_mail().
 *
 * @param string $key
 *   An identifier of the mail.
 *
 * @param array &$message
 * An array to be filled in. Elements in this array include:
 *
 *   id:      An ID to identify the mail sent. Look at module source code or
 *            drupal_mail() for possible id values.
 *            
 *   to:      The address or addresses the message will be sent to. The
 *            formatting of this string will be validated with the PHP e-mail
 *            validation filter.
 *            
 *   subject: Subject of the e-mail to be sent. This must not contain any
 *            newline characters, or the mail may not be sent properly.
 *            drupal_mail() sets this to an empty string when the hook is
 *            invoked.
 *            
 *   body:    An array of lines containing the message to be sent. Drupal will
 *            format the correct line endings for you. drupal_mail() sets this
 *            to an empty array when the hook is invoked.
 *            
 *   from:    The address the message will be marked as being from, which is set
 *            by drupal_mail() to either a custom address or the site-wide
 *            default email address when the hook is invoked.
 *            
 *   headers: Associative array containing mail headers, such as From, Sender,
 *            MIME-Version, Content-Type, etc. drupal_mail() pre-fills several
 *            headers in this array.
 *
 * @param array $params
 * An array of parameters supplied by the caller of drupal_mail().
 *
 *
 * Example use:
 *
 * drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
 * $result = drupal_mail('dosomething_mandrill', 'dosomething-plain', $to, $language, $params,  $from, TRUE);
 */
function dosomething_mandrill_mail($key, &$message, $params) {
  
  // Common merge tags
  dosomething_mandrill_mail_common($message, $params);

  switch ($key) {

    case 'petition':      
      dosomething_mandrill_mail_petition($message, $params);
      break;

    case 'password_reset':
      dosomething_mandrill_mail_password_reset($message, $params);
      break;

    case 'dsdrip-momm13-1':
    case 'dsdrip-momm13-2':
    case 'dsdrip-momm13-3':
    case 'dsdrip-momm13-4':
    case 'dsdrip-momm13-5':
      dosomething_mandrill_drip_momm($message, $params);
      break;

    case 'dsplain':
    case 'dssignup':
    case 'dsrp':
    case 'dsreg':
      dosomething_mandrill_mail_plain($message, $params);
      break;

    default:
      dosomething_mandrill_mail_plain($message, $params);

  }

}

/*
 * Common logic for hook_mail()
 * See dosomething_mandrill_mail()
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_mail_common(&$message, &$params) {
  
  // Default values
  $message['from_name'] = 'DoSomething.org';
  
  // *|FNAME|*
  dosomething_mandrill_mail_firstname($message, $params);
	
	// *|CAMPAIGNS|*
  $message['params']['CAMPAIGNS'] = dosomething_mandrill_campaign_listing();
  
}

/*
 * Petition for hook_mail()
 * See dosomething_mandrill_mail()
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_mail_petition(&$message, &$params) {

  $message['from_name'] = t('Ben at DoSomething.org');
  $message['subject'] = t('Thanks for signing the petition: ') . $params['TITLE'];

  // Possible tag values
  $tags = array('petition', $params['TITLE']);
  $message['tags'] = dosomething_mandrill_mail_tag_assignment($tags);

  $message['params']['TITLE'] = $params['TITLE'];
  $message['params']['URL'] = 'http://www.dosomething.org' . $params['URL'];

}

/*
 * Password Reset for hook_mail()
 * See dosomething_mandrill_mail()
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_mail_password_reset(&$message, &$params) {
  
  $message['from'] = 'dosomething@dosomething.org';
  $message['subject'] = 'DoSomething.org - Password Reset';
  $message['body'] = variable_get('user_mail_password_reset_notify', NULL);
  $message['params']['PASS'] = $params['URL'];
  
}

/*
 * Plain / default values for hook_mail()
 * See dosomething_mandrill_mail()
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_mail_plain(&$message, &$params) {
  
  $message['from'] = 'dosomething@dosomething.org';
  
  // Subject or body content supplied, set message to pass on to Mandrill API
  // otherwise leave unset
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'] = $params['body'];
  }
  
}

/*
 * Wrapper for first name for FNAME
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_mail_firstname(&$message, &$params) {

	if (isset($params['FNAME'])) {
		$fname = $params['FNAME'];
	}
	else {
		$fname = NULL;
	}

  // Common merge tag used in most Mandrill templates
  $message['params']['FNAME'] = dosomething_mandrill_get_clean_first_name($fname);

}

/*
 * Core first name functionality
 *
 * Used to assign fname value that doesn't use the ($message, $params) structure
 * of dosomething_mandrill_mail_firstname()
 *
 * @param string $fname
 *   The initial fname value
 *
 * @return string $fname
 *   The resulting first name value
 */
function dosomething_mandrill_get_clean_first_name($fname) {

  if (!empty($fname)) {
    // Deal with multi part names, ex: "Emma Jane" or "Emma-Jane"
    $fname = preg_replace_callback('#((?<=^|\-|\s)[a-z])#i', function($matches) {
      return strtoupper($matches[1]);
    }, strtolower($fname));
  }
  else {
    $fname = 'Doer';
  }

  return $fname;

}

/*
 * Build tag values for assignment to messages. Tags are used for segmentation
 * in MailChimp on mass mailouts.
 *
 * @param array $tags
 *   An array of all the tags to be assigned to a message. The tag names will be
 *   formatted to the limitations outlined in the Mandrill API.
 *
 *   Tags should be 50 characters or less. Any tags starting with an underscore
 *   are reserved for internal use and will cause errors.
 */
function dosomething_mandrill_mail_tag_assignment($tags) {
  
  $tag_assignments = array();
  
  foreach ($tags as $tag) {
  
    // Tag value must not start with "_". Any tags starting with an underscore are
    // reserved for internal Mandrill use and will cause errors in API.
    if ($tag[0] == '_') {
      $tag[0] = '-';
    }
    
    // Limit tag length to 50 characters based on API tag length requirement
    $tag_assignments[] = substr($tag, 0, 50);
    
  }

  return $tag_assignments;

}

/*
 * Implements hook_<mailsystem>_mail_alter()
 *
 * @param $mandrill_params
 *  An array that maps to the Mandrill API 
 *
 * @param $message
 * From Mandrill module readme.txt. An array containing the message data. Keys in this array include:
 *
 * 'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
 * 'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the PHP e-mail validation filter.
 * 'from': The address the message will be marked as being from, which is either a custom address or the site-wide default email address.
 * 'subject': Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.
 * 'body': An array of strings containing the message text. The message body is created by concatenating the individual array strings into a
 *    single text string using "\n\n" as a separator.
 * 'headers': Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.
 * 'params': An array of optional parameters supplied by the caller of drupal_mail() that is used to build the message before hook_mail_alter() is invoked.
 * 'language': The language object used to build the message before hook_mail_alter() is invoked.
 * 'send': Set to FALSE to abort sending this email message.
 *
 * If you would like to use additional template (or other) Mandrill API variables not implemented in this module, set them in hook_mail_alter under:
 *
 * $params['mandrill']. Have a look at mandrill.mail.inc to learn more.
 * (Search for "$mandrill_params".)
 *
 * http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7
 *
 */
function dosomething_mandrill_mandrill_mail_alter(&$mandrill_params, $message) {
  
  $merge_vars = array();
  $global_merge_vars = array();
  
  // Pass parameters passed via dosomething_mandrill_dispach call
  $mandrill_params['params'] = $message['params'];

  $global_merge_vars = array();
  if ((isset($message['subject']) && $message['subject'] != '') || (isset($mandrill_params['subject']) && $mandrill_params['subject'] != '')) {
    $global_merge_vars[] = array(
      'name' => 'subject',
      'content' => isset($message['subject']) ? $message['subject'] : $mandrill_params['subject'],
    );
  }
  if (isset($message['from']) && ($message['from'] != '' || $mandrill_params['from'] != '')) {
    $global_merge_vars[] = array(
      'name' => 'from',
      'content' => isset($message['from']) ? $message['from'] : $mandrill_params['from'],
    );
  }
  
  $global_merge_vars[] = array(
    'name' => 'domain',
    'content' => $GLOBALS['base_url'] . $GLOBALS['base_path'],
  );

  if (!empty($message['params']['message']['global_merge_vars'])) {
    foreach($message['params']['message']['global_merge_vars'] as $content) {
      $global_merge_vars[] = array(
        'name' => $content['name'],
        'content' => $content['content'],
      );
    }
  }

  if(!empty($mandrill_params['params'])) {
    foreach($mandrill_params['params'] as $name => $content) {
      if(is_string($content)) {
        $global_merge_vars[] = array(
          'name' => $name,
          'content' => $content,
        );
      }
    }
  }

	// Format "to" values to meet Mandrill API specs
	dosomething_mandrill_mail_alter_to($mandrill_params, $message);

	// Assign "from_name"
	dosomething_mandrill_mail_alter_from_name($mandrill_params, $message);

  // Assign "tags"
	dosomething_mandrill_mail_alter_tags($mandrill_params, $message);

  if (!empty($mandrill_params['params']['message']['merge_vars'])) {
    $merge_vars = $mandrill_params['params']['message']['merge_vars'];
  }
  
  // Combine all merge_var values - these values are used to send multiple messages
  // with customizations to the Mandrill template based on the merge_var values and
  // the matching *|TAGS|*  
  $mandrill_params['message']['merge_vars'] = $merge_vars;
  $mandrill_params['message']['global_merge_vars'] = $global_merge_vars;

}

/*
 * Construct to values for hook_mail_alter()
 *
 * @param array $mandrill_params
 *   Values to be passed on to the mail system and ultimately the Mandrill API.
 *   The array structure must follow the Mandrill API for send-template
 *
 * @param array $message
 *   Values passed from hook_mail() to help construct $mandrill_params
 *
 */
function dosomething_mandrill_mail_alter_to(&$mandrill_params, &$message) {

  if (gettype($message['to']) == 'string') {
    $target_email = $message['to'];
    $mandrill_params['message']['to'] = array(
      0 => array(
        'email' => $target_email,
        'name' => dosomething_mandrill_get_clean_first_name($message['params']['FNAME']),
        'type' => 'to',
      )
    );
  }
  elseif (is_array($message['to'])) { // $message['to'] supplied as array.

		// Complete formatting to Mandrill API specs if single entry
		if (count($message['to']) == 1) {
			$mandrill_params['message']['to'] = array(
				0 => array(
					'email' => $message['to'][0]['email'],
					'name' => dosomething_mandrill_get_clean_first_name($message['params']['FNAME']),
					'type' => 'to',
				)
			);
		}
		else {
			// Pass everything on as is when more than one entry. Typically created
			// by dosomething_mandrill_dispatch_drip()
			$mandrill_params['message']['to'] = $message['to'];
		}
  }

}

/*
 * Construct from_name value for hook_mail_alter()
 *
 * @param array $mandrill_params
 *   Values to be passed on to the mail system and ultimately the Mandrill API.
 *   The array structure must follow the Mandrill API for send-template
 *
 * @param array $message
 *   Values passed from hook_mail() to help construct $mandrill_params
 *
 */
function dosomething_mandrill_mail_alter_from_name(&$mandrill_params, &$message) {

	if (isset($message['from_name'])) {
    $mandrill_params['message']['from_name'] = $message['from_name'];
  }

}

/*
 * Construct tags values for hook_mail_alter()
 *
 * @param array $mandrill_params
 *   Values to be passed on to the mail system and ultimately the Mandrill API.
 *   The array structure must follow the Mandrill API for send-template:
 *
 * @param array $message
 *   Values passed from hook_mail() to help construct $mandrill_params
 */
function dosomething_mandrill_mail_alter_tags(&$mandrill_params, &$message) {

	// Test that both possible tag values are an array as array_merge() will create NULL results otherwise
  if (isset($message['tags']) && is_array($mandrill_params['message']['tags']) && is_array($message['tags'])) {
    $mandrill_params['message']['tags'] = array_merge($mandrill_params['message']['tags'], $message['tags']);
  }
  elseif (isset($message['tags']) && is_array($message['tags'])) {
    $mandrill_params['message']['tags'] = $message['tags'];
  }

}

/*
 * Creates listing of current active campaigns based on current entries in the
 * menu system. Yep, hacky! Perhaps someday there will be an API call to pull
 * this from.
 *
 * @return string
 */
function dosomething_mandrill_campaign_listing() {
  
  // @todo: Should this be cached?
  
  $results = array();
  $campaigns = array();
  
  // Exclude 96240 - Make Art. Save Art., not sure why this is an entry as it's
  // not in the site Campaign navigation output
  $results = db_query("
    SELECT
      link_title,
      link_path
    FROM
      menu_links
    WHERE
      plid = 93591
      AND
      mlid != 96240
      AND
      hidden = 0
      AND
      link_path != 'past-campaigns'
    ORDER BY
      weight              
    ");
  
  foreach ($results as $campaign) {
    $campaigns[] = array(
      'link_title' => $campaign->link_title,
      'link_path' => $campaign->link_path,
    );
  }
  
  return theme('dosomething_mandrill_campaign_listing', array('campaigns' => $campaigns));
  
}

/**** ENTRY POINTS ****/

/*
 * Entry point function to trigger specific Mandrill dispatch related to a user
 * password reset request.
 *
 * @param object $account
 *   The account that has requested the password reset.
 *
 * @return array $message_status
 *   Response from Mandrill API. Used for testing.
 */
function dosomething_mandrill_dispatch_password_reset($account) {
  
  // Lookup account profile details
  $profile = profile2_load_by_user($account, 'main');
  
  // merge var values to match *|URL|* and *|FNAME|* in Mandrill template
  $message['URL'] = user_pass_reset_url($account);
  $message['ACCOUNT'] = $account->name;
  
  // Only set the FNAME key if the account has a first name value. If this key
  // is not passed into the dosomething_mandrill_dispatch() call below
  // dosomething_mandrill_mail_firstname() will handle setting a default
  // FNAME value.
  if (isset($profile->field_user_first_name[LANGUAGE_NONE][0]['value'])) {
    $message['FNAME'] = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
  }
  
  $message_status = dosomething_mandrill_dispatch($account->mail, 'password_reset', $message);
  
  return $message_status;

}

/*
 * Entry point function to trigger sending Mandrill dispatch related to a user
 * subscribing to a campaign.
 *
 * @see dosomething_campaign_signup()
 *
 * @param string $email
 *   The email address used to subscribe / signup.
 *
 * @param object $node
 *   Details of the item the email address holder has subscribed to.
 *
 * @param array $params
 *   A list of Mandrill merge_var values related to the email address
 *
 *   Currently supported: FNAME
 *
 * @return array $dispatch_result
 *   Results returned form Mandrill API reporting on the status of the sent
 *   message(s).
 */
function dosomething_mandrill_dispatch_campaign_signup($email = NULL, $node = NULL, $params = array())  {

	// Check for email value or mobile spoof address
	if (valid_email_address($email)) {

		// Check for valid node object
		if (is_object($node)) {

	    // Check for Mandrill Key value in node
	    $keys = field_get_items('node', $node, 'field_mandrill_key');

	    // Skip if field_mandrill_key(s) not defined, can be more than one
	    if ($keys != FALSE) {

		    $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
		    $key = $key['#markup'];

		    // Prepare passed $params for $message to be sent to dosomething_mandrill_dispatch()
		    if (isset($params['FNAME'])) {
			    $message['FNAME'] = $params['FNAME'];
		    }

				// Send transactional email message via Mandrill
				$dispatch_result = dosomething_mandrill_dispatch($email, $key, $message);

			}
			else {
        watchdog('dosomething_mandrill', 'field_mandrill_key setting in dosomething_mandrill_dispatch_campaign_signup() not found in %title (%nid).',
					array('%title' => $node->title, '%nid' => $node->nid), WATCHDOG_ERROR);
			}

		}
		else {
      watchdog('dosomething_mandrill', '$node value passed to dosomething_mandrill_dispatch_campaign_signup() is not an object.', WATCHDOG_ERROR);
		}

	}

	return $dispatch_result;

}

/**** DRIP ****/

/*
 * Dispatches messages to campaign members. Triggered through cron based
 * tasks (Jenkins).
 *
 * @param string $op
 *  Operation to perform - various types of event to collect users and send
 *  messages.
 *
 * @param int $target_drop
 *  The drop message to send in the message drip series.
 *
 * @param string $target_date
 *  The target date to base the drip query on. Use ISO 8601 (YYYY-MM-DD)
 *  date format.
 *
 * @param boolean $test_flag
 *  A flag used for testing to enable the use of test data rather than live /
 *  real user data gathered form the database for sending Mandrill messages.
 *
 * @return array $dispatch_result
 *   Results returned form Mandrill API reporting on the status of the sent
 *   message(s).
 */
function dosomething_mandrill_dispatch_drip($op, $target_drop = 1, $target_date = NULL, $test_flag = TRUE) {

  $to = array();
  $merge_vars = array();
  $dispatch_result = array();

  // Calculate the target timestamp based on the date
  $target_stamp = dosomething_mandrill_get_targetstamp($target_drop, $target_date);

	// Test for valid timestamp
	if ($target_stamp != -1) {

		switch ($op){

			case 'dsdrip-momm13':

				// Format merge details based on Mandrill API
				list($to, $merge_vars) = dosomething_mandrill_get_drip_dispatch_momm_data($target_stamp);

				// Defined in Mail System entries, one for each drop
				$key = 'dsdrip-momm13-' . $target_drop;

				break;

		}

		// Respond to a list of target email addresses or a test dispatch
		if ((isset($to) && count($to) > 0) || $test_flag === 1) {

			// Send merge details to Mandrill for mass dispatch
			dosomething_mandrill_prep_for_dispatch($to, $merge_vars, $message);
			$dispatch_results = dosomething_mandrill_dispatch($to, $key, $message, $test_flag);

			// Report to Drush results
			if ($dispatch_results['result']) {
				$dispatch_result['send_status'] = 'Success sending ' . $op . ' Mandrill messages.';
			}
			else {
				$dispatch_result['send_status'] = 'Error sending ' . $op . ' Mandrill messages.';
			}
			$dispatch_result['sent'] = $test_flag ? '2 test messages' : count($message['message']['to']);

			// Record the number of messages sent
			// @todo: Add StatHat data logging

		}
		else {
			$dispatch_result['send_status'] = 'No recipients found for operation: ' . $op . ', target date: ' . $target_date . ' and target drop: ' . $target_drop;
			$dispatch_result['sent'] = 0;
		}

	}
	else {
			$dispatch_result['send_status'] = 'Invalid target timestamp generated.';
			$dispatch_result['sent'] = 0;
	}

  return $dispatch_result;
}

/*
 * Format $message to meet Mandrill API
 *
 * dosomething_mandrill_dispatch($to, $key... ) calls as bulk / mass mailouts must
 * have the recipient email address defined in both the $to and $message parameters
 * that follow the structure defined in send-template.
 *
 * Mandrill API reference for send-template:
 * https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
 *
 * @param array $to
 *   List of recipients in email, name format
 *
 * @param array $merge_vars
 *  List of merge vars defined by related email addresses in $to using
 *  rcpt, vars format
 *
 * @param array &$message
 *  Formatted array that follows the Mandrill API structure
 */
function dosomething_mandrill_prep_for_dispatch($to, $merge_vars, &$message) {

	$message = array(
		'message' => array(
	    'to' => $to,
	    'merge_vars' => $merge_vars
		)
	);

}

/*
 * Generate a target timestamp value based on a supplied target date. The "drop"
 * value defines the additional interval value to be removed from the timestamp.
 *
 * @param int $target_drop
 *   The message state / sequence number to send 
 *
 * @param string $target_date
 *   The target date to base the drip query on. Use ISO 8601 (YYYY-MM-DD) date
 *   format.
 *
 * @return int $target_stamp
 *   A flag used for testing to enable the use of test data rather than live /} *   real user data gathered form the database for sending Mandrill messages.
 */
function dosomething_mandrill_get_targetstamp($target_drop = 1, $target_date = NULL) {

  // Assume target_date is current date if not defined
  if ($target_date == NULL) {
    $target_stamp = strtotime('today') - (WEEK * $target_drop);
  }
  else {
    $target_stamp = strtotime($target_date) - (WEEK * $target_drop);
  }

	// Check for valid timestamp results
	// 2147483647: 19 Jan 2038
	if (ctype_digit($target_stamp) && $target_stamp <= 2147483647) {

		// Check for valid timestamp range - pre DS to now
		// 1210614999: 12 May 2008, first DS user
		if (!($target_stamp > 1210614999 && $target_stamp < time())) {
			return -1;
		}

	}
	else {
		return -1;
	}

	return $target_stamp;

}

/*
 * drip for MOMM settings for hook_mail()
 * See dosomething_mandrill_mail()
 *
 * @param array $message
 *   Current state of the message array that will ultimately be sent to the
 *   Mandrill API.
 *
 * @param array $params
 *   Values to be applied to $message
 */
function dosomething_mandrill_drip_momm(&$message, &$params) {

  $message['message']['from_name'] = 'Farah at DoSomething.org';

}

/*
 * Query and process results into array for the MOMM 2013 campaign
 *
 * @param int $target_stamp
 *   The target date rounded to the nearest midnight in timestamp format
 */
function dosomething_mandrill_get_drip_dispatch_momm_data($target_stamp) {
	
	$to = array();
	$merge_vars = array();
	
	$results = db_query("
		SELECT
			u.mail,
			fdfufn.field_user_first_name_value
		FROM
			dosomething_campaign_signups dcs
			LEFT JOIN users u ON u.uid = dcs.uid
			LEFT JOIN profile p ON p.uid = u.uid
			LEFT JOIN field_data_field_user_first_name fdfufn ON fdfufn.entity_id = p.pid
		WHERE
			dcs.nid = 731098
			AND
			(u.mail != ''
			OR
			 LOCATE('@mobile', u.mail) != 0)
			AND
			dcs.timestamp >= :timestamp
			AND
			dcs.timestamp <= :timestamp_end",
			array(
				':timestamp' => $target_stamp,
				':timestamp_end' => $target_stamp + (60*60*24) // One day: 86400
		));
	
	// Convert results to array in format defined by Mandrill API
	foreach($results as $user_details) {

  	// Skip if record missing user email address
	  if ($user_details->mail != NULL) {

		  $to[] = array(
			  'email' => $user_details->mail,
			  'name' => dosomething_mandrill_get_clean_first_name($user_details->field_user_first_name_value),
		  );

		  $merge_vars[] = array(
		    'rcpt' => $user_details->mail,
			  'vars' => array(
				  array(
					  'name' => 'FNAME',
					  'content' => dosomething_mandrill_get_clean_first_name($user_details->field_user_first_name_value),
				  ),
			  ),
		  );
			
		}

	}

	return array($to, $merge_vars);
	
}
