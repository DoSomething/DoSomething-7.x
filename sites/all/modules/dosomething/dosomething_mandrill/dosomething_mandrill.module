<?php
/**
 * @file
 * A collection of functionality related to website transactional email messages using the Mandrill service.
 *
 */

function dosomething_mandrill_menu() {
  
    $items['dosomething_mandrill/cron_test/%'] = array(
    'title' => 'DoSomething Mandrill Cron Test - no target date',
    'description' => 'Test cron dispatches for Mandrill.',
    'page callback' => 'dosomething_mandrill_dispatch_event',
		'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
  
    $items['dosomething_mandrill/cron_test/%/%'] = array(
    'title' => 'DoSomething Mandrill Cron Test',
    'description' => 'Test cron dispatches for Mandrill.',
    'page callback' => 'dosomething_mandrill_dispatch_event',
		'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
  
  return $items;

}

/**
 * Impliments hook_webform_submission_insert($node, $submission)
 *
 * Respond to webform submission from the content type: Campaign Contact Form
 * /admin/structure/types/manage/campaign_contact_form to trigger a Mandrill
 * transaction (template based) email message.
 *
 * Use the "mandrill_key" field value to determine what MailSystem
 * (/admin/config/system/mailsystem) key to use when sending the message via
 * a Mandrill Template entry: /admin/config/services/mandrill/templates
 * 
 */
function dosomething_mandrill_webform_submission_insert($node, $submission) {
  
  // Campaign Report Back submissions
  if ($node->type == 'campaign_report_back') {

    // Must be 'dosomething_mandrill' to trigger ManndrillMailSystem use based on entries in the MailSystem module
    // /admin/config/system/mailsystem
    $module = 'dosomething_mandrill';

    // Lookup the key value based on the webform submission
    // Load field_mandrill_key values on node (could be more than one in the future)
    // field_get_items($entity_type, $entity, $field_name, $langcode = NULL)
    $keys = field_get_items('node', $node, 'field_mandrill_key');

    // Skip if field_mandrill_key not defined
    if ($keys != FALSE) {

      // Collect specific mandrill key value
      // Get the specific value of the filed - need to look at display formatter (defaults to "default")
      // field_view_value($entity_type, $entity, $field_name, $item, $display = array(), $langcode = NULL)
      $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
      $key = $key['#markup'];

      // Lookup the email address to send the message to based on the webform submission or user account
      // Register the $global $user object
      global $user;

      // Check for anonymous user
      if ($user->uid == 0) {
        if (!empty($submission->field_webform_email)) {
          $to = $submission->field_webform_email[LANGUAGE_NONE][0]['email'];
        }
        else {
          $to = '';
        }
      }
      else {
        $to = $user->mail;
      }

      // User the site default, perhaps someday we'll deal in other languages other than
      $language = language_default();

      // Empty as current campaign signup messages do not contain merge_vars.
      // @todo: Add support specific list of merge_var values, *|FNAME|* for example
      $params = array();

      // @todo: Adjust "from" email address to reflect the source campaign. Currently I don't think
      // users responding to these messages result in anyone reading the message.
      $from = NULL;
      
      // Email missing, mobile submission
      if ($to != '') {

        // Send transactional message
        $message = drupal_mail('dosomething_mandrill', $key, $to, $language, $params, $from, TRUE);
        
      }

      /**
       * $send: If TRUE, drupal_mail() will call drupal_mail_system()->mail() to deliver the message, and store
       * the result in $message['result']. Modules implementing hook_mail_alter() may cancel sending by setting
       * $message['send'] to FALSE.
       */

      // Log results
      if ($message['result'] == FALSE) {

        // watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)
        watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to via %source (%nid).',
                  array('%to' => $to, '%source' => $node->type, '%nid' => $node->nid), WATCHDOG_ERROR);

      }

    }
    else {

      // flag that campaign_report_back or campaign_contact_form does not have a mandrill_key setting
      watchdog('dosomething_mandrill', 'Mandrill transactional message for campaign_report_back or campaign_contact_form
                via %source (%nid) not sent as key was undefined in node.',
                array('%source' => $node->type, '%nid' => $node->nid), WATCHDOG_WARNING);

    }

  }

}

/**
 * dosomething_mandrill_dispatch
 *
 * NOTE: See http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/email_example/email_example.module
 * for fully functional example.
 *
 * Triggeres the sending of a Mandrill transactional email message using a target Mandrill template.
 * If a specific template is not provided then default to a general DoSomething themed template
 *
 * $to - send to email address (required)
 *
 * $key = 'dsplain' - The mail system key value as defined in /admin/config/system/mailsystem. The key is assigned
 * to a Mandrill template in the Mandrill Template module: /admin/config/services/mandrill/templates The key setting
 * determines what mail system and Mandrill template to use when sending a message.
 *
 * Note that *|merge vars|* should be within the message body.
 * 
 * $merge_vars = NULL : Variables within the custom message text or within the template that will be dynamically
 * replace with custom content specific to each message. Variables are denoted with *|<some name|*
 * 
 * $user = NULL - The user object, future use to generate custom merge_var values.
 * 
 */
function dosomething_mandrill_dispatch($to, $key='dsplain', $message=NULL, $user=NULL) {

  $language = language_default();
  $from = NULL;

  $message_status = drupal_mail('dosomething_mandrill', $key, $to, $language, $message, $from, TRUE);

  // Log results
  if ($message_status['result'] == FALSE) {
    watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to using the Mandrill %key.',
              array('%to' => $to, '%key' => $key), WATCHDOG_ERROR);
  }

}

/**
 * Implements hook_mail().
 *
 * $key: An identifier of the mail.
 *
 * &$message: An array to be filled in. Elements in this array include:
 *
 *   id:      An ID to identify the mail sent. Look at module source code or
 *            drupal_mail() for possible id values.
 *            
 *   to:      The address or addresses the message will be sent to. The
 *            formatting of this string will be validated with the PHP e-mail
 *            validation filter.
 *            
 *   subject: Subject of the e-mail to be sent. This must not contain any
 *            newline characters, or the mail may not be sent properly.
 *            drupal_mail() sets this to an empty string when the hook is
 *            invoked.
 *            
 *   body:    An array of lines containing the message to be sent. Drupal will
 *            format the correct line endings for you. drupal_mail() sets this
 *            to an empty array when the hook is invoked.
 *            
 *   from:    The address the message will be marked as being from, which is set
 *            by drupal_mail() to either a custom address or the site-wide
 *            default email address when the hook is invoked.
 *            
 *   headers: Associative array containing mail headers, such as From, Sender,
 *            MIME-Version, Content-Type, etc. drupal_mail() pre-fills several
 *            headers in this array.
 *
 * $params: An array of parameters supplied by the caller of drupal_mail().
 *
 *
 * Example use:
 *
 * drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
 * $result = drupal_mail('dosomething_mandrill', 'dosomething-plain', $to, $language, $params,  $from, TRUE);
 *
 * $params: Contans merge var values for the individual transactional message or global merge var values when sending to more than one email address,
 *   for example to club members or a group in a school where the message can be customized on both the individual email address as weell as values
 *   specific to the group / batch of messages.
 */
function dosomething_mandrill_mail($key, &$message, $params) {

  switch ($key) {

    case 'petition':      

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = t('Thanks for signing the petition: ') . $params['TITLE'];

      // Tag message and related email address for segmentation use in MailChimp
      // for future mass mailouts related to the petition. Tag value must not
      // start with "_". Any tags starting with an underscore are reserved for
      // internal Mandrill use and will cause errors in API.
      ($params['TITLE'][0] != '_') ?: $params['TITLE'][0] = '-';
      $petition_tag = substr($params['TITLE'], 0, 50);

      $message['tags'] = array('petition', $petition_tag);

      // Rename merge vars to match Mandrill template
      $params['PETITION'] = $params['TITLE'];
      $params['PETITIONURL'] = 'http://www.dosomething.org' . $params['URL'];
      $message['params']['PETITION'] = $params['TITLE'];
      $message['params']['PETITIONURL'] = 'http://www.dosomething.org' . $params['URL'];

      unset($params['TITLE']);
      unset($params['URL']);
      unset($message['params']['TITLE']);
      unset($message['params']['URL']);

      break;
    
    case 'password_reset':

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = 'DoSomething.org - Password Reset';
      $message['body'] = variable_get('user_mail_password_reset_notify', NULL);

      $message['params']['FNAME'] = $params['FNAME'];
      $message['params']['PASS'] = $params['URL'];

      break;

    case 'dsplain':
    case 'dssignup':
    case 'dsrp':
    case 'dsreg':      

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];

      break;

    default:      

      $message['from'] = 'dosomething@dosomething.org';

      $message['subject'] = isset($params['subject']) ? $params['subject'] : '';
      $message['body'] = isset($params['body']) ? $params['body'] : '';
    
  }

}

/*
 * Impliments hook_mail_alter()
 *
 * From Mandill module readme.txt
 * 
 * &$message: An array containing the message data. Keys in this array include:
 *
 * 'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
 * 'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the PHP e-mail validation filter.
 * 'from': The address the message will be marked as being from, which is either a custom address or the site-wide default email address.
 * 'subject': Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.
 * 'body': An array of strings containing the message text. The message body is created by concatenating the individual array strings into a
 *    single text string using "\n\n" as a separator.
 * 'headers': Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.
 * 'params': An array of optional parameters supplied by the caller of drupal_mail() that is used to build the message before hook_mail_alter() is invoked.
 * 'language': The language object used to build the message before hook_mail_alter() is invoked.
 * 'send': Set to FALSE to abort sending this email message.
 *
 * If you would like to use additional template (or other) Mandrill API variables not implemented in this module, set them in hook_mail_alter under:
 *
 * $params['mandrill']. Have a look at mandrill.mail.inc to learn more.
 * (Search for "$mandrill_params".)
 *
 * http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7
 *
 */
function dosomething_mandrill_mandrill_mail_alter(&$mandrill_params, $message) {
  

  $mandrill_params['message']['tags'] = array_merge($mandrill_params['message']['tags'], $message['tags']);
  
  // Pass parameters passed via dosomething_mandrill_dispach call
  $mandrill_params['params'] = $message['params'];

  $global_merge_vars = array();
  $global_merge_vars[] = array(
    'name' => 'subject',
    'content' => isset($message['subject']) ? $message['subject'] : $mandrill_params['subject'],
  );
  $global_merge_vars[] = array(
    'name' => 'from',
    'content' => isset($message['from']) ? $message['from'] : $mandrill_params['from'],
  );
  $global_merge_vars[] = array(
    'name' => 'domain',
    'content' => $GLOBALS['base_url'] . $GLOBALS['base_path'],
  );
  
  foreach($message['params']['message']['global_merge_vars'] as $content) {
    $global_merge_vars[] = array(
      'name' => $content['name'],
      'content' => $content['content'],
    );
  }

  if(!empty($mandrill_params['params'])) {
    foreach($mandrill_params['params'] as $name => $content) {
      if(is_string($content)) {
        $global_merge_vars[] = array(
          'name' => $name,
          'content' => $content,
        );
      }
    }
  }

  // Preserve passed in merge_vars
  if ($mandrill_params['message']['merge_vars']) {
    $merge_vars = $mandrill_params['message']['merge_vars'];
  }
  else {
    $merge_vars = array();
  }

  if(!empty($mandrill_params['message']['to'])) {
    foreach($mandrill_params['message']['to'] as $i => $rcpt) {
      $vars = array();
      $vars[] = array(
        'name' => $rcpt['merge_var_name'],
        'content' => $rcpt['merge_var_content'],
      );
      $merge_vars[] = array(
        'rcpt' => $rcpt['email'],
        'vars' => $vars,
      );
    }
  }

  if(!empty($merge_vars)) {
    $mandrill_params['message']['merge_vars'] = $merge_vars;
  }
  
  // Combine all merge_var values - these values are used to send multipul messages
  // with customizations to the Mandrill templace based on the merge_var values and
  // the matching *|TAGS|*
  $mandrill_params['message']['merge_vars'] = array_merge($content['merge_vars'], (array) $mandrill_params['message']['merge_vars']);
  $mandrill_params['message']['global_merge_vars'] = $global_merge_vars;
  $mandrill_params['message']['to'] = array_merge($content['to'], (array) $mandrill_params['message']['to']);
  
}

/*
 * Dispatches messages to users for events. triggered through cron based
 * tasks (Jenkins).
 * 
 * @param string $op
 *  Operation to perform - various types of event to collect users and send
 *  messages.
 *
  * @param string $target_date
 *  The target date in international format - YYYY-MM-DD
 *
 * @return boolean
 */
function dosomething_mandrill_dispatch_event($op, $target_date = NULL) {
  
  $to = array();
  $merge_vars = array();
  $global_merge_vars = array();
  
  switch ($op) {
    
    case 'dsevent-birthday':
      
      // SELECT users with a specific birthday. If start_date is not defined
      // assume it's the current date. field_data_field_user_birthday is in datetime
      // format YYYY-MM-DD
      if ($target_date == NULL) {
        $target_date = date('m-d');
      }
      else {
        $target_date = date('m-d', strtotime($target_date));
      }

      $query = db_select(users, 'u');
      
      $query->join('profile', 'p', 'p.uid = u.uid');
      $query->join('field_data_field_user_first_name', 'fdfufn', 'fdfufn.entity_id = p.pid');
      $query->join('field_data_field_user_birthday', 'fdfub', 'fdfub.entity_id = p.pid');
      
      $query->fields('u', array('uid', 'mail', 'name'))
            ->fields('fdfufn', array('field_user_first_name_value'))
            ->fields('fdfub', array('field_user_birthday_value'))

            ->condition('fdfub.field_user_birthday_value', '%-' . db_like($target_date) . '%', 'LIKE');
            
      $result = $query->execute()
                      ->fetchAll();
      
      foreach($result as $user) {

        // Skip if missing user email address
        if ($user->mail != NULL) {

          $to[] = array(
            'email' => $user->mail,
            'name' => $user->name == NULL ? 'DoSomethng Doer' : $user->name,
          );

          $merge_vars[] = array(
            'rcpt' => $user->mail,
            'vars' => array(
              array(
                'name' => 'AGE',
                'content' => floor((time() - strtotime($user->field_user_birthday_value)) / (60*60*24*365)),
              ),
              array(
                'name' => 'FNAME',
                'content' => $user->field_user_first_name_value,
              )
            ),
          );
          
        }
        
      }
  
      $key = 'dsevent-birthday';
      
      break;
    
    case 'dsevent-reg-90':
      
      // SELECT users who registered on the site 90 days from target_date.
      // Assume target_date is current date if not defined
      if ($target_date == NULL) {
        $target_date = date('Y-m-d', time() - 60*60*24*90);
      }
      else {
        $target_date = date('Y-m-d', strtotime($target_date) - 60*60*24*90);
      }
      
      $query = db_select(users, 'u');
      
      $query->join('profile', 'p', 'p.uid = u.uid');
      $query->join('field_data_field_user_first_name', 'fdfufn', 'fdfufn.entity_id = p.pid');
      
      $query->fields('u', array('uid', 'created', 'mail', 'name'))
            ->fields('fdfufn', array('field_user_first_name_value'))

            ->condition('u.created', '%-' . db_like($target_date) . '%', 'LIKE');
            
      $result = $query->execute()
                      ->fetchAll();
            
      foreach($result as $user) {
        
        // Skip if missing user email address
        if ($user->mail != NULL) {
          
          $to[] = array(
            'email' => $user->mail,
            'name' => $user->name == NULL ? 'DoSomethng Doer' : $user->name,
          );

          $merge_vars[] = array(
            'rcpt' => $user->mail,
            'vars' => array(
              array(
                'name' => 'FNAME',
                'content' => $user->field_user_first_name_value == NULL ? 'Shawty' : $user->field_user_first_name_value,
              ),
            ),
          );
          
        }

      }
      
      $global_merge_vars[] = array(
        'name' => 'CAMPAIGNS',
        'content' => dosomething_mandrill_campaign_listing(),
      );

      $key = 'dsevent-reg-90';
      
      break;
      
    case 'dsevent-reg-365':

      // SELECT users who registered on the site 365 days (and each additional year) from target_date.
      // Assume target_date is current date if not defined
      
      if ($target_date == NULL) {
        $start_stamp = time() - 60*60*24*365;
      }
      else {
        $start_stamp = strtotime($target_date) - 60*60*24*365;
      }
      
      // Oldest entry: 1210614999 - query signups for the same day each year
      for ($year_stamp = $start_stamp; $year_stamp >= 1210614999; $year_stamp = $year_stamp - (60*60*24*365)) {
      
        $query = db_select(users, 'u');
        
        $query->join('profile', 'p', 'p.uid = u.uid');
        $query->join('field_data_field_user_first_name', 'fdfufn', 'fdfufn.entity_id = p.pid');
        
        $query->fields('u', array('uid', 'created', 'mail', 'name'))
              ->fields('fdfufn', array('field_user_first_name_value'))
  
              ->condition('u.created', $year_stamp - 43200, '>=')
              ->condition('u.created', $year_stamp + 43200, '<=');
              
        $result = $query->execute()
                        ->fetchAll();
                        
        // Calculate suffex of the membership year
        $created_year = floor((time() - $year_stamp) / (60*60*24*365)); // 31536000
        $membership_year = $created_year .
          date('S',
            mktime(1,1,1,1, (
                  (($created_year >= 10) +
                   ($created_year >= 20) +
                   ($created_year == 0))
                  * 10 + $created_year % 10)
            )
          );

        foreach($result as $user) {
          
          // Skip if missing user email address
          if ($user->mail != NULL) {
            
            $to[] = array(
              'email' => $user->mail,
              'name' => $user->name == NULL ? 'DoSomethng Doer' : $user->name,
            );
  
            $merge_vars[] = array(
              'rcpt' => $user->mail,
              'vars' => array(
                array(
                  'name' => 'FNAME',
                  'content' => $user->field_user_first_name_value,
                ),
                array(
                  'name' => 'MEMBERSHIP_YEAR',
                  'content' => $membership_year,
                ),
              ),
            );
            
          }
          
        }
        
      }
      
      $global_merge_vars[] = array(
        'name' => 'CAMPAIGNS',
        'content' => dosomething_mandrill_campaign_listing(),
      );
      
      $key = 'dsevent-reg-365';
      
      break;
  }
  
  
  // Format merge details based on Mandrill API
  // https://mandrillapp.com/api/docs/messages.JSON.html#method=send-template
  $message['message']['to'] = $to;
  $message['message']['merge_vars'] = $merge_vars;
  $message['message']['global_merge_vars'] = $global_merge_vars;
  
  // Construct array of target users
  dosomething_mandrill_dispatch($to, $key, $message);
  
}

/*
 * Creates listing of current active campaigns based on current entries in the
 * menu system. Yep, hacky! Perhaps someday there will be an API call to pull
 * this from.
 *
 * @return string
 */
function dosomething_mandrill_campaign_listing() {
  
  $results = db_query('
    SELECT
      link_title,
      link_path
    FROM
      menu_links
    WHERE
      plid = 93591
      AND
      hidden = 0
      AND
      mlid != 96240
      AND
      mlid != 98553
    ORDER BY
      weight              
    ');
  
  $campaign_markup  = '<ul>';
  foreach ($results as $campaign) {
    
    substr('http:', $campaign->link_title) === FALSE ? $site = 'http://www.dosomething.org/' : $site = '';
    $campaign_markup .= '<li><a href="' . $site . $campaign->link_path . '">' . $campaign->link_title . '</a></li>';
    
  }
  $campaign_markup .= '</ul>';
  
  return $campaign_markup;
  
}