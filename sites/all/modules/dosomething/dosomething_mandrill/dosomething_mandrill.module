<?php
/**
 * @file
 * A collection of functionality related to website transactional email messages using the Mandrill service.
 *
 */

/**
 * Impliments hook_webform_submission_insert($node, $submission)
 *
 * Respond to webform submission from the content type: Campaign Contact Form
 * /admin/structure/types/manage/campaign_contact_form to trigger a Mandrill
 * transaction (template based) email message.
 *
 * Use the "mandrill_key" field value to determine what MailSystem
 * (/admin/config/system/mailsystem) key to use when sending the message via
 * a Mandrill Template entry: /admin/config/services/mandrill/templates
 * 
 */
function dosomething_mandrill_webform_submission_insert($node, $submission) {

  // Campaign Report Back submissions
  if ($node->type == 'campaign_report_back') {

    // Must be 'dosomething_mandrill' to trigger ManndrillMailSystem use based on entries in the MailSystem module
    // /admin/config/system/mailsystem
    $module = 'dosomething_mandrill';

    // Lookup the key value based on the webform submission
    // Load field_mandrill_key values on node (could be more than one in the future)
    // field_get_items($entity_type, $entity, $field_name, $langcode = NULL)
    $keys = field_get_items('node', $node, 'field_mandrill_key');

    // Skip if field_mandrill_key not defined
    if ($keys != FALSE) {

      // Collect specific mandrill key value
      // Get the specific value of the filed - need to look at display formatter (defaults to "default")
      // field_view_value($entity_type, $entity, $field_name, $item, $display = array(), $langcode = NULL)
      $key = field_view_value('node', $node, 'field_mandrill_key', $keys[0]);
      $key = $key['#markup'];

      // Lookup the email address to send the message to based on the webform submission or user account
      // Register the $global $user object
      global $user;

      // Check for anonymous user
      if ($user->uid == 0) {
        if (!empty($submission->field_webform_email)) {
          $to = $submission->field_webform_email[LANGUAGE_NONE][0]['email'];
        }
        else {
          $to = '';
        }
      }
      else {
        $to = $user->mail;
      }

      // User the site default, perhaps someday we'll deal in other languages other than
      $language = language_default();

      // Empty as current campaign signup messages do not contain merge_vars.
      // @todo: Add support specific list of merge_var values, *|FNAME|* for example
      $params = array();

      // @todo: Adjust "from" email address to reflect the source campaign. Currently I don't think
      // users responding to these messages result in anyone reading the message.
      $from = NULL;

      // Email missing, mobile submission
      if (valid_email_address($to)) {

        // Send transactional message
        $message = drupal_mail('dosomething_mandrill', $key, $to, $language, $params, $from, TRUE);

      }

      /**
       * $send: If TRUE, drupal_mail() will call drupal_mail_system()->mail() to deliver the message, and store
       * the result in $message['result']. Modules implementing hook_mail_alter() may cancel sending by setting
       * $message['send'] to FALSE.
       */

      // Log results
      if ($message['result'] == FALSE) {

        // watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)
        watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to via %source (%nid).',
                  array('%to' => $to, '%source' => $node->type, '%nid' => $node->nid), WATCHDOG_ERROR);

      }

    }
    else {

      // flag that campaign_report_back or campaign_contact_form does not have a mandrill_key setting
      watchdog('dosomething_mandrill', 'Mandrill transactional message for campaign_report_back or campaign_contact_form
                via %source (%nid) not sent as key was undefined in node.',
                array('%source' => $node->type, '%nid' => $node->nid), WATCHDOG_WARNING);

    }

  }

}

/**
 * Triggeres the sending of a Mandrill transactional email message using a target Mandrill template.
 * If a specific template is not provided then default to a general DoSomething themed template
 *
 * NOTE: See http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/email_example/email_example.module
 * for fully functional example.
 *
 * @param string $to
 *   Send to email address (required)
 *
 * @param string $key = 'dsplain'
 *   The mail system key value as defined in /admin/config/system/mailsystem. The key is assigned
 *   to a Mandrill template in the Mandrill Template module: /admin/config/services/mandrill/templates The key setting
 *   determines what mail system and Mandrill template to use when sending a message.
 *
 *   Note that *|merge vars|* should be within the message body.
 *
 * @param string $merge_vars = NULL
 *   Variables within the custom message text or within the template that will be dynamically
 *   replace with custom content specific to each message. Variables are denoted with *|<some name|*
 *
 * @retun array $message_status
 * 
 */
function dosomething_mandrill_dispatch($to, $key='dsplain', $message=NULL, $test_flag=FALSE) {

  $language = language_default();
  $from = NULL;
  
  // Test
  if ($test_flag) {
    module_load_include('inc', 'dosomething_mandrill', 'includes/dosomething_mandrill.test_data');
    list($message, $to) = dosomething_mandrill_test_data($key);
  }

  $message_status = drupal_mail('dosomething_mandrill', $key, $to, $language, $message, $from, TRUE);

  // Log results
  if ($message_status['result'] == FALSE) {
    watchdog('dosomething_mandrill', 'Failed to send Mandrill transactional message to %to using the Mandrill %key.',
              array('%to' => $to, '%key' => $key), WATCHDOG_ERROR);
  }
	else {  // log sent message
		watchdog('dosomething_mandrill', 'To: %to - Key: %key.',
              array('%to' => $to, '%key' => $key), WATCHDOG_INFO);
	}
  
  return $message_status;

}

/**
 * Implements hook_mail().
 *
 * $key: An identifier of the mail.
 *
 * &$message: An array to be filled in. Elements in this array include:
 *
 *   id:      An ID to identify the mail sent. Look at module source code or
 *            drupal_mail() for possible id values.
 *            
 *   to:      The address or addresses the message will be sent to. The
 *            formatting of this string will be validated with the PHP e-mail
 *            validation filter.
 *            
 *   subject: Subject of the e-mail to be sent. This must not contain any
 *            newline characters, or the mail may not be sent properly.
 *            drupal_mail() sets this to an empty string when the hook is
 *            invoked.
 *            
 *   body:    An array of lines containing the message to be sent. Drupal will
 *            format the correct line endings for you. drupal_mail() sets this
 *            to an empty array when the hook is invoked.
 *            
 *   from:    The address the message will be marked as being from, which is set
 *            by drupal_mail() to either a custom address or the site-wide
 *            default email address when the hook is invoked.
 *            
 *   headers: Associative array containing mail headers, such as From, Sender,
 *            MIME-Version, Content-Type, etc. drupal_mail() pre-fills several
 *            headers in this array.
 *
 * $params: An array of parameters supplied by the caller of drupal_mail().
 *
 *
 * Example use:
 *
 * drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
 * $result = drupal_mail('dosomething_mandrill', 'dosomething-plain', $to, $language, $params,  $from, TRUE);
 *
 * $params: Contans merge var values for the individual transactional message or global merge var values when sending to more than one email address,
 *   for example to club members or a group in a school where the message can be customized on both the individual email address as weell as values
 *   specific to the group / batch of messages.
 */
function dosomething_mandrill_mail($key, &$message, $params) {
  
  // Common merge tags
  if (!empty($params['FNAME'])) {
    $message['params']['FNAME'] = ucfirst(strtolower($params['FNAME']));
  }

  switch ($key) {

    case 'petition':      

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = t('Thanks for signing the petition: ') . $params['TITLE'];

      // Tag message and related email address for segmentation use in MailChimp
      // for future mass mailouts related to the petition. Tag value must not
      // start with "_". Any tags starting with an underscore are reserved for
      // internal Mandrill use and will cause errors in API.
      ($params['TITLE'][0] != '_') ?: $params['TITLE'][0] = '-';
      $petition_tag = substr($params['TITLE'], 0, 50);

      $message['tags'] = array('petition', $petition_tag);

      // Rename merge vars to match Mandrill template
      $params['PETITION'] = $params['TITLE'];
      $params['PETITIONURL'] = 'http://www.dosomething.org' . $params['URL'];
      $message['params']['PETITION'] = $params['TITLE'];
      $message['params']['PETITIONURL'] = 'http://www.dosomething.org' . $params['URL'];

      unset($params['TITLE']);
      unset($params['URL']);
      unset($message['params']['TITLE']);
      unset($message['params']['URL']);

      break;

    case 'password_reset':

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = 'DoSomething.org - Password Reset';
      $message['body'] = variable_get('user_mail_password_reset_notify', NULL);
      
      $message['params']['PASS'] = $params['URL'];

      break;
    
    case 'GGWired13rb':
      
      $message['params']['CAMPAIGNS'] = dosomething_mandrill_campaign_listing();
      
      break;

    case 'dsplain':
    case 'dssignup':
    case 'dsrp':
    case 'dsreg':      

      $message['from'] = 'dosomething@dosomething.org';
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];

      break;

    default:      

      $message['from'] = 'dosomething@dosomething.org';

      $message['subject'] = isset($params['subject']) ? $params['subject'] : '';
      $message['body'] = isset($params['body']) ? $params['body'] : '';

  }

}

/*
 * Implements hook_<mailsystem>_mail_alter()
 *
 * @param $mandrill_params
 *  An array that maps to the Mandrill API 
 *
 * @param $message
 * From Mandill module readme.txt. An array containing the message data. Keys in this array include:
 *
 * 'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
 * 'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the PHP e-mail validation filter.
 * 'from': The address the message will be marked as being from, which is either a custom address or the site-wide default email address.
 * 'subject': Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.
 * 'body': An array of strings containing the message text. The message body is created by concatenating the individual array strings into a
 *    single text string using "\n\n" as a separator.
 * 'headers': Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.
 * 'params': An array of optional parameters supplied by the caller of drupal_mail() that is used to build the message before hook_mail_alter() is invoked.
 * 'language': The language object used to build the message before hook_mail_alter() is invoked.
 * 'send': Set to FALSE to abort sending this email message.
 *
 * If you would like to use additional template (or other) Mandrill API variables not implemented in this module, set them in hook_mail_alter under:
 *
 * $params['mandrill']. Have a look at mandrill.mail.inc to learn more.
 * (Search for "$mandrill_params".)
 *
 * http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7
 *
 */
function dosomething_mandrill_mandrill_mail_alter(&$mandrill_params, $message) {
  
  $merge_vars = array();
  $global_merge_vars = array();
  
  // Pass parameters passed via dosomething_mandrill_dispach call
  $mandrill_params['params'] = $message['params'];

  $global_merge_vars = array();
  if (isset($message['subject']) && ($message['subject'] != '' || $mandrill_params['subject'] != '')) {
    $global_merge_vars[] = array(
      'name' => 'subject',
      'content' => isset($message['subject']) ? $message['subject'] : $mandrill_params['subject'],
    );
  }
  if (isset($message['from']) && ($message['from'] != '' || $mandrill_params['from'] != '')) {
    $global_merge_vars[] = array(
      'name' => 'from',
      'content' => isset($message['from']) ? $message['from'] : $mandrill_params['from'],
    );
  }
  
  $global_merge_vars[] = array(
    'name' => 'domain',
    'content' => $GLOBALS['base_url'] . $GLOBALS['base_path'],
  );

  if (!empty($message['params']['message']['global_merge_vars'])) {
    foreach($message['params']['message']['global_merge_vars'] as $content) {
      $global_merge_vars[] = array(
        'name' => $content['name'],
        'content' => $content['content'],
      );
    }
  }

  if(!empty($mandrill_params['params'])) {
    foreach($mandrill_params['params'] as $name => $content) {
      if(is_string($content)) {
        $global_merge_vars[] = array(
          'name' => $name,
          'content' => $content,
        );
      }
    }
  }

  // Format $to to meet Mandrill API, must be in array format
  if (gettype($message['to']) == 'string') {
    $target_email = $message['to'];
    $message['to'] = array(
      0 => array(
        'email' => $target_email,
        'name' => $message['params']['FNAME'],
        'merge_var_name' => 'FNAME',
        'merge_var_content' => $message['params']['FNAME']
      ) 
    );
  }
  
  $mandrill_params['message']['to'] = $message['to'];
  if (!empty($mandrill_params['params']['message']['merge_vars'])) {
    $merge_vars = $mandrill_params['params']['message']['merge_vars'];
  }


  if(!empty($mandrill_params['message']['to']) && empty($merge_vars)) {
    foreach($mandrill_params['message']['to'] as $i => $rcpt) {
      if (isset($rcpt['merge_var_name'])) {
        $vars = array();
        $vars[] = array(
          'name' => $rcpt['merge_var_name'],
          'content' => $rcpt['merge_var_content'],
        );
        unset($mandrill_params['message']['to'][0]['merge_var_name']);
        unset($mandrill_params['message']['to'][0]['merge_var_content']);
        $merge_vars[] = array(
          'rcpt' => $rcpt['email'],
          'vars' => $vars,
        );
      }
    }
  }
  
  // Adjust the From Name value
  !isset($mandrill_params['params']['message']['from_name']) ?: $mandrill_params['message']['from_name'] = $mandrill_params['params']['message']['from_name'];
  
  // Tags
  if (is_array($mandrill_params['message']['tags']) && is_array($message['tags'])) {
    $mandrill_params['message']['tags'] = array_merge($mandrill_params['message']['tags'], $message['tags']);
  }
  elseif (is_array($message['tags'])) {
    $mandrill_params['message']['tags'] = $message['tags'];
  }
  
  // Combine all merge_var values - these values are used to send multipul messages
  // with customizations to the Mandrill templace based on the merge_var values and
  // the matching *|TAGS|*  
  $mandrill_params['message']['merge_vars'] = $merge_vars;
  $mandrill_params['message']['global_merge_vars'] = $global_merge_vars;

}