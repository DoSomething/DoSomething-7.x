<?php

/**
 * @file
 * dosomething_signups.module
 */

/**
 * Implements hook_menu().
 */
function dosomething_signups_menu() {
  $items = array();
  $items['campaign/join/%node'] = array(
    'page callback' => 'dosomething_signups_join_page',
    'page arguments' => array(2),
    'access callback' => 'dosomething_signups_join_page_access',
    'access arguments' => array(2),
    'file' => 'dosomething_signups.pages.inc',
  );
  return $items;
}

/**
 * Retuns boolean if given $user can access join and campaign pages regardless of signup.
 *
 * @param object $user
 *  User object of user to check.
 *
 * @return boolean
 */
function dosomething_signups_can_user_override_join($user) {
  return user_access('administer modules', $user);
}

/**
 * Inserts a record for given user UID and campaign node NID in signups table.
 */
function dosomething_signups_insert_signup($uid, $nid, $data = NULL) {
  $signup = db_insert('dosomething_campaign_signups')
  ->fields(array(
    'uid' => $uid,
    'nid' => $nid,
    'timestamp' => REQUEST_TIME,
    'data' => $data,
    ))
  ->execute();
}

/**
 * Deletes a record for given user UID and campaign node NID in signups table.
 */
function dosomething_signups_delete_signup($uid, $nid) {
  $signup = db_delete('dosomething_campaign_signups')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Returns data array if signup data exists for given $uid and $nid.
 */
function dosomething_signups_get_signup_data($uid, $nid) {
  if (module_exists('dosomething_beta')) {
    return dosomething_beta_get_signup_data($uid);
  }
  $result = db_select('dosomething_campaign_signups', 'n')
    ->fields('n')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  if ($result && $result['data']) {
    if ($nid != 731115) {
      return unserialize($result['data']);
    }
    else {
      return $result['data'];
    }
  }
  return FALSE;
}

/**
 * Updates the signup data for given user UID and campaign node NID in signups table.
 *
 * @param int $uid
 *  User uid of signup record.
 * @param int $uid
 *  User uid of signup record.
 * @param array $data
 *  Data to store for this signup.
 */
function dosomething_signups_update_signup_data($uid, $nid, $data) {
  if (module_exists('dosomething_beta')) {
    return dosomething_beta_update_signup_data($uid, serialize($data));
  }
  // Sanity check to avoid errors if signup record doesn't exist:
  if (dosomething_signups_is_user_signed_up($uid, $nid)) {
    // If not TFJ, serialize:
    if ($nid != 731115) {
      $data = serialize($data);
    }
    // Update the data field:
    $update = db_update('dosomething_campaign_signups')
    ->fields(array(
      'data' => $data,
      ))
    ->condition('uid', $uid)
    ->condition('nid', $nid)  
    ->execute();
  }
}

/**
 * Returns boolean for if given user uid is signed up given nid.
 */
function dosomething_signups_is_user_signed_up($uid, $nid) {
  $signup = db_query('SELECT uid 
    FROM {dosomething_campaign_signups} 
    WHERE uid = :uid AND nid = :nid', array(':uid' => $uid, ':nid' => $nid))->fetchField();
  if ($signup) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for join page.
 */
function dosomething_signups_join_page_access($node) {
  // Join page is only valid for gated signup nodes:
  if (!dosomething_login_is_gated_signup_node($node)) {
    return FALSE;
  }
  global $user;
  // Allow access if user can access page unconditionally.
  if (dosomething_signups_can_user_override_join($user)) {
    return TRUE;
  }
  // Otherwise, only grant access for logged in users.
  return $user->uid != 0;
}

/**
 * Returns a given node's Signup Success Message field value
 * Outputs a default variable value if a field value doesn't exist.
 *
 * @param $node
 *  Loaded node object that user has signed up for.
 */
function dosomething_signups_get_signup_success_msg($node) {
  if (isset($node->field_signup_success_msg[LANGUAGE_NONE][0]['value']) && !empty($node->field_signup_success_msg[LANGUAGE_NONE][0]['value'])) {
    $msg = $node->field_signup_success_msg[LANGUAGE_NONE][0]['value'];
  }
  else {
    $msg = variable_get('dosomething_signups_default_signup_success_msg', t('Thanks for signing up!'));
  }
  return $msg;
}

/**
 * Form used for staff users to delete a signup from a campaign. 
 *
 * @param int $nid
 *    Node nid of campaign to delete signup for logged in user.
 *
 * @ingroup forms
 */
function dosomething_signups_delete_signup_form($form, &$form_state, $nid, $label) {
  $form = array();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
    '#attributes' => array(
      'class' => array('btn'),
    ),
  );
  return $form;
}

/**
 * Form submission handler for dosomething_signups_delete_signup_form().
 *
 * @see dosomething_signups_delete_signup_form()
 */
function dosomething_signups_delete_signup_form_submit(&$form, &$form_state) {
  global $user;
  $nid = $form_state['values']['nid'];
  // Sanity check to only allow staff access to delete signup:
  if (is_numeric($nid) && in_array('staff', $user->roles)) {
    dosomething_signups_delete_signup($user->uid, $nid);
  }
}
