<?php

/**
 * Implements hook_init().
 */
function dosomething_campaign_styles_init() {
  if ($context = og_context()) {
    if (isset($context->etid)) {
      ctools_include('plugins');
      // Currently this is hard coded to work with nids specifically.
      $plugin_name = dosomething_campaign_styles_pluginify_path(drupal_get_path_alias('node/' . $context->etid));
      if ($plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin_name)) {
        $plugins = array();
        $plugins[] = $plugin;
        while ($parent_plugin = dosomething_campaign_styles_get_style_parent($plugin)) {
          $plugin = $parent_plugin;
          $plugins[] = $parent_plugin;
        }
        while ($plugin_data = array_pop($plugins)) {
          drupal_add_css($plugin_data['path'] . '/' . 'ds_campaign.css', array('group' => CSS_THEME));
          drupal_add_js($plugin_data['path'] . '/' . 'ds_campaign.js');
          foreach ($plugin_data['css'] as $css_path) {
            drupal_add_css($plugin_data['path'] . '/' . $css_path, array('group' => CSS_THEME));
          }
          foreach ($plugin_data['js'] as $js_path) {
            drupal_add_js($plugin_data['path'] . '/' . $js_path);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dosomething_campaign_styles_ctools_plugin_type() {
  return array(
    'campaign_style' => array(
      'child plugins' => FALSE,
      'load themes' => TRUE,
      'cache' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function dosomething_campaign_styles_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'dosomething_campaign_styles' && $plugin_type == 'campaign_style') {
    return "campaign_styles";
  }
  else if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Find the parent of a given campaign style. 
 */
function dosomething_campaign_styles_get_style_parent($plugin) {
  $parent_plugin = FALSE;
  if (isset($plugin['parent'])) {
    ctools_include('plugins');
    $parent_plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin['parent']);
  }
  return $parent_plugin;
}

/**
 * Convert a path to a ctools safe plugin name.
 *
 * @param $path
 *   The string from the URL alias.
 * @return
 *   The plugin (and variable) safe name.
 */
function dosomething_campaign_styles_pluginify_path($path) {
  $plugin_name = str_replace('/', '_', $path);
  $plugin_name = str_replace('-', '_', $plugin_name);
  return $plugin_name;
}

function dosomething_campaign_styles_block_info() {
  $blocks['campaign_nav'] = array(
    'info' => t('Campaign Navigation'),
    'weight' => -50,
    'status' => 1,
    'region' => 'sidebar_first',
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'classes' => 'banana',
    ),
  );
  return $blocks;
}

function dosomething_campaign_styles_block_view($delta) {
  if ($context = og_context()) {
    if ($context->entity_type == 'node' && ($node = node_load($context->etid))) {
      $plugin_name = dosomething_campaign_styles_pluginify_path(drupal_get_path_alias('node/' . $context->etid));
      $plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin_name);

      $campaign_links = array();
      if (count($plugin['menu'])) {
        foreach ($plugin['menu'] as $num => $link) {
          $link['href'] = drupal_lookup_path('source', $link['href']);
          $campaign_links['campaign_nav_'.$num] = $link;
        }
      }
      $block['content'] = theme('links', array(
        'links' => $campaign_links,
        'attributes' => array(
          'class' => 'menu',
        ),
      ));
      return $block;
    }
  }
}
