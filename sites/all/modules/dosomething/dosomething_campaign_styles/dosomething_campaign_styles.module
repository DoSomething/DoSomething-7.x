<?php

define('CGG_CHOOSER_FORM', variable_get('cgg_form_id', 725016));
define('CGG_TAXONOMY_VOCABULARY', variable_get('cgg_taxonomy_vocabulary', 29));

/**
 * Implements hook_menu().
 */
function dosomething_campaign_styles_menu() {
  $items['campaign/style/autocomplete'] = array(
    'title' => 'Campaign style autocomplete',
    'page callback' => 'dosomething_campaign_autocomplete',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *
 */
function dosomething_campaign_autocomplete($string = '') {

  $dir = drupal_get_path('module', 'dosomething_campaign_styles') . '/campaign_styles';

  $found = file_scan_directory($dir, '/.*\.html$/', array(), 2);
  // this gets us all html files, not only those in a subdir, as the mask in
  // file_scan_directory doesn't check the full uri path.
  $files = array();
  foreach ($found as $file) {
    if (preg_match('/.*html\\' . DIRECTORY_SEPARATOR . '.*html$/', $file->uri)) {
      $path = substr($file->uri, strlen($dir) + 1);
      $parts = explode(DIRECTORY_SEPARATOR, $path);
      $year = array_shift($parts);
      $campaign = array_shift($parts);
      $name = substr(array_pop($parts), 0, -5);
      $files[$path] = "$year/$campaign/$name";
    }
  }

  $matches = preg_grep ('/'.$string.'/i', $files);

  drupal_json_output($matches);
}

/**
 * Implements hook_init().
 */
function dosomething_campaign_styles_init() {
  if ($context = og_context()) {
    if (isset($context->etid)) {
      ctools_include('plugins');
      // Currently this is hard coded to work with nids specifically.
      $plugin_name = dosomething_campaign_styles_pluginify_path(drupal_get_path_alias('node/' . $context->etid));
      if ($plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin_name)) {
        $plugins = array();
        $plugins[] = $plugin;
        while ($parent_plugin = dosomething_campaign_styles_get_style_parent($plugin)) {
          $plugin = $parent_plugin;
          $plugins[] = $parent_plugin;
        }
        while ($plugin_data = array_pop($plugins)) {
          drupal_add_css($plugin_data['path'] . '/' . 'ds_campaign.css', array('group' => CSS_THEME));
          drupal_add_js($plugin_data['path'] . '/' . 'ds_campaign.js');
          foreach ($plugin_data['css'] as $css_path) {
            drupal_add_css($plugin_data['path'] . '/' . $css_path, array('group' => CSS_THEME));
          }
          foreach ($plugin_data['js'] as $js_path) {
            drupal_add_js($plugin_data['path'] . '/' . $js_path);
          }
        }
        drupal_add_css(drupal_get_path('module', 'dosomething_campaign_styles') . '/css/dosomething_campaign_signup.css');
        drupal_add_library('dosomething_general', 'fb-friend-finder');
        drupal_add_library('connections', 'facebook');
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dosomething_campaign_styles_ctools_plugin_type() {
  return array(
    'campaign_style' => array(
      'child plugins' => FALSE,
      'load themes' => TRUE,
      'cache' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function dosomething_campaign_styles_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'dosomething_campaign_styles' && $plugin_type == 'campaign_style') {
    return "campaign_styles";
  }
  else if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Find the parent of a given campaign style.
 */
function dosomething_campaign_styles_get_style_parent($plugin) {
  $parent_plugin = FALSE;
  if (isset($plugin['parent'])) {
    ctools_include('plugins');
    $parent_plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin['parent']);
  }
  return $parent_plugin;
}

/**
 * Convert a path to a ctools safe plugin name.
 *
 * @param $path
 *   The string from the URL alias.
 * @return
 *   The plugin (and variable) safe name.
 */
function dosomething_campaign_styles_pluginify_path($path) {
  $plugin_name = str_replace(array('/', '-'), '_', $path);
  return $plugin_name;
}

/**
 * Implements hook_block_info().
 */
function dosomething_campaign_styles_block_info() {
  $blocks['campaign_nav'] = array(
    'info' => t('Campaign Navigation'),
    'weight' => -50,
    'status' => 1,
    'region' => 'sidebar_first',
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'classes' => 'banana',
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_campaign_styles_block_view($delta) {
  // If context has Organic Group context:
  if ($context = og_context()) {
    // If we are viewing a node:
    if ($context->entity_type == 'node') {
      // Lookup plugin name, which is defined by the Organic Group node's path:
      $plugin_name = dosomething_campaign_styles_pluginify_path(drupal_get_path_alias('node/' . $context->etid));
      // Get the plugin:
      $plugin = ctools_get_plugins('dosomething_campaign_styles', 'campaign_style', $plugin_name);
      // If plugin doesn't exist, return nothing.
      if (!$plugin) {
        return;
      }
      $campaign_links = $prefix = $suffix = $nav = array();
      if (!empty($plugin['menu'])) {
        foreach ($plugin['menu'] as $num => $link) {
          if (!isset($link['validate'])) {
            $link['href'] = drupal_lookup_path('source', $link['href']);
          }
          $campaign_links['campaign_nav_'.$num] = $link;
        }
        $nav = array(
          '#theme' => 'links',
          '#links' => $campaign_links,
          '#attributes' => array(
            'class' => 'menu',
          ),
        );
      }
      if (!empty($plugin['menu_prefix'])) {
        $prefix = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('campaign-menu-prefix')),
          'content' => $plugin['menu_prefix'],
        );
      }
      if (!empty($plugin['menu_suffix'])) {
        $suffix = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('campaign-menu-suffix')),
          'content' => $plugin['menu_suffix'],
        );
      }
      $block['content']['prefix'] = $prefix;
      $block['content']['nav'] = $nav;
      $block['content']['suffix'] = $suffix;
      return $block;
    }
  }
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function dosomething_campaign_styles_og_context_negotiation_info() {
  $providers = array();
  $providers['campaign_panelizer'] = array(
    'name' => t('Campaign Panelizer'),
    'description' => t('Determine context by checking if there is context provided by something like panels or panelizer'),
    'callback' => 'dosomething_campaign_styles_og_context_panels',
  );
  $providers['campaign_forms'] = array(
    'name' => t('Campaign Forms'),
    'description' => t('Determine context for webform_entities whose parent form are a part of a campaign group'),
    'callback' => 'dosomething_campaign_styles_og_context_webform_submissions',
  );
  return $providers;
}

/**
 * OG context handler callback for panels.
 */
function dosomething_campaign_styles_og_context_panels() {
  $context = array();
  $item = menu_get_item();
  if (isset($item['map']) && is_array($item['map'])) {
    foreach ($item['map'] as $map) {
      if (is_object($map) && get_class($map) == 'ctools_context') {
        if ($map->plugin == 'entity:node') {
          $gid = 0;
          if (isset($map->data->nid)) {
            $g = og_get_group('node', $map->data->nid);
            $gid = (isset($g->gid) ? $g->gid : 0);
          }

          $context[] = array($gid);
        }
      }
    }
  }
  return $context;
}

/**
 * OG context handler callback for webform submissions
 */
function dosomething_campaign_styles_og_context_webform_submissions() {
  $context = array();
  $item = menu_get_item();
  $content_types = array('campaign_report_back', 'campaign_sign_up');

  if (isset($item['map']) && is_array($item['map'])) {
    foreach ($item['map'] as $map) {
      if (is_object($map) && !isset($map->bundle) && isset($map->data->bundle)) {
        $map = $map->data;
      }
      if (is_object($map) && isset($map->bundle) && in_array($map->bundle, $content_types)) {
        $parent = node_load($map->nid);
        $context[] = array($parent->group_audience[LANGUAGE_NONE][0]['gid']);
      }
    }
  }
  return $context;
}

function dosomething_campaign_styles_theme() {
  $theme['ds_campaign_social'] = array(
    'variables' => array(
      'url' => NULL,
      'facebook_language' => NULL,
      'twitter_language' => NULL,
    ),
    'template' => 'templates/ds_campaign_social',
  );

  return $theme;
}

/**
 * Gets template file and parses any PHP in it.
 */
function dosomething_campaign_styles_get_include_contents($filename) {
  if (is_file($filename)) {
    ob_start();
    include $filename;
    $contents = ob_get_contents();
    ob_end_clean();
    return $contents;
  }

  return FALSE;
}