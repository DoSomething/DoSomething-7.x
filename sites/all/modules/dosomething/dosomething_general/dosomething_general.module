<?php

/**
 * @file
 * This module handles "everything else" on DoSomething.org.
 * DS.org has hundreds of modules to handle a number of products
 * and campaigns, but we often find that there is a function that
 * can be, or is used across several different modules.  This module
 * acts as a centerpoint for functions that are used across the site.
 *
 * If a function will only be used for a particular product or campaign,
 * create that function in a more appropriate module.  Only functions that
 * will consistently be used site-wide should live here.
 */

/*! \mainpage DoSomething.org - The nation's largest organization for teens and social change.
 *  \section intro_sec Introduction
 *  DoSomething.org is the largest organization for teens and social change in the United States.
 *  We reach out to teens through campaigns and products that target 13-25-year-olds' interests
 *  and hobbies.  Through positive reinforcement, we help them make a difference.
 *  \section staff_sec Tech Team
 *  DoSomething.org's tech team is the best in the business.
 *
 *  - Matt (CTO)
 *  - Desmond (Director of Engineering)
 *  - Barry (Director of Technical Product)
 *  - Michael (Software Engineer)
 *  - Dee (Software Engineer)
 *  - Aaron (Software Engineer)
 *  - Maxwell (Front end Engineer)
 *  - Uy (Mobile Engineer)
 */

/**
 * Implements hook_init().
 */
function dosomething_general_init() {
  drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/iframe-defer.js', array(
    'scope' => 'footer',
    'every_page' => TRUE,
  ));
}

/**
 * @deprecated
 * Keeping as placeholder until Crazyshit module is destroyed.
 */
function dosomething_general_save_node_from_file($path, $alias, $variable = null) {
}

/**
 * Cleans a zipcode of illegal characters.
 *
 * @param string|int $zip
 *   The zipcode.
 *
 * @return mixed string|int
 *   The zipcode, cleaned of any malicious characters.
 */
function dosomething_general_clean_zip($zip) {
  $zip = strtoupper($zip);
  $zip = preg_replace("/[^A-Z0-9]/", "", $zip);
  return $zip;
}

/**
 *  Censors a word.  Replaces curse words with another word.
 *
 *  @param string $string
 *    The word that should be censored.
 *
 *  @param string $backup
 *    The word that should replace the curse word.
 *
 *  @return string
 *    The replaced word.
 */
function dosomething_general_censor_word($word, $backup = 'Anonymous') {
  // All the curses.
  $curses = array('anus', 'arse ', 'arsehole', 'ass ', 'ass-hat ', 'ass-jabber', 'ass-pirate ', 'assbag', 'assbandit ', 'assbanger', 'assbite ', 'assclown ', 'asscock ', 'asscracker', 'asses', 'assface', 'assfuck', 'assfucker', 'assgoblin', 'asshat ', 'asshead', 'asshole', 'asshopper', 'assjacker', 'asslick ', 'asslicker', 'assmonkey', 'assmunch', 'assmuncher ', 'asspirate ', 'assshit ', 'assshole ', 'asssucker', 'asswad', 'asswipe ', 'axwound ', 'bastard ', 'beaner ', 'bitch ', 'bitchass ', 'bitches ', 'bitchtits ', 'bitchy ', 'blow job ', 'blowjob ', 'bollocks ', 'bollox ', 'boner', 'brotherfucker', 'bullshit', 'bumblefuck ', 'butt plug ', 'butt-pirate ', 'buttfucka ', 'buttfucker', 'camel toe ', 'carpetmuncher ', 'chesticle ', 'chinc', 'chink ', 'choad ', 'chode ', 'clit ', 'clitface ', 'clitfuck ', 'clusterfuck ', 'cock ', 'cockass ', 'cockbite ', 'cockburger ', 'cockface ', 'cockfucker ', 'cockhead ', 'cockjockey', 'cockknoker ', 'cockmaster ', 'cockmongler ', 'cockmongruel ', 'cockmonkey ', 'cockmuncher ', 'cocknose ', 'cocknugget ', 'cockshit', 'cocksmith ', 'cocksmoke ', 'cocksmoker ', 'cocksniffer', 'cocksucker ', 'cockwaffle ', 'coochie ', 'coochy ', 'coon ', 'cooter ', 'cum', 'cumbubble ', 'cumdumpster', 'cumguzzler', 'cumjockey', 'cumslut ', 'cumtart ', 'cunnie ', 'cunnilingus', 'cunt ', 'cuntass ', 'cuntface', 'cunthole ', 'cuntlicker', 'cuntrag', 'cuntslut ', 'dago', 'damn', 'deggo', 'dick', 'dick-sneeze', 'dickbag', 'dickbeaters', 'dickface', 'dickfuck', 'dickfucker', 'dickhead', 'dickhole', 'dickjuice', 'dickmilk', 'dickmonger', 'dicks', 'dickslap', 'dicksucker', 'dicksucking', 'dicktickler', 'dickwad', 'dickweasel', 'dickweed', 'dickwod', 'dike', 'dildo', 'dipshit', 'doochbag', 'dookie', 'douche', 'douche-fag', 'douchebag', 'douchewaffle', 'dumass', 'dumb ass', 'dumbass', 'dumbfuck', 'dumbshit', 'dumshit', 'dyke', 'fag', 'fagbag', 'fagfucker', 'faggit', 'faggot', 'faggotcock', 'fagtard', 'fatass', 'fellatio', 'feltch', 'flamer', 'fuck', 'fuckass', 'fuckbag', 'fuckboy', 'fuckbrain', 'fuckbutt', 'fuckbutter', 'fucked', 'fucker', 'fuckersucker', 'fuckface', 'fuckhead', 'fuckhole', 'fuckin', 'fucking', 'fucknut', 'fucknutt', 'fuckoff', 'fucks', 'fuckstick', 'fucktard', 'fucktart', 'fuckup', 'fuckwad', 'fuckwit', 'fuckwitt', 'fudgepacker', 'gay', 'gayass', 'gaybob', 'gaydo', 'gayfuck', 'gayfuckist', 'gaylord', 'gaytard', 'gaywad', 'goddamn', 'goddamnit', 'gooch', 'gook', 'gringo', 'guido', 'handjob', 'hard on', 'heeb', 'hell', 'ho', 'hoe', 'homo', 'homodumbshit', 'honkey', 'humping', 'jackass', 'jagoff', 'jap', 'jerk off', 'jerkass', 'jigaboo', 'jizz', 'jungle bunny', 'junglebunny', 'kike', 'kooch', 'kootch', 'kraut', 'kunt', 'kyke', 'lameass', 'lardass', 'lesbian', 'lesbo', 'lezzie', 'mcfagget', 'mick', 'minge', 'mothafucka', 'mothafuckin', 'motherfucker', 'motherfucking', 'muff', 'muffdiver', 'munging', 'negro', 'nigaboo', 'nigga', 'nigger', 'niggers', 'niglet', 'nut sack', 'nutsack', 'paki', 'panooch', 'pecker', 'peckerhead', 'penis', 'penisbanger', 'penisfucker', 'penispuffer', 'piss', 'pissed', 'pissed off', 'pissflaps', 'polesmoker', 'pollock', 'poon', 'poonani', 'poonany', 'poontang', 'porch monkey', 'porchmonkey', 'prick', 'punanny', 'punta', 'pussies', 'pussy', 'pussylicking', 'puto', 'queef', 'queer', 'queerbait', 'queerhole', 'renob', 'rimjob', 'ruski', 'sand nigger', 'sandnigger', 'schlong', 'scrote', 'shit', 'shitass', 'shitbag', 'shitbagger', 'shitbrains', 'shitbreath', 'shitcanned', 'shitcunt', 'shitdick', 'shitface', 'shitfaced', 'shithead', 'shithole', 'shithouse', 'shitspitter', 'shitstain', 'shitter', 'shittiest', 'shitting', 'shitty', 'shiz', 'shiznit', 'skank', 'skeet', 'skullfuck', 'slut', 'slutbag', 'smeg', 'snatch', 'spic', 'spick', 'splooge', 'spook', 'suckass', 'tard', 'testicle', 'thundercunt', 'tit', 'titfuck', 'tits', 'tittyfuck', 'twat', 'twatlips', 'twats', 'twatwaffle', 'unclefucker', 'vajj', 'vag', 'vagina', 'vajayjay', 'vjayjay', 'wank', 'wankjob', 'wetback', 'whore', 'whorebag', 'whoreface', 'wop');

  // Get a copy of the string that doesn't have any punctuation.
  $cleared = preg_replace('#[^A-Za-z]#', '', $word);

  // If the real string, or the cleaned string, is a curse in the above array...
  if (in_array($word, $curses) || in_array($cleared, $curses)) {
    // Replace the word with the "backup" word.  Translate that word.
    $word = t($backup);
  }

  // Return the new cleaned up word.
  return $word;
}

/**
 *  Implements hook_module_implements_alter().
 */
function dosomething_general_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'mail_alter' || $hook == 'block_view') && isset($implementations['dosomething_general'])) {
    $group = $implementations['dosomething_general'];
    unset($implementations['dosomething_general']);
    $implementations['dosomething_general'] = $group;
  }

  if ($hook == 'cron') {
    // Field cron is what is killing our submissions.
    // Lets remove for now
    unset($implementations['field']);
  }
}

/**
 *  Returns array values for a multi-dimensional array.
 */
function dosomething_general_array_vals_multi($array = array(), &$vals = array()) {
  foreach ($array as $key => $value) {
    if (is_array($value) || is_object($value)) {
      dosomething_general_array_vals_multi($value, $vals);
    }
    else{
      $vals[$key] = $value;
    }
  }

  return $vals;
}

/**
 *  Implements hook_mail_alter().
 */
function dosomething_general_mail_alter(&$message) {
  // For known user module emails put a bit of text explaining the reason for
  // the message into the "std_preheader_content" region.
  if ($message['module'] == 'user') {
    $reasons = array(
      'register_no_approval_required' => t("We want to welcome you to DoSomething.org."),
      'password_reset' => t("You submitted a password recovery request."),
      'status_activated' => t("Your DoSomething.org account has been activated."),
      'status_blocked' => t("Your DoSomething.org account has been blocked."),
      'cancel_confirm' => t("Confirm the cancelation of your DoSomething.org account."),
      'status_canceled' => t("Your DoSomething.org account has been canceled."),
    );
    if (isset($reasons[$message['key']])) {
      $message['mandrill_template_content']['std_preheader_content'] = $reasons[$message['key']];
    }
  }
  // Build a per recipient unsubscribe link.
  $message['mandrill_merge_vars'][$message['to']]['unsub'] = url('unsubscribe-email/' . $message['to'], array('alias' => TRUE, 'absolute' => TRUE));

  if ($message['key'] == 'petition_invite') {
    $nosend = db_select('dosomething_unsubscribed', 'u')
    ->fields('u')
    ->condition('email', $message['to'], '=')
    ->execute();

    if ($nosend->rowCount()) {
      // If they've unsubscribed from our emails, don't email them!
      $message['send'] = FALSE;
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function dosomething_general_views_pre_view(&$view, &$display_id, &$args) {
  // Add the blog-archive.js file to the Blog Archive block.
  if ($view->name == 'blog_center' && $display_id == 'blog_archive_block') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/blog-archive.js');
  }
  // Add project-photo-slider.js file to the project_photo_slider views content pane.
  if ($view->name == 'project_photo_slider' && $display_id == 'panel_pane_1') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/project-photo-slider.js');
  }
  // Add homepage-photo-slider.js file to the home_slideshow views content pane.
  if ($view->name == 'home_slideshow' && $display_id == 'panel_pane_1') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/homepage-photo-slider.js');
  }
}

/**
 * Implements hook_page_alter().
 *
 * We want to provide more detail to New Relic on the transaction and late in
 * the page build seemed like the simplest place.
 */
function dosomething_general_page_alter(&$page) {
  if (!extension_loaded('newrelic')) {
    return;
  }

  $name = NULL;

  $panel_page = page_manager_get_current_page();
  if (isset($panel_page['name'])) {
    if ($panel_page['name'] == 'node_view') {
      if (isset($panel_page['contexts']['argument_entity_id:node_1']->data)) {
        $node = $panel_page['contexts']['argument_entity_id:node_1']->data;
        $name = 'page_manager_node_view_page/' . $node->type;
      }
    }
    elseif ($panel_page['name'] == 'webform_submission_view') {
      if (isset($panel_page['contexts']['argument_entity_id:webform_submission_entity_1']->data)) {
        $submission = $panel_page['contexts']['argument_entity_id:webform_submission_entity_1']->data;
        $name = 'webform_entity_pages_webform_submission_view_page/' . $submission->bundle;
      }
    }
    elseif ($panel_page['task']['task type'] == 'page') {
      $name = 'page_manager_page_execute/' . $panel_page['name'];
    }
  }
  else {
    $menu_item = menu_get_item();
    if ($menu_item['path'] == 'node/%') {
      // Looks like panels didn't have a variant and it's falling back to
      // node_page_view.
      $name = 'node_page_view/' . $menu_item['page_arguments'][0]->type;
    }
  }

  if ($name) {
    newrelic_name_transaction($name);
  }
}

/**
 * Implements hook_js_alter().
 */
function dosomething_general_js_alter(&$javascript) {
  // Set all aggregated javascript to the JS_DEFAULT group.
  // Possible values: JS_LIBRARY, JS_DEFAULT, and JS_THEME
  // This prevents individual js files per group
  uasort($javascript, 'drupal_sort_css_js');
  $i = 0;
  foreach ($javascript as $name => $script) {
    $javascript[$name]['weight'] = $i++;
    $javascript[$name]['group'] = JS_DEFAULT;
    $javascript[$name]['every_page'] = FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_general_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_general_facebook_friend_pic' => array(
      'variables' => array('fbid' => NULL, 'uid' => NULL, 'image_style' => NULL),
    ),
    'mc-response' => array(
      'path' => $path . '/templates',
      'template' => 'mc-response',
      'variables' => array(
        'message' => NULL,
      ),
    ),
    'million-members-block' => array(
      'path' => $path . '/templates',
      'template' => 'million-members-block',
      'variables' => array(
        'form' => NULL,
      ),
    ),
    // @todo: move these to theming layer
    'main_menu' => array(
        'template' => 'main_menu',
        'variables' => array('menu' => NULL),
    ),
    'footer_menu' => array(
        'template' => 'footer_menu',
        'variables' => array('menu' => NULL),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dosomething_general_menu() {
  // Create admin page for custom dosomething modules configuration pages to live in.
  $items['admin/config/dosomething'] = array(
    'title' => 'DoSomething',
    'description' => 'Configuration settings for DoSomething custom functionality.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer modules'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['webform-post-submit-associate/%/%'] = array(
    'page callback' => 'dosomething_general_webform_associate',
    'page arguments' => array(1, 2),
    'access callback' => 'user_is_logged_in',
  );

  $items['unsubscribe-email/%/%'] = array(
    'page callback' => 'dosomething_general_unsubscribe_email',
    'page arguments' => array(1, 2),
    'access callback' => TRUE
  );

  $items['admin/people/search-by-email'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Search by email',
    'page arguments' => array('search_by_email_form'),
    'access arguments' => array('administer users'),
  );

  $items['admin/people/search-by-email/results'] = array(
    'page callback' => 'dosomething_general_search_by_email_results',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export'] = array(
    'page callback' => 'dosomething_general_pull_user_export',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export/finished'] = array(
    'page callback' => 'dosomething_general_pull_user_export_finished',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export/file'] = array(
    'page callback' => 'dosomething_general_pull_user_export_file',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['redirect-with-message'] = array(
    'page callback' => 'dosomething_general_redirect_with_message',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Redirects a user to a destination with a message.
 *
 *  @uses string $_GET['destination']
 *    The Drupal destination that the user should be redirect to.
 *    Do not include a leading "/" in this parameter.
 *
 *  @uses string $_GET['message']
 *    The message that should display when the user lands at
 *    their destination.
 *
 *  @uses string $_GET['status']
 *    Passes the "status" parameter to drupal_set_message().
 *    Accepts "status", "warning" and "error".
 *
 */
function dosomething_general_redirect_with_message() {
  // Get query parameters
  $params = drupal_get_query_parameters();

  // @todo: Abstract this better.
  $messages = array(
    'littering_scholarship' => t('Nice! You’re entered to win a $2000 scholarship. We’ll announce the winners by 2/25, so keep your fingers crossed ‘til then. Questions? Email scholarships@dosomething.org. In the meantime, want the chance for another $5000? <p>Check out Project Cleanup below. Here’s the deal: Pick up trash, send us pics, and you could win mad money. Could it be any easier? We think not.</p>'),
  );

  if (!empty($params['message'])) {
    // The message
    $message = check_plain($params['message']);
  }
  else if (!empty($params['template'])) {
    $message = $messages[$params['template']];
  }
  else if (!empty($params['type']) && !empty($params['nid'])) {
    if ($params['type'] == 'social_scholarship') {
      $m = db_select('field_data_field_redirect_message', 'm')
        ->fields('m', array('field_redirect_message_value'));
      $m->leftJoin('field_data_field_redirect_to_path', 'p', 'p.entity_id = m.entity_id');
      $m->fields('p', array('field_redirect_to_path_value'));
      $m->condition('m.entity_id', intval($params['nid']))
        ->range(0, 1);
      $info = reset($m->execute()->fetchAll());

      $message = $info->field_redirect_message_value;
      $_GET['destination'] = ($info->field_redirect_to_path_value ? $info->field_redirect_to_path_value : 'share-these-images/' . intval($params['nid']));
    }
  }

  // The status to display in drupal_set_message()
  $status = check_plain($params['status']);

  // Confirm that the (optionally) provided status is valid.
  if (!empty($status) && in_array($status, array('status', 'warning', 'error'))) {
    $status = $status;
  }
  // Otherwise defaults to "status"
  else {
    $status = 'status';
  }

  // Show the message.
  drupal_set_message(t($message), $status, false);

  // Redirect.
  drupal_goto();
}

/**
 *  The form that handles "Search By Email".
 *
 *  @return array
 *    The form.
 */
function search_by_email_form($form, &$form_state) {
  $form['description'] = array(
    '#markup' => 'Paste a comma-separated list of emails here.',
    '#prefix' => '<p>',
    '#suffix' => '</p>'
  );

  $form['emails'] = array(
    '#type' => 'textarea',
    '#attributes' => array(
      'id' => 'emails-list',
      'placeholder' => t('Paste some emails here.')
    ),
    '#required' => true
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('id' => 'submit-emails', 'class' => array('go-button')),
    '#value' => 'Search for users'
  );

  $form['#submit'][] = 'search_by_email_results';
  return $form;
}

/**
 *  Trims an email address.
 */
function dosomething_general_trim_email_addresses(&$email, $key, $prefix) {
  $email = trim($email);
}

/**
 *  Shows the results of the multi-email search.
 */
function search_by_email_results($form, &$form_state) {
  $emails = $form_state['values']['emails'];
  $emails = explode("\r\n", $emails);
  $emails = implode(',', $emails);
  if (!empty($emails)) {
    $emails = explode(',', $emails);
    array_walk($emails, 'dosomething_general_trim_email_addresses');

    // Basic user information: Uid, name, created, email
    $u = db_select('users', 'u')
      ->fields('u', array('uid', 'name', 'created', 'mail'));

    if (intval($emails[0]) > 0) {
      $u->condition('u.uid', $emails, 'IN');
    }
    else {
      $u->condition('u.mail', $emails, 'IN');
    }

    // Associated club IDs
    $u->leftJoin('node', 'n', "n.type = 'club' AND n.uid = u.uid AND n.status = 1");
    $u->addExpression("GROUP_CONCAT(DISTINCT n.nid)", 'club_ids');

    $u->groupBy('u.uid');

    $r = $u->execute()->fetchAll();
    foreach ($r AS $key => $user) {
      $u = user_load($user->uid);
      $p = profile2_load_by_user($u, 'main');

     // Mailing address
      $c = db_select('field_data_field_club_address', 'a')
        ->condition('a.entity_id', explode(',', $user->club_ids), 'IN');
      $c->addField('a', 'field_club_address_value', 'address');

      $c->leftJoin('field_data_field_club_city', 'city', 'city.entity_id = a.entity_id');
      $c->addField('city', 'field_club_city_value', 'city');

      $c->leftJoin('field_data_field_club_state', 'state', 'state.entity_id = a.entity_id');
      $c->addField('state', 'field_club_state_value', 'state');

      $c->leftJoin('field_data_field_club_zip', 'zip', 'zip.entity_id = a.entity_id');
      $c->addField('zip', 'field_club_zip_value', 'zip');

      $c->leftJoin('field_data_field_school_reference', 'school', "school.bundle = 'club' AND school.entity_id = a.entity_id AND school.deleted = 0");
      $c->leftJoin('ds_school', 's', 's.sid = school.field_school_reference_target_id');
      $c->fields('s', array('name', 'level', 'city', 'state', 'zip', 'street'));

      $c->range(0, 1);
      $mailing = $c->execute()->fetchAll();
      $club = reset($mailing);

      $extends = array(
        'first_name' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
        'last_name' => $p->field_user_last_name[LANGUAGE_NONE][0]['value'],
        'cell_number' => $p->field_user_mobile[LANGUAGE_NONE][0]['value'],
        'birthday' => $p->field_user_birthday[LANGUAGE_NONE][0]['value'],
        'gender' => $p->fild_user_gender[LANGUAGE_NONE][0]['value'],
        'mailing_address' => array(
          'address' => $club->address,
          'city' => $club->city,
          'state' => $club->state,
          'zip' => $club->zip
        ),
        'school' => array(
          'name' => $club->name,
          'level' => $club->level,
          'street' => $club->street,
          'city' => $club->s_city,
          'state' => $club->s_state,
          'zip' => $club->s_zip
        )
      );

      $r["$key"] = array_merge((array) $r["$key"], $extends);
    }

    $_SESSION['users'] = $r;
    drupal_goto('admin/people/search-by-email/results');
  }
  exit;
}

/**
 *  Prepares the table to show search-by-email results.
 */
function dosomething_general_search_by_email_results() {
  $header = array(
    array('data' => t('User ID'), 'class' => array('user-lookup-uid')),
    array('data' => t('User Name'), 'class' => array('user-lookup-name')),
    array('data' => t('Created'), 'class' => array('user-lookup-created')),
    array('data' => t('Email'), 'class' => array('user-lookup-mail')),
    array('data' => t('Club IDs'), 'class' => array('user-lookup-club-ids')),
    array('data' => t('First Name'), 'class' => array('user-lookup-first-name')),
    array('data' => t('Last Name'), 'class' => array('user-lookup-last-name')),
    array('data' => t('Cell Number'), 'class' => array('user-lookup-mobile')),
    array('data' => t('Birthday'), 'class' => array('user-lookup-birthday')),
    array('data' => t('Gender'), 'class' => array('user-lookup-gender')),
    array('data' => t('Mailing Address'), 'class' => array('user-lookup-mailing-address')),
    array('data' => t('Mailing City'), 'class' => array('user-lookup-mailing-city')),
    array('data' => t('Mailing State'), 'class' => array('user-lookup-mailing-state')),
    array('data' => t('Mailing ZIP'), 'class' => array('user-lookup-mailing-zip')),
    array('data' => t('School Name'), 'class' => array('user-lookup-school-name')),
    array('data' => t('School Level'), 'class' => array('user-lookup-school-level')),
    array('data' => t('School Street'), 'class' => array('user-lookup-school-street')),
    array('data' => t('School City'), 'class' => array('user-lookup-school-city')),
    array('data' => t('School State'), 'class' => array('user-lookup-school-state')),
    array('data' => t('School ZIP'), 'class' => array('user-lookup-school-zip'))
  );

  $num = 2;

  $num_per_page = 100;
  $page = pager_default_initialize($num, $num_per_page);

  $offset = $num_per_page * $page;

  $pages = array();
  $results = $_SESSION['users'];
  foreach ($results AS $key => $user) {
    $pages['rows'][] = array('data' => array(
      'uid' => $user['uid'],
      'name' => $user['name'],
      'created' => date('m/d/Y', $user['created']),
      'email' => $user['mail'],
      'club_ids' => $user['club_ids'],
      'fname' => $user['first_name'],
      'lname' => $user['last_name'],
      'mobile' => $user['cell_number'],
      'birthday' => date('m/d/Y', strtotime($user['birthday'])),
      'gender' => $user['gender'],
      'mailing address' => $user['mailing_address']['address'],
      'mailing city' => $user['mailing_address']['city'],
      'mailing state' => $user['mailing_address']['state'],
      'mailing zip' => $user['mailing_address']['zip'],
      'school name' => $user['school']['name'],
      'school level' => $user['school']['level'],
      'school street' => $user['school']['street'],
      'school city' => $user['school']['city'],
      'school state' => $user['school']['state'],
      'school zip' => $user['school']['zip']
    ));
  }

  $content .= l(t('+ Export User Data'), 'admin/people/search-by-email/results/export');
  $content .= theme('pager');
  $content .= '<p />' . theme('table', array('header' => $header, 'rows' => $pages['rows'], 'attributes' => array('id' => 'user-lookup-results')));
  $content .= theme('pager');

  return $content;
}

/**
 *  Loads the search-by-email results into a CSV file,
 *  and loads that into the user's browser.
 */
function dosomething_general_pull_user_export_file() {
  if (strpos($_SESSION['csv_download_file'], drupal_realpath('private://')) === FALSE) {
    return 'Access denied!';
  }

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $_SESSION['csv_download_filename'], TRUE);

  drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

  readfile($_SESSION['csv_download_file']);
  exit;
}

/**
 *  "Finished!" message for search-by-email functionality.
 */
function dosomething_general_pull_user_export_finished() {
  global $base_url;

  if (empty($_SESSION['csv_download_filename']) || empty($_SESSION['csv_download_file'])) {
    return t('Sorry, there was an error in creating your file.');
  }

  $redirect = base_path() . 'admin/people/search-by-email/results/export/file';
  drupal_add_js('setTimeout(function() { window.location.href = "' . $redirect . '"; }, 2000);', 'inline');

  $download_link = t('Your export is complete! If your download does not begun automatically, !click!', array(
    '!click' => l(t('Click here'), 'admin/people/search-by-email/results/export/file'))
  );

  $output = '<p>' . $download_link . '</p>';
  return $output;
}

define('USER_PULL_LIMIT', 25);

/**
 *  Handles batch processing for search-by-email.
 */
function dosomething_general_pull_user_export() {
  $count = count($_SESSION['users']);

  $b = ceil($count / USER_PULL_LIMIT);
  $operations = array();
  for ($i = 0; $i < $b; $i++) {
    $operations[] = array('dosomething_general_pull_user_batch_process', array());
  }

  $batch = array(
    'title' => t('Exporting user data (This will take some time...)'),
    'operations' => $operations,
    'finished' => 'dosomething_general_pull_user_batch_finished',
  );
  batch_set($batch);
  batch_process('admin/people/search-by-email/results/export/finished');
}

/**
 *  Handles the search-users-by-email csv data.
 */
function dosomething_general_pull_user_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('The User Data was successfully exported.  Your file should begin downloading automatically, or !click.', array('!click' => l(t('click here'), 'admin/people/search-by-email/results/export/file')));
    $warning = 'status';
  }
  else {
    $mssage = t("Sorry, we couldn't successfully export the user data.  Please try again later.");
    $warning = 'error';
  }

  $results = $_SESSION['batch_results'];
  unset($_SESSION['batch_results']);
  session_start();
  $_SESSION['csv_download_file'] = $results['file'];
  $_SESSION['csv_download_filename'] = $results['filename'];
  drupal_set_message(check_plain($message), $warning);
}

/**
 *  Handles batch processing for search-by-email
 */
function dosomething_general_pull_user_batch_process(&$context) {
  static $context;

  $context['finished'] = 0;
  if (!isset($context['sandbox']['step'])) {
    $context['sandbox']['step'] = 0;
  }

  if (!isset($context['sandbox']['file'])) {
     $field_labels = array(
      t('User ID'),
      t('User Name'),
      t('Created'),
      t('Email'),
      t('Club IDs'),
      t('First Name'),
      t('Last Name'),
      t('Cell Number'),
      t('Birthday'),
      t('Gender'),
      t('Mailing Address'),
      t('Mailing City'),
      t('Mailing State'),
      t('Mailing ZIP'),
      t('School Name'),
      t('School Level'),
      t('School Street'),
      t('School City'),
      t('School State'),
      t('School ZIP'),
    );

    $filename = 'users_export_' . date('m-d-y', REQUEST_TIME) . '.csv';
    $file_path = drupal_realpath('private://') . '/' . $filename;
    $handle = fopen($file_path, 'w');
    fputcsv($handle, $field_labels);
    fclose($handle);

    $users = $_SESSION['users'];
    $context['sandbox']['users'] = $users;
    $context['sandbox']['total_users'] = count($users);
    $context['sandbox']['users_count'] = count($users);

    $context['sandbox']['file'] = $file_path;
    $context['sandbox']['fields'] = $field_labels;

    $context['results']['filename'] = $filename;
    $context['results']['file'] = $file_path;
    $context['results']['list_id'] = $list_id;
  }

  if (!isset($context['results']['count'])) {
    $context['results']['count'] = 0;
  }

  $handle = fopen($context['sandbox']['file'], 'a');
  reset($context['sandbox']['users']);
  for ($i = $context['sandbox']['step']; $i < (USER_PULL_LIMIT * ($context['sandbox']['step'] + 1)); $i++) {
    $remaining = --$context['sandbox']['users_count'];

    if ($remaining >= 0) {
      $user = $context['sandbox']['users']["$i"];
      $u = array(
        'uid' => $user['uid'],
        'name' => $user['name'],
        'created' => date('m/d/Y', $user['created']),
        'email' => $user['mail'],
        'club_ids' => $user['club_ids'],
        'fname' => $user['first_name'],
        'lname' => $user['last_name'],
        'mobile' => $user['cell_number'],
        'birthday' => date('m/d/Y', strtotime($user['birthday'])),
        'gender' => $user['gender'],
        'mailing address' => $user['mailing_address']['address'],
        'mailing city' => $user['mailing_address']['city'],
        'mailing state' => $user['mailing_address']['state'],
        'mailing zip' => $user['mailing_address']['zip'],
        'school name' => $user['school']['name'],
        'school level' => $user['school']['level'],
        'school street' => $user['school']['street'],
        'school city' => $user['school']['city'],
        'school state' => $user['school']['state'],
        'school zip' => $user['school']['zip']
      );

      unset($context['sandbox']['users']["$i"]);

      fputcsv($handle, $u);
      $context['results']['count']++;
      $context['finished'] = ($context['results']['count'] / $context['sandbox']['total_users']);
    }
    else {
      $_SESSION['batch_results'] = $context['results'];
      $context['finished'] = 1;
      break;
    }
  }

  fclose($handle);
  $context['sandbox']['step']++;

  $context['message'] = t('Exporting User Data: @count of @total.', array(
    '@count' => $context['results']['count'],
    '@total' => $context['sandbox']['total_users']
  ));
}

/**
 *  Unsubscribes an email from the DoSomething.org mailing list.
 *
 *  @param string $email
 *    The email that should be unsubscribed.
 *
 *  @param string $hash
 *    The hash to check the validity of.  This is sent in emails with
 *    the unsubscribe link, and is an md5 of the email, with an md5
 *    of 'ds.org'.
 *
 *  @return string
 *    Returns the body text, verifying that the user has unsubscribed.
 */
function dosomething_general_unsubscribe_email($email, $hash) {
  $real_hash = md5($email . md5('ds.org'));
  if ($hash !== $real_hash) {
    drupal_goto('');
  }

  $unsub = new stdClass;
  $unsub->email = $email;
  $unsub->timestamp = REQUEST_TIME;

  drupal_write_record('dosomething_unsubscribed', $unsub);

  $t = '<h1>' . t("Thanks, you won't receive emails from us anymore.") . '</h1>';
  $t .= '<p>' . t('Thank you for your interest in DoSomething.org.  You will no longer receive emails from us.') . '</p>';
  return $t;
}

/**
 * Implements hook_library().
 */
function dosomething_general_library() {
  $libraries = array();
  // make sure the library exists
  if ($path = libraries_get_path('fb-friend-selector')) {
    // add it if it does
    $libraries['fb-friend-finder'] = array(
      'title' => 'Facebook Friend Finder',
      'version' => '1.0',
      'js' => array(
        drupal_get_path('module', 'dosomething_general') . '/js/fb-friend-finder.js' => array(),
        $path . '/tdfriendselector.js' => array(),
      ),
      'css' => array(
        $path . '/tdfriendselector.css' => array(),
      ),
    );
  }
  return $libraries;
}

/**
 * Implements hook_cron().
 */
function dosomething_general_cron() {
  // Make sure cron is considered a background task by New Relic.
  if (function_exists('newrelic_background_job')) {
    newrelic_background_job(TRUE);
  }

  // SYSTEM CRON TASKS
  // Move "safe" system module cron tasks here until we figure out
  // what is going on with crazy

  // Cleanup the flood.
  db_delete('flood')
    ->condition('expiration', REQUEST_TIME, '<')
    ->execute();

  $core = array('cache', 'cache_path', 'cache_filter', 'cache_page', 'cache_form', 'cache_menu');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all(NULL, $table);
  }

  // Cleanup the batch table and the queue for failed batches.
  db_delete('batch')
    ->condition('timestamp', REQUEST_TIME - 864000, '<')
    ->execute();
  db_delete('queue')
    ->condition('created', REQUEST_TIME - 864000, '<')
    ->condition('name', 'drupal_batch:%', 'LIKE')
    ->execute();

  // Reset expired items in the default queue implementation table. If that's
  // not used, this will simply be a no-op.
  db_update('queue')
    ->fields(array(
      'expire' => 0,
    ))
    ->condition('expire', 0, '<>')
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();
   // END SYSTEM CRON TASKS

}

/**
 * Menu callback to associate a webform submission to a newly created or logged in user
 */
function dosomething_general_webform_associate($nid, $sid) {
  global $user;
  $day = 60*60*24;
  $submission = entity_load('webform_submission_entity', array($sid));
  $submission = array_shift($submission);
  if ($submission->uid === '0' && (time() - $submission->submitted) < $day) {
    $submission->uid = $user->uid;
    entity_save('webform_submission_entity', $submission);
  }

  $destination = (isset($_GET['destination'])) ? $_GET['destination'] : drupal_get_path_alias("node/$nid");
  drupal_goto($destination);
}

/**
 *
 **/
function _dosomething_general_user_member_save($member) {
  $endpoint = variable_get('dosomething_restful_endpoint', 'http://api.dosomething.org/v1/members');

  $curl = curl_init();

  $curl_options = array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_HTTPHEADER => array('Accept: application/json'),
    CURLOPT_POST => 1,
    CURLOPT_POSTFIELDS => array('member' => json_encode($member))
  );

  // If uid is present, we want to do a put request
  if (isset($member->uid)) {
    $endpoint .= '/' . $member->uid;
    $curl_options[CURLOPT_CUSTOMREQUEST] = "PUT";
  }

  $curl_options[CURLOPT_URL] = $endpoint;

  curl_setopt_array($curl, $curl_options);
  $response = curl_exec($curl);
  $curl_info = curl_getinfo($curl);

  if ($response === FALSE) {
    // Do something when curl fails.
    //throw new Exception(curl_error($curl), curl_errno($curl));
  }

  if ($curl_info['http_code'] != 200) {
    // Do something when the API is not reachable.
  }

  // We should return the new organization user id
  // $member['id'] = 'XXXXX';
  return $member;
}

/**
 *  Prepares user conversion to member object
 *  @TODO - move me somewhere more appropriate
 **/
function _dosomething_general_user_prepare_member($user) {
  if (is_numeric($user)) {
    $user = user_load($user);
    if ($user === FALSE) return FALSE;
  }

  $profile = profile2_load_by_user($user);

  $member = array(
    'uid' => $user->uid,
    'created' => $user->created,
    'username' => $user->name,
    'firstname' => '',
    'lastname' => '',
    'fullname' => '',
    'gender' => '',
    'date_of_birth' => '',
    'email' => $user->mail,
    'email_addresses' => array(),
    'mobile' => '',
    'mobile_numbers' => array(),
    'addresses' => array(),
    'schools' => array()
  );

  if ($user->mail) $member['email_addresses'][] = $user->mail;

  $fields = array();
  if (isset($profile['main'])) {
    foreach ($profile['main'] as $field_name => $field) {
      if (strpos($field_name, 'field_') == 0) {
        $fields[$field_name] = $field;
        switch($field_name) {
          case 'field_user_address':
            $member['addresses'] = $field['und'];
            break;
          case 'field_user_birthday':
            if ($dob = $field['und'][0]['value']) {
              $dob = strtotime($dob);
              $member['date_of_birth'] = $dob;
            }
            break;
          case 'field_user_first_name':
            $member['firstname'] = $field['und'][0]['value'];
            break;
          case 'field_user_gender':
            $member['gender'] = $field['und'][0]['value'];
            break;
          case 'field_user_last_name':
            $member['lastname'] = $field['und'][0]['value'];
            break;
          case 'field_user_mobile':
            $member['mobile'] = $field['und'][0]['value'];
            $member['mobile_numbers'][] = $field['und'][0]['value'];
            break;
          case 'field_school_reference':
            $schools = array();

            foreach ($field['und'] as $school) {
              $entity = entity_load('ds_school', array($school['target_id']));

              if ($entity) {
                $entity = $entity[$school['target_id']];
                $schools[] = array(
                  'name' => $entity->name,
                  'level' => $entity->level,
                  'country' => $entity->country,
                  'administrative_area' => $entity->state,
                  'locality' => $entity->city,
                  'postal_code' => $entity->zip,
                  'thoroughfare' => $entity->street
                );
              }
            }
            $member['schools'] = $schools;
            break;
        }
      }
    }
  }

  return $member;
}

/**
 * Implements hook_user_delete().
 */
function dosomething_general_user_delete($account) {
  // Ommitting $fbid deletes any existing associations.
  dosomething_login_facebook_friend_process($account->uid);
}

/**
 * Return formatted photo of Facebook friend.
 *   Similar to theme_user_picture but can take unique image style
 *   and doesn't require full user object.
 */
function theme_dosomething_general_facebook_friend_pic($var) {
  // Less overhead than user_load.
  $name = db_query('SELECT name from {users} WHERE uid = :uid', array(':uid' => $var['uid']))->fetchField();
  $filepath = 'https://graph.facebook.com/' . $var['fbid'] . '/picture?type=small';
  $alt = t("@names's picture", array('@name' => $name));
  if (module_exists('image') && $var['image_style']) {
    $picture = theme('image_style', array('style_name' => $var['image_style'], 'path' => $filepath, 'alt' => $alt));
  }
  else {
    $picture = theme('image', array('path' => $filepath, 'alt' => $alt));
  }
  return $picture;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_general_form_alter(&$form, &$form_state, $form_id) {
  // Bug #1866: 404 search doesn't work
  // Changes form action to /search to get away from 404 page.
  $status = drupal_get_http_header('status');
  $forms_to_make_work = array('search_api_page_search_form_demo');
  if ($status == '404 Not Found' && in_array($form_id, $forms_to_make_work)) {
    $form['#action'] = url('search');
  }

  // Override password field description on user login form.
  if ($form_id == 'user_login') {
    // Set this to empty instead of unsetting, to avoid PHP errors that come up for other code that checks for the name description.
    $form['name']['#description'] = '';
    $destination = drupal_get_destination();
    if ($destination['destination'] != current_path()) {
      $forgot_link_query = array('query' => array('destination' => $destination['destination']));
    }
    else {
      $forgot_link_query = array();
    }
    $form['pass']['#description'] = '<span class="forgot-password-link">';
    $form['pass']['#description'] .= l(t('Forgot your password?'), 'user/password', $forgot_link_query);
    $form['pass']['#description'] .= '</span>';
  }
  // Unset N/A option in required field_camp checkboxes.
  if ($form_id == 'club_node_form') {
    unset($form['field_camp'][LANGUAGE_NONE]['#options']['']);
  }
  if (strpos($form_id, 'webform_client_form_') === 0 && $form['#node']->type == 'project_report') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/project-row-weights.js');
  }
  if ($form_id == 'webform_client_form_721642' && request_uri() == '/help-ticket') {
    $form['fav_color'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'style' => 'display: none',
        'placeholder' => t('What is your favorite color?')
      )
    );

    $form['#validate'][] = 'help_form_captcha';
  }
  // Sparknotes scholarship
  if ($form_id == 'webform_client_form_729266') {
    $f = &$form['submitted'];
    if (!user_is_logged_in()) {
      // Make it an actual password field.
      $f['password']['#type'] = 'password';

      // Confirm password.
      $form['#validate'][] = 'sparknotes_scholarship_validate';

      // Push a user to login / register
      $form['#submit'][] = 'sparknotes_scholarship_login';
    }
    else {
      // Remove the password field if the user is logged in.
      if (user_is_logged_in()) {
        $f['password']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Confirms that the user's input is valid.
 */
function sparknotes_scholarship_validate($form, &$form_state) {
  $values = $form_state['input']['submitted'];

  if (!dosomething_api_valid_password($values['email'], $values['password'])) {
    form_set_error('password', t('Invalid email / pass combination.'));
  }
}

/**
 * Login / register some of those sparky noters.
 */
function sparknotes_scholarship_login($form, &$form_state) {
  $values = $form_state['input']['submitted'];
  dosomething_api_create_or_log_in_user($values['first_name'], $values['email'], $values['password'], null, array('profile' => array('mobile' => $values['cell'], 'first_name' => $values['first_name'], 'last_name' => $values['last_name'])));
}

/**
 *  Fake CAPTCHA for the help form.  Users shouldn't be able to fill out the
 *  "favorite color" field.
 */
function help_form_captcha($form, &$form_state) {
  if (isset($form_state['values']['fav_color']) && !empty($form_state['values']['fav_color'])) {
    form_set_error('form', t('Sorry, there was an error with your submission.'));
  }
}

/**
 * Generic handler that validates field_webform_email and field_webform_mobile
 * for updating the user profile objects of the author
 */
function dosomething_general_webform_email_and_mail_validate(&$form, &$form_state) {
  global $user;
  // If the email is set, make sure we can update the user's email address.
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email']) && $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'] != '') {
    $mail = $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
    $account = user_load_by_mail($mail);
    // If we found an account with that email address and the email address does not belong to this user, set an error.
    if ($account && $account->uid != $user->uid) {
      form_set_error('field_webform_email', t('You may not provide the email address of another user, do you have another account?'));
    }
  }
}

/**
 * Generic handler that uses field_webform_email and field_webform_mobile
 * for updating the user profile objects of the author
 */
function dosomething_general_webform_email_and_mail_submit(&$form, &$form_state) {
  global $user;
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value']) && $form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value'] != '') {
    $profile = profile2_load_by_user($user, 'main');
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value'];
    $profile->save();
  }
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email']) && $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'] != '') {
    $variables = array(
      '@username' => $user->name,
      '@old_mail' => $user->mail,
      '@new_mail' => $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'],
    );
    watchdog('dosomething_general', 'Updating the email address for @username from @old_mail to @new_mail', $variables);
    $user->mail = $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
    user_save($user);
  }
}

/**
 * Subscribe a mobile number to a Mobile Commons campaign (id) and via a
 * configured opt-in path.  Send messages to friends as well.
 */
function dosomething_general_mobile_commons_subscribe_with_friends($alpha_mobile, $alpha_opt_in_path, $beta_mobiles, $beta_opt_in_path, $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  global $user;
  if ($user->uid > 0) {
    $profile = profile2_load_by_user($user, 'main');
    $fname = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
    $lname = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];

    $args += array(
      'first_name' => $fname,
      'last_name' => $lname,
    );
  }

  $friends = '';
  foreach ($beta_mobiles AS $key => $mobile) {
    if (!empty($mobile) && dosomething_general_valid_cell($mobile)) {
      $friends .= '&friends[]=' . $mobile;
    }
  }

  $friends .= '&friends_opt_in_path=' . $beta_opt_in_path;

  $apath = '';
  if ($alpha_opt_in_path > 0) {
     $apath = '&opt_in_path[]=' . $alpha_opt_in_path;
  }

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$alpha_mobile" . $apath . $friends,
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }

  $result = drupal_http_request($api_opt_in_path_url, $options);
  return $result;
}

/**
 * Subscribe a mobile number to a Mobile Commons campaign (id) and via a
 * configured opt-in path.
 */
function dosomething_general_mobile_commons_subscribe($mobile, $opt_in_path, $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  global $user;
  if ($user->uid > 0) {
    $profile = profile2_load_by_user($user, 'main');
    $fname = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
    $lname = $profile->field_user_last_name[LANGUAGE_NONE][0]['value'];

    $args += array(
      'first_name' => $fname,
      'last_name' => $lname,
    );
  }

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&opt_in_path[]=$opt_in_path",
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }

  $response = drupal_http_request($api_opt_in_path_url, $options);
  return $response;
}

/**
 *  Returns an XML Mobile Commons response.
 *
 *  @param string $message
 *     The message that should be displayed.
 *
 *  @return string|xml
 *     The XML document, prepared as a mobile commons response.
 */
function dosomething_general_mobile_commons_response($message) {
  echo theme('mc-response', array('message' => $message));
}

/**
 * Get a user's full name as a string.
 *
 * @param $account
 *  (object) A standard user object.
 * @param $display_type
 *  (string) type of name to show (public or private).
 * @return string
 */
function dosomething_general_get_full_name($account, $display_type = 'public') {
  $full_name = '';
  $names = array();
  $profile = profile2_load_by_user($account, 'main');

  if (is_object($profile)) {
    $first_name = (isset($profile->field_user_first_name[LANGUAGE_NONE][0]['value']) ? $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] : '');
    $last_name = (isset($profile->field_user_last_name[LANGUAGE_NONE][0]['value']) ? $profile->field_user_last_name[LANGUAGE_NONE][0]['value'] : '');

    switch ($display_type) {
      case 'private':
        // Show full name if available, otherwise show username.
        $full_name = (!$first_name && !$last_name) ? $account->name : $first_name . ' ' . $last_name;
        break;
      case 'public':
        // Show first name and last initial, or blank if not available.
        $full_name = $first_name . ' ' . substr($last_name, 0, 1);
        break;
    }
  }
  return filter_xss($full_name);
}

/**
 * Search for users users by their cell phone number.
 *
 * @param $number
 *  (string) The cell phone number for which you are searching.
 * @return
 *  The user account object.
 */
function dosomething_general_find_user_by_cell($number) {
  $or = db_or()
    ->condition('mail', $number . '@mobile')
    // Tolerate not having a `1` in the source but having one in the db.
    ->condition('mail', substr($number, 1) . '@mobile')
    // Tolerate having a `1` in the source but not having one in the db.
    ->condition('mail', '1' . $number . '@mobile');
  $uid = db_select('users')
    ->fields('users', array('uid'))
    ->condition($or)
    ->execute()
    ->fetchField();
  if ($uid) {
    return user_load($uid);
  }
  else if ($account = dosomething_load_user_by_profile_cell($number)) {
    // Note: Cell phone numbers are not unique amongst the existing users.
    // otherwise, we can directly search for the cell phone number when
    // logging in. Existing users will have usernames and email addresses
    // so this won't prevent them from logging in.
    return $account;
  }
  return FALSE;
}

/**
 * Load a user object by cell phone.
 *
 * @param $mobile
 *   The cell number exactly as it appears in the database.
 * @return
 *   The user account or false if none is found.
 */
function dosomething_load_user_by_profile_cell($mobile) {
  $without = preg_replace('#[^0-9]#', '', $mobile);
  $with = preg_replace('#1?(\d{3})(\d{3})(\d{4})#', '\\1-\\2-\\3', $without);
  $possibilities = array($with, $without);

  $query = new EntityFieldQuery('profile2');
  $results = $query->entityCondition('entity_type', 'profile2')
    ->fieldCondition('field_user_mobile', 'value', $possibilities, 'IN')
    ->deleted(FALSE)
    // Look for more than one user but cap it at two so we don't waste all day.
    ->range(0, 2)
    ->execute();
  // There are duplicate values in the mobile number field so if there is not
  // exactly one account with the cell phone number don't let them log in this
  // way. They'll need to use the username or email address instead.
  if (isset($results['profile2']) && count($results['profile2']) == 1) {
    $profile = reset($results['profile2']);
    $profile = profile2_load($profile->pid);
    if ($profile) {
      $uid = $profile->uid;
      return user_load($uid);
    }
  }
  return FALSE;
}

/**
 * Load up the related user given and email or cell phone value.
 *
 * @param $value
 *   An email or cell phone value.
 * @return
 *  Either FALSE or the loaded user account.
 */
function dosomething_general_load_user_by_mail_or_cell($value) {
  $account = FALSE;
  if (valid_email_address($value)) {
    $account = user_load_by_mail($value);
  }
  else if ($number = dosomething_general_valid_cell($value)) {
    $account = dosomething_general_find_user_by_cell($number);
  }
  return $account;
}

/**
 * Determine if a cell phone number is valid.
 *
 * @param $number
 *   A cell phone number which may contain special characters.
 * @return bool
 *  Either FALSE or the cleaned up cell phone number (only digits).
 */
function dosomething_general_valid_cell($number) {
  $trimmed_number = dosomething_general_clean_cell_number($number);

  // Three 5's in a row, in the first 6 digits, constitute a bad phone number.
  if (preg_match('#(5{3})#', substr($trimmed_number, 0, 6))) {
    return false;
  }

  return $trimmed_number;
}

/**
 * Clean input phone number of all non-numeric characters.
 *
 * @param $number String to format into a 10-digit phone number
 *
 * @return Numeric-only string of the phone number, or FALSE if input is not a 10-digit number
 */
function dosomething_general_clean_cell_number($number) {
  $trimmed_number = ltrim(preg_replace('#[^0-9]#', '', $number), 1);

  // Make sure the number is 10 digits long.
  if (strlen($trimmed_number) != 10) {
    return false;
  }

  return $trimmed_number;
}

/**
 * Implements hook_form_BASE_FORM_ID_form_alter().
 */
function dosomething_general_form_webform_client_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'dosomething_general_form_webform_client_validate';
}

/**
 * Validate mobile numbers submitted through webform entities.
 */
function dosomething_general_form_webform_client_validate($form, &$form_state) {
  if (isset($form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value']) && $form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value'] != '') {
    if ($form_state['values']['details']['uid'] === 0) return;

    $account = user_load($form_state['values']['details']['uid']);

    $valid_number = dosomething_general_valid_cell($form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value']);
    if (!$valid_number) {
      form_set_error('submitted][field_webform_mobile', t('Please provide a valid cell phone number.'));
    }
    else {
      // Store the cleaned up number.
      $form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value'] = $valid_number;

      if ($phone_account = dosomething_general_find_user_by_cell($valid_number)) {
        if ($phone_account->uid != $account->uid) {
          form_set_error('submitted][field_webform_mobile', t('The provided cell phone number is already in use by another account.  !goback', array(
            '!goback' => l(t('Go back?'), $_SERVER['HTTP_REFERER'])
            )
          ));
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function dosomething_general_token_info() {
 $info['tokens']['user']['ds_member_name'] = array(
    'name' => t('Member Name'),
    'description' => t('Full name or username if not available'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function dosomething_general_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'ds_member_name':
          $name = dosomething_general_get_full_name($data['user'], 'private');
          $replacements[$original] = $name;
        break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_cools_render_alter().
*/
function dosomething_general_ctools_render_alter($info, $page, $context) {
  $panels_pane = FALSE;
  //we only want to do this if there's only one node in the context
  module_load_include('inc', 'panels', 'plugins/task_handlers/panel_context');
  $display_context = panels_panel_context_get_display($context['handler']);
  if (count($display_context->context) > 0) {
    $local_context = $display_context->context;
    $panels_pane = TRUE;
  }
  else if (count($context['contexts']) == 1) {
    $local_context = $context['contexts'];
  }
  if (isset($local_context)) {
    foreach ($local_context as $ctxt) {
      if (in_array('node', (array) $ctxt->type) && is_object($ctxt->data)) {
        $node = $ctxt->data;
        if ($panels_pane) {
          $node->opengraph_meta['url'] = url(current_path(), array('absolute' => TRUE));
        }

        if (isset($node->opengraph_meta)) {
           OpenGraphMeta::instance()->render_data($node, $node->opengraph_meta);
        }
        break;
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dosomething_general_ctools_plugin_type() {
  return array(
    'webform_counter' => array(
      'load themes' => TRUE,
      'cache' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function dosomething_general_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 *  Implements hook_user_logout().
 */
function dosomething_general_user_logout($account) {
  $goto = str_replace('http://' . $_SERVER['HTTP_HOST'] . '/', '', $_SERVER['HTTP_REFERER']);
  $_GET['destination'] = $goto;
}

/**
 *  Cleans a string of risky characters and replaces them.
 *
 *  @param string $string
 *    The string you want to clean.
 *
 *  @param string $nix
 *    The characters that should be replaced.  Must be a valid regular expression,
 *    given two '#' delimiters.
 *
 *  @param string $replace_with
 *    What to replace the unneeded characters with.
 *
 *  @return string
 *    The cleaned string.
 */
function dosomething_general_clean_string($string, $nix = '[^A-Za-z0-9\-\_]', $replace_with = '_') {
  $string = preg_replace('#' . $nix . '#i', $replace_with, $string);
  return $string;
}

/**
 *  Gets multiple Drupal user IDs, given an array of Facebook IDs
 *
 *  @param array $users
 *    An array of Facebook user IDs.
 *
 *  @return bool|array
 *    false if array is empty or not an array; an array of FBids matched to UIDs
 *    on success.
 */
function dosomething_general_get_multi_fbids($users) {
  if (empty($users) || !is_array($users)) {
    return false;
  }

  // Query for FBID's given UIDs
  $result = db_query("SELECT uid, 1 FROM {fboauth_users} WHERE fbid IN (" . implode(',', $users) . ")");
  // Fetch keyed so we don't get excess information
  $uids = $result->fetchAllKeyed();

  // Return the keys
  return array_keys($uids);
}

/**
 * Implements hook_file_presave().
 */
function dosomething_general_file_presave($file) {
  // Resize image file if it is larger than 800 wide or tall
  _dosomething_general_imagefile_scale($file, 960);
}

/**
 *  Takes a file object and scales it down if it is of
 *  type image. The filesize on the file object is then updated.
 *
 *  @param object $file
 *    A file object.
 *
 *  @param int $scale
 *    The max width or height to scale the image to.
 *
 *  @return bool
 */
function _dosomething_general_imagefile_scale($file, $scale = 800) {
  // Make sure the file is an image
  if (preg_match('/^image\//', $file->filemime) !== 1) return FALSE;

  // Load the image object
  if (!$img = image_load($file->uri)) return FALSE;

  $dim = array(
    'width' => $img->info['width'],
    'height' => $img->info['height']
  );

  // Check if this image can be scaled down
  if (!image_dimensions_scale($dim, $scale, $scale, FALSE) ) return FALSE;

  // Lets resize the image.
  if (!image_resize($img, $dim['width'], $dim['height'])) return FALSE;

  // Save the image file object
  if (!image_save($img)) return FALSE;

  // Update the file object with the new file size
  $file->filesize = $img->info['file_size'];

  return TRUE;
}

/**
 *  Returns array of all node nid's for a given node type.
 *
 *  @param string $node_type
 *    Node type to query by.
 *
 *  @return array
 *    Array of Node nids.
 */
function dosomething_general_get_nids_by_type($node_type) {
  return db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', $node_type)
      ->execute()
      ->fetchCol();
}
