<?php

/**
 * @file
 * General custom tweaks to dosomething.
 */

/**
 * Implements hook_views_pre_view().
 */
function dosomething_general_views_pre_view(&$view, &$display_id, &$args) {
  // Add the blog-archive.js file to the Blog Archive block.
  if ($view->name == 'blog_center' && $display_id == 'blog_archive_block') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/blog-archive.js'); 
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_general_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_general_facebook_friend_pic' => array(
      'variables' => array('fbid' => NULL, 'uid' => NULL, 'image_style' => NULL),
    ), 
  );
}

/**
 * Return formatted photo of Facebook friend.
 *   Similar to theme_user_picture but can take unique image style
 *   and doesn't require full user object.
 */
function theme_dosomething_general_facebook_friend_pic($var) { 
  // Less overhead than user_load.
  $name = db_query('SELECT name from {users} WHERE uid = :uid', array(':uid' => $var['uid']))->fetchField();
  $filepath = 'https://graph.facebook.com/' . $var['fbid'] . '/picture?type=small';
  $alt = t("@names's picture", array('@name' => $name));
  if (module_exists('image') && $var['image_style']) {
    $picture = theme('image_style', array('style_name' => $var['image_style'], 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
  }
  else {
    $picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
  }
  if (user_access('access user profiles')) {
    $attributes = array(
      'attributes' => array('title' => t('View user profile.')),
      'html' => TRUE,
    );
    $picture = l($picture, "user/" . $var['uid'], $attributes);
  }
  return $picture;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_general_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-resources-panel-pane-1') {
    // Override #option values on action-finder content type exposed filter.
    if ($form_id == 'views_exposed_form' && $form['#info']['filter-type']['value'] == 'type') {
      $form['type']['#options']['All'] = 'All types';
      $form['type']['#options']['tips_and_tools'] = 'Facts and More';
    }
    // Override #option values on action-finder cause exposed filter. 
    if ($form_id == 'views_exposed_form' && $form['#info']['filter-taxonomy_vocabulary_5_tid']['value'] == 'cause') {
      $form['cause']['#options']['All'] = 'All subjects';
    }
  }
  else if (isset($form['#node']) && strpos($form_id, 'webform_client_form_') === 0) {
    $webform_types = array('grant_application');
    if (in_array($form['#node']->type, $webform_types)) {
      $form['#validate'][] = 'dosomething_general_webform_validate';
    }
  }
}

/**
 * Custom validation on webforms.
 */
function dosomething_general_webform_validate($form, &$form_state) {
  // This is here to fix an issue with the webform module which
  // forces the form to be submitted twice before it will work.
  // This shouldn't be a problem when the form is invalid.
  // It is very similar to an issue with the profile2 module
  // See http://drupal.org/node/1040038 for details.
  $form_state['rebuild'] = FALSE;
}
