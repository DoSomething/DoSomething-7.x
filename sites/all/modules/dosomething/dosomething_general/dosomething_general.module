<?php

/**
 * @file
 * General custom tweaks to dosomething.
 */

/**
 * Implements hook_init().
 */
function dosomething_general_init() {
  drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/iframe-defer.js', array(
    'scope' => 'footer',
    'every_page' => TRUE,
  ));
}

/**
 *  Implements hook_module_implements_alter().
 */
function dosomething_general_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'mail_alter' && isset($implementations['dosomething_general'])) {
    $group = $implementations['dosomething_general'];
    unset($implementations['dosomething_general']);
    $implementations['dosomething_general'] = $group;
  }
}

/**
 *  Returns array values for a multi-dimensional array.
 */
function dosomething_general_array_vals_multi($array = array(), &$vals = array()) {
  foreach ($array as $key => $value) {
    if (is_array($value) || is_object($value)) {
      dosomething_general_array_vals_multi($value,$vals);
    }
    else{
      $vals[] = $value; 
    }
  }

  return $vals;
}

/**
 *  Implements hook_mail_alter().
 */
function dosomething_general_mail_alter(&$message) {
  // For known user module emails put a bit of text explaining the reason for
  // the message into the "std_preheader_content" region.
  if ($message['module'] == 'user') {
    $reasons = array(
      'register_no_approval_required' => t("We want to welcome you to DoSomething.org."),
      'password_reset' => t("You submitted a password recovery request."),
      'status_activated' => t("Your DoSomething.org account has been activated."),
      'status_blocked' => t("Your DoSomething.org account has been blocked."),
      'cancel_confirm' => t("Confirm the cancelation of your DoSomething.org account."),
      'status_canceled' => t("Your DoSomething.org account has been canceled."),
    );
    if (isset($reasons[$message['key']])) {
      $message['mandrill_template_content']['std_preheader_content'] = $reasons[$message['key']];
    }
  }
  // Build a per recipient unsubscribe link.
  $message['mandrill_merge_vars'][$message['to']]['unsub'] = url('unsubscribe-email/' . $message['to'], array('alias' => TRUE, 'absolute' => TRUE));

  if ($message['key'] == 'petition_invite') {
    $nosend = db_select('dosomething_unsubscribed', 'u')
    ->fields('u')
    ->condition('email', $message['to'], '=')
    ->execute();

    if ($nosend->rowCount()) {
      // If they've unsubscribed from our emails, don't email them!
      $message['send'] = FALSE;
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function dosomething_general_views_pre_view(&$view, &$display_id, &$args) {
  // Add the blog-archive.js file to the Blog Archive block.
  if ($view->name == 'blog_center' && $display_id == 'blog_archive_block') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/blog-archive.js');
  }
  // Add project-photo-slider.js file to the project_photo_slider views content pane.
  if ($view->name == 'project_photo_slider' && $display_id == 'panel_pane_1') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/project-photo-slider.js');
  }
  // Add homepage-photo-slider.js file to the home_slideshow views content pane.
  if ($view->name == 'home_slideshow' && $display_id == 'panel_pane_1') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/homepage-photo-slider.js');
  }
}

/**
 * Implements hook_page_alter().
 *
 * We want to provide more detail to New Relic on the transaction and late in
 * the page build seemed like the simplest place.
 */
function dosomething_general_page_alter(&$page) {
  if (!extension_loaded('newrelic')) {
    return;
  }

  $name = NULL;

  $panel_page = page_manager_get_current_page();
  if (isset($panel_page['name'])) {
    if ($panel_page['name'] == 'node_view') {
      if (isset($panel_page['contexts']['argument_entity_id:node_1']->data)) {
        $node = $panel_page['contexts']['argument_entity_id:node_1']->data;
        $name = 'page_manager_node_view_page/' . $node->type;
      }
    }
    else if ($panel_page['name'] == 'webform_submission_view') {
      if (isset($panel_page['contexts']['argument_entity_id:webform_submission_entity_1']->data)) {
        $submission = $panel_page['contexts']['argument_entity_id:webform_submission_entity_1']->data;
        $name = 'webform_entity_pages_webform_submission_view_page/' . $submission->bundle;
      }
    }
    else if ($panel_page['task']['task type'] == 'page') {
      $name = 'page_manager_page_execute/' . $panel_page['name'];
    }
  }
  else {
    $menu_item = menu_get_item();
    if ($menu_item['path'] == 'node/%') {
      // Looks like panels didn't have a variant and it's falling back to
      // node_page_view.
      $name = 'node_page_view/' . $menu_item['page_arguments'][0]->type;
    }
  }

  if ($name) {
    newrelic_name_transaction($name);
  }
}

/**
 * Implements hook_theme().
 */
function dosomething_general_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_general_facebook_friend_pic' => array(
      'variables' => array('fbid' => NULL, 'uid' => NULL, 'image_style' => NULL),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dosomething_general_menu() {
  $items['webform-post-submit-associate/%/%'] = array(
    'page callback' => 'dosomething_general_webform_associate',
    'page arguments' => array(1,2),
    'access callback' => 'user_is_logged_in',
  );

  $items['unsubscribe-email/%/%'] = array(
    'page callback' => 'dosomething_general_unsubscribe_email',
    'page arguments' => array(1, 2),
    'access callback' => TRUE
  );

  $items['admin/people/search-by-email'] = array(
    'page callback' => 'drupal_get_form',
    'title' => t('Search by email'),
    'page arguments' => array('search_by_email_form'),
    'access arguments' => array('administer users'),
  );

  $items['admin/people/search-by-email/results'] = array(
    'page callback' => 'dosomething_general_search_by_email_results',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export'] = array(
    'page callback' => 'dosomething_general_pull_user_export',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export/finished'] = array(
    'page callback' => 'dosomething_general_pull_user_export_finished',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/search-by-email/results/export/file'] = array(
    'page callback' => 'dosomething_general_pull_user_export_file',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function search_by_email_form($form, &$form_state) {
  $form['description'] = array(
    '#markup' => 'Paste a comma-separated list of emails here.',
    '#prefix' => '<p>',
    '#suffix' => '</p>'
  );

  $form['emails'] = array(
    '#type' => 'textarea',
    '#attributes' => array(
      'id' => 'emails-list',
      'placeholder' => t('Paste some emails here.')
    ),
    '#required' => true
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('id' => 'submit-emails', 'class' => array('go-button')),
    '#value' => 'Search for users'
  );

  $form['#submit'][] = 'search_by_email_results';
  return $form;
}

function dosomething_general_trim_email_addresses(&$email, $key, $prefix) {
  $email = trim($email);
}

function search_by_email_results($form, &$form_state) {
  $emails = $form_state['values']['emails'];
  $emails = explode("\r\n", $emails);
  $emails = implode(',', $emails);
  if (!empty($emails)) {
    $emails = explode(',', $emails);
    array_walk($emails, 'dosomething_general_trim_email_addresses');

    // Basic user information: Uid, name, created, email
    $u = db_select('users', 'u')
      ->fields('u', array('uid', 'name', 'created', 'mail'))
      ->condition('mail', $emails, 'IN');

    // Associated club IDs
    $u->leftJoin('node', 'n', "n.type = 'club' AND n.uid = u.uid AND n.status = 1");
    $u->addExpression("GROUP_CONCAT(DISTINCT n.nid)", 'club_ids');

    $u->groupBy('u.uid');

    $r = $u->execute()->fetchAll();
    foreach ($r AS $key => $user) {
      $u = user_load($user->uid);
      $p = profile2_load_by_user($u, 'main');

     // Mailing address
      $c = db_select('field_data_field_club_address', 'a')
        ->condition('a.entity_id', explode(',', $user->club_ids), 'IN');
      $c->addField('a', 'field_club_address_value', 'address');

      $c->leftJoin('field_data_field_club_city', 'city', 'city.entity_id = a.entity_id');
      $c->addField('city', 'field_club_city_value', 'city');

      $c->leftJoin('field_data_field_club_state', 'state', 'state.entity_id = a.entity_id');
      $c->addField('state', 'field_club_state_value', 'state');

      $c->leftJoin('field_data_field_club_zip', 'zip', 'zip.entity_id = a.entity_id');
      $c->addField('zip', 'field_club_zip_value', 'zip');

      $c->leftJoin('field_data_field_school_reference', 'school', "school.bundle = 'club' AND school.entity_id = a.entity_id AND school.deleted = 0");
      $c->leftJoin('ds_school', 's', 's.sid = school.field_school_reference_target_id');
      $c->fields('s', array('name', 'level', 'city', 'state', 'zip', 'street'));

      $c->range(0, 1);
      $mailing = $c->execute()->fetchAll();
      $club = reset($mailing);

      $extends = array(
        'first_name' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
        'last_name' => $p->field_user_last_name[LANGUAGE_NONE][0]['value'],
        'cell_number' => $p->field_user_mobile[LANGUAGE_NONE][0]['value'],
        'birthday' => $p->field_user_birthday[LANGUAGE_NONE][0]['value'],
        'gender' => $p->fild_user_gender[LANGUAGE_NONE][0]['value'],
        'mailing_address' => array(
          'address' => $club->address,
          'city' => $club->city,
          'state' => $club->state,
          'zip' => $club->zip
        ),
        'school' => array(
          'name' => $club->name,
          'level' => $club->level,
          'street' => $club->street,
          'city' => $club->s_city,
          'state' => $club->s_state,
          'zip' => $club->s_zip
        )
      );

      $r["$key"] = array_merge((array) $r["$key"], $extends);
    }

    $_SESSION['users'] = $r;
    drupal_goto('admin/people/search-by-email/results');
  }
  exit;
}

function dosomething_general_search_by_email_results() {
  $header = array(
    array('data' => t('User ID'), 'class' => array('user-lookup-uid')),
    array('data' => t('User Name'), 'class' => array('user-lookup-name')),
    array('data' => t('Created'), 'class' => array('user-lookup-created')),
    array('data' => t('Email'), 'class' => array('user-lookup-mail')),
    array('data' => t('Club IDs'), 'class' => array('user-lookup-club-ids')),
    array('data' => t('First Name'), 'class' => array('user-lookup-first-name')),
    array('data' => t('Last Name'), 'class' => array('user-lookup-last-name')),
    array('data' => t('Cell Number'), 'class' => array('user-lookup-mobile')),
    array('data' => t('Birthday'), 'class' => array('user-lookup-birthday')),
    array('data' => t('Gender'), 'class' => array('user-lookup-gender')),
    array('data' => t('Mailing Address'), 'class' => array('user-lookup-mailing-address')),
    array('data' => t('Mailing City'), 'class' => array('user-lookup-mailing-city')),
    array('data' => t('Mailing State'), 'class' => array('user-lookup-mailing-state')),
    array('data' => t('Mailing ZIP'), 'class' => array('user-lookup-mailing-zip')),
    array('data' => t('School Name'), 'class' => array('user-lookup-school-name')),
    array('data' => t('School Level'), 'class' => array('user-lookup-school-level')),
    array('data' => t('School Street'), 'class' => array('user-lookup-school-street')),
    array('data' => t('School City'), 'class' => array('user-lookup-school-city')),
    array('data' => t('School State'), 'class' => array('user-lookup-school-state')),
    array('data' => t('School ZIP'), 'class' => array('user-lookup-school-zip'))
  );

  $num = 2;

  $num_per_page = 100;
  $page = pager_default_initialize($num, $num_per_page);

  $offset = $num_per_page * $page;

  $pages = array();
  $results = $_SESSION['users'];
  foreach ($results AS $key => $user) {
    $pages['rows'][] = array('data' => array(
      'uid' => $user['uid'],
      'name' => $user['name'],
      'created' => date('m/d/Y', $user['created']),
      'email' => $user['mail'],
      'club_ids' => $user['club_ids'],
      'fname' => $user['first_name'],
      'lname' => $user['last_name'],
      'mobile' => $user['cell_number'],
      'birthday' => date('m/d/Y', strtotime($user['birthday'])),
      'gender' => $user['gender'],
      'mailing address' => $user['mailing_address']['address'],
      'mailing city' => $user['mailing_address']['city'],
      'mailing state' => $user['mailing_address']['state'],
      'mailing zip' => $user['mailing_address']['zip'],
      'school name' => $user['school']['name'],
      'school level' => $user['school']['level'],
      'school street' => $user['school']['street'],
      'school city' => $user['school']['city'],
      'school state' => $user['school']['state'],
      'school zip' => $user['school']['zip']
    ));
  }

  $content .= l('+ Export User Data', 'admin/people/search-by-email/results/export');
  $content .= theme('pager');
  $content .= '<p />' . theme('table', array('header' => $header, 'rows' => $pages['rows'], 'attributes' => array('id' => 'user-lookup-results')));
  $content .= theme('pager');

  return $content;
}

function dosomething_general_pull_user_export_file() {
  if (strpos($_SESSION['csv_download_file'], drupal_realpath('private://')) === FALSE) {
    return 'Access denied!';
  }

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $_SESSION['csv_download_filename'], TRUE);

  drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

  readfile($_SESSION['csv_download_file']);
  exit;
}

function dosomething_general_pull_user_export_finished() {
  global $base_url;

  if (empty($_SESSION['csv_download_filename']) || empty($_SESSION['csv_download_file'])) {
    return t('Sorry, there was an error in creating your file.');
  }

  $redirect = base_path() . 'admin/people/search-by-email/results/export/file';
  drupal_add_js('setTimeout(function() { window.location.href = "' . $redirect . '"; }, 2000);', 'inline');

  $download_link = t('Your export is complete! If your download does not begun automatically, !click!', array(
    '!click' => l(t('Click here'), 'admin/people/search-by-email/results/export/file'))
  );

  $output = '<p>' . $download_link . '</p>';
  return $output;
}

define('USER_PULL_LIMIT', 25);

function dosomething_general_pull_user_export() {
  $count = count($_SESSION['users']);

  $b = ceil($count / USER_PULL_LIMIT);
  $operations = array();
  for ($i = 0; $i < $b; $i++) {
    $operations[] = array('dosomething_general_pull_user_batch_process', array());
  }

  $batch = array(
    'title' => t('Exporting user data (This will take some time...)'),
    'operations' => $operations,
    'finished' => 'dosomething_general_pull_user_batch_finished',
  );
  batch_set($batch);
  batch_process('admin/people/search-by-email/results/export/finished');
}

function dosomething_general_pull_user_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('The User Data was successfully exported.  Your file should begin downloading automatically, or !click.', array('!click' => l(t('click here'), 'admin/people/search-by-email/results/export/file')));
    $warning = 'status';
  }
  else {
    $mssage = t("Sorry, we couldn't successfully export the user data.  Please try again later.");
    $warning = 'error';
  }

  $results = $_SESSION['batch_results'];
  unset($_SESSION['batch_results']);
  session_start();
  $_SESSION['csv_download_file'] = $results['file'];
  $_SESSION['csv_download_filename'] = $results['filename'];
  drupal_set_message($message, $warning);
}

function dosomething_general_pull_user_batch_process(&$context) {
  static $context;

  $context['finished'] = 0;
  if (!isset($context['sandbox']['step'])) {
    $context['sandbox']['step'] = 0;
  }

  if (!isset($context['sandbox']['file'])) {
     $field_labels = array(
      t('User ID'),
      t('User Name'),
      t('Created'),
      t('Email'),
      t('Club IDs'),
      t('First Name'),
      t('Last Name'),
      t('Cell Number'),
      t('Birthday'),
      t('Gender'),
      t('Mailing Address'),
      t('Mailing City'),
      t('Mailing State'),
      t('Mailing ZIP'),
      t('School Name'),
      t('School Level'),
      t('School Street'),
      t('School City'),
      t('School State'),
      t('School ZIP'),
    );

    $filename = 'users_export_' . date('m-d-y', REQUEST_TIME) . '.csv';
    $file_path = drupal_realpath('private://') . '/' . $filename;
    $handle = fopen($file_path, 'w');
    fputcsv($handle, $field_labels);
    fclose($handle);

    $users = $_SESSION['users'];
    $context['sandbox']['users'] = $users;
    $context['sandbox']['total_users'] = count($users);
    $context['sandbox']['users_count'] = count($users);

    $context['sandbox']['file'] = $file_path;
    $context['sandbox']['fields'] = $field_labels;

    $context['results']['filename'] = $filename;
    $context['results']['file'] = $file_path;
    $context['results']['list_id'] = $list_id;
  }

  if (!isset($context['results']['count'])) {
    $context['results']['count'] = 0;
  }

  $handle = fopen($context['sandbox']['file'], 'a');
  reset($context['sandbox']['users']);
  for ($i = $context['sandbox']['step']; $i < (USER_PULL_LIMIT * ($context['sandbox']['step'] + 1)); $i++) {
    $remaining = --$context['sandbox']['users_count'];

    if ($remaining >= 0) {
      $user = $context['sandbox']['users']["$i"];
      $u = array(
        'uid' => $user['uid'],
        'name' => $user['name'],
        'created' => date('m/d/Y', $user['created']),
        'email' => $user['mail'],
        'club_ids' => $user['club_ids'],
        'fname' => $user['first_name'],
        'lname' => $user['last_name'],
        'mobile' => $user['cell_number'],
        'birthday' => date('m/d/Y', strtotime($user['birthday'])),
        'gender' => $user['gender'],
        'mailing address' => $user['mailing_address']['address'],
        'mailing city' => $user['mailing_address']['city'],
        'mailing state' => $user['mailing_address']['state'],
        'mailing zip' => $user['mailing_address']['zip'],
        'school name' => $user['school']['name'],
        'school level' => $user['school']['level'],
        'school street' => $user['school']['street'],
        'school city' => $user['school']['city'],
        'school state' => $user['school']['state'],
        'school zip' => $user['school']['zip']
      );

      unset($context['sandbox']['users']["$i"]);

      fputcsv($handle, $u);
      $context['results']['count']++;
      $context['finished'] = ($context['results']['count'] / $context['sandbox']['total_users']);
    }
    else {
      $_SESSION['batch_results'] = $context['results'];
      $context['finished'] = 1;
      break;
    }
  }

  fclose($handle);
  $context['sandbox']['step']++;

  $context['message'] = t('Exporting User Data: @count of @total.', array(
    '@count' => $context['results']['count'],
    '@total' => $context['sandbox']['total_users']
  ));
}

function dosomething_general_unsubscribe_email($email, $hash) {
  $real_hash = md5($email . md5('ds.org'));
  if ($hash !== $real_hash) {
    drupal_goto('');
  }

  $unsub = new stdClass;
  $unsub->email = $email;
  $unsub->timestamp = REQUEST_TIME;
#  $unsub->type = 'petition';
#  $unsub->hash = $hash;

  drupal_write_record('dosomething_unsubscribed', $unsub);

  $t = '<h1>' . t("Thanks, you won't receive emails from us anymore.") . '</h1>';
  $t .= '<p>' . t('Thank you for your interest in DoSomething.org.  You will no longer receive emails from us.') . '</p>';
  return $t;
}

/*
 * Implements hook_library().
 */
function dosomething_general_library() {
  $libraries = array();
  // make sure the library exists
  if ($path = libraries_get_path('fb-friend-selector')) {
    // add it if it does
    $libraries['fb-friend-finder'] = array(
      'title' => 'Facebook Friend Finder',
      'version' => '1.0',
      'js' => array(
        drupal_get_path('module', 'dosomething_general') . '/js/fb-friend-finder.js' => array(),
        $path . '/tdfriendselector.js' => array(),
      ),
      'css' => array(
        $path . '/tdfriendselector.css' => array(),
      ),
    );
  }
  return $libraries;
}

/**
 * Implements hook_cron().
 */
function dosomething_general_cron() {
  // Make sure cron is considered a background task by New Relic.
  if (function_exists('newrelic_background_job')) {
    newrelic_background_job(TRUE);
  }
}

/**
 * Menu callback to associate a webform submission to a newly created or logged in user
 */
function dosomething_general_webform_associate($nid, $sid) {
  global $user;
  $day = 60*60*24;
  $submission = entity_load('webform_submission_entity', array($sid));
  $submission = array_shift($submission);
  if ($submission->uid === '0' && (time() - $submission->submitted) < $day) {
    $submission->uid = $user->uid;
    entity_save('webform_submission_entity', $submission);
  }

  $destination = (isset($_GET['destination'])) ? $_GET['destination'] : drupal_get_path_alias("node/$nid");
  drupal_goto($destination);
}

/**
 * Implements hook_user_delete().
 */
function dosomething_general_user_delete($account) {
  // Ommitting $fbid deletes any existing associations.
  dosomething_login_facebook_friend_process($account->uid);
}

/**
 * Return formatted photo of Facebook friend.
 *   Similar to theme_user_picture but can take unique image style
 *   and doesn't require full user object.
 */
function theme_dosomething_general_facebook_friend_pic($var) {
  // Less overhead than user_load.
  $name = db_query('SELECT name from {users} WHERE uid = :uid', array(':uid' => $var['uid']))->fetchField();
  $filepath = 'https://graph.facebook.com/' . $var['fbid'] . '/picture?type=small';
  $alt = t("@names's picture", array('@name' => $name));
  if (module_exists('image') && $var['image_style']) {
    $picture = theme('image_style', array('style_name' => $var['image_style'], 'path' => $filepath, 'alt' => $alt));
  }
  else {
    $picture = theme('image', array('path' => $filepath, 'alt' => $alt));
  }
  return $picture;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_general_form_alter(&$form, &$form_state, $form_id) {
  // Bug #1866: 404 search doesn't work
  // Changes form action to /search to get away from 404 page.
  $status = drupal_get_http_header('status');
  $forms_to_make_work = array('search_api_page_search_form_demo');
  if ($status == '404 Not Found' && in_array($form_id, $forms_to_make_work)) {
    $form['#action'] = url('search');
  }

  // Override password field description on user login form.
  if ($form_id == 'user_login') {
    $form['pass']['#description'] = t('Enter the password that accompanies your email, username, or cell phone number.');
  }
  // Unset N/A option in required field_camp checkboxes.
  if ($form_id == 'club_node_form') {
    unset($form['field_camp'][LANGUAGE_NONE]['#options']['']);
  }
  if (strpos($form_id, 'webform_client_form_') === 0 && $form['#node']->type == 'project_report') {
    drupal_add_js(drupal_get_path('module', 'dosomething_general') . '/js/project-row-weights.js');
  }
  if ($form_id == 'webform_client_form_721642' && request_uri() == '/help-ticket') {
    $form['fav_color'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'style' => 'display: none',
        'placeholder' => t('What is your favorite color?')
      )
    );

    $form['#validate'][] = 'help_form_captcha';
  }
}

function help_form_captcha($form, &$form_state) {
  if (isset($form_state['values']['fav_color']) && !empty($form_state['values']['fav_color'])) {
    form_set_error('form', t('Sorry, there was an error with your submission.'));
  }
}

/**
 * Generic handler that validates field_webform_email and field_webform_mobile
 * for updating the user profile objects of the author
 */
function dosomething_general_webform_email_and_mail_validate(&$form, &$form_state) {
  global $user;
  // If the email is set, make sure we can update the user's email address.
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email']) && $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'] != '') {
    $mail = $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
    $account = user_load_by_mail($mail);
    // If we found an account with that email address and the email address does not belong to this user, set an error.
    if ($account && $account->uid != $user->uid) {
      form_set_error('field_webform_email', t('You may not provide the email address of another user, do you have another account?'));
    }
  }
}

/**
 * Generic handler that uses field_webform_email and field_webform_mobile
 * for updating the user profile objects of the author
 */
function dosomething_general_webform_email_and_mail_submit(&$form, &$form_state) {
  global $user;
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value']) && $form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value'] != '') {
    $profile = profile2_load_by_user($user, 'main');
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $form_state['webform_entity']['submission']->submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value'];
    $profile->save();
  }
  if (isset($form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email']) && $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'] != '') {
    $variables = array(
      '@username' => $user->name,
      '@old_mail' => $user->mail,
      '@new_mail' => $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'],
    );
    watchdog('dosomething_general', 'Updating the email address for @username from @old_mail to @new_mail', $variables);
    $user->mail = $form_state['webform_entity']['submission']->submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
    user_save($user);
  }
}

/**
 * Generic handler that uses field_webform_email and field_webform_mobile
 * combined with the $node values for inserting values into InfusionSoft/Mailchimp
 * and/or Mobile Commons
 */
function dosomething_general_webform_email_and_mobile_subscribe(&$form, &$form_state) {
  // If we don't have a node or a webform submission there's really nothing we
  // can do. This handler was probably put on the wrong form.
  if (!isset($form['#node']) || !isset($form_state['webform_entity']['submission']->submitted)) {
    return;
  }
  $node = $form['#node'];
  $submitted = $form_state['webform_entity']['submission']->submitted;

  $cell = isset($submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value']) ? $submitted['field_webform_mobile'][LANGUAGE_NONE][0]['value'] : NULL;
  if (!empty($cell)) {
    if (!empty($node->field_mc_optin[LANGUAGE_NONE][0]['value'])) {
      dosomething_general_mobile_commons_subscribe($cell, $node->field_mc_optin[LANGUAGE_NONE][0]['value']);
    }
  }

  // Different instances of the email field use different widgets so we have to
  // look in two places to find their email address.
  if (isset($submitted['field_webform_email'][LANGUAGE_NONE][0]['email'])) {
    $email = $submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
  }
  elseif (isset($submitted['field_webform_email'][LANGUAGE_NONE][0]['value'])) {
    $email = $submitted['field_webform_email'][LANGUAGE_NONE][0]['value'];
  }
  if (!empty($email)) {
    if (!empty($node->field_infusion_action[LANGUAGE_NONE][0]['value'])) {
      dosomething_general_infusionsoft_subscribe($email, $node->field_infusion_action[LANGUAGE_NONE][0]['value']);
    }
    if (!empty($node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'])) {
      dosomething_general_mailchimp_subscribe($email, $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value']);
    }
  }
}

/**
 * Multi-function form submit handler that aggressively looks for emails and
 * other data in form submissions, then sends them to mailchimp.
 *
 * @param $form
 * @param $form_state
 */
function dosomething_general_webform_mailchimp_find_and_send(&$form, &$form_state) {
  $node = $form['#node'];
  $submitted = $form_state['webform_entity']['submission']->submitted;

  $email = '';
  if (!empty($submitted['email'])) {
    $email = $submitted['email'];
  }
  elseif (!empty($submitted['field_webform_email'][LANGUAGE_NONE][0]['email'])) {
    $email = $submitted['field_webform_email'][LANGUAGE_NONE][0]['email'];
  }
  elseif (!empty($submitted['field_webform_email'][LANGUAGE_NONE][0]['value'])) {
    $email = $submitted['field_webform_email'][LANGUAGE_NONE][0]['value'];
  }

  // An email and a mailchimp group id are the base requirements. Without them,
  // bail out.
  if (empty($node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value']) || empty($email)) {
    return;
  }

  // Now, find extra fields.
  $merge_vars = array();

  if (!empty($submitted['birthday'])
      && !empty($submitted['birthday']['month'])
      && !empty($submitted['birthday']['day'])) {
    $month = str_pad($submitted['birthday']['month'], 2, '0', STR_PAD_LEFT);
    $merge_vars['BDAY'] = $month . '/' . $submitted['birthday']['day'];
    if (!empty($submitted['birthday']['year'])) {
      $merge_vars['BDAYFULL'] = $merge_vars['BDAY'] . "/" . $submitted['birthday']['year'];
    }
  }

  if (!empty($submitted['first_name'])) {
    $merge_vars['FNAME'] = $submitted['first_name'];
  }

  if (!empty($submitted['last_name'])) {
    $merge_vars['LNAME'] = $submitted['last_name'];
  }

  dosomething_general_mailchimp_subscribe($email, $node->field_mailchimp_group_id[LANGUAGE_NONE][0]['value'], $merge_vars);
}

/**
 * Subscribe an email address to InfusionSoft using an action.
 * Note: tags are assigned in InfusionSoft via the action, not in Drupal.
 */
function dosomething_general_infusionsoft_subscribe($emails, $action_id) {
  if (!is_array($emails)) $emails = array($emails);

  include_once('infusionsoft_sdk/src/isdk.php');
  $app = new iSDK;

  if($app->cfgCon("emaildrop")) {
    foreach ($emails as $email) {
      if (empty($email)) continue;
      // set up the data to send to infusionsoft
      $contact = array('Email' => $email);

      //check for existing contact;
      $returnFields = array('Id');
      $dups = $app->findByEmail($contact['Email'], $returnFields);

      /*If email is not a duplicate*/
      if (empty($dups)) {
        // add new contact and add them to the action set
        $dups = $app->addCon($contact);
        $app->runAS($dups, $action_id);
      }
      else {
        /*If the email is a duplicate*/
        $contactId = $dups[0]['Id'];
        $app->runAS($contactId, $action_id);
      }
    }
  }
}

/**
 * Subscribe a mobile number to a Mobile Commons campaign (id) and via a
 * configured opt-in path.
 */
function dosomething_general_mobile_commons_subscribe($mobile, $opt_in_path, $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&opt_in_path[]=$opt_in_path",
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }

  drupal_http_request($api_opt_in_path_url, $options);
}

function dosomething_general_user_presave(&$edit, $account, $category) {
  if (isset($edit['pass'])) {
    drupal_set_message(t('Your password has been updated.'), 'status');
  }
}

/**
 * Subscribe the email to the mailchimp DoSomething Members List.
 *
 * @param $email
 *   Users email address.
 * @param $groupName
 *   The campaign name that the email is to be subscribed to.
 * @return
 *   Boolean indicating success.
 */
function dosomething_general_mailchimp_subscribe($email, $groupName, $merge_vars = array()) {
  /* Our function */
  $mcapi = mailchimp_get_api_object();
  // Catching function
  // Hardcoding the list to the dosomething members
  $listid = 'f2fab1dfd4';

  // We do not want them to have to know the grouping id so we will build
  // the table to look it up by using the group name specified.
  $cid = "dosomething_general_mailchimp_group_mapping_$listid";
  $cache = cache_get($cid);
  if (!empty($cache->data)) {
    $groupingIdByGroupName = $cache->data;
  }
  else {
    $groupingIdByGroupName = array();
    $groupings = $mcapi->listInterestGroupings($listid);
    foreach ($groupings as $grouping) {
      foreach ($grouping['groups'] as $group) {
        // If two groupnames are the same in different groupings
        // then it may pick the wrong group.
        $groupingIdByGroupName[$group['name']] = $grouping['id'];
      }
    }
    cache_set($cid, $groupingIdByGroupName);
  }

  // TODO: Error Handling for groupname, still add the user if error occurs.
  $merge_vars += array(
    'GROUPINGS' => array(
      array('id' => $groupingIdByGroupName[$groupName], 'groups' => $groupName),
    )
  );
  return $mcapi->listSubscribe($listid, $email, $merge_vars, 'html', FALSE, TRUE,FALSE);
}

/**
 * Get a user's full name as a string.
 *
 * @param $account
 *  (object) A standard user object.
 * @param $display_type
 *  (string) type of name to show (public or private).
 * @return string
 */
function dosomething_general_get_full_name($account, $display_type = 'public') {
  $full_name = '';
  $names = array();
  $profile = profile2_load_by_user($account, 'main');

  if (is_object($profile)) {
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
    $first_name = $profile_wrapper->field_user_first_name->value();
    $last_name = $profile_wrapper->field_user_last_name->value();

    switch ($display_type) {
      case 'private':
        // Show full name if available, otherwise show username.
        $full_name = (!$first_name && !$last_name) ? $account->name : $first_name . ' ' . $last_name;
        break;
      case 'public':
        // Show first name and last initial, or blank if not available.
        $full_name = $first_name . ' ' . substr($last_name, 0, 1);
        break;
    }
  }
  return filter_xss($full_name);
}

/**
 * Search for users users by their cell phone number.
 *
 * @param $number
 *  (string) The cell phone number for which you are searching.
 * @return
 *  The user account object.
 */
function dosomething_general_find_user_by_cell($number) {
  $or = db_or()
    ->condition('mail', $number . '@mobile')
    // Tolerate not having a `1` in the source but having one in the db.
    ->condition('mail', substr($number, 1) . '@mobile')
    // Tolerate having a `1` in the source but not having one in the db.
    ->condition('mail', '1' . $number . '@mobile');
  $uid = db_select('users')
    ->fields('users', array('uid'))
    ->condition($or)
    ->execute()
    ->fetchField();
  if ($uid) {
    return user_load($uid);
  }
  else if ($account = dosomething_load_user_by_profile_cell($number)) {
    // Note: Cell phone numbers are not unique amongst the existing users.
    // otherwise, we can directly search for the cell phone number when
    // logging in. Existing users will have usernames and email addresses
    // so this won't prevent them from logging in.
    return $account;
  }
  return FALSE;
}

/**
 * Load a user object by cell phone.
 *
 * @param $mobile
 *   The cell number exactly as it appears in the database.
 * @return
 *   The user account or false if none is found.
 */
function dosomething_load_user_by_profile_cell($mobile) {
  $query = new EntityFieldQuery('profile2');
  $results = $query->entityCondition('entity_type', 'profile2')
    ->fieldCondition('field_user_mobile', 'value', $mobile, '=')
    ->deleted(FALSE)
    // Look for more than one user but cap it at two so we don't waste all day.
    ->range(0, 2)
    ->execute();
  // There are duplicate values in the mobile number field so if there is not
  // exactly one account with the cell phone number don't let them log in this
  // way. They'll need to use the username or email address instead.
  if (count($results['profile2']) == 1) {
    $profile = reset($results['profile2']);
    $profile = profile2_load($profile->pid);
    if ($profile) {
      $uid = $profile->uid;
      return user_load($uid);
    }
  }
  return FALSE;
}

/**
 * Load up the related user given and email or cell phone value.
 *
 * @param $value
 *   An email or cell phone value.
 * @return
 *  Either FALSE or the loaded user account.
 */
function dosomething_general_load_user_by_mail_or_cell($value) {
  $account = FALSE;
  if (valid_email_address($value)) {
    $account = user_load_by_mail($value);
  }
  else if ($number = dosomething_general_valid_cell($value)) {
    $account = dosomething_general_find_user_by_cell($number);
  }
  return $account;
}

/**
 * Determine if a cell phone number is valid.
 *
 * @param $number
 *   A cell phone number which may contain special characters.
 * @return
 *  Either FALSE or the cleaned up cell phone number (only digits).
 */
function dosomething_general_valid_cell($number) {
  $trimmed_number = ltrim(preg_replace('/[^0-9]/', '', $number), 1);
  return strlen($trimmed_number) == 10 ? $trimmed_number : FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_form_alter().
 */
function dosomething_general_form_webform_client_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'dosomething_general_form_webform_client_validate';
}

/**
 * Validate mobile numbers submitted through webform entities.
 */
function dosomething_general_form_webform_client_validate($form, &$form_state) {
  if (isset($form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value']) && $form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value'] != '') {
    if ($form_state['values']['details']['uid'] === 0) return;

    $account = user_load($form_state['values']['details']['uid']);

    $valid_number = dosomething_general_valid_cell($form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value']);
    if (!$valid_number) {
      form_set_error('submitted][field_webform_mobile', t('Please provide a valid cell phone number.'));
    }
    else {
      // Store the cleaned up number.
      $form_state['values']['submitted']['field_webform_mobile'][LANGUAGE_NONE][0]['value'] = $valid_number;

      if ($phone_account = dosomething_general_find_user_by_cell($valid_number)) {
        if ($phone_account->uid != $account->uid) {
          form_set_error('submitted][field_webform_mobile', t('The provided cell phone number is already in use by another account.'));
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function dosomething_general_token_info() {
 $info['tokens']['user']['ds_member_name'] = array(
    'name' => t('Member Name'),
    'description' => t('Full name or username if not available'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function dosomething_general_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'ds_member_name':
          $name = dosomething_general_get_full_name($data['user'], 'private');
          $replacements[$original] = $name;
        break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_cools_render_alter().
*/
function dosomething_general_ctools_render_alter($info, $page, $context) {
  $panels_pane = FALSE;
  //we only want to do this if there's only one node in the context
  module_load_include('inc', 'panels', 'plugins/task_handlers/panel_context');
  $display_context = panels_panel_context_get_display($context['handler']);
  if (count($display_context->context) > 0) {
    $local_context = $display_context->context;
    $panels_pane = TRUE;
  }
  else if (count($context['contexts']) == 1) {
    $local_context = $context['contexts'];
  }
  if (isset($local_context)) {
    foreach ($local_context as $ctxt) {
      if (in_array('node', (array) $ctxt->type) && is_object($ctxt->data)) {
        $node = $ctxt->data;
        if ($panels_pane) {
          $node->opengraph_meta['url'] = url(current_path(), array('absolute' => TRUE));
        }

        if (isset($node->opengraph_meta)) {
           OpenGraphMeta::instance()->render_data($node, $node->opengraph_meta);
        }
        break;
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dosomething_general_ctools_plugin_type() {
  return array(
    'webform_counter' => array(
      'load themes' => TRUE,
      'cache' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function dosomething_general_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

// Return them to the page that they were on, if possible.
function dosomething_general_user_logout($account) {
  $goto = str_replace('http://' . $_SERVER['HTTP_HOST'] . '/', '', $_SERVER['HTTP_REFERER']);
  $_GET['destination'] = $goto;
}
