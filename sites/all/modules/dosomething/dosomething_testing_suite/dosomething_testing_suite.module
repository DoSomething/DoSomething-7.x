<?php

/**
 * @file
 * Drupal offers a thorough testing suite with , but has limitations that are not useful
 * for DoSomething's testing suite.  The WebTestSuite class extends Drupal's DrupalWebTestCase
 * class, offering a bunch of useful functionality (including Factories) and allowing us to
 * bypass the "reload the database on every test" rule.
 *
 * @author Michael Chittenden <mchittenden@dosomething.org>
 */

class WebTestSuite extends DrupalWebTestCase {
  protected $factory;
  protected $logged_in;
  # This magically fixes an exception thrown occasionally.
  protected $public_files_directory;
  protected static $garbage = array();

  /**
   * By default, Drupal install a new instance of itself before every test is run.
   * This ensures that it doesn't do that, and currently runs test on the current
   * database instead.  This saves an enormous amount of time (like 7 minutes -> 3 seconds).
   *
   * @todo: Create testing DB instance for all tests.
   */
  public function setUp() {
    $this->factory = Factory::instance();
    $this->setup = TRUE;
  }

  /**
   * Marks an array of IDs for garbage collection at the end of tests.
   *
   * @param int $id
   *   An ID to throw into the garbage later.
   *
   * @param string $type (node)
   *   The type of entity we're talking about.  This will be the prefix for
   *   the *_delete_multiple() function call. 
   */
  public function throwOut($id, $type = 'node') {
    if (!isset(self::$garbage[$type])) {
      self::$garbage[$type] = array();
    }

    self::$garbage[$type][] = $id;
  }

  public function collectGarbage() {
    if (!empty(self::$garbage) && is_array(self::$garbage)) {
      foreach (self::$garbage as $type => $trash) {
        $function = "{$type}_delete_multiple";
        $function($trash);
      }
    }
  }

  /**
   * Overwrites default tearDown() method to log out a potentially logged in user.
   * @todo: Garbage collection
   */
  public function tearDown() {
    $this->collectGarbage();
    if (isset($this->user) && $this->logged_in) {
      $GLOBALS['user'] = drupal_anonymous_user();
    }
  }

  /**
   * Logs in the currently assigned user.
   */
  public function logIn() {
    if (isset($this->user)) {
      $GLOBALS['user'] = $this->user;
      $this->logged_in = true;
    }
  }

  /**
   * Logs out the currently assigned user.
   */
  public function logOut() {
    if (isset($this->user) && $this->logged_in) {
      $GLOBALS['user'] = drupal_anonymous_user();
    }
  }

  /**
   * Runs through a hook_menu() function and make sure all the paths exist.
   *
   * @param string $module
   *   The module that includes the hook_menu() call.
   *
   */
  public function runThruPaths($module) {
    $this->assertTrue(function_exists($module . '_menu'));
    if (function_exists($module . '_menu')) {
      $items = dosomething_login_menu();
      foreach ($items as $path => $data) {
        $this->drupalGet($path);
        $this->assertResponse(200, "The {$path} path exists.");
      }
    }
  }

  /**
   * Runs all tests at once, as opposed to one-at-a-time.  All tests under WebTestSuite
   * must start with 'subTest' (e.g. subTestEmailWorks).
   */
  public function testAll() {
    $methods = get_class_methods($this);
    foreach ($methods as $test) {
      if (strpos($test, 'subTest') !== FALSE) {
        $this->{$test}();
      }
      else continue;
    }
  }
}

// Load the Factory class.
require_once 'factory.inc';
