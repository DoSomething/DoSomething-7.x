<?php

function fb_log_action() {
	global $user;

	$l = array(
	  'element' => (isset($_POST['element']) ? check_plain($_POST['element']) : ''),
	  'path' => (isset($_POST['link']) ? check_plain($_POST['link']) : ''),
      'action' => (isset($_POST['action']) ? check_plain($_POST['action']) : ''),
      'action_key' => (isset($_POST['key']) ? intval($_POST['key']) : 0),
      'uid' => $user->uid,
      'fbid' => (isset($_POST['fbid']) ? intval($_POST['fbid']) : 0),
      'to_fbid' => (isset($_POST['to']) ? intval($_POST['to']) : 0),
      'timestamp' => REQUEST_TIME,
	);

	drupal_write_record('fb_log', $l);

	$response = array(
		'action' => (isset($_POST['action']) ? check_plain($_POST['action']) : ''),
		'key' => (isset($_POST['key']) ? intval($_POST['key']) : 0),
		'time' => date('m/d/Y g:iA'),
		'success' => TRUE,
	);

    drupal_json_output($response);
	drupal_exit();
}

/**
 *	Implements hook_fb_social_app_id_alter()
 *  Changes the app ID if $_SESSION['fb_app_id'] is set.
 */
function connections_fb_social_app_id_alter(&$app_id) {
	if (!empty($_SESSION['fb_app_id']) && !isset($_SESSION['form']['op'])) {
		$app_id = intval($_SESSION['fb_app_id']);
		unset($_SESSION['fb_app_id']);
	}
}

/*
 * Implements hook_library().
 */
function connections_library() {
  $libraries = array();
  if ($path = libraries_get_path('fb-friend-selector')) {
	  $libraries['facebook'] = array(
	  	'title' => 'Facebook connections',
	  	'version' => '1.0',
	  	'js' => array(
	  		drupal_get_path('module', 'connections') . '/js/connections.js' => array(),
	        drupal_get_path('module', 'dosomething_general') . '/js/fb-friend-finder.js' => array(),
	  		$path . '/tdfriendselector.js' => array(),
	  	),
	  	'css' => array(
	  		$path . '/tdfriendselector.css' => array(),
	  	),
	  );
  }

  return $libraries;
}

/**
 *	Implements hook_menu()
 */
function connections_menu() {
  // Pseudo-handler page for fake Facebook dialog boxes.
  $items['fb-connections/%'] = array(
    'page callback' => 'connections_handle_fb_dialog',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Message center home.
  $items['admin/message-center'] = array(
  	'title' => t('Facebook Notification Center'),
  	'page callback' => 'connections_message_center',
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK
  );

  $items['fb/log'] = array(
  	'page callback' => 'fb_log_action',
  	'access callback' => TRUE,
  );

  $items['connections/get-counts'] = array(
  	'page callback' => 'connections_get_counts',
  	'access callback' => TRUE,
  );

  return $items;
}

function connections_get_counts() {
  // Ignore if there are no elements to check.
  if (empty($_POST['elements'])) {
  	drupal_json_output(array(
  	  'status' => 0,
  	  'error' => 'No elements.',
  	));
  	drupal_exit();
  }

  // Get the elements..
  $elements = &$_POST['elements'];

  // Clean up the elements.
  array_walk($elements, function(&$item, &$key, $prefix) {
  	// Make sure that it's not empty...
  	if (!empty($item)) {
	  $item = check_plain($item);
	}
	// And if it is, ignore it.
	else {
	  unset($_POST['elements'][$key]);
	}
  });

  // Get counts.
  $n = db_select('fb_log', 'l');
  $n->fields('l', array('element'));
  $n->addExpression("COUNT(l.element)", 'total');
  $n->condition('element', $elements, 'IN');
  $n->condition('path', '%' . check_plain($_POST['page']) . '%', 'LIKE');
  $n->groupBy('l.element');
  $r = $n->execute()->fetchAllKeyed();

  // Return that shit
  drupal_json_output(array(
  	'status' => 1,
  	'results' => $r,
  ));
  drupal_exit();
}

/**
 *	Passes variables from $_GET to the theme template for specific Facebook dialog boxes.
 *  Also sanitizes input.
 *
 *	@param $t
 * 		A template ID associated with the $options array.
 *		$options will send it to the right home.
 */
function connections_handle_fb_dialog($t) {
	$options = array(
		'og-post' => 'connections_og_post',
		'fb-message' => 'connections_message',
		'multi-feed' => 'connections_multi_feed',
		'custom-selector' => 'connections_custom_selector',
		'image-post' => 'connections_image_post',
	);

	if (!isset($options[$t])) {
		return;
	}

	$params = array();
	$params = array(
		'image' => (isset($_GET['img']) ? $_GET['img'] : ''),
		'title' => (isset($_GET['title']) ? $_GET['title'] : ''),
		'caption' => (isset($_GET['caption']) ? $_GET['caption'] : ''),
		'description' => (isset($_GET['desc']) ? $_GET['desc'] : ''),
		'to' => (isset($_GET['to']) ? $_GET['to'] : ''),
		'photo' => (isset($_GET['mypic']) ? $_GET['mypic'] : ''),
		'tagging' => intval((isset($_GET['tagging']) ? $_GET['tagging'] : 0)),
		'message' => htmlspecialchars((isset($_GET['message']) ? $_GET['message'] : ''))
	);

	echo theme($options[$t], $params);
	return null;
}

/**
 *	Implements hook_theme()
 */
function connections_theme($existing, $type, $theme, $path) {
  return array(
    'connections_og_post' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'title' => NULL,
        'description' => NULL,
        'image' => NULL,
        'to' => NULL
      ),
      'template' => 'fb-connections-og-post',
    ),
    'connections_message' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'title' => NULL,
        'caption' => NULL,
        'description' => NULL,
        'image' => NULL,
        'to' => NULL
      ),
      'template' => 'fb-connections-message',
    ),
    'connections_multi_feed' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'title' => NULL,
        'caption' => NULL,
        'description' => NULL,
        'image' => NULL,
        'to' => NULL
      ),
      'template' => 'fb-connections-multi-post',
    ),
    'connections_custom_selector' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'title' => NULL,
        'caption' => NULL,
        'description' => NULL,
        'image' => NULL,
        'to' => NULL
      ),
      'template' => 'fb-connections-custom-selector',
    ),
    'connections_image_post' => array(
      'path' => $path . '/templates',
      'variables' => array(
        'title' => NULL,
        'caption' => NULL,
        'description' => NULL,
        'image' => NULL,
        'to' => NULL
      ),
      'template' => 'fb-connections-image-post',
    ),
  );
}

/**
 *	Implements hook_page_alter()
 */
function connections_page_alter(&$page) {
	$fb_actions = array(
		'fb_connect' => 'feed',
		'og_connect' => 'ograph',
		'img_share' => 'image',
		'fb_app_request' => 'request',
		'fb_message' => 'message',
		'fb_notification' => 'notification',
		'fb_gate' => 'gate',
	);

	$n = menu_get_object();
	if (empty($n)) {
		rules_invoke_event('viewing_non_node');
	}

	if (!empty($_SESSION)) {
		if ($fb = array_intersect(array_keys($fb_actions), array_keys($_SESSION))) {
			drupal_add_library('dosomething_general', 'fb-friend-finder');

			$faces = array();
			$tagging = false;
			foreach ($fb AS $key => $action) {
				if (in_array($action, array_keys($fb_actions)) && isset($_SESSION["$action"])) {
				   $fb_info = $_SESSION["$action"];
				   $stuff = (current(array_filter($fb_info, 'connections_session_filter_array')));
				   connections_clean_variables($stuff);

				   if (!isset($stuff['og_document']) && isset($stuff['og_namespace'])) {
				   		$stuff['og_document'] = url(request_uri(), array('absolute' => TRUE));
				   }
				   if (!isset($stuff['feed_document']) && !isset($stuff['og_namespace'])) {
				   		$stuff['feed_document'] = url(request_uri(), array('absolute' => TRUE));
				   }

				   if (!empty($stuff['og_tagging']) || !empty($stuff['feed_tagging'])) {
				   	  $tagging = true;
				   }

				   $faces[$fb_actions[$action]] = $stuff;

				   if (isset($stuff['og_post_description']) || isset($stuff['feed_description'])) {
				   	  global $fb_og_desc;
				   	  $fb_og_desc = (isset($stuff['og_post_description']) ? $stuff['og_post_description'] : $stuff['feed_description']);
				   }

				   if (isset($stuff['img_object']) && isset($stuff['img_namespace'])) {
					  global $og_stuff;
					  $og_stuff = array(
					  	'namespace' => $stuff['img_namespace'],
					  	'object' => $stuff['img_object']
					  );

					  if (!empty($og_stuff)) {
				        $element = array(
				          '#tag' => 'meta',
				          '#attributes' => array(
				            'property' => 'og:type',
				            'content' => $og_stuff['namespace'] . ':' . $og_stuff['object'],
				          ),
				        );
				        drupal_add_html_head($element, 'connections_ograph_type');
					  }
				   }

				   unset($_SESSION[$action]);
				}
			}

			if (!empty($faces)) {
				$options = json_encode($faces);
			    drupal_add_js(drupal_get_path('module', 'connections') . '/js/connections.js', array(
			    	'scope' => 'footer',
			    	'weight' => 1001
			    ));

			    drupal_add_css(drupal_get_path('module', 'connections') . '/css/connections-og-post.css', array(
			    	'scope' => 'footer',
			    	'weight' => 1002
			    ));

			    if ($tagging == true) {
				    // @Todo This is less than ideal.  Handle better.
				    drupal_add_js('http://code.jquery.com/jquery-1.7.1.js', array(
				    	'weight' => 1000
				    ));
				    drupal_add_js('http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js', array(
				    	'weight' => 1000
				    ));
				    drupal_add_js(drupal_get_path('module', 'connections') . '/js/jquery-ui.triggeredAutocomplete.js', array(
				    	'weight' => 1000
				    ));
				}

				drupal_add_js('var options = ' . $options . ';', array(
					'scope' => 'footer',
					'type' => 'inline',
					'weight' => 1003
				));

				drupal_add_js('Drupal.behaviors.fb.init(options);', array(
					'scope' => 'footer',
					'type' => 'inline',
					'weight' => 1004
				));
			}
		}
	}
}

/**
 *	Implements hook_html_head_alter()
 *	Changes the meta description, if set.
 */
function connections_html_head_alter(&$head) {
    if (!module_exists('opengraph_meta')) {
      return;
    }
	global $fb_og_desc, $og_stuff;
	$fb_og_desc = trim($fb_og_desc);
	if (!empty($fb_og_desc) && $fb_og_desc !== "''") {
		// Trim 
		if (($fb_og_desc{0} == '"' || $fb_og_desc{0} == "'") && ($fb_og_desc{strlen($fb_og_desc) - 1} == '"' || $fb_og_desc{strlen($fb_og_desc) - 1} == "'")) {
		  $head['opengraph_meta_og:description']['#attributes']['content'] = substr(substr($fb_og_desc, 1), 0, -1);
		}
	}
}

/**
 *	Cleans javascript variables for everything ever.
 *
 *	@param $variables
 *		An associative array of values that will be passed into the connections class.
 */
function connections_clean_variables(&$variables) {
	foreach ($variables AS $key => $val) {
		// Assuming the value is not "document.location.href" and it's not the custom variables array...
		if ($val !== 'document.location.href' && $key !== 'og_post_custom') {
			// Wrap the variable in single quotes, and escape single quotes inside of it.
			#$variables["$key"] = "'" . str_replace("'", "\'", $val) . "'";
		}

		// Parse javascript variables (wrapped in curly braces - {} - on the admin side.) 
		#$variables["$key"] = preg_replace('#\{(.*?)\}#i', '" + \\1 + "', $variables["$key"]);
	}
}

/** 
 *  Filters for SESSION variables to find the first array.
 *  The first array contains the information we need.
 */
function connections_session_filter_array($var) {
	return is_array($var);	
}

function connections_notifications_form($form, &$form_state) {
  $form['#attached']['css'][] = array(
      'data' => drupal_get_path('module', 'connections') . '/css/message-center.css',
      'weight' => 1000
  );
	$form['disclaimer'] = array(
		'#markup' => 'Thanks for your interest in messaging the fine people on the Facebook.  Fill out a message below and hit the submit button somewhere down there.',
		'#prefix' => '<p>',
		'#suffix' => '</p>'
	);

	$list = array(
		'<span class="counter-labels">Label</span><span class="digits">Digit</span>',
		'Two (2)',
		'Three (3)'
	);

	$form['more'] = array(
		'#theme' => 'item_list',
		'#items' => $list,
		'#attributes' => array(
			'class' => array('message-list')
		)
	);

	return $form;
}

function connections_message_center() {
	$form = drupal_get_form('connections_notifications_form');
	return $form;
}
