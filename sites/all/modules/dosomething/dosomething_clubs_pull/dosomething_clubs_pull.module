<?php

define('CLUB_PULL_LIMIT', 250);
define('DEBUG', 1);

function dosomething_clubs_pull_menu() {
  $items['admin/clubs-pull'] = array(
    'title' => t('Pull Club Data'),
    'page callback' => 'dosomething_clubs_pull_data',
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  $items['admin/clubs-pull/export'] = array(
    'title' => t('Exporting clubs data...'),
    'page callback' => 'clubs_export::export',
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  $items['admin/clubs-pull/export/finished/%'] = array(
    'title' => t('Your export is finished!'),
    'page callback' => 'clubs_export::finished',
    'page arguments' => array(4),
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  $items['admin/clubs-pull/export/file/%'] = array(
    'page callback' => 'clubs_export::load_file',
    'page arguments' => array(4),
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function array_to_csv($array, $header_row = true, $col_sep = ",", $row_sep = "\n", $qut = '"')
{
  if (!is_array($array)) { return false; }
  
  //Header row.
  if ($header_row)
  {
    foreach ($array[0] as $key => $val)
    {
      //Escaping quotes.
      $key = str_replace($qut, "$qut$qut", $key);
      $output .= "$col_sep$qut$key$qut";
    }
    $output = substr($output, 1)."\n";
  }
  //Data rows.
  foreach ($array as $key => $val)
  {
    $tmp = '';
    foreach ($val AS $cell_key => $cell_val) {
      $cell_val = str_replace($qut, "$qut$qut", $cell_val);
      $tmp .= "$col_sep$qut$cell_val$qut";
    }

    $output .= substr($tmp, 1) . $row_sep;
  }
  
  return $output;
}

class clubs_export {
  private static $file;
  public static $inited = false;
  public static $sms_response_dates = array(
    'spring' => '2013-01-01 - 2013-06-30',
    'fall' => '2012-07-01 - 2012-12-31',
  );

  public static $field_labels = array(
    'Club ID',
    'Club Name',
    'Not associated with a school',
    'Blurb',
    'Date Created',
    'Time Created',
    'Last Updated Date',
    'User ID',
    'Created By',
    'Owner Email',
    'Owner Cell',
    'Owner First Name',
    'Owner Last Name',
    'Owner Birthday',
    'Owner Street',
    'Owner City',
    'Owner State',
    'Owner Zip',
    'Owner Last Login',
    'Club Street',
    'Club City',
    'Club State',
    'Club Zip',
    'My Club is Going to Work On',
    'Send Goodies',
    'School Name',
    'School Type',
    'School Street',
    'School City',
    'School State',
    'School Country',
    'School ZIP',
    'Member Count',
    'Member Emails',
    'Member UIDs',
    'Number of Projects',
    'Most recently created project',
    'Last joined Campaign time',
    'SMS Response Times',
    'SMS Invites',
    'Facebook invites',
    'Email invites',
    'Total',
    'Responded to survey',
    'Last 5 project ID: 1',
    'Last 5 project ID: 2',
    'Last 5 project ID: 3',
    'Last 5 project ID: 4',
    'Last 5 project ID: 5',
    'Last 5 project date: 1',
    'Last 5 project date: 2',
    'Last 5 project date: 3',
    'Last 5 project date: 4',
    'Last 5 project date: 5',
    'Last 5 campaign report back ID: 1',
    'Last 5 campaign report back ID: 2',
    'Last 5 campaign report back ID: 3',
    'Last 5 campaign report back ID: 4',
    'Last 5 campaign report back ID: 5',
    'Last 5 campaign report back date: 1',
    'Last 5 campaign report back date: 2',
    'Last 5 campaign report back date: 3',
    'Last 5 campaign report back date: 4',
    'Last 5 campaign report back date: 5',
    'Fall 2012 Clubs SMS Response 1',
    'Fall 2012 Clubs SMS Response 2',
    'Spring 2013 Clubs SMS Response 1',
    'Spring 2013 Clubs SMS Response 2',
  );

  public static function export() {
    $page = $limit = 0;
    $page = intval($_GET['page']);
    if (!$page) {
      $page = 1;
      $nopage = true;
    }
    else  {
      $nopage = false;
    }

    if (!intval($_GET['limit'])) {
      $limit = CLUB_PULL_LIMIT;
    }
    else {
      $limit = intval($_GET['limit']);
    }

    $start = (!$nopage ? ($page * ($limit)) : 0);
    if (!$nopage) { $page++; }

    if ($_GET['debug']) {
      exit;
    }

    $d = self::the_query($start, $limit);
    $count = self::get_counts();

    $p = floor(($start / $count) * 100);
    if ($p > 100) {
      $p = 100;
    }

    $hash = self::get_hash();
    if (self::write_stuff($hash, $d)) {
      $content = '<div style="background: #d9d9d9; border: 1px solid #000; display: block; height: 30px; border-radius: 5px; padding: 0px;">
      <div style="background: #D65E5E; height: 30px; width: ' . $p . '%; color: #fefefe; text-align: right; padding: 5px 5px 0px 0px; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;">' . ($p > 0 ? "{$p}%" : '') . '</div>
      </div>';

      if ($start > $count) {
        $start = $count;
      }
      $content .= '<p><strong>Completed ' . $start . ' of ' . $count . ' clubs (' . $p . '%)</strong></p>';


      if ($p < 100) {
       $addy = $_SERVER['REDIRECT_URL'] . "?page=" . $page . "&hash=" . $hash;
      }
      else {
       $addy = '/admin/clubs-pull/export/finished/' . $hash;
      }

      $content .= "<script> window.location.href = '" . $addy . "' </script>";
    }
    else {
      $content .= '<p>There was an error.</p>';
    }

    return $content;
  }

  public static function load_file($data) {
    $info = unserialize(base64_decode($data));
    if (strpos($info['file_path'], 'private') === FALSE) {
      return 'Access denied!';
    }

    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $info['filename'], TRUE);

    drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

    readfile($info['file_path']);
    exit;
  }

  public static function finished($data) {
    $info = unserialize(base64_decode($data));
    if (empty($info['file_path']) || empty($info['filename'])) {
      return t("Sorry, your file couldn't be created (file information not passed).");
    }

    $redirect = base_path() . 'admin/clubs-pull/export/file/' . $data;
    drupal_add_js('setTimeout(function() { window.location.href = "' . $redirect . '"; }, 2000);', 'inline');

    $download_link = t('Your export is complete! If your download does not begun automatically, !click!', array(
      '!click' => l(t('Click here'), 'admin/clubs-pull/export/file/' . $data))
    );

    $output = '<p>' . $download_link . '</p>';
    return $output;
  }

  public static function write_stuff($hash, &$data) {
    $count = count((array)$data['results']);
    $i = 0;
    $info = unserialize(base64_decode($hash));
    $handle = fopen($info['file_path'], 'a');

    $writes = array();
    foreach ($data['results'] AS $key => $stuff) {
      $stuff = (array) $stuff;

      $done = array();
      foreach (explode(',', $stuff['camps']) AS $c) {
        if (in_array($c, $done)) {
          continue;
        }

        $done[] = $c;
      }

      $rtimes = '';
      if (!empty($stuff['sms_response_times'])) {
        foreach (explode(',', $stuff['sms_response_times']) AS $time) {
          $rtimes .= date('Y/m/d', $time) . ', ';
        }
        $rtimes = substr($rtimes, 0, -2);
      }

      $last_created_project = '';
      if (!empty($stuff['lastcreated'])) {
        $last_created_project = date('Y/m/d', $stuff['lastcreated']);
      }

      $last_joined_campaign = '';
      if (!empty($stuff['last_joined_campaign'])) {
        $last_joined_campaign = date('Y/m/d', $stuff['last_joined_campaign']);
      }

      $pids = $pdates = array(
        0 => ' ',
        1 => ' ',
        2 => ' ',
        3 => ' ',
        4 => ' ',
      );
      if (!empty($stuff['projects'])) {
        foreach ($stuff['projects'] AS $key => $project) {
          $pids[$key] = $project->sid;
          $pdates[$key] = date('Y-m-d', $project->submitted);
        }
      }

      $crbids = dosomething_clubs_pull_get_campaign_report_back_nids();

      $cids = $cdates = array(
        0 => ' ',
        1 => ' ',
        2 => ' ',
        3 => ' ',
        4 => ' ',
      );
      if (!empty($stuff['campaigns'])) {
        foreach ($stuff['campaigns'] AS $campaign) {
          $cids[$key] = $crbids[$campaign->nid];
          $cdates[$key] = date('Y-m-d', $campaign->submitted);
        }
      }

      // Set fall & spring sms response variables to default as nothing.
      $fall1 = $fall2 = $spring1 = $spring2 = '';

      // Check to see if ther are any responses floating in there.
      $sms = dosomething_general_array_vals_multi($stuff['sms_responses']);

      // If not empty...
      if (!empty($sms)) {
        foreach ($stuff['sms_responses'] AS $semester => $responses) {
          foreach ($responses AS $num => $response) {
            $n = ++$num;
            // Set the variable with the response.
            ${"{$semester}{$n}"} = $response->response;
          }
        }
      }

      $writes[] = array(
        'club id' =>          $stuff['nid'],
        'club name' =>        $stuff['node_title'],
        'not associated with a school' => $stuff['not_associated'],
        'blurb' =>            $stuff['blurb'],
        'date created' =>     date('Y/m/d', $stuff['created']),
        'time created' =>     date('H:i:s', $stuff['created']),
        'last updated date' => date('Y/m/d', $stuff['last_updated']),
        'user id' =>          $stuff['creator_id'],
        'created by' =>       $stuff['creator'],
        'Owner email' =>      $stuff['creator_email'],
        'Owner Cell' =>       $stuff['phone'],
        'Owner First Name' => $stuff['first_name'],
        'Owner Last Name' =>  $stuff['last_name'],
        'Owner Birthday' =>   $stuff['birth_day'],
        'Owner Street' =>     $stuff['owner_street'],
        'Owner City' =>       $stuff['owner_city'],
        'Owner State' =>      $stuff['owner_state'],
        'Owner Zip' =>        $stuff['owner_zip'],
        'Owner Last Login' => date('Y/m/d', $stuff['last_leader_login']),
        'Club Street' =>      $stuff['street'],
        'Club City' =>             $stuff['city'],
        'Club State' =>            $stuff['state'],
        'Club Zip' =>              $stuff['zip'],
        'Working On' =>       implode(', ', $done),
        'Send Goodies' =>     $stuff['send_goodies'],
        'School Name' =>      $stuff['school_name'],
        'School Type' =>      $stuff['school_type'],
        'School Street' =>    $stuff['school_street'],
        'School City' =>      $stuff['school_city'],
        'School State' =>     $stuff['school_state'],
        'School Country' =>   ($stuff['school_country'] ? $stuff['school_country'] : ($stuff['school_type'] ? 'US' : '')),
        'School ZIP' =>       $stuff['school_zip'],
        'Member Count' =>     $stuff['member_count'],
        'Member Emails' =>    str_replace(',', ', ', $stuff['member_emails']),
        'Member UIDs' =>      str_replace(',', ', ', $stuff['member_uids']),
        '# of Projects' =>    $stuff['pcount'],
        'Recent Project' =>   $last_created_project,
        'Last joined campaign time' => $last_joined_campaign,
        'SMS Response Times' => $rtimes,
        'SMS Invites' => $stuff['shares']['sms_shares'],
        'Facebook invites' => $stuff['shares']['fb_shares'],
        'Email invites' => $stuff['shares']['email_shares'],
        'Total' => ($stuff['shares']['sms_shares'] + $stuff['shares']['fb_shares'] + $stuff['shares']['email_shares']),
        'Responded to survey' => $stuff['survey'],
        'project_ids_1' => $pids[0],
        'project_ids_2' => $pids[1],
        'project_ids_3' => $pids[2],
        'project_ids_4' => $pids[3],
        'project_ids_5' => $pids[4],
        'project_dates_1' => $pdates[0],
        'project_dates_2' => $pdates[1],
        'project_dates_3' => $pdates[2],
        'project_dates_4' => $pdates[3],
        'project_dates_5' => $pdates[4],
        'campaign_ids_1' => $cids[0],
        'campaign_ids_2' => $cids[1],
        'campaign_ids_3' => $cids[2],
        'campaign_ids_4' => $cids[3],
        'campaign_ids_5' => $cids[4],
        'campaign_dates_1' => $cdates[0],
        'campaign_dates_2' => $cdates[1],
        'campaign_dates_3' => $cdates[2],
        'campaign_dates_4' => $cdates[3],
        'campaign_dates_5' => $cdates[4],
        'fall1' => array('data' => $fall1),
        'fall2' => array('data' => $fall2),
        'spring1' => array('data' => $spring1),
        'spring2' => array('data' => $spring2),
      );

      $i++;
    }

    $ex = array_to_csv($writes, FALSE);
    if (!empty($ex)) {
      if (fwrite($handle, $ex) && $i == $count) {
        return true;
      }
    }
    else {
      return true;
    }
  }

  public static function get_hash() {
    if (!$_GET['hash']) {
      $filename = 'clubs_export_' . date('m-d-y', REQUEST_TIME) . '.csv';
      $h = array(
        'filename' => $filename,
        'file_path' => drupal_realpath('private://') . '/' . $filename
      );

      $field_labels = clubs_export::$field_labels;

      $handle = fopen($h['file_path'], 'w');
      fputcsv($handle, $field_labels);
      fclose($handle);

      $hash = base64_encode(serialize($h));
    }
    else {
      $hash = $_GET['hash'];
    }

    return $hash;
  }

  public static function log($title, $message) {
    mail('mchittenden@dosomething.org', $title, $message);
  }

  public static function get_counts() {
    static $context;
    $clubs = db_query("
      SELECT DISTINCT nid
      FROM node
      WHERE (node.status = '1')
        AND (node.type IN  ('club'))
      GROUP BY nid
    ");

    $count = $clubs->rowCount();

    return $count;
  }

  public static function the_query($limit = 0, $offset = 0, $return_query = FALSE) {
    $cs = get_campaign_list();

    $query = "SELECT
      node.nid AS nid,
      og_node.gid AS `gid`,
      node.title AS node_title,
      `node`.`created` AS `created`,
      `node`.`changed` AS `last_updated`,
      `users_node`.name AS `creator`,
      `users_node`.`uid` AS `creator_id`,
      `users_node`.`mail` AS `creator_email`,
      #`firstname`.`field_user_first_name_value` AS `first_name`,
      #`lastname`.`field_user_last_name_value` AS `last_name`,
      #`birthday`.`field_user_birthday_value` AS `birth_day`,
      #`mobile`.`field_user_mobile_value` AS `phone`,
      #`address`.`field_user_address_thoroughfare` AS `owner_street`,
      #`address`.`field_user_address_locality` AS `owner_city`,
      #`address`.`field_user_address_administrative_area` AS `owner_state`,
      #`address`.`field_user_address_postal_code` AS `owner_zip`,
      `street`.`field_club_address_value` AS `street`,
      `city`.`field_club_city_value` AS `city`,
      `state`.`field_club_state_value` AS `state`,
      `zip`.`field_club_zip_value` AS `zip`,
      #COUNT(DISTINCT og_membership_og.etid) AS `member_count`,
      IF (`camp2`.`field_campaign_list_nid`, GROUP_CONCAT(`camp2`.`field_campaign_list_nid`), GROUP_CONCAT(`camp1`.`field_camp_value`)) AS `camps`,
      #GROUP_CONCAT(DISTINCT `ogu`.`mail`) AS `member_emails`,
      #GROUP_CONCAT(DISTINCT `ogu`.`uid`) AS `member_uids`,
      `sc`.name AS `school_name`,
      `sc`.type AS `school_type`,
      `sc`.`street` AS `school_street`,
      `sc`.`city` AS `school_city`,
      `sc`.`state` AS `school_state`,
      `sc`.`country` AS `school_country`,
      `sc`.`zip` AS `school_zip`,
      IF (`noassoc`.`field_no_school_associate_value`, 1, 0) AS `not_associated`,
      `blurb`.`field_club_blurb_value` AS `blurb`,
      IF (`old_goodies`.`field_club_mailings_value`, 1, IF(`goodies`.`field_send_goodies_value`, 1, 0)) AS `send_goodies`,
      `lu`.`login` AS `last_leader_login`,
      #GROUP_CONCAT(DISTINCT `response`.`timestamp`) AS `sms_response_times`,
      IF (`survey`.`nid`, 1, 0) AS `survey`
    FROM 
    `node` node
    LEFT JOIN `users` users_node ON node.uid = users_node.uid
    #LEFT JOIN `profile` profile_users ON users_node.uid = profile_users.uid
    LEFT JOIN `dosomething_clubs_survey` AS `survey` ON (`survey`.`nid` = `node`.`nid`)
    LEFT JOIN `og` og_node ON node.nid = og_node.etid AND og_node.entity_type = 'node'
    #LEFT JOIN `og_membership` og_membership_og ON og_node.gid = og_membership_og.gid
    #LEFT JOIN `field_data_field_user_first_name` AS `firstname` ON (`firstname`.`entity_id` = `profile_users`.`pid`)
    #LEFT JOIN `field_data_field_user_last_name` AS `lastname` ON (`lastname`.`entity_id` = `profile_users`.`pid`)
    #LEFT JOIN `field_data_field_user_birthday` AS `birthday` ON (`birthday`.`entity_id` = `profile_users`.`pid`)
    #LEFT JOIN `field_data_field_user_mobile` AS `mobile` ON (`mobile`.`entity_id` = `profile_users`.`pid`)
    #LEFT JOIN `field_data_field_user_address` AS `address` ON (`address`.`entity_id` = `profile_users`.`pid`)
    LEFT JOIN `field_data_field_club_address` AS `street` ON (`street`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_club_city` AS `city` ON (`city`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_club_state` AS `state` ON (`state`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_club_zip` AS `zip` ON (`zip`.`entity_id` = `node`.`nid`)
    #LEFT JOIN `og_membership` AS `ogm` ON (`ogm`.`gid` = `og_node`.`gid` AND `ogm`.`entity_type` = 'user')
    #LEFT JOIN `users` AS `ogu` ON (`ogu`.`uid` = `ogm`.`etid`)
    LEFT JOIN `users` AS `lu` ON (`lu`.`uid` = `node`.`uid`)
    LEFT JOIN `field_data_field_no_school_associate` AS `noassoc` ON (`noassoc`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_club_blurb` AS `blurb` ON (`blurb`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_camp` AS `camp1` ON (`camp1`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_campaign_list` AS `camp2` ON (`camp2`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_send_goodies` AS `goodies` ON (`goodies`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_club_mailings` AS `old_goodies` ON (`old_goodies`.`entity_id` = `node`.`nid`)
    LEFT JOIN `field_data_field_school_reference` AS `school` ON (
      `school`.`entity_id` = `node`.`nid` AND (
        `school`.`entity_type` = 'node' AND `school`.`deleted` = '0'
      )
    )
    LEFT JOIN `ds_school` AS `sc` ON (`sc`.`sid` = `school`.`field_school_reference_target_id`)
    #LEFT JOIN `dosomething_clubs_sms_response` AS `response` ON (`response`.`nid` = `node`.`nid`)
    WHERE (( (node.status = '1') AND (node.type IN  ('club')) ))
    GROUP BY nid, node_title ASC
    ORDER BY `node`.`created` DESC
    " . (is_numeric($limit) ? " limit $limit" . (is_numeric($offset) ? ", $offset" : '') : '');

    $q = db_query($query);
      if ($return_query) {
        return $q;
      }
      else {
        $crbids = dosomething_clubs_pull_get_campaign_report_back_nids();
        $crbids = array_keys($crbids);
        foreach ($q->fetchAll() AS $key => $r) {
          $s = (array) $r;

          /**  Yes, this is literally the worst thing ever
            *  but it saves so much query time from above it's crazy
            */ 
          $p = profile2_load_by_user((object) array(
            'uid' => $r->creator_id
          ), 'main');

          $address = $p->field_user_address[LANGUAGE_NONE][0];
          $s += array(
            'first_name' => $p->field_user_first_name[LANGUAGE_NONE][0]['value'],
            'last_name' => $p->field_user_last_name[LANGUAGE_NONE][0]['value'],
            'birth_day' => $p->field_user_birthday[LANGUAGE_NONE][0]['value'],
            'phone' => $p->field_user_mobile[LANGUAGE_NONE][0]['value'],
            'owner_street' => $address['thoroughfare'],
            'owner_city' => $address['locality'],
            'owner_state' => $address['administrative_area'],
            'owner_zip' => $address['postal_code']
          );

          $contacts = db_query("
            SELECT uid, mail
            FROM og_membership ogm
            LEFT JOIN users u ON (u.uid = ogm.etid)
            WHERE ogm.gid = " . intval($r->gid) . "
             AND ogm.entity_type = 'user'
          ")->fetchAllKeyed();

          $s['member_count'] = count($contacts);

          $mu = array_keys($contacts);
          $mu = array_filter($mu, 'dosomething_clubs_pull_not_zero');
          $s['member_uids'] = implode(',', $mu);
          $s['member_emails'] = implode(',', $contacts);
          if (empty($s['member_uids'])) {
            $s['member_uids'] = 0;
          }

          $m = db_query("
            SELECT
            (SELECT COUNT(*) FROM `webform_submissions` WHERE `nid` = 718313 AND `uid` IN (" . $s['member_uids'] . ")) AS `pcount`,
            (SELECT `webform_submissions`.`submitted` FROM `webform_submissions` WHERE `nid` = 718313 AND `uid` IN (" . $s['member_uids'] . ") ORDER BY `webform_submissions`.`submitted` DESC LIMIT 1) AS `lastcreated`,
            (SELECT `webform_submissions`.`submitted` FROM `webform_submissions` WHERE `nid` IN (" . $cs . ") AND `uid` IN (" . $s['member_uids'] . ") ORDER BY `webform_submissions`.`submitted` DESC LIMIT 1) AS `last_joined_campaign`
          ")->fetchAssoc();

          $s['real_path'] = drupal_lookup_path('alias', 'node/' . $s['nid']);

          $shares = db_query("
            SELECT
              (SELECT COUNT(*) FROM `fb_log` f WHERE `path` LIKE '%" . addslashes($s['real_path']) . "%') AS `fb_shares`,
              (SELECT COUNT(*) FROM `sms_flow_records` WHERE `type` = 'club' AND `nid` = " . $s['nid'] . ") AS `sms_shares`,
              (SELECT COUNT(*) FROM `dosomething_clubs_invites` WHERE `gid` = " . intval($s['gid']) . ") AS `email_shares`
          ")->fetchAssoc();

          $s['shares'] = $shares;

          $sms_responses = array();
          foreach (clubs_export::$sms_response_dates AS $key => $sms_response_date) {
            $date = explode(' - ', $sms_response_date);
            $sr = db_query("
              SELECT timestamp, response, DATE_FORMAT(ADDTIME(FROM_UNIXTIME(timestamp), SEC_TO_TIME(-18000)), '%Y-%m-%d') AS rd
              FROM dosomething_clubs_sms_response
              WHERE nid = :nid
              HAVING rd BETWEEN :start AND :end
              ORDER BY timestamp DESC
              LIMIT 2
            ", array(
              ':nid' => $r->nid,
              ':start' => $date[0],
              ':end' => $date[1],
            ))
            ->fetchAll();

            $sms_responses[$key] = $sr;
          }
          /*$sms_responses = db_query("
            SELECT
            `response`.`timestamp`
            FROM `dosomething_clubs_sms_response` AS `response`
            WHERE (`response`.`nid` = " . $r->nid . ")
          ")->fetchAssoc();*/

          $s['sms_responses'] = $sms_responses;

          $campaigns = db_query("
            SELECT
              webform_submissions.nid AS `nid`,
              webform_submissions.sid AS `sid`,
              webform_submissions.submitted AS `submitted`
            FROM 
            `webform_submissions` webform_submissions
            WHERE
              uid IN (" . $s['member_uids'] . ")
              AND nid IN (" . implode(',', $crbids) . ")
            ORDER BY `submitted` DESC
            LIMIT 5 OFFSET 0
          ")->fetchAll();

        $projects = db_query("(
        SELECT
          webform_submissions.nid AS `nid`,
          webform_submissions.sid AS `sid`,
          0 AS `is_node`,
          webform_submissions.submitted AS `submitted`,
          `pt`.`field_project_title_value` AS `title`,
          `img`.`field_picture_fid` AS `fid`,
          0 AS `blah`
        FROM 
        `webform_submissions` webform_submissions
        LEFT JOIN `users` users_webform_submissions ON webform_submissions.uid = users_webform_submissions.uid
        LEFT JOIN `field_data_field_project_type` AS `project_status` ON (`project_status`.`entity_id` = `webform_submissions`.`sid`)
        LEFT JOIN `og_membership` og_membership_users ON users_webform_submissions.uid = og_membership_users.etid AND og_membership_users.entity_type = 'user'
        LEFT JOIN `og` og_og_membership ON og_membership_users.gid = og_og_membership.gid
        LEFT JOIN `node` node ON webform_submissions.nid = node.nid
        LEFT JOIN `field_data_field_project_type` field_data_field_project_type ON webform_submissions.sid = field_data_field_project_type.entity_id AND (field_data_field_project_type.entity_type = 'webform_submission_entity' AND field_data_field_project_type.deleted = '0')
        LEFT JOIN `field_data_field_project_title` AS `pt` ON (`pt`.`entity_id` = `webform_submissions`.`sid`)
        LEFT JOIN `field_data_field_picture` AS `img` ON (`img`.`entity_id` = `webform_submissions`.`nid`)
        WHERE (( (og_membership_users.gid = '" . $r->gid . "' ) )AND(( (node.type IN  ('project_report')) AND (field_data_field_project_type.field_project_type_value IN  ('4')) )))
        ORDER BY `submitted` DESC
        LIMIT 5 OFFSET 0)")->fetchAll();

          $s['campaigns'] = $campaigns;
          $s['projects'] = $projects;
          $results[] = (object)$s;
        }

        return array(
          'count' => $q->rowCount(),
          'results' => (object)$results
        );
      }
    }
}

function dosomething_clubs_pull_get_campaign_report_back_nids() {
  static $nids = array();

  if (empty($nids)) {
    $query = db_select('node', 'n')
      ->fields('n', array('nid', 'created'))
      ->condition('type', 'campaign_report_back');
    $query->leftJoin('field_data_group_audience', 'ga', 'ga.entity_id = n.nid');
    $query->fields('ga', array('group_audience_gid'));
    $results = $query->execute();
    $r = $results->fetchAll();

    $nids = array();
    foreach ($r AS $key => $info) {
      $nids[$info->nid] = og_load_entity_from_group($info->group_audience_gid)->nid;
    }
  }

  return $nids;
}


function dosomething_clubs_pull_not_zero($var) {
  return (intval($var) > 0);
}


function dosomething_clubs_pull_file() {
  if (strpos($_SESSION['csv_download_file'], file_directory_temp()) === FALSE) {
    return 'Access denied!';
  }

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $_SESSION['csv_download_filename'], TRUE);

  drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

  readfile($_SESSION['csv_download_file']);
  exit;
}

function dosomething_clubs_pull_export_finished() {
  global $base_url;

  if (empty($_SESSION['csv_download_filename']) || empty($_SESSION['csv_download_file'])) {
    return t('Sorry, there was an error in creating your file.');
  }

  $redirect = base_path() . 'admin/clubs-pull/export/file';
  drupal_add_js('setTimeout(function() { window.location.href = "' . $redirect . '"; }, 2000);', 'inline');

  $download_link = t('Your export is complete! If your download does not begun automatically, !click!', array(
    '!click' => l(t('Click here'), 'admin/clubs-pull/export/file'))
  );

  $output = '<p>' . $download_link . '</p>';
  return $output;
}

function dosomething_clubs_pull_export() {
  $clubcount = get_num_clubs();
  $b = ceil($clubcount / CLUB_PULL_LIMIT);
  $operations = array();
  for ($i = 0; $i < $b; $i++) {
    $operations[] = array('dosomething_clubs_pull_batch_process', array());
  }

  $batch = array(
    'title' => t('Exporting Clubs Data (This will take some time...)'),
    'operations' => $operations,
    'finished' => 'dosomething_clubs_pull_batch_finished',
  );
  batch_set($batch);
  batch_process('admin/clubs-pull/export/finished');
}

function get_campaign_list() {
  $result = db_query("SELECT GROUP_CONCAT(DISTINCT nid) AS `nodes` FROM `node` WHERE `type` = 'campaign'")->fetchAssoc();
  return $result['nodes'];
}

function get_num_clubs() {
  $q = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'club')
    ->condition('status', 1)
    ->execute();
  return $q->rowCount();
}

function dosomething_clubs_pull_mega_query($limit = 0, $offset = 0, $return_query = FALSE) {
  $cs = get_campaign_list();

$query = "SELECT
  node.nid AS nid,
  node.title AS node_title,
  `node`.`created` AS `created`,
  `users_node`.name AS `creator`,
  `users_node`.`uid` AS `creator_id`,
  `users_node`.`mail` AS `creator_email`,
  `firstname`.`field_user_first_name_value` AS `first_name`,
  `lastname`.`field_user_last_name_value` AS `last_name`,
  `birthday`.`field_user_birthday_value` AS `birth_day`,
  `mobile`.`field_user_mobile_value` AS `phone`,
  `address`.`field_user_address_thoroughfare` AS `owner_street`,
  `address`.`field_user_address_locality` AS `owner_city`,
  `address`.`field_user_address_administrative_area` AS `owner_state`,
  `address`.`field_user_address_postal_code` AS `owner_zip`,
  `street`.`field_club_address_value` AS `street`,
  `city`.`field_club_city_value` AS `city`,
  `state`.`field_club_state_value` AS `state`,
  `zip`.`field_club_zip_value` AS `zip`,
  COUNT(DISTINCT og_membership_og.etid) AS `member_count`,
  IF (`camp2`.`field_campaign_list_nid`, GROUP_CONCAT(`camp2`.`field_campaign_list_nid`), GROUP_CONCAT(`camp1`.`field_camp_value`)) AS `camps`,
  GROUP_CONCAT(`ogu`.`mail`) AS `member_emails`,
  GROUP_CONCAT(`ogu`.`uid`) AS `member_uids`,
  (SELECT COUNT(*) FROM `webform_submissions` WHERE `nid` = 718313 AND `uid` IN (GROUP_CONCAT(`ogu`.`uid`))) AS `pcount`,
  (SELECT `webform_submissions`.`submitted` FROM `webform_submissions` WHERE `nid` = 718313 AND `uid` IN (GROUP_CONCAT(`ogu`.`uid`)) ORDER BY `webform_submissions`.`submitted` DESC LIMIT 1) AS `lastcreated`,
  (SELECT `webform_submissions`.`submitted` FROM `webform_submissions` WHERE `nid` IN (" . $cs . ") AND `uid` IN (GROUP_CONCAT(`ogu`.`uid`)) ORDER BY `webform_submissions`.`submitted` DESC LIMIT 1) AS `last_joined_campaign`,
  `sc`.name AS `school_name`,
  `sc`.type AS `school_type`,
  `sc`.state AS `school_state`,
  IF (`noassoc`.`field_no_school_associate_value`, 1, 0) AS `not_associated`,
  `blurb`.`field_club_blurb_value` AS `blurb`,
  IF (`old_goodies`.`field_club_mailings_value`, 1, IF(`goodies`.`field_send_goodies_value`, 1, 0)) AS `send_goodies`,
  `lu`.`login` AS `last_leader_login`
FROM 
`node` node
LEFT JOIN `users` users_node ON node.uid = users_node.uid
LEFT JOIN `profile` profile_users ON users_node.uid = profile_users.uid
LEFT JOIN `og` og_node ON node.nid = og_node.etid AND og_node.entity_type = 'node'
LEFT JOIN `og_membership` og_membership_og ON og_node.gid = og_membership_og.gid
LEFT JOIN `field_data_field_user_first_name` AS `firstname` ON (`firstname`.`entity_id` = `profile_users`.`pid`)
LEFT JOIN `field_data_field_user_last_name` AS `lastname` ON (`lastname`.`entity_id` = `profile_users`.`pid`)
LEFT JOIN `field_data_field_user_birthday` AS `birthday` ON (`birthday`.`entity_id` = `profile_users`.`pid`)
LEFT JOIN `field_data_field_user_mobile` AS `mobile` ON (`mobile`.`entity_id` = `profile_users`.`pid`)
LEFT JOIN `field_data_field_user_address` AS `address` ON (`address`.`entity_id` = `profile_users`.`pid`)
LEFT JOIN `field_data_field_club_address` AS `street` ON (`street`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_club_city` AS `city` ON (`city`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_club_state` AS `state` ON (`state`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_club_zip` AS `zip` ON (`zip`.`entity_id` = `node`.`nid`)
LEFT JOIN `og_membership` AS `ogm` ON (`ogm`.`gid` = `og_node`.`gid` AND `ogm`.`entity_type` = 'user')
LEFT JOIN `users` AS `ogu` ON (`ogu`.`uid` = `ogm`.`etid`)
LEFT JOIN `users` AS `lu` ON (`lu`.`uid` = `node`.`uid`)
LEFT JOIN `field_data_field_no_school_associate` AS `noassoc` ON (`noassoc`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_club_blurb` AS `blurb` ON (`blurb`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_camp` AS `camp1` ON (`camp1`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_campaign_list` AS `camp2` ON (`camp2`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_send_goodies` AS `goodies` ON (`goodies`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_club_mailings` AS `old_goodies` ON (`old_goodies`.`entity_id` = `node`.`nid`)
LEFT JOIN `field_data_field_school_reference` AS `school` ON (
  `school`.`entity_id` = `node`.`nid` AND (
    `school`.`entity_type` = 'node' AND `school`.`deleted` = '0'
  )
)
LEFT JOIN `ds_school` AS `sc` ON (`sc`.`sid` = `school`.`field_school_reference_target_id`)
WHERE (( (node.status = '1') AND (node.type IN  ('club')) ))
GROUP BY nid, node_title
ORDER BY node_title ASC
" . (is_numeric($limit) ? " limit $limit" . (is_numeric($offset) ? ", $offset" : '') : '');

  #$q = db_query($query);
  

  clubs_export::log('Query', $query);

  if ($return_query) {
    return $q;
  }
  else {
    return array(
      'count' => $q->rowCount(),
      'results' => $q->fetchAll()
    );
  }
}

function dosomething_clubs_pull_batch_process(&$context) {
  static $context;

  $context['finished'] = 0;
  if (!isset($context['sandbox']['step'])) {
    $context['sandbox']['step'] = 0;
  }

  if (!isset($context['sandbox']['file'])) {
    $field_labels = clubs_export::$field_labels;

    $filename = 'clubs_export_' . date('m-d-y', REQUEST_TIME) . '.csv';
    $file_path = file_directory_temp() . '/' . $filename;
    $handle = fopen($file_path, 'w');
    fputcsv($handle, $field_labels);
    fclose($handle);

    $clubs = dosomething_clubs_pull_mega_query();
    $context['sandbox']['clubs'] = $clubs['results'];
    $context['sandbox']['total_clubs'] = $clubs['count'];
    $context['sandbox']['clubs_count'] = intval($clubs['count']);

    $context['sandbox']['file'] = $file_path;
    $context['sandbox']['fields'] = $field_labels;

    $context['results']['filename'] = $filename;
    $context['results']['file'] = $file_path;
    $context['results']['list_id'] = $list_id;
  }

  if (!isset($context['results']['count'])) {
    $context['results']['count'] = 0;
  }

  $handle = fopen($context['sandbox']['file'], 'a');
  reset($context['sandbox']['clubs']);
  for ($i = $context['sandbox']['step']; $i < (CLUB_PULL_LIMIT * ($context['sandbox']['step'] + 1)); $i++) {
    $remaining = count($context['sandbox']['clubs']) - 1;

    if ($remaining) {
      $stuff = (array) $context['sandbox']['clubs']["$i"];
      $c = array(
        'remaining' =>        $remaining,
        'club id' =>          $stuff['nid'],
        'club name' =>        $stuff['node_title'],
        'not associated with a school' => $stuff['not_associated'],
        'blurb' =>            $stuff['blurb'],
        'date created' =>     date('Y/m/d', $stuff['created']),
        'last updated date' => date('Y/m/d', $stuff['last_updated']),
        'user id' =>          $stuff['creator_id'],
        'created by' =>       $stuff['creator'],
        'Owner email' =>      $stuff['creator_email'],
        'Owner Cell' =>       $stuff['phone'],
        'Owner First Name' => $stuff['first_name'],
        'Owner Last Name' =>  $stuff['last_name'],
        'Owner Birthday' =>   $stuff['birth_day'],
        'Owner Street' =>     $stuff['owner_street'],
        'Owner City' =>       $stuff['owner_city'],
        'Owner State' =>      $stuff['owner_state'],
        'Owner Zip' =>        $stuff['owner_zip'],
        'Owner Last Login' => date('Y/m/d', $stuff['last_leader_login']),
        'Club Street' =>      $stuff['street'],
        'Club City' =>             $stuff['city'],
        'Club State' =>            $stuff['state'],
        'Club Zip' =>              $stuff['zip'],
        'Working On' =>       str_replace(',', ', ', $stuff['camps']),
        'Send Goodies' =>     $stuff['send_goodies'],
        'School Name' =>      $stuff['school_name'],
        'School Type' =>      $stuff['school_type'],
        'School State' =>     $stuff['school_state'],
        'Member Count' =>     $stuff['member_count'],
        'Member Emails' =>    str_replace(',', ', ', $stuff['member_emails']),
        'Member UIDs' =>      str_replace(',', ', ', $stuff['member_uids']),
        '# of Projects' =>    $stuff['pcount'],
        'Recent Project' =>   date('Y/m/d', $stuff['lastcreated']),
        'Last joined campaign time' => date('Y/m/d', $stuff['last_joined_campaign']),
        'SMS Invites' => $stuff['shares']['sms_shares'],
        'Facebook invites' => $stuff['shares']['fb_shares'],
        'Email invites' => $stuff['shares']['email_shares'],
        'Total' => ($stuff['shares']['sms_shares'] + $stuff['shares']['fb_shares'] + $stuff['shares']['email_shares']),
        'Responded to Survey' => $stuff['survey'],
      );

      unset($context['sandbox']['clubs']["$i"]);

      fputcsv($handle, $c);
      $context['results']['count']++;
      $context['finished'] = ($context['results']['count'] / $context['sandbox']['total_clubs']);
    }
    else {
      $context['finished'] = 1;
      break;
    }
  }

  fclose($handle);
  $context['sandbox']['step']++;

  $context['message'] = t('Exporting Clubs Data: @count of @total.', array(
    '@count' => $context['results']['count'],
    '@total' => $context['sandbox']['total_clubs']
  ));
}

function dosomething_clubs_pull_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('The Clubs data was successfully exported.  See more information below.');
    $warning = 'status';
  }
  else {
    $mssage = t("Sorry, we couldn't successfully export the clubs data.  Please try again later.");
    $warning = 'error';
  }

  session_start();
  $_SESSION['csv_download_file'] = $results['file'];
  $_SESSION['csv_download_filename'] = $results['filename'];
  drupal_set_message($message, $warning);
}

function dosomething_clubs_pull_data() {
  foreach (clubs_export::$field_labels AS $label) {
    $header[] = array(
      'data' => $label, 'class' => array('clubs-pull-' . preg_replace('#[^a-z0-9\-]#i', '-', strtolower($label)))
    );
  }

  $count = db_query("SELECT COUNT(*) AS `count` FROM `node` WHERE (( (node.status = '1') AND (node.type IN  ('club')) )) GROUP BY nid, `node`.`title` ORDER BY `node`.`title` ASC");
  $num = $count->rowCount();

  $num_per_page = 100;
  $page = pager_default_initialize($num, $num_per_page);

  $offset = $num_per_page * $page;

  $pages = array();
  $results = clubs_export::the_query($offset, $num_per_page);
  foreach ($results['results'] AS $key => $stuff) {
      $result = (array) $stuff;
      $done = array();
      foreach (explode(',', $result['camps']) AS $c) {
        if (in_array($c, $done)) {
          continue;
        }

        $done[] = $c;
      }

      $rtimes = '';
      if (!empty($result['sms_response_times'])) {
        foreach (explode(',', $result['sms_response_times']) AS $time) {
          $rtimes .= date('Y/m/d', $time) . ', ';
        }
        $rtimes = substr($rtimes, 0, -2);
      }

      $last_created_project = '';
      if (!empty($result['lastcreated'])) {
        $last_created_project = date('Y/m/d', $result['lastcreated']);
      }

      $last_joined_campaign = '';
      if (!empty($result['last_joined_campaign'])) {
        $last_joined_campaign = date('Y/m/d', $result['last_joined_campaign']);
      }

      $crbids = dosomething_clubs_pull_get_campaign_report_back_nids();

      $pids = $pdates = array(
        0 => ' ',
        1 => ' ',
        2 => ' ',
        3 => ' ',
        4 => ' ',
      );
      if (!empty($result['projects'])) {
        foreach ($result['projects'] AS $key => $project) {
          $pids[$key] = $project->sid;
          $pdates[$key] = date('Y-m-d', $project->submitted);
        }
      }

      $cids = $cdates = array(
        0 => ' ',
        1 => ' ',
        2 => ' ',
        3 => ' ',
        4 => ' ',
      );
      if (!empty($result['campaigns'])) {
        foreach ($result['campaigns'] AS $campaign) {
          $cids[$key] = $crbids[$campaign->nid];
          $cdates[$key] = date('Y-m-d', $campaign->submitted);
        }
      }

      // Set fall & spring sms response variables to default as nothing.
      $fall1 = $fall2 = $spring1 = $spring2 = '';

      // Check to see if ther are any responses floating in there.
      $sms = dosomething_general_array_vals_multi($result['sms_responses']);

      // If not empty...
      if (!empty($sms)) {
        foreach ($result['sms_responses'] AS $semester => $responses) {
          foreach ($responses AS $num => $response) {
            $n = ++$num;
            // Set the variable with the response.
            ${"{$semester}{$n}"} = $response->response;
          }
        }
      }

    $pages['rows'][] = array(
      'data' => array(
        'club id' =>                  array('data' => $result['nid']),
        'club name' =>                array('data' => $result['node_title']),
        'Not associated with a school' => array('data' => $result['not_associated']),
        'blurb' =>                    array('data' => $result['blurb']),
        'date created' =>             array('data' => date('Y/m/d', $result['created'])),
        'time created' =>             array('data' => date('H:i:s', $result['created'])),
        'last updated date' =>        array('data' => date('Y/m/d', $result['last_updated'])),
        'user id' =>                  array('data' => $result['creator_id']),
        'created by' =>               array('data' => $result['creator']),
        'Owner email' =>              array('data' => $result['creator_email']),
        'Owner Cell' =>               array('data' => $result['phone']),
        'Owner First Name' =>         array('data' => $result['first_name']),
        'Owner Last Name' =>          array('data' => $result['last_name']),
        'Owner Birthday' =>           array('data' => $result['birth_day']),
        'Owner Street' =>             array('data' => $result['owner_street']),
        'Owner City' =>               array('data' => $result['owner_city']),
        'Owner State' =>              array('data' => $result['owner_state']),
        'Owner Zip' =>                array('data' => $result['owner_zip']),
        'Owner Last Login' =>         array('data' => date('Y/m/d', $result['last_leader_login'])),
        'Club Street' =>              array('data' => $result['street']),
        'Club City' =>                     array('data' => $result['city']),
        'Club State' =>                    array('data' => $result['state']),
        'Club Zip' =>                        array('data' => $result['zip']),
        'My Club is Going to Work On' => array('data' => implode(', ', $done)),
        'Send Goodies' =>             array('data' => $result['send_goodies']),
        'School Name' =>                 array('data' => $result['school_name']),
        'School Type' =>                 array('data' => $result['school_type']),
        'School Street' =>               array('data' => $result['school_street']),
        'School City' =>               array('data' => $result['school_city']),
        'School State' =>                array('data' => $result['school_state']),
        'School Country' =>               array('data' => ($result['school_country'] ? $result['school_country'] : ($result['school_type'] ? 'US' : ''))),
        'School ZIP' =>               array('data' => $result['school_zip']),
        'Member Count' =>                array('data' => $result['member_count']),
        'Member Emails' =>               array('data' => str_replace(',', ', ', $result['member_emails'])),
        'Member UIDs' =>                   array('data' => str_replace(',', ', ', $result['member_uids'])),
        'Number of Projects' =>            array('data' => $result['pcount']),
        'Most Recently Created Project' => array('data' => $last_created),
        'Last joined campaign time' =>      array('data' => $last_joined_campaign),
        'SMS Response Times' =>             array('data' => $rtimes),
        'SMS Invites' => array('data' => $result['shares']['sms_shares']),
        'Facebook invites' => array('data' => $result['shares']['fb_shares']),
        'Email invites' => array('data' => $result['shares']['email_shares']),
        'Total' => array('data' => ($result['shares']['sms_shares'] + $result['shares']['fb_shares'] + $result['shares']['email_shares'])),
        'Responded to survey' => array('data' => $result['survey']),
        'project_ids_1' => array('data' => $pids[0]),
        'project_ids_2' => array('data' => $pids[1]),
        'project_ids_3' => array('data' => $pids[2]),
        'project_ids_4' => array('data' => $pids[3]),
        'project_ids_5' => array('data' => $pids[4]),
        'project_dates_1' => array('data' => $pdates[0]),
        'project_dates_2' => array('data' => $pdates[1]),
        'project_dates_3' => array('data' => $pdates[2]),
        'project_dates_4' => array('data' => $pdates[3]),
        'project_dates_5' => array('data' => $pdates[4]),
        'campaign_ids_1' => array('data' => $cids[0]),
        'campaign_ids_2' => array('data' => $cids[1]),
        'campaign_ids_3' => array('data' => $cids[2]),
        'campaign_ids_4' => array('data' => $cids[3]),
        'campaign_ids_5' => array('data' => $cids[4]),
        'campaign_dates_1' => array('data' => $cdates[0]),
        'campaign_dates_2' => array('data' => $cdates[1]),
        'campaign_dates_3' => array('data' => $cdates[2]),
        'campaign_dates_4' => array('data' => $cdates[3]),
        'campaign_dates_5' => array('data' => $cdates[4]),
        'fall1' => array('data' => $fall1),
        'fall2' => array('data' => $fall2),
        'spring1' => array('data' => $spring1),
        'spring2' => array('data' => $spring2),
      )
    );
  }

  $content .= l('+ Export club data', 'admin/clubs-pull/export');
  $content .= theme('pager');
  $content .= '<p />' . theme('table', array('header' => $header, 'rows' => $pages['rows'], 'attributes' => array('id' => 'page-manager-list-pages')));
  $content .= theme('pager');

  return $content;
}
