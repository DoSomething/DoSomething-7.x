<?php
/**
 * A collection of functionality related to MailChimp functionality.
 *
 * A central location for all things MailChimp within the DoSomething.org site.
 * 
 **/

/**
 * Implements hook_permission(). - sets up access permission needed to access the specified
 * callbacks for this module
 *
 * @param NONE
 *   
 * @return NONE
 */
function dosomething_mailchimp_toolbox_permission() {
  return array(
    'administer mailchimp toolbox' => array(
      'title' => t('MailChimp Toolbox'),
      'description' => t('General access to external services site tools.'),
    ),   
  );
}

 /**
 * Implements hook_menu() - callbacks.
 *
 * @param NONE
 *   
 * @return $items - the defined callbacks for the module.
 */
function dosomething_mailchimp_toolbox_menu() {
    
  $items = array();
  
    $items['admin/reports/dosomething_mailchimp_toolbox'] = array(
    'title' => 'External Services Toolbox - Webform Status Report',
    'description' => 'A listing of webforms status relative to external services.',
    'access arguments' => array('administer mailchimp toolbox'),
    'page callback' => '_dosomething_mailchimp_toolbox_webform_report',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );  
  
  return $items;

}

/**
 * Implements hook_theme() - defines the templates for the module
 *
 * @param $existing
 * array $existing: An array of existing implementations that may be used for override purposes. This is primarily
 * useful for themes that may wish to examine existing implementations to extract data (such as arguments) so that
 * it may properly register its own, higher priority implementations.
 *
 * @param $type
 * $type: Whether a theme, module, etc. is being processed. This is primarily useful so that themes tell if they are
 * the actual theme being called or a parent theme. May be one of:
 *
 * 'module': A module is being checked for theme implementations.
 * 'base_theme_engine': A theme engine is being checked for a theme that is a parent of the actual theme being used.
 * 'theme_engine': A theme engine is being checked for the actual theme being used.
 * 'base_theme': A base theme is being checked for theme implementations.
 * 'theme': The actual theme in use is being checked.
 *
 * @param $type
 * $theme: The actual name of theme, module, etc. that is being being processed.
 * 
 * @param $path
 * $path: The directory path of the theme or module, so that it doesn't need to be looked up.
 * 
 * @return NONE
 */
function dosomething_mailchimp_toolbox_theme($existing, $type, $theme, $path) {
  return array(

    'dosomething_mailchimp_toolbox_forms_report' => array(
      'variables' => array(
                      'forms_listing' => NULL,
                    ),
      'template' => 'templates/dosomething-mailchimp-toolbox-forms-report',
    ),
    
  ); 
}

/*
 * Implementation of hook_webform_submission_presave()
 *
 * For a particular Webform node, use the submitted value of a component to determine whether or not 
 * the submitter will be subscribed to a Simplenews newsletter. 
 *
 * Catch all webform submissions to add submission details to MailChimp based on an assigned MailChimp group by specific webform.
 * This functionality will ber expanded to includ an admin form to add the MailChimp group by webform rather than the current hardcoded
 * logic below.
 */
function dosomething_mailchimp_toolbox_webform_submission_presave($node, &$submission) {

  // To-Do: Replace with variables table lookup set by admin interface
  // 727601: Do Something Awards Application
  // 727716: DO SOMETHING AWARDS NOMINATION FORM
  // 728929  gun-policy
  // 719564: Contact Me About Boot Camp
  // 719546: Contact Me About Scholarships
  // 719550: Contact Me About Clubs
  // 719551: Contact Me About Grants
  if ($submission->nid == 727601 ||
      $submission->nid == 727716 ||
      $submission->nid == 728929 ||
      $submission->nid == 719564 ||
      $submission->nid == 719546 ||
      $submission->nid == 719550 ||
      $submission->nid == 719551) {
    
    if ($submission->nid == 727601) {
    
      // Target email - MailChimp key
      $application_email = $submission->data[5]['value'][0];
  
      // Name
      $merge_vars['FNAME'] = $submission->field_webform_first_name['und'][0]['value'];
      $merge_vars['LNAME'] = $submission->field_webform_last_name['und'][0]['value'];
      $merge_vars['MMERGE3'] = $merge_vars['FNAME'] .' '. $merge_vars['LNAME'];
  
      // Birthday
      $birthday_bits = explode('-', $submission->data[12]['value'][0]);
      $birthday_stamp = mktime(0, 0, 0, $birthday_bits[1],  $birthday_bits[2], $birthday_bits[0]);
      
      $merge_vars['BDAY'] = date('m/d', $birthday_stamp);
      $merge_vars['BDAYFULL'] = date('m/d/Y', $birthday_stamp);
      
      // Need to store date values as var to allow recasting in final string
      $target_date = date('m/d', $birthday_stamp);
      $target_year_18 = date('Y', $birthday_stamp) + 18;    
      $target_year_26 = date('Y', $birthday_stamp) + 26;  
        
      // Support for target dates based on user birthday - 18 and 26 years old. Used by auto responders in MailChimp
      $merge_vars['TURNS18'] = $target_date ."/". $target_year_18;
      $merge_vars['TURNS26'] = $target_date ."/". $target_year_26;
  
      // Cell
      $merge_vars['MMERGE7'] = $submission->data[6]['value'][0];
      
      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Applicants';
      
    }
    elseif ($submission->nid == 727716) { //
      
      // Target email - MailChimp key
      $application_email = $submission->data[2]['value'][0];
      
      // Full name
      $merge_vars['MMERGE3'] = $submission->data[1]['value'][0];
      
      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Nominees';
      
    }
    elseif ($submission->nid == 728929) {  // /gun-policy
      
      // Target email - MailChimp key
      $application_email = $submission->data[1]['value'][0];
      
      // Assign target MailChimp group by age
      $datebits = explode('-', $submission->data[2]['value'][0]);
      $bd_stamp = mktime(0, 0, 0, $datebits[1], $datebits[2], $datebits[0]);
      $ageout_stamp = mktime(0, 0, 0, date("m"), date("d"), date("Y")-25);
      
      $merge_vars['BDAY'] = $datebits[1] .'/'. $datebits[2] .'/'.$datebits[0];
      
      if ($bd_stamp >= $ageout_stamp) { // Young people
        $MailChimp_group = 'ControlSurvey2013';
      }
      else { // Old people
        $MailChimp_group = 'GunControlReport2013';
      }
      
    } elseif ($submission->nid == 719564 ||
              $submission->nid == 719546 ||
              $submission->nid == 719550 ||
              $submission->nid == 719551) {
      
      // Target email - MailChimp key
      $application_email = $submission->field_webform_email[LANGUAGE_NONE][0]['email'];
      
      // Mobile
      $merge_vars['MMERGE7'] = $submission->field_webform_mobile[LANGUAGE_NONE][0]['value'];
      
      // 719564: Contact Me About Boot Camp
      if ($submission->nid == 719564) {
        
        $MailChimp_group = 'Bootcamp2012NYC';
        $mobile_commons_bucket = '153803'; // BootCamp2013 
        
      } // 719546: Contact Me About Scholarships
      elseif ($submission->nid == 719546) {
        
        $MailChimp_group = 'ScholarshipInterest2012';
        $mobile_commons_bucket = '150493'; // Scholarships2013
                
      } // 719550: Contact Me About Clubs
      elseif ($submission->nid == 719550) {
        
        $MailChimp_group = 'Clubs2012';
        $mobile_commons_bucket = '124101'; // Clubs2012
                
      } // 719551: Contact Me About Grants
      elseif ($submission->nid == 719551) {
        
        $MailChimp_group = 'Grants2012';
        $mobile_commons_bucket = '150463'; // Grants2013 
                
      }
  
    }
    
    // Submit to MailChimp
    $mailChimp_results = dosomething_general_mailchimp_subscribe($application_email, $MailChimp_group, $merge_vars);
    
    // Mobile Commons
    if ($merge_vars['MMERGE7'] != '') {
      dosomething_general_mobile_commons_subscribe($merge_vars['MMERGE7'], $mobile_commons_bucket);
    }
    
  }
  
}


/**
 *  Implements hook_module_implements_alter()
 *  Reorder the module load order to gain access to the fields added to the webform by webform entity.
 *
 *  // http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_module_implements_alter/7
 *  This hook is invoked during module_implements(). A module may implement this hook in order to reorder
 *  the implementing modules, which are otherwise ordered by the module's system weight.
 *
 * @param &$implementations: Array of implimented hooks. Passed as reference allowing for alteration to be passed
 * on to Drupal bootstrap. This allows the placement of this module at the bottom of the stack thus gaining access
 * to all that comes before it. Specifically webform entity entries are now available,
 * 
 * @param $hook: Array - All of the hooks implimented.
 *  
 */
function dosomething_mailchimp_toolbox_module_implements_alter(&$implementations, $hook) {
  
  if ($hook == 'webform_submission_presave') {
    $group = $implementations['dosomething_mailchimp_toolbox'];
    unset($implementations['dosomething_mailchimp_toolbox']);
    $implementations['dosomething_mailchimp_toolbox'] = $group;
  }
  
}

/**
 * _dosomething_mailchimp_toolbox_webform_report() - report generation of all webforms and what the MailChimp and Mobile
 * Commons groups are assigned to the form.
 *
 * @param NONE
 *   
 * @return - call to dosomething_mailchimp_toolbox_forms_report template to generate report
 *   results as interactive table.
 */
function _dosomething_mailchimp_toolbox_webform_report() {
  
  // Add CSS to format table
  drupal_add_css(
    drupal_get_path('module', 'dosomething_mailchimp_toolbox') . '/css/dosomething_mailchimp_toolbox.css',
    array('group' => CSS_DEFAULT, 'every_page' => FALSE));
  
  // Collect uptodate details about MailChimp groups
  list($MC_groupNames, $MC_currentGroup_subscribers, $MC_groupingIdByGroup_Subscribers) = dosomething_mailchimp_toolbox_mailchimp_group_info();
  
  // Respond to user input for column sorting
  if (isset($_GET['sort']) && isset($_GET['order'])) {
    
    // Sort it Ascending or Descending?
    if($_GET['sort'] == 'asc') {
      $sort = 'ASC';
    }
    else {
      $sort = 'DESC';
    }
 
    // Which column will be sorted
    switch($_GET['order']){
      
      case 'Title':
        $order = 'n.title';
        break;
      
      case 'Date':
        $order = 'n.changed';
        break;
      
      case 'Type':
        $order = 'west.type';
        break;
      
      case 'MailChimpGroup':
        $order = 'fdfmgi.field_mailchimp_group_id_value';
        break;
      
      case 'MobileGroup':
        $order = 'fdfmo.field_mc_optin_value';
        break;
      
      default:
        $order = 'n.title';
    }
    
  }
  else {
  
    // Default sort
    $sort = 'ASC';
    $order = ' n.title';
    
  }
  
  // Form name search
  $search = check_plain($_GET['search']);
  if ($search != '') {        
    $search_bits = explode('+', $search);
  }

  $query = db_select('webform_entity_submission_type', 'west');
  
  // Join webform_entity_submission_type table to node table to get general node details about
  // each webform_entity_submission_type entry
  $query->leftJoin('node', 'n', 'n.type = west.type');
  
  // MailChimp
  $query->leftJoin('field_data_field_mailchimp_group_id', 'fdfmgi', 'n.nid = fdfmgi.entity_id');
  
  // Mobile Commons
  $query->leftJoin('field_data_field_mc_optin', 'fdfmo', 'n.nid = fdfmo.entity_id');
  
  // Fields of interest in all joined tables
  $query->fields('n', array('nid', 'title', 'created', 'changed'))
        ->fields('west', array('type'))
        ->fields('fdfmgi', array('field_mailchimp_group_id_value'))
        ->fields('fdfmo', array('field_mc_optin_value'));
        
  // TO-DO - Add MailChimp Group lookup to confirm valid Group / Interest Group
  // assignment and to show number of email addresses assigned to group to indicate
  // activity.
  // http://apidocs.mailchimp.com/api/1.3/listinterestgroupings.func.php
  // listInterestGroupings(string apikey, string id)
        
  // Loop through title search words to create AND condition for target terms
  if (count($search_bits) > 1) {
    
    $db_or = db_or();
    foreach($search_bits as $search_bit => $search_bit_text) {
      $db_or->condition('n.title', '%'. $search_bit_text .'%', 'LIKE');
    }
    $query->condition($db_or);
    
  }
  elseif (isset($search_bits)) {
    $query->condition('n.title', '%'. $search .'%', 'LIKE');
  }
  
  // Sorting by column - dynamic based on user selection
  $query->orderBy($order, $sort);
  
  // Extra functionality for query - enable column sorting and pager
  $query = $query->extend('TableSort')
                 ->extend('PagerDefault')
                 ->limit(30);

  // Submit query for processing
  $results = $query->execute();
  
  $row_count = 0;
  
  // Build details on each entry for listing as table
  foreach ($results as $form_row) {
    
    $row_count++;
    
    // Date details in readable format
    $date_details = date('M j, Y', $form_row->created) .' / '.  date('M j, Y', $form_row->changed);
    
    // Check to see if MailChimp group ID setting is valid, highlight if not
    if ($form_row->field_mailchimp_group_id_value == NULL) {
      $cell['data'] = 'Undefined';
      $cell['class'] = 'warning';
    }
    elseif (in_array($form_row->field_mailchimp_group_id_value, $MC_groupNames) == FALSE) {
      $cell['data'] = $form_row->field_mailchimp_group_id_value;
      $cell['class'] = 'alert';
    } else {
      $cell['data'] = $form_row->field_mailchimp_group_id_value .' ('. $MC_currentGroup_subscribers[$form_row->field_mailchimp_group_id_value] . ' subscribers)';
      $cell['class'] = 'confirmed';
    }

    $rows[] = array(
      $form_row->title,
      $date_details,
      $form_row->type,
      $cell,
      $form_row->field_mc_optin_value, 
      l('Edit', 'node/' . $form_row->nid . '/edit'),
    );
    
  }
  
  // Prepare table header
  $header = array(
    array(
      'data' => t('Title'),
      'field' => 'n.title',
      'sort' => 'ASC',
    ),
    array(
      'data' => t('Date'),
      'field' => 'n.changed',
    ),
    array(
      'data' => t('Type'),
      'field' => 'west.type',
    ),
    array(
      'data' => t('MailChimpGroup'),
      'field' => 'fdfmgi.field_mailchimp_group_id_value',
    ),
    array(
      'data' => t('MobileGroup'),
      'field' => 'fdfmo.field_mc_optin_value',
    ),
    t('Edit'),
  );
  
  // Table theme options
  $forms_listing = theme('table', 
    array(
      "header" => $header,
      "rows" => $rows,
      "attributes" => array("width"=>"100%"),
      "sticky" => true, // Table header will be sticky
      "caption" => "",
      "colgroups" => array(),
      "empty" => t("No results found!") // The message to be displayed if table is empty
    )
  ).theme("pager");
  
  return theme('dosomething_mailchimp_toolbox_forms_report',
           array(
             'forms_listing' => $forms_listing,
           )
         );
}


/**
 * dosomething_mailchimp_toolbox_webform_search_form - FAPI definition of form elements for
 * search field on report page.
 *
 * @param NONE
 *   
 * @return $form - array of form elements.
 */
function dosomething_mailchimp_toolbox_webform_search_form() {
  
  $search = check_plain($_GET['search']);
  $sort = check_plain($_GET['sort']);
  $order = check_plain($_GET['order']); 
  
  $form['dosomething_mailchimp_toolbox_webform_title_keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Webform Title Search'),
    '#default_value' => !empty($search) ? urldecode($search) : '',
    '#description' => t('Search webforms by title.'),
    '#size' => 35,
    '#maxlength' => 60,
    '#required' => FALSE,
  );
  
  $form['dosomething_mailchimp_toolbox_webform_sort']  = array(
    '#type' => 'value',
    '#value' => isset($sort) ? $sort : NULL ,
  );
  
  $form['dosomething_mailchimp_toolbox_webform_order']  = array(
    '#type' => 'value',
    '#value' => isset($order) ? $order : NULL,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  
  return $form;

}

/**
 * dosomething_mailchimp_toolbox_webform_search_form_submit() - Submit functionality for
 * search field on report page. 
 *
 * @param $form
 *   ?
 *
 * @param &$form_state
 *   ?
 *   
 * @return - NONE
 */
function dosomething_mailchimp_toolbox_webform_search_form_submit($form, &$form_state) {
  
  $title_search = str_replace(' ', '+', $form['dosomething_mailchimp_toolbox_webform_title_keyword']['#value']);
  
  $parmaters = array(
    'search' => $title_search,
    'sort'   => $form['dosomething_mailchimp_toolbox_webform_sort']['#value'],
    'order'  => $form['dosomething_mailchimp_toolbox_webform_order']['#value'],
  );
  
  // Redirect back to form with search parameters
  drupal_goto('/admin/reports/dosomething_mailchimp_toolbox', array('query'=>$parmaters));
  
}

/**
 * A wrapper function that returns the mc api object
 *
 * @param $form
 *   ?
 *   
 * @return - MCAPI connection object.
 */
function dosomething_mailchimp_toolbox_mailchimp_group_info() {
  
  // Our function - alternative to contrib MailChimp module due to connection bug
  $mcapi = dosomething_general_mailchimp_get_api_object();
  
  // Work around, connecting to both lists immedatly seems to work rahter than looping through them as needed
  $groupings['old_people'] = $mcapi->listInterestGroupings('a27895fe0c');
  $groupings['dosomething_members'] = $mcapi->listInterestGroupings('f2fab1dfd4');
  
    
  // Old People
  // $list_ids['old_people'] = 'a27895fe0c';

  // DoSomething Members
  // $list_ids['dosomething_members'] = 'f2fab1dfd4';
  
  $groupNames = array();
  $group_subscribers = array();

  // Collect list details with caching
  foreach ($groupings as $list_name => $grouping) {

    // Collect group details for list
    // $groupings = $mcapi->listInterestGroupings($listid);
    
    // Check for erros connecting to MCAPI
    if ($grouping != FALSE) {
          
      // Collect details for each group in list
      foreach ($grouping as $groups) {
        foreach ($groups['groups'] as $group) {
            
          // Collect details of list group
          $groupNames[] = $group['name'];
          $currentGroup_subscribers[$group['name']] = $group['subscribers'];
            
        }
      }

      
      // Cache ID
      $cids = "dosomething_general_mailchimp_group_subscribers_$list_name";
      
      // Collect cached info for list ID subscribers
      $cache = cache_get($cids);
      
      // Check last data point vs collection interval
      if (!empty($cache->data) || $cache->data['snapshot_due'] < time()) {
        $groupingIdByGroup_Subscribers = $cache->data;
      }
      else { // Rebuild list group subscriber data
      
        $groupingIdByGroup_Subscribers = array();
        
        // Collect group details for list
        // $groupings = $mcapi->listInterestGroupings($listid);
        
        // Confirm results are found
        if (is_array($grouping) && !empty($grouping)) {
          
          // Set timestamp of when next subscribers count refresh is due - daily
          // NOTE: Need cron job to build on interval rather than user access to get regular intervals of data points
          $groupingIdByGroup_Subscribers['snapshot_due'] = time() + (1 * 24 * 60 * 60);
          
          // Collect details for each group in list
          foreach ($grouping as $groups) {
            foreach ($groups['groups'] as $group) {
              
              // Collect details of list group subscribers
              $timestamp = time();
              $groupingIdByGroup_Subscribers[$list_name][$group['name']][$timestamp] = $group['subscribers'];
              
            }
          }
          
        }
        
        // Cache results
        cache_set($cid, $groupingIdByGroup_Subscribers);
        
      }
      
    }
    else {
      drupal_set_message('Failed to connect to MailChimp API to collect group details for "'. $list_name . '" list.', 'error');
    }
    
  } // END MC Lists loop - General & Old People
  
  return array($groupNames, $currentGroup_subscribers, $groupingIdByGroup_Subscribers);
  
}

/**
 * A wrapper function that returns the mc api object
 *
 * @param $form
 *   ?
 *   
 * @return - MCAPI connection object.
 */
function dosomething_mailchimp_toolbox_mailchimp_get_api_object() {
  
  libraries_load('mailchimp');
  $q = new MCAPI(variable_get('mailchimp_api_key', ''));

  // set the timeout to something reasonsable to avoid taking down the Drupal site
  $q->setTimeout(300);

  // specify if a secure connection should be used wit the API
  $q->useSecure(variable_get('mailchimp_use_secure', TRUE));

  if ($q->errorCode) {
    watchdog('dosomething_mailchimp_toolbox', 'MCAPI Error: %errmsg', array('%errmsg' => $q->errorMessage), WATCHDOG_ERROR);
    return NULL;
  }

  return $q;
}

/*
 *
 * Note to self on displaying bar graph of subscribers stats
 *

 
 <div class="bar">
    <div class="percentage" style="width:66%">This is 66% wide div</div>
</div>
CSS:

.bar { width: 99%; border: 1px solid #000; }
.percentage { background: #000; }

*/

/*
 * $message: An array containing the message data. Keys in this array include:
 *
 * 'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
 * 'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the PHP e-mail validation filter.
 * 'from': The address the message will be marked as being from, which is either a custom address or the site-wide default email address.
 * 'subject': Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.
 * 'body': An array of strings containing the message text. The message body is created by concatenating the individual array strings into a
 *    single text string using "\n\n" as a separator.
 * 'headers': Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.
 * 'params': An array of optional parameters supplied by the caller of drupal_mail() that is used to build the message before hook_mail_alter() is invoked.
 * 'language': The language object used to build the message before hook_mail_alter() is invoked.
 * 'send': Set to FALSE to abort sending this email message.
 *
 * If you would like to use additional template (or other) Mandrill API variables not implemented in this module, set them in hook_mail_alter under:
 *
 * $params['mandrill']. Have a look at mandrill.mail.inc to learn more.
 * (Search for "mandrill parameters".)
 *
 * http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7
 *
 */

function dosomething_mailchimp_toolbox_mail_alter(&$message) {
  
  if ($bla) {
    $bla = TRUE;
  }
  

}