<?php
/**
 * A collection of functionality related to MailChimp functionality.
 *
 * A central location for all things MailChimp within the DoSomething.org site.
 * 
 **/

/**
 * Implements hook_permission().
 *
 * @param $form
 *   ?
 * @param &$form_state
 *   ?
 * @param $webfont_id
 *   ?
 *   
 * @return
 */
function dosomething_mailchimp_toolbox_permission() {
  return array(
    'administer mailchimp toolbox' => array(
      'title' => t('MailChimp Toolbox'),
      'description' => t('General access to external services site tools.'),
    ),   
  );
}

 /**
 * Implements hook_menu().
 *
 * @param $form
 *   ?
 * @param &$form_state
 *   ?
 * @param $webfont_id
 *   ?
 *   
 * @return
 */
function dosomething_mailchimp_toolbox_menu() {
    
  $items = array();
  
    $items['admin/reports/dosomething_mailchimp_toolbox'] = array(
    'title' => 'External Services Toolbox - Webform Status Report',
    'description' => 'A listing of webforms status relative to external services.',
    'access arguments' => array('administer mailchimp toolbox'),
    'page callback' => '_dosomething_mailchimp_toolbox_webform_report',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );  
  
  return $items;

}

/**
 * Implements hook_theme().
 *
 * @param $form
 *   ?
 * @param &$form_state
 *   ?
 * @param $webfont_id
 *   ?
 *   
 * @return
 */
function dosomething_mailchimp_toolbox_theme($existing, $type, $theme, $path) {
  return array(

    'dosomething_mailchimp_toolbox_forms_report' => array(
      'variables' => array(
                      'forms_listing' => NULL,
                    ),
      'template' => 'templates/dosomething-mailchimp-toolbox-forms-report',
    ),
    
  ); 
}

/*
 * Implementation of hook_webform_submission_presave()
 *
 * For a particular Webform node, use the submitted value of a component to determine whether or not 
 * the submitter will be subscribed to a Simplenews newsletter. 
 *
 * Catch all webform submissions to add submission details to MailChimp based on an assigned MailChimp group by specific webform.
 * This functionality will ber expanded to includ an admin form to add the MailChimp group by webform rather than the current hardcoded
 * logic below.
 */
function dosomething_mailchimp_toolbox_webform_submission_presave($node, &$submission) {

  // To-Do: Replace with variables table lookup set by admin interface
  // 727601: Do Something Awards Application
  // 727716: DO SOMETHING AWARDS NOMINATION FORM
  if ($submission->nid == 727601 || $submission->nid == 727716 || $submission->nid == 728929) {
    
    if ($submission->nid == 727601) {
    
      // Target email - MailChimp key
      $application_email = $submission->data[5]['value'][0];
  
      // Name
      $merge_vars['FNAME'] = $submission->field_webform_first_name['und'][0]['value'];
      $merge_vars['LNAME'] = $submission->field_webform_last_name['und'][0]['value'];
      $merge_vars['MMERGE3'] = $merge_vars['FNAME'] .' '. $merge_vars['LNAME'];
  
      // Birthday
      $birthday_bits = explode('-', $submission->data[12]['value'][0]);
      $birthday_stamp = mktime(0, 0, 0, $birthday_bits[1],  $birthday_bits[2], $birthday_bits[0]);
      
      $merge_vars['BDAY'] = date('m/d', $birthday_stamp);
      $merge_vars['BDAYFULL'] = date('m/d/Y', $birthday_stamp);
      
      // Need to store date values as var to allow recasting in final string
      $target_date = date('m/d', $birthday_stamp);
      $target_year_18 = date('Y', $birthday_stamp) + 18;    
      $target_year_26 = date('Y', $birthday_stamp) + 26;  
        
      // Support for target dates based on user birthday - 18 and 26 years old. Used by auto responders in MailChimp
      $merge_vars['TURNS18'] = $target_date ."/". $target_year_18;
      $merge_vars['TURNS26'] = $target_date ."/". $target_year_26;
  
      // Cell
      $merge_vars['MMERGE7'] = $submission->data[6]['value'][0];
      
      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Applicants';
      
    }
    elseif ($submission->nid == 727716) {
      
      // Target email - MailChimp key
      $application_email = $submission->data[2]['value'][0];
      
      // Full name
      $merge_vars['MMERGE3'] = $submission->data[1]['value'][0];
      
      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Nominees';
      
    }
    elseif ($submission->nid == 728929) {  // /gun-policy
      
      // Target email - MailChimp key
      $application_email = $submission->data[1]['value'][0];
      
      // Assign target MailChimp group by age
      $datebits = explode('-', $submission->data[2]['value'][0]);
      $bd_stamp = mktime(0, 0, 0, $datebits[1], $datebits[2], $datebits[0]);
      $ageout_stamp = mktime(0, 0, 0, date("m"), date("d"), date("Y")-25);
      
      $merge_vars['BDAY'] = $datebits[1] .'/'. $datebits[2] .'/'.$datebits[0];
      
      if ($bd_stamp >= $ageout_stamp) { // Young people
        $MailChimp_group = 'ControlSurvey2013';
      }
      else { // Old people
        $MailChimp_group = 'GunControlReport2013';
      }
      
    }
    
    // Submit to MailChimp
    $mailChimp_results= dosomething_general_mailchimp_subscribe($application_email, $MailChimp_group, $merge_vars);
    
  }
  
}



/**
 *  Implements hook_module_implements_alter()
 *  Reorder the module load order to gain access to the fields added to the webform by webform entity.
 *
 *  // http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_module_implements_alter/7
 *  This hook is invoked during module_implements(). A module may implement this hook in order to reorder
 *  the implementing modules, which are otherwise ordered by the module's system weight.
 *
 * @param &$implementations: Array of implimented hooks. Passed as reference allowing for alteration to be passed
 * on to Drupal bootstrap. This allows the placement of this module at the bottom of the stack thus gaining access
 * to all that comes before it. Specifically webform entity entries are now available,
 * 
 * @param $hook: Array - All of the hooks implimented.
 *  
 */
function dosomething_mailchimp_toolbox_module_implements_alter(&$implementations, $hook) {
  
  if ($hook == 'webform_submission_presave') {
    $group = $implementations['dosomething_mailchimp_toolbox'];
    unset($implementations['dosomething_mailchimp_toolbox']);
    $implementations['dosomething_mailchimp_toolbox'] = $group;
  }
  
}



function _dosomething_mailchimp_toolbox_webform_report() {
  
  /*
  SELECT
    ->   n.nid AS "NID",
    ->   n.title AS "Submission Title",
    ->   west.type AS "Type"
    -> FROM
    ->   webform_entity_submission_type west
    ->   LEFT JOIN
    ->    node n ON (west.type = n.type)
    -> ORDER BY
    ->   west.type;
    
    f(isset($_GET['sort']) && isset($_GET['order'])){
  // Sort it Ascending or Descending?
  if($_GET['sort'] == 'asc')
    $sort = 'ASC';
  else
    $sort = 'DESC';
 
  // Which column will be sorted
  switch($_GET['order']){
    case 'Name':
      $order = 'name';
      break;
    case 'Type':
      $order = 'type';
      break;
    case 'Filename':
      $order = 'filename';
      break;
    case 'Module':
      $order = 'module';
      break;
    default:
      $order = 'name';
  }
}
else{
  // Default sort
  $sort = 'ASC';
  $order = ' name';
}



    $query = db_select('variable', 'v')
    ->extend('PagerDefault')
    ->orderBy('name')
    ->fields('v', array('name'));
  


 */

  
  $query = db_select('webform_entity_submission_type', 'west');
  
  // Join node and webform_entity_submission_type tables
  $query->join('node', 'n', 'west.type = n.type');
  
  // Fields in table columns
  $query->fields('n', array('nid', 'title'))
        ->fields('west', array('type'));
    
    
    // $query->orderBy($order, $sort);

    
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(50);
    
  $results = $query->execute();
  
  if ($bla) {
    $bla = TRUE;
  }
  
  // Build details on each entry for listing as table
  foreach ($results as $form_row) {
 
    $rows[] = array(
      $form_row->title,
      $form_row->type,
      l('Edit', 'node' . $form_row->nid . '/edit'),
    );
    
  }
  
  // Headers for theme_table().  
  $header = array('Title', 'Type', 'Edit');
  
  /*
    Prepare table header
$header = array(
  array(
    "data" => t('Name'),
    "field" => "name"
  ),
  array(
    "data" => t('Type'),
    "field" => "type"
  ),
  array(
    "data" => t('Filename'),
    "field" => "filename"
  ),
  array(
    "data" => t('Module'),
    "field" => "module"
  ),
  array(
    "data" => t('Weight'),
    "field" => "weight"
  )
);

*/
  
    $forms_listing = theme('table', 
    array(
      "header" => $header,
      "rows" => $rows,
      "attributes" => array("width"=>"100%"),
      "sticky" => true, // Table header will be sticky
      "caption" => "",
      "colgroups" => array(),
      "empty" => t("Table has no row!") // The message to be displayed if table is empty
    )
  ).theme("pager");
  
  if ($bla) {
    $bla = TRUE;
  }
  return theme('dosomething_mailchimp_toolbox_forms_report',
           array(
             'forms_listing' => $forms_listing,
           )
         );
}

