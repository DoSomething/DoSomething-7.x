<?php
/**
 * A collection of functionality related to MailChimp functionality.
 *
 * A central location for all things MailChimp within the DoSomething.org site.
 *
 **/

/*
 * Implementation of hook_webform_submission_presave()
 *
 * For a particular Webform node, use the submitted value of a component to determine whether or not
 * the submitter will be subscribed to a Simplenews newsletter.
 *
 * Catch all webform submissions to add submission details to MailChimp based on an assigned MailChimp group by specific webform.
 * This functionality will ber expanded to includ an admin form to add the MailChimp group by webform rather than the current hardcoded
 * logic below.
 */
function dosomething_mailchimp_toolbox_webform_submission_presave($node, &$submission) {

  // To-Do: Replace with variables table lookup set by admin interface
  // 727601: Do Something Awards Application
  // 727716: DO SOMETHING AWARDS NOMINATION FORM
  if ($submission->nid == 727601 || $submission->nid == 727716) {

    if ($submission->nid == 727601) {

      // Target email - MailChimp key
      $application_email = $submission->data[5]['value'][0];

      // Name
      $merge_vars['FNAME'] = $submission->field_webform_first_name['und'][0]['value'];
      $merge_vars['LNAME'] = $submission->field_webform_last_name['und'][0]['value'];
      $merge_vars['MMERGE3'] = $merge_vars['FNAME'] .' '. $merge_vars['LNAME'];

      // Birthday
      $birthday_bits = explode('-', $submission->data[12]['value'][0]);
      $birthday_stamp = mktime(0, 0, 0, $birthday_bits[1],  $birthday_bits[2], $birthday_bits[0]);

      $merge_vars['BDAY'] = date('m/d', $birthday_stamp);
      $merge_vars['BDAYFULL'] = date('m/d/Y', $birthday_stamp);

      // Need to store date values as var to allow recasting in final string
      $target_date = date('m/d', $birthday_stamp);
      $target_year_18 = date('Y', $birthday_stamp) + 18;
      $target_year_26 = date('Y', $birthday_stamp) + 26;

      // Support for target dates based on user birthday - 18 and 26 years old. Used by auto responders in MailChimp
      $merge_vars['TURNS18'] = $target_date ."/". $target_year_18;
      $merge_vars['TURNS26'] = $target_date ."/". $target_year_26;

      // Cell
      $merge_vars['MMERGE7'] = $submission->data[6]['value'][0];

      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Applicants';

    }
    elseif ($submission->nid == 727716) {

      // Target email - MailChimp key
      $application_email = $submission->data[2]['value'][0];

      // Full name
      $merge_vars['MMERGE3'] = $submission->data[1]['value'][0];

      // Assign target MailChimp group
      $MailChimp_group = 'DSA2013Nominees';

    }


    // Submit to MailChimp
    $mailChimp_results = dosomething_mailchimp_toolbox_mailchimp_subscribe($application_email, $MailChimp_group, $merge_vars);

  }
 /*
  echo('<pre>');
  print_r($submission);
  echo('</ pre>');
 */
  // exit;

  // TEMP HOME for webform submissions related to Mobile Commons - this module needs to be renamed to dosomething_webform_??
  // 719551: Grants
  // 719546: Scholarships
  // 719366: Trashy
  if ($submission->nid == 719551 || $submission->nid == 719546 || $submission->nid == 719366) {

    switch ($submission->nid) {

      // 719551: Grants
      case 719551:

        $mobile_commons_optin_id = 150463;
        $mobile_number = $submission->field_webform_mobile['und'][0]['value'];

        break;

      // 719546: Scholarships
      case 719546:

        $mobile_commons_optin_id = 150493;
        $mobile_number = $submission->field_webform_mobile['und'][0]['value'];

        break;

      // 719366: Trashy
      case 719366:

        $mobile_commons_optin_id = NULL;
        $mobile_number = $submission->field_webform_mobile['und'][0]['value'];

        break;

    }

    // Submit to Mobile Commons
    if (isset($mobile_commons_optin_id) && isset($mobile_number)) {
      $mobile_commons_subscribe_results = dosomething_general_mobile_commons_subscribe($mobile_number, $mobile_commons_optin_id);
    }
    else {
      watchdog('dosomething_mailchimp_toolbox', 'Failed to assign mobile number: %mobile_number to Mobile Commons Campaign.', array('%mobile_number' => $mobile_number),WATCHDOG_ALERT);
    }

  }

}


/**
 *  Implements hook_module_implements_alter()
 *  Reorder the module load order to gain access to the fields added to the webform by webform entity.
 *
 *  // http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_module_implements_alter/7
 *  This hook is invoked during module_implements(). A module may implement this hook in order to reorder
 *  the implementing modules, which are otherwise ordered by the module's system weight.
 *
 * @param &$implementations: Array of implimented hooks. Passed as reference allowing for alteration to be passed
 * on to Drupal bootstrap. This allows the placement of this module at the bottom of the stack thus gaining access
 * to all that comes before it. Specifically webform entity entries are now available,
 *
 * @param $hook: Array - All of the hooks implimented.
 *
 */
function dosomething_mailchimp_toolbox_module_implements_alter(&$implementations, $hook) {

  if ($hook == 'webform_submission_presave') {
    $group = $implementations['dosomething_mailchimp_toolbox'];
    unset($implementations['dosomething_mailchimp_toolbox']);
    $implementations['dosomething_mailchimp_toolbox'] = $group;
  }

}

/**
 *  Extends default mail system to use DoSomethingMailSystem which sends emails as HTML
 */
class DoSomethingMailSystem extends DefaultMailSystem {

  public function format(array $message) {

    // HTML Header
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    // Only convery line feeds to <br /> if <p> is not in the text
    if (strpos($message['body'][0], '<p>') === FALSE) {

      $body = $message['body'][0];
      $body = nl2br($body);
      $message['body'][0] = $body;

    }

    drupal_wrap_mail($message['body']);

    return $message;

  }

}

/**
 * Send email message to be used by all module as MailSystem.
 *
 * @param $email
 *   Users email address.
 * @param $message
 *   The cotents of the message to be sent.
 * @return
 *   Boolean indicating success.
 */
function dosomething_mailchimp_toolbox_mail_send($email, $message) {

  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'dosomething_mailchimp_toolbox';
  $key = 'default';

  // Specify 'to' and 'from' addresses.
  $to = $email;
  $from = 'dosomething@dosomething.org';

  // The language of the e-mail. This will one of three values:
  // * user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // * global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // * language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $message, $from, $send);

  if ($result['result'] == FALSE) {
    watchdog('dosomething_mailchimp_toolbox', 'Failed to send email message.');
  }

  return $result['result'];

}
