<?php

/**
 *  Implements hook_menu()
 */
function social_graph_menu() {
   $items['social-graph'] = array(
      'page callback' => 'social_graph_show_stuff',
      'access callback' => TRUE,
   );

   return $items;
}

/**
 *  Adds a user to the Graph Users table.
 *
 *  @param array $user
 *    An array of information about the user who is about to be added.
 *
 *  @param array $extra
 *    An (optional) array of extra information, which will be serialized
 *    into the "extra" field.
 */
function social_graph_add_user($user, $extra = array()) {
  $record = array(
    'uid' => $user['uid'],
    'fbid' => $user['fbid'],
    'email' => $user['email'],
    'cell' => $user['cell'],
    'first_name' => $user['first_name'],
    'last_name' => $user['last_name'],
    'created' => $user['created'],
    'ipaddress' => $user['ipaddress'],
    'inviter_guid' => 0,
    'extra' => '',
  );

  if (!empty($extra) && is_array($extra)) {
    $record['extra'] = serialize($extra);
  }

  drupal_write_record('social_graph_users', $record);
}



function social_graph_show_stuff() {
   global $user;

$g = db_select('social_graph_friends', 'f')
   ->fields('f', array('guid', 'friend_guid'))
   ->execute()
   ->fetchAll();
$friends = array();
foreach ($g AS $key => $f) {
   $friends[$f->guid][1][] = $f->friend_guid;
}

$me_graph = $friends;

$s = build_connections($me_graph);

$inserts = array();
foreach ($me_graph AS $guid => $stats) {
   foreach ($stats AS $degree => $stuff) {
      if ($degree == 1) continue;

      foreach ($stuff AS $k => $w) {
         $inserts[$guid][$w['name']] = array(
            'degree' => $degree,
            'know_through' => $w['know_through'],
            'weight' => $s[$guid][$w['name']],
         );
      }
   }
}

foreach ($inserts AS $gid => $in) {
   foreach ($in AS $know => $degr) {
      db_insert('social_graph_friends')
      ->fields(array(
         'guid' => $gid,
         'friend_guid' => $know,
         'verified' => 0,
         'weight' => $degr['weight'],
         'degree' => $degr['degree'],
         'know_through' => $degr['know_through'],
      ))
      ->execute();
   }
}

echo "<p>DONE!";
}

function build_connections(&$me_graph) {
   global $steps;
   $steps = array();
   $visited = $vname = array();
   foreach ($me_graph AS $w => $de) {
     foreach ($de AS $deg => $connections) {
      $do = array();
      foreach ($connections AS $name) {
        if ($me_graph[$name]) {
         $do[] = $name;
        }
      }

      connect_friends($me_graph, $w, $do, $w);
     }
   }

   return $steps;
}

function connect_friends(&$me_graph, $started, $who, $to, $degree = 1) {
  global $visited, $steps;

  foreach ($who AS $name) {
   if (isset($me_graph[$name])) {
      foreach ($me_graph[$name] AS $deg => $connections) {
       if ($deg > 1) break;
       $do = array();
       $deeeg = ($degree + 1);
       foreach ($connections AS $n) {
         if ($n != $started) {
           $steps[$started][$n]++;
         }
         if ($n != $started && !$visited[$started][$n] && !is_numeric(array_search($n, $me_graph[$started][1]))) {
          $visited[$started][$n] = $deeeg;
          $me_graph[$started][$deeeg][] = array(
            'name' => $n,
            'know_through' => $name,
          );
          if ($me_graph[$n]) {
             $do[] = $n;
          }
         }
       }

       connect_friends($me_graph, $started, $do, $started, $deeeg);
      }
   }
  }
}