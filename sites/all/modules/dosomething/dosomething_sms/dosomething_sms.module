<?php
/**
 * @file
 * dosomething_sms.module
 *
 * A collection of functionality specific to SMS efforts at DoSomething.org 
 */

/**
 * Implements of hook_permission().
 */
function dosomething_sms_permission() {
  return array(
    'administer dosomething_sms' => array(
      'title' => t('Administer dosomething_sms module'),
      'description' => t('Administer access to everything in module'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dosomething_sms_menu() {
  
  $items = array();
  
  $items['admin/settings/dosomething_sms'] = array(
    'title' => 'DoSomething SMS',
    'description' => 'A collection of SMS tools related to DoSomething.org.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_sms_settings_form'),
    'access arguments' => array('administer dosomething_sms'),
    'file' => 'dosomething_sms.admin.inc',
    'file path' => drupal_get_path('module', 'dosomething_sms'),
    'type' => MENU_NORMAL_ITEM,
	);
  
  return $items;

}

/**
 * dosomething_sms_conductor_sms_keywords()
 */
function dosomething_sms_conductor_sms_keywords() {
  return array(
    'register' => 'ds_sms_user_registration',
    'testreport' => 'ds_sms_project_report_back',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dosomething_sms_ctools_plugin_api($owner, $api) {
  // TODO: $api should be workflow, not conductor but that messes with features file naming.
  if ($owner == 'conductor' && $api == 'conductor') {
    return array('version' => 1.0);
  }
}

/**
 * Implements hook_ctools_plugin_directory()
 * http://api.drupalize.me/api/drupal/function/hook_ctools_plugin_directory/7
 */
function dosomething_sms_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'conductor') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_default_conductor_default_workflows().
 */
function dosomething_sms_default_conductor_workflows() {
  $workflows = array();
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'ds_sms_user_registration';
  $workflow->title = 'User Registration';
  $workflow->description = 'Allows users to register for the site via SMS.';
  $workflow->api_version = '1.0';
  // Add and configure workflow activities.
  $activity = $workflow->newActivity('start');
  $activity->x = 280;
  $activity->y = 200;
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->outputs = array(
    'first_name',
  );
  $activity->inputs = array();

  // TODO: Should this qustion be named prompt?
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'first_name';
  $activity->title = 'First Name';
  $activity->question = 'Thanks for registering! Just a few questions: what is your first name?';
  $activity->inputs = array(
    'start',
  );
  $activity->outputs = array(
    'last_name'
  );

  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'last_name';
  $activity->title = 'Last Name';
  $activity->question = 'Great! Two more questions!  What is your last name?';
  $activity->inputs = array(
    'first_name',
  );
  $activity->outputs = array(
    'birthday'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'birthday';
  $activity->title = 'Birth Day';
  $activity->question = 'Awesome!  What is your birthday (mm/dd/yyyy)?';
  $activity->inputs = array(
    'last_name',
  );
  $activity->outputs = array(
    'signature_remover'
  );

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array(
    'birthday',
  );
  $activity->outputs = array(
    'user_creator'
  );

  $activity = $workflow->newActivity('ds_create_user');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'user_creator';
  $activity->title = 'Create a user from the existing context.';
  $activity->inputs = array(
    'signature_remover',
  );
  $activity->outputs = array(
    'end'
  );

  $activity = $workflow->newActivity('end');
  $activity->x = 380;
  $activity->y = 200;
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array(
    'user_creator'
  );
  $activity->outputs = array();
  $workflows[$workflow->name] = $workflow;

  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'ds_sms_project_report_back';
  // TODO: Are these the proper title and desription for this workflow?
  $workflow->title = 'User Registration';
  $workflow->description = 'Allows users to register for the site via SMS.';
  $workflow->api_version = '1.0';
  // Add and configure workflow activities.
  $activity = $workflow->newActivity('start');
  $activity->x = 280;
  $activity->y = 200;
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->outputs = array(
    'title',
  );
  $activity->inputs = array();
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'title';
  $activity->title = 'Project title';
  $activity->question = 'Thanks for telling us about your project, what is the title?';
  $activity->inputs = array(
    'start',
  );
  $activity->outputs = array(
    'goal'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'goal';
  $activity->title = 'Project Goal';
  $activity->question = 'Awesome, what\'s the goal of your project?';
  $activity->inputs = array(
    'title',
  );
  $activity->outputs = array(
    'involved'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'involved';
  $activity->title = 'People involved';
  $activity->question = 'Great, how many people are involved?';
  $activity->inputs = array(
    'goal',
  );
  $activity->outputs = array(
    'helped'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'helped';
  $activity->title = 'People helped';
  $activity->question = 'Amazing, how many people did you help?';
  $activity->inputs = array(
    'involved',
  );
  $activity->outputs = array(
    'signature_remover'
  );
  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array(
    'helped',
  );
  $activity->outputs = array(
    'create_report_back'
  );
  $activity = $workflow->newActivity('ds_create_report_back');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'create_report_back';
  $activity->title = 'Create a campaign report back from the existing context.';
  $activity->inputs = array(
    'signature_remover',
  );
  $activity->outputs = array(
    'end'
  );
  $activity = $workflow->newActivity('end');
  $activity->x = 380;
  $activity->y = 200;
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array(
    'create_report_back'
  );
  $activity->outputs = array();
  $workflows[$workflow->name] = $workflow;

  return $workflows;
}

/**
 * Impliments hook_cron()
 **/
function dosomething_sms_cron() {
  
  $enabled = variable_get('dosomething_sms_cron_enable', FALSE);
  
  // Run job every interval (week by default)
  $interval = variable_get('dosomething_sms_cron_interval', 60 * 60 * 24 * 7);
  $next_run = variable_get('dosomething_sms_cron_next_execution', REQUEST_TIME + $interval);

  // Check to see if it's time to run the cleanup task, default to now plus the interval for next run if nothing found for setting
  if (($enabled) && (REQUEST_TIME >= $next_run)) {
    
    $results = db_query('
      SELECT
        workflow_name,
        activity_name,
        COUNT(activity_name) AS activity_name_count
      FROM
        conductor_instance_pointer
      GROUP BY
        activity_name
      ORDER BY
        workflow_name'
    );
               
    // Headers for theme_table().  
    $header = array(t('Workflow Name'), t('Activity Name'), t('Activity Name Count'));
    
    $rows = array();
    
    // Loop through results          
    foreach ($results as $row) {
       
      $rows[] = array(
        $row->workflow_name,
        $row->activity_name,
        $row->activity_name_count,
      );
       
    }
    
    $human_date = date('l - j F Y - g:i:s');
  
    // Format output.
    $output = theme('table', array('header' => $header, 'rows' => $rows));

    // Send Report
    $to = variable_get('dosomething_sms_cron_recipients', 'dlee@dosomething.org');
    $language = '';
    $from = 'dosomething@dosomething.org';
    
    $params['subject'] = 'dosomething_sms cron Report - '. $human_date;
    
    $params['body']  = t('<h2>DoSomething.org SMS Cron</h2><br />');
    $params['body'] .= t('<p>Cron run at %current_date. <strong>%number_deleted</stront> old entries purged.</p><p>',
                         array('%current_date' => $human_date, '%number_deleted' => $number_deleted));
    $params['body'] .= theme('table', array('header' => $header, 'rows' => $rows));
    $params['body'] .= t('</p><p>See you on the next run at %next_run.', array('%next_run' => date('l - j F Y - g:i:s', $next_run)));
    
    // drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
    $result = drupal_mail('dosomething_mandrill', 'dsplain', $to, language_default(), $params,  $from, TRUE);
  
    if (isset($result['result']) && $result['result'] == 'true') {
      watchdog('dosomething_sms', 'Mandrill "dsplain" email sent from %from to %to.', array('%from' => $result['from'], '%to' => $result['to']), WATCHDOG_ERROR);
    }
    
    // Delete entries that are older than dosomething_sms_interval)
    $number_deleted = db_delete('conductor_instance_pointer')
                      ->condition('timestamp', date('Y-m-d g:i:s', REQUEST_TIME - $interval), '<=')
                      ->execute();

    // Log report in Watchdog
    watchdog('dosomething_sms', 'Cron run at %current_time. %number_deleted entries deleted.', array('%current_date' => $human_date, '%number_deleted' => $number_deleted), WATCHDOG_ERROR);
    
    // Schedule new cron run
    variable_set('dosomething_sms_cron_next_execution', time() + $interval);
    
  }
    
}