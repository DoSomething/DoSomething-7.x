<?php
/**
 * @file
 * dosomething_sms.module
 *
 * A collection of functionality specific to SMS efforts at DoSomething.org 
 */

/**
 * Implements of hook_permission().
 */
function dosomething_sms_permission() {
  return array(
    'administer dosomething_sms' => array(
      'title' => t('Administer dosomething_sms module'),
      'description' => t('Administer access to everything in module'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dosomething_sms_menu() {
  
  $items = array();
  
  $items['admin/config/dosomething/dosomething_sms'] = array(
    'title' => 'DoSomething SMS',
    'description' => 'A collection of SMS tools related to DoSomething.org.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_sms_settings_form'),
    'access arguments' => array('administer dosomething_sms'),
    'file' => 'dosomething_sms.admin.inc',
    'file path' => drupal_get_path('module', 'dosomething_sms'),
    'type' => MENU_NORMAL_ITEM,
	);
	
  $items['admin/config/dosomething/dosomething_sms/cron_test'] = array(
    'title' => 'DoSomething SMS Cron Test',
    'description' => 'Submit same functionality as cron job a test run.',
    'page callback' => 'dosomething_sms_cron_test',
		'page arguments' => array(TRUE),
    'access arguments' => array('administer dosomething_sms'),
    'type' => MENU_CALLBACK,
	);
  
  return $items;

}

/*
 * Report formatting in template (tpl) file
 */
function dosomething_sms_theme($existing, $type, $theme, $path) {
    return array(
        'dosomething_sms_cron_report' => array(
            'variables' => array('$workflows' => NULL),
            'template' => 'dosomething-sms-cron-report',
        ),
    );
}

/**
 * dosomething_sms_conductor_sms_keywords()
 */
function dosomething_sms_conductor_sms_keywords() {
  return array(
    'register' => 'ds_sms_user_registration',
    'testreport' => 'ds_sms_project_report_back',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dosomething_sms_ctools_plugin_api($owner, $api) {
  // TODO: $api should be workflow, not conductor but that messes with features file naming.
  if ($owner == 'conductor' && $api == 'conductor') {
    return array('version' => 1.0);
  }
}

/**
 * Implements hook_ctools_plugin_directory()
 * http://api.drupalize.me/api/drupal/function/hook_ctools_plugin_directory/7
 */
function dosomething_sms_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'conductor') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_default_conductor_default_workflows().
 */
function dosomething_sms_default_conductor_workflows() {
  $workflows = array();
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'ds_sms_user_registration';
  $workflow->title = 'User Registration';
  $workflow->description = 'Allows users to register for the site via SMS.';
  $workflow->api_version = '1.0';
  // Add and configure workflow activities.
  $activity = $workflow->newActivity('start');
  $activity->x = 280;
  $activity->y = 200;
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->outputs = array(
    'first_name',
  );
  $activity->inputs = array();

  // TODO: Should this qustion be named prompt?
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'first_name';
  $activity->title = 'First Name';
  $activity->question = 'Thanks for registering! Just a few questions: what is your first name?';
  $activity->inputs = array(
    'start',
  );
  $activity->outputs = array(
    'last_name'
  );

  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'last_name';
  $activity->title = 'Last Name';
  $activity->question = 'Great! Two more questions!  What is your last name?';
  $activity->inputs = array(
    'first_name',
  );
  $activity->outputs = array(
    'birthday'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'birthday';
  $activity->title = 'Birth Day';
  $activity->question = 'Awesome!  What is your birthday (mm/dd/yyyy)?';
  $activity->inputs = array(
    'last_name',
  );
  $activity->outputs = array(
    'signature_remover'
  );

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array(
    'birthday',
  );
  $activity->outputs = array(
    'user_creator'
  );

  $activity = $workflow->newActivity('ds_create_user');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'user_creator';
  $activity->title = 'Create a user from the existing context.';
  $activity->inputs = array(
    'signature_remover',
  );
  $activity->outputs = array(
    'end'
  );

  $activity = $workflow->newActivity('end');
  $activity->x = 380;
  $activity->y = 200;
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array(
    'user_creator'
  );
  $activity->outputs = array();
  $workflows[$workflow->name] = $workflow;

  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'ds_sms_project_report_back';
  // TODO: Are these the proper title and desription for this workflow?
  $workflow->title = 'User Registration';
  $workflow->description = 'Allows users to register for the site via SMS.';
  $workflow->api_version = '1.0';
  // Add and configure workflow activities.
  $activity = $workflow->newActivity('start');
  $activity->x = 280;
  $activity->y = 200;
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->outputs = array(
    'title',
  );
  $activity->inputs = array();
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'title';
  $activity->title = 'Project title';
  $activity->question = 'Thanks for telling us about your project, what is the title?';
  $activity->inputs = array(
    'start',
  );
  $activity->outputs = array(
    'goal'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'goal';
  $activity->title = 'Project Goal';
  $activity->question = 'Awesome, what\'s the goal of your project?';
  $activity->inputs = array(
    'title',
  );
  $activity->outputs = array(
    'involved'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'involved';
  $activity->title = 'People involved';
  $activity->question = 'Great, how many people are involved?';
  $activity->inputs = array(
    'goal',
  );
  $activity->outputs = array(
    'helped'
  );
  $activity = $workflow->newActivity('sms_prompt');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'helped';
  $activity->title = 'People helped';
  $activity->question = 'Amazing, how many people did you help?';
  $activity->inputs = array(
    'involved',
  );
  $activity->outputs = array(
    'signature_remover'
  );
  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'signature_remover';
  $activity->title = 'Remove the signature from all sms context.';
  $activity->inputs = array(
    'helped',
  );
  $activity->outputs = array(
    'create_report_back'
  );
  $activity = $workflow->newActivity('ds_create_report_back');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'create_report_back';
  $activity->title = 'Create a campaign report back from the existing context.';
  $activity->inputs = array(
    'signature_remover',
  );
  $activity->outputs = array(
    'end'
  );
  $activity = $workflow->newActivity('end');
  $activity->x = 380;
  $activity->y = 200;
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array(
    'create_report_back'
  );
  $activity->outputs = array();
  $workflows[$workflow->name] = $workflow;

  return $workflows;
}

/**
 * Impliments hook_cron()
 **/
function dosomething_sms_cron() {
  
  dosomething_sms_cron_test();
    
}

/**
 * hook_cron() functionality that can be called as a cron job or as a test
 **/
function dosomething_sms_cron_test($manual_test=FALSE) {
	
  $enabled = variable_get('dosomething_sms_cron_enable', FALSE);
  
  // Run job every interval (week by default)
  $interval = variable_get('dosomething_sms_cron_interval', 60 * 60 * 24 * 7);
  $next_run = variable_get('dosomething_sms_cron_next_execution', REQUEST_TIME + $interval);

  // Check to see if it's time to run the cleanup task, default to now plus the interval for next run if nothing found for setting
  if ((($enabled) && (REQUEST_TIME >= $next_run)) || $manual_test) {
		
		$workflows = dosomething_sms_flow_info();
    // $markup = dosomething_sms_report_markup($workflows);
		
		// @to-do: Switch to using template
    $markup = theme('dosomething_sms_cron_report', array('workflows' => $workflows));
		
		// Delete entries that are older than dosomething_sms_interval)
		if (!$manual_test) {
				$number_deleted = (string) db_delete('conductor_instance_pointer')
													->condition('timestamp', date('Y-m-d g:i:s', REQUEST_TIME - $interval), '<=')
													->execute();
		}
		else {							
				$query = db_query('SELECT workflow_name FROM {conductor_instance_pointer} WHERE timestamp <= :target_date',
													array(':target_date' => date('Y-m-d g:i:s', REQUEST_TIME - $interval)));			
				$number_deleted = (string) $query->rowCount();
		}
    
    $human_date = date('l - j F Y - g:i:s');

    // Send Report
		if ($manual_test) {
			$to = 'dlee@dosomething.org';
		}
		else {
		  $to = variable_get('dosomething_sms_cron_recipients', 'dlee@dosomething.org');
		}

    $language = '';
    $from = 'dosomething@dosomething.org';
    
    $params['subject'] = 'dosomething_sms cron Report - '. $human_date;
    
    $params['body']  = t('<h2>DoSomething.org SMS Cron</h2><br />');
    $params['body'] .= t('<p>Cron run at %current_date. <strong>%number_deleted</stront> old entries purged.</p><p>',
                         array('%current_date' => $human_date, '%number_deleted' => $number_deleted));
    $params['body'] .= $markup;
    $params['body'] .= t('</p><p>See you on the next run at %next_run.', array('%next_run' => date('l - j F Y - g:i:s', REQUEST_TIME + $interval)));
    
    // drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
    $result = drupal_mail('dosomething_mandrill', 'dsplain', $to, language_default(), $params,  $from, TRUE);
    
    $sent = print_r($params, TRUE);
    $results = print_r($result, TRUE);
    
    if (isset($result['result']) && $result['result'] == 'true') {
      watchdog('dosomething_sms', t('Mandrill "dsplain" email sent from %from to %to. Details sent %sent, results: %results.'), array('%from' => $result['from'], '%to' => $result['to'], '%sent' => $sent, '%results' => $results), WATCHDOG_INFO);
    }
    else {
      watchdog('dosomething_sms', t('Failed to send report via Mandrill "dsplain" email message from %from to %to. Details sent %sent, results: %results.'), array('%from' => $result['from'], '%to' => $result['to'], '%sent' => $sent), WATCHDOG_ERROR);
    }
    // Log report in Watchdog
    watchdog('dosomething_sms', t('Cron run at %current_date. %number_deleted entries deleted.'), array('%current_date' => $human_date, '%number_deleted' => $number_deleted), WATCHDOG_INFO);
    
    // Schedule new cron run
		if (!$manual_test) {
      variable_set('dosomething_sms_cron_next_execution', REQUEST_TIME + $interval);
		}

  }
	
}

/*
 * Build array of flow details. Used by dosomething_sms_report_markup() to determine
 * markup of flow report.
 */
function dosomething_sms_flow_info() {

  // Get list of all report back workflows
	$workflows = array();
	include(module_load_include('inc', 'sms_flow', 'plugins/activity/report_backs/report_backs.workflows'));
	
	// SELECT all of the unique workflow names that have entries - stalled SMS users
	$results = db_query('
		SELECT DISTINCT
			workflow_name
		FROM
			{conductor_instance_pointer} cip
		ORDER BY
			cip.workflow_name'
	);
	
	$active_workflows = array();
	$x = 0;
	$y = 0;
  $output_count = 1;
	
	// Gather all of the activities for each work flow and initalize the count to zero         
	foreach ($results as $row) {
		
		$max_y = 0;
		$activities = $workflows[$row->workflow_name]->activities;
		
		foreach ($activities as $activity_counter => $activity_details) {
			
			// Count the number of entries for this activity
			// @todo: Move query outside of loop
			$activity_count = db_query('
				SELECT
				  activity_name
				FROM
				  {conductor_instance_pointer}
				WHERE
				  workflow_name = :workflow_name
					AND
					activity_name = :activity_name',
				array('workflow_name' => $row->workflow_name, 'activity_name' => $activity_details->name))->rowCount();
			
			$activity_detail['workflow_name'] = $row->workflow_name;
			$activity_detail['activity_name'] = $activity_details->name;
			$activity_detail['activity_count'] = $activity_count;
			$activity_detail['activity_inputs'] = $activity_details->inputs;
			$activity_detail['activity_outputs'] = $activity_details->outputs;

			$x++;

			if ($active_workflows[$row->workflow_name][$activity_counter - 1]['activity_outputs'] != NULL &&
					($active_workflows[$row->workflow_name][$activity_counter - 1]['y'] +
					 count($active_workflows[$row->workflow_name][$activity_counter - 1]['activity_outputs']) - 1) > $y) {
				$y++;
	
			}
			
			// Start / End resets
			if ($activity_detail['activity_name'] == 'start') {
				$x = 0;
				$y = 0;
			}
			elseif ($activity_detail['activity_name'] == 'end') {
				$y = 0;
			}
			
			$activity_detail['x'] = $x;
			$activity_detail['y'] = $y;
			
			// Keep track of maximum width
			if ($y > $max_y) {
				$max_y = $y;
			}

			// Keep tract of the activity details
			$active_workflows[$row->workflow_name][] = $activity_detail;
			
		}

		// Note max width or Clean up
		if ($active_workflows[$row->workflow_name][0] != NULL) {
			$active_workflows[$row->workflow_name]['max_y'] = $max_y;
		}
		else {
			unset($active_workflows[$row->workflow_name]);
		}
		
	}
	
	return $active_workflows;
		
}