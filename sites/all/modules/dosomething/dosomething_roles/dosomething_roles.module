<?php

/**
 * @file
 * Custom functionality to change roles of users depending on their activity.
 */

/**
 * Implements hook_cron().
 */
function dosomething_roles_cron() {
  // Update users roles who have not been assigned to the new roles.
  // Note: this can be removed once all users have roles.
  $inactive_user = user_role_load_by_name('inactive user');
  $member = user_role_load_by_name('member');
  $active_member = user_role_load_by_name('active member');
  $rids = $inactive_user->rid . ', ' . $member->rid . ', ' . $active_member->rid;
  $result = db_query_range("SELECT u.uid, u.access FROM {users} u LEFT JOIN {users_roles} ur ON (ur.uid = u.uid AND ur.rid IN ($rids)) WHERE ur.uid IS NULL AND u.uid > 0 ORDER BY u.access ASC", 0, 100);
  foreach ($result as $data) {
    dosomething_roles_update_role($data->uid);
  }

  // Get users who have not logged in this past year for possible role regression.
  // TODO: Get users who have not done any action updates in 1 year, 9 months, 10 months, 11 months
  // After 1 year, we bump them down
  // We warn them at the other points.
  $last_update_inactive = variable_get('dosomething_roles_cron_inactive', 0);
  $result = db_query_range("SELECT u.uid, u.access FROM {users} u INNER JOIN {users_roles} ur ON (u.uid = ur.uid AND ur.rid IN (:active_member, :member)) WHERE access < UNIX_TIMESTAMP(DATE_SUB(CURRENT_TIMESTAMP(),interval 1 year)) AND access > :last_update_inactive ORDER BY u.access ASC", 0, 100, array(':active_member' => $active_member->rid, ':member' => $member->rid, ':last_update_inactive' => $last_update_inactive));
  foreach ($result as $data) {
     dosomething_roles_update_role($data->uid);
     variable_set('dosomething_roles_cron_inactive', $data->access);
  }
}

function dosomething_roles_update_role($uid) {

  // TODO: The role can only increase
  //   unless it is past a user's anniversary date.
  //   in this case we set a new anniverary date and we downgrade if needed.
  if (!$uid) {
    return;
  }
  // TODO: It would be nice to do the hierarchy with the role weights.
  $role_hierarchy = array(
    'varsity',
    'active member',
    'member',
    'inactive member',
  );

  // TODO:
  //  Get the user's role level
  //  Get the anniversary date
  //  If the role has increased
  //    increase the role, and set new anniversary
  //  if it's past the anniverary
  //   set a new anniversary
  //   if the role has decreased, then downgrade 
  //  Else make no changes.
  // If new role is old person, then send message to user
  // and block account. 

  $inactive_user = user_role_load_by_name('inactive user');
  $member = user_role_load_by_name('member');
  $active_member = user_role_load_by_name('active member');
  $rids = $inactive_user->rid . ', ' . $member->rid . ', ' . $active_member->rid;
  $old_rids = db_query("SELECT rid FROM {users_roles} WHERE uid = :uid AND rid IN (" . $rids . ")", array(':uid' => $uid))->fetchCol();
  if (!count($old_rids)) {
    if (dosomething_roles_is_active_member($uid)) {
      $new_rid = $active_member->rid;
    }
    else if (dosomething_roles_is_member($uid)) {
      $new_rid = $member->rid;
    }
    else {
      $new_rid = $inactive_user->rid;
    }
  }
  else {
    foreach ($old_rids as $rid) {
      if ($rid == $inactive_user->rid) {
        // The user is currently inactive. Check if anything has changed.
        if (dosomething_roles_is_active_member($uid)) {
          $new_rid = $active_member->rid;
        }
        else if (dosomething_roles_is_member($uid)) {
          $new_rid = $member->rid;
        }
      } 
      else if ($rid == $member->rid) {
        // The user is currently a member. Check if anything has changed.
        if (dosomething_roles_is_active_member($uid)) {
          $new_rid = $active_member->rid;
        }
        else if (!dosomething_roles_is_member($uid)) {
          $new_rid = $inactive_user->rid;
        }
      }
      else if ($rid == $active_member->rid) {
        // The user is currently an active member. Check if anything has changed.
        if (!dosomething_roles_is_active_member($uid)) {
          if (dosomething_roles_is_member($uid)) {
            $new_rid = $member->rid;
          }
          else {
            $new_rid = $inactive_user->rid;
          }
        } 
      }
    }
  }
  if (isset($new_rid)) {
    if (count($old_rids)) {
      db_query("DELETE FROM {users_roles} WHERE rid IN (" . $rids . ") AND uid = :uid", array(':uid' => $uid)); 
    }
    db_insert('users_roles')->fields(array('uid' => $uid, 'rid' => $new_rid ))->execute();
  }
}
/**
 * Determine if a given uid qualifies for the active member role.
 */
function dosomething_roles_is_active_member($uid) {
  if (db_query("SELECT u.uid FROM {users} u INNER JOIN {node} n ON n.uid = u.uid where u.uid = :uid AND u.login > UNIX_TIMESTAMP(DATE_SUB(CURRENT_TIMESTAMP(),interval 1 year)) AND u.mail NOT IN ('', '0')", array(':uid' => $uid))->fetchField()) {
    return TRUE;
  }
  if (db_query("SELECT u.uid FROM {users} u INNER JOIN {webform_submissions} w ON w.uid = u.uid where u.uid = :uid AND u.login > UNIX_TIMESTAMP(DATE_SUB(CURRENT_TIMESTAMP(),interval 1 year)) AND u.mail NOT IN ('', '0')", array(':uid' => $uid))->fetchField()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Determine if a given uid qualifies for the member role.
 */
function dosomething_roles_is_member($uid) {
  // TODO: should submitting a webform count for member?
  if (db_query("SELECT u.uid from {users} u WHERE u.login > UNIX_TIMESTAMP(DATE_SUB(CURRENT_TIMESTAMP(),interval 1 year)) AND u.mail NOT IN ('', '0') AND u.uid = :uid", array(':uid' => $uid))) {
    return TRUE;
  }
  if (db_query("SELECT u.uid from {users} u INNER JOIN {node} n ON n.uid = u.uid WHERE u.mail NOT IN ('', '0') AND u.uid = :uid", array(':uid' => $uid))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get a list of node types that are considered 'action updates'.
 */
function dosomething_roles_get_action_update_types() {
  return array(
    'campaign_report_back',
    'campaign_sign_up',
    'grant_application',
    'scholarship_application',
    'action_guide',
    'project_report',
  );
}

/**
 * Implements hook_node_insert().
 */
function dosomething_roles_node_insert($node) {
  global $user;
  if ($user->uid == $node->uid) {
    if ($node->type == 'final_grant_update') {
      dosomething_roles_update_role($node->uid);
    }
  }
}

/**
 * Implements hook_user_login().
 */
function dosomething_roles_user_login(&$edit, $account) {
  dosomething_roles_update_role($account->uid);
}

/**
 * Implements hook_user_update().
 */
function dosomething_roles_user_update(&$edit, $account, $category) {
  global $user;
  if ($user->uid == $account->uid) {
    dosomething_roles_update_role($account->uid);
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function dosomething_roles_webform_submission_insert($node, $submission) {
  global $user;
  if ($user->uid == $submission->uid) {
    if (in_array($node->type, dosomething_roles_get_action_update_types())) {
      dosomething_roles_update_role($submission->uid);
    }
  }
}

/**
 * Determine a user's role level without considering their 'Aniversary Date'
 *  when the role to actually change.
 *  old person - user over 25.
 *  inactive user - under 26, hasn't logged in in over a year.
 *  member - continue to be under 26.
 *  active member - one action update within year.
 *  varsity - 5 action updates or win grant and submit grant update.
 */
function dosomething_roles_get_member_role($uid) {
  $account = user_load($uid);
  $timestamp = strtotime('-1 year');
  $action_update_count = dosomething_roles_get_action_update_count($uid, $timestamp);
  $grant_update = dosomething_roles_user_submitted_grant($uid, $timestamp);

  if (module_exists('dosomething_login')) {
    if (dosomething_login_drupal_user_is_over_age($uid, 25)) {
      return 'old person';
    }
  }
  if ($action_update_count >= 5 || $grant_update) {
    $role_name = 'varsity';
  }
  else if ($action_update_count >= 1) {
    $role_name = 'active member';
  }
  else if ($account->login >= strtotime('-1 year')) {
    $role_name = 'member';
  }
  else {
    $role_name = 'inactive member';
  }
  return $role_name;
}

/**
 * This will get the number of action updates since the given time.
 *
 * @param $uid
 * @param $timestamp
 * @return mixed
 *  Returns int or NULL if unsuccessful.
 */
function dosomething_roles_get_action_update_count($uid, $timestamp) {
  // TODO: If the status is 'Idea' it doesn't count.
  // What is this status?
  $node_types = dosomething_roles_get_action_update_types();
  try {
    $query = db_select('webform_submissions', 'w');
    $query->innerJoin('node', 'n', 'w.nid = n.nid');
    $count = $query->fields('w', array('sid'))
    ->condition('w.uid', $uid, '=')
    ->condition('n.type', $node_types, 'IN')
    ->condition('w.is_draft', 0)
    ->condition('w.submitted', $timestamp, '>')
    ->execute()
    ->rowCount();
  }
  catch (Exception $e) {
    $count = NULL;
  }
  return $count;
}

/**
 * Determine if a user has submitted a grant update within
 *  the given span of time.
 */
function dosomething_roles_user_submitted_grant($uid, $timestamp) {
  // TODO: Verify that this is the grant update.
  $query = new EntityFieldQuery;
  try {
    $count = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('uid', $uid)
      ->propertyCondition('type', 'final_grant_update')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->propertyCondition('created', $timestamp, '>')
      ->count()
      ->execute();
  }
  catch (Exception $e) {
    return NULL;
  }
  return $count;
}

/**
 * Get the anniversary of this user's member level.
 *  When a user increases their role, they get it for one year.
 */
function dosomething_roles_get_anniversary($uid) {
  // TODO: it needs to be an admin-only field.
  // TODO: Make this module depend on profile2
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  $date = field_get_items('profile2', $profile, 'field_user_anniversary');
  if (isset($date[0]['value'])) {
    return $date[0]['value'];
  }
  return REQUEST_TIME;
}

/**
 * Set a new membership annivesary for a user.
 */
function dosomething_roles_set_anniversary($uid, $timestamp) {
  $account = user_load($uid);
  $profile = profile2_load_by_user($account, 'main');
  $profile->field_user_anniversary[LANGUAGE_NONE][0]['value'] = $timestamp;
  field_attach_update('profile2', $profile);
}

