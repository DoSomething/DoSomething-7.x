<?php

/**
 * @file
 * Creates general custom blocks for dosomething.
 */

/**
 * Define constants for the vocabulary ID's used to generate the dropdowns on
 * the make an impact block.
 */
define('ISSUES_VOCABULARY', 5);
define('WHO_VOCABULARY', 3);
define('WHERE_VOCABULARY', 2);
define('TIME_VOCABULARY', 4);


/**
 * Implements hook_block_info().
 */
function dosomething_blocks_block_info() {
  $blocks['dosomething_facebook_activity'] = array(
    'info' => t('DoSomething Facebook Activity'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_twitter_stream'] = array(
    'info' => t('DoSomething Twitter Stream'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_make_impact'] = array(
    'info' => t('DoSomething Make an Impact'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_make_impact_front'] = array(
    'info' => t('DoSomething Make an Impact -- Front Page'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_utility_bar'] = array(
     'info' => t('DoSomething Utility Bar'),
   );
  $blocks['dosomething_social_node_buttons'] = array(
    'info' => t('DoSomething Social Node Buttons'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_blocks_block_view($delta = '') {
  switch ($delta) {
    case 'dosomething_facebook_activity':
      $block['subject'] = t('Recent Activity');
      $block['content'] = dosomething_blocks_facebook_activity_block_content();
      break;

    case 'dosomething_twitter_stream':
      $block['subject'] = t('Twitter Stream');
      $block['content'] = dosomething_blocks_twitter_stream_block_content();
      break;

    case 'dosomething_make_impact':
      $block['subject'] = t('Make an Impact');
      $block['content'] = drupal_get_form('dosomething_blocks_make_an_impact_form');
      break;

    case 'dosomething_make_impact_front':
      $block['subject'] = t('Make an Impact');
      $block['content'] = drupal_get_form('dosomething_blocks_make_an_impact_form_front');
      break;

    case 'dosomething_utility_bar':
      $block['content'] = dosomething_blocks_utility_bar();
      break;

    case 'dosomething_social_node_buttons':
      $block['subject'] = t('Social Buttons');
      $block['content'] = dosomething_blocks_social_node_plugins();
      break;
  }
  return $block;
}

/**
 * Generate the contents of the facebook activity block.
 */
function dosomething_blocks_facebook_activity_block_content() {
  $element = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fb-activity',
      ),
      'data-width' => 183,
      'data-header' => 'false',
      'data-site' => 'dosomething.org',
      'data-colorscheme' => 'dark',
      'data-recommendations' => 'false',
      'border-color' => '#222',
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_blocks') . '/js/show-facebook-twitter.js',
      ),
    ),
  );
  return array('element' => $element);
}

function dosomething_blocks_twitter_stream_block_content() {
  $element = array(
    '#markup' => "<script src=\"http://widgets.twimg.com/j/2/widget.js\"></script>
      <script>
      new TWTR.Widget({
        version: 2,
        type: 'profile',
        rpp: 4,
        interval: 30000,
        width: 'auto',
        height: 300,
        theme: {
          shell: {
            background: '#9c9c9c',
            color: '#ffffff'
          },
          tweets: {
            background: '#000000',
            color: '#ffffff',
            links: '#4aed05'
          }
        },
        features: {
          scrollbar: false,
          loop: false,
          hashtags: true,
          timestamp: true,
          avatars: true,
          behavior: 'all'
        }
      }).render().setUser('dosomething').start();
      </script>",
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_blocks') . '/js/show-facebook-twitter.js',
      )
    ),
  );
  return array('element' => $element);
}

/**
 * Create the make an impact form for the make an impact block.
 */
function dosomething_blocks_make_an_impact_form() {
  $form = array();
  $what_cause = taxonomy_get_tree(ISSUES_VOCABULARY, $parent = 0, $max_depth = 1);
  $who_with = taxonomy_get_tree(WHO_VOCABULARY, $parent = 0, $max_depth = 1);
  $where = taxonomy_get_tree(WHERE_VOCABULARY, $parent = 0, $max_depth = 1);
  $how_long = taxonomy_get_tree(TIME_VOCABULARY, $parent = 0, $max_depth = 1);

  $cause_options = array();
  foreach ($what_cause as $option) {
    $cause_options[$option->tid] = $option->name;
  }

  $who_options = array();
  foreach ($who_with as $option) {
    $who_options[$option->tid] = $option->name;
  }

  $where_options = array();
  foreach ($where as $option) {
    $where_options[$option->tid] = $option->name;
  }

  $time_options = array();
  foreach ($how_long as $option) {
    $time_options[$option->tid] = $option->name;
  }

  $filters = array('where', 'time', 'who', 'issues');
  $defaults = array();
  foreach ($filters as $filter) {
    if (isset($_GET[$filter])) {
      $defaults[$filter] = $_GET[$filter];
    }
    else {
      $defaults[$filter] = '';
    }
  }

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('This form will help you find a cause that\'s right for you.'),
  );
  $form['what_cause'] = array(
    '#type' => 'select',
    '#title' => t('What Cause'),
    '#options' => $cause_options,
    '#empty_option' => t('What Cause?'),
    '#required' => FALSE,
    '#default_value' => $defaults['issues'],
  );
  $form['who_with'] = array(
    '#type' => 'select',
    '#title' => t('Who With'),
    '#options' => $who_options,
    '#empty_option' => t('Who With?'),
    '#required' => FALSE,
    '#default_value' => $defaults['who'],
  );
 $form['where'] = array(
    '#type' => 'select',
    '#title' => t('Where'),
    '#options' => $where_options,
    '#empty_option' => t('Where?'),
    '#required' => FALSE,
    '#default_value' => $defaults['where'],
  );
  $form['how_long'] = array(
    '#type' => 'select',
    '#title' => t('How Long'),
    '#options' => $time_options,
    '#empty_option' => t('How Long?'),
    '#required' => FALSE,
    '#default_value' => $defaults['time'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('dosomething_blocks_impact_form_submit'),
  );

  return $form;
}

/**
 * Submit handler for the make an impact block.
 */
function dosomething_blocks_impact_form_submit($form, &$form_state) {
  //For reference the action finder page filter query looks like:
  //?time=15&where=All&who=6&Issues=All&=Apply
  $what_cause = !empty($form_state['values']['what_cause']) ? $form_state['values']['what_cause'] : 'All';
  $how_long = !empty($form_state['values']['how_long']) ? $form_state['values']['how_long'] : 'All';
  $who_with = !empty($form_state['values']['who_with']) ? $form_state['values']['who_with'] : 'All';
  $where = !empty($form_state['values']['where']) ? $form_state['values']['where'] : 'All';
  $options = array(
    'query' => array(
      'where' => $where,
      'time' => $how_long,
      'who' => $who_with,
      'issues' => $what_cause,
    ),
  );
  drupal_goto('action-finder', $options);
  return;
}

/**
 * Block callback for utility bar that appears at the top of a page.
 */
function dosomething_blocks_utility_bar() {
  // Get login link for fboauth.
  $fb_link = fboauth_action_link_properties('prereg');
  $fb_url = url($fb_link['href'], array('query' => $fb_link['query']));

  $path = drupal_get_path('theme', 'ds');
  $image_path = base_path() . $path . '/css/images';
  $output = array(
    '#attached' => array(
      'css' => array(
        $path . '/css/ds/block-dosomething-blocks-dosomething-utility-bar.css',
      ),
      'js' => array(
        drupal_get_path('module', 'dosomething_blocks') . '/js/lets_talk_dialog.js',
      ),
      'library' => array(array('system', 'ui.dialog')),
    ),
    'here' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'here-to-help',
        ),
      ),
      'here' => array(
        '#markup' => t("We're here to help"),
      ),
    ),
    'icons' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'icons',
        ),
      ),
      'links' => array(
        '#theme' => 'links',
        '#links' => array(
          'chat' => array(
            'title' => '<img src="' . $image_path . '/icn-chat.png" alt="Chat">',
            'html' => TRUE,
            'href' => '',
            'fragment' => ' ',
          ),
          'text' => array(
            'title' => '<img src="' . $image_path . '/icn-text.png" alt="Text">',
            'html' => TRUE,
            'href' => '',
            'fragment' => ' ',
          ),
          'call' => array(
            'title' => '<img src="' . $image_path . '/icn-call.png" alt="Call">',
            'html' => TRUE,
            'href' => '',
            'fragment' => ' ',
          ),
          'email' => array(
            'title' => '<img src="' . $image_path . '/icn-email.png" alt="Email">',
            'html' => TRUE,
            'href' => '',
            'fragment' => ' ',
          ),
        ),
        '#attributes' => array(
          'class' => array(
            'connect-icons',
          ),
        ),
      ),
    ),
    'search' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'search',
        ),
      ),
      'search' => drupal_get_form('search_block_form'),
    ),
    'login' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'login',
        ),
      ),
      'login' => dosomething_blocks_login(),
    ),
    'fbconnect' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'fbconnect',
        ),
      ),
      '#access' => user_is_anonymous(),
      'link' => array(
        '#theme' => 'link',
        '#text' => '<img src="' . $image_path . '/btn-fbconnect.png" alt="Facebook Connect">',
        '#path' => $fb_url,
        '#options' => array(
          'attributes' => array(
            'class' => array(
              'fbconnect',
            ),
          ),
          'html' => TRUE,
        ),
      ),
    ),
    'lightbox' => array(
      '#markup' => theme('dosomething_blocks_lets_talk_dialog'),
    ),
  );
  return $output;
}

/**
 * Creates renderable array of login/logout links.
 */
function dosomething_blocks_login() {
  global $user;
  if (!$user->uid) {
    $output['#markup'] = l('Log in', 'user', array('query' => user_login_destination()));
  }
  else {
    $output['#markup'] = l('Log out', 'user/logout');
  }
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change the text of the search form.
 */
function dosomething_blocks_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Go');
  $form['search_block_form']['#placeholder'] = t('Search');
}

/**
 * Block for social media buttons. Initially for node displays.
 */
function dosomething_blocks_social_node_plugins($url = NULL) {
  if ($url) {
    global $base_url;
    $path_array = explode($base_url . '/', $url);
    $path = $path_array[1];
  }
  else {
    $path = NULL;
  }
  if (module_exists('fb_social')) {
    $presets = fb_social_get_presets();
    $facebook = dosomething_blocks_fb_social_preset_view($presets['FB Like'], $url);
  }
  else {
    $facebook = NULL;
  }
  if (module_exists('google_plusone')) {
    $button_settings = variable_get('google_plusone_button_settings');
    $button_settings['url'] = $url;
    $google = theme('google_plusone_button', $button_settings);
  }
  else {
    $google = NULL;
  }
  if (module_exists('tweetbutton')) {
    drupal_add_js('http://platform.twitter.com/widgets.js');
    drupal_add_css(drupal_get_path('module', 'tweetbutton') . '/tweetbutton.css');
    $variables = dosomething_blocks_tweet_prepare($path);
    $twitter = theme('tweetbutton_display', $variables);
  }
  else {
    $twitter = NULL;
  }
  if (module_exists('print')) {
    if ($url) {
      $print = print_insert_link('print/' . $path);
    }
    else {
      $print = print_insert_link();
    }
  }
  else {
    $print = NULL;
  }
  if (module_exists('print_mail')) {
    if ($url) {
      $email = print_mail_insert_link('printmail/' . $path);
    }
    else {
      $email = print_mail_insert_link();
    }
  }
  else {
    $email = NULL;
  }
  return theme('dosomething_blocks_social_node_plugins', array('facebook' => $facebook, 'google' => $google, 'twitter' => $twitter, 'print' => $print, 'email' => $email));
}

/**
 * Implements hook_theme().
 */
function dosomething_blocks_theme() {
  return array(
    'dosomething_blocks_social_node_plugins' => array(
      'variables' => array('facebook' => NULL, 'google' => NULL, 'twitter' => NULL, 'print' => NULL, 'email' => NULL),
    ),
    'dosomething_blocks_lets_talk_dialog' => array(
      'path' => drupal_get_path('module', 'dosomething_blocks') . '/templates',
      'template' => 'lets_talk_dialog'
    ),
  );
}

/**
 * Return title and url tokens for tweetbutton.
 */
function dosomething_blocks_tweet_prepare($path = NULL) {
  $args = array();
  // Use url settings, or current arguments for node settings.
  if ($path) {
    $args = explode('/', drupal_get_normal_path($path));
  }
  else {
    $args = array(arg(0), arg(1));
  }
  // If we are on a node, use node elements.
  if ($args[0] == 'node' && is_numeric($args[1])) {
    $node = node_load($args[1]);
    $variables['tokens'] = array(
      '!title'        => $node->title,
      '!author_name'  => $node->name,
      '!node_type'    => $node->type,
      '!node_url'     => url('node/' . $node->nid, array('absolute' => TRUE)),
    );
  }
  else {
    $title = drupal_get_title();
    $variables['tokens']['!title'] = $title;
    // If there is no URL twitter will use the current one.
    $variables['tokens']['!node_url'] = '';
  }
  return $variables;
}

/**
 * Preprocess social plugins.
 *
 * Build render array for easier manipulation on the theme layer.
 */
function dosomething_blocks_preprocess_dosomething_blocks_social_node_plugins(&$variables) {
  foreach (array_filter($variables) as $name => $plugin) {
    $variables['element'][$name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          $name . '-plugin',
        ),
      ),
      '#children' => $plugin,
    );
  }
}

/**
 * Theme function for social plugins.
 */
function theme_dosomething_blocks_social_node_plugins($variables) {
  return drupal_render($variables['element']);
}

/**
 * Alternative to fb_social_preset_view(). Used to add non-base url.
 */
function dosomething_blocks_fb_social_preset_view($preset, $url = null) {
  $plugin_type = $preset->plugin_type;

  $attributes = $preset->fb_attrs;
  if ($url) {
    $attributes = array_merge($attributes, array('href' => $url));
  }

  fb_social_fb_plugin_preprocess_options($plugin_type, $attributes);

  $attributes = drupal_attributes($attributes);

  $plugin = fb_social_fb_plugin_load($plugin_type);

  return theme('fb_social_plugin', $variables = array(
    'plugin_type' => $plugin_type,
    'tag_name' => $plugin['html tag name'],
    'attributes' => $attributes
  ));
}

/**
 * Create the impact form for the front page. This essentially extends the regulat
 *  form dosomething_blocks_make_an_impact_form and alters the text.
 */
function dosomething_blocks_make_an_impact_form_front() {
  $content = dosomething_blocks_make_an_impact_form();
  $content['description']['#title'] = t("Ready to take action? Choose from the options below and we'll find a whole bunch of Somethings for you to do.");
  return $content;
}

/**
 * Implements hook_views_api().
 */
function dosomething_blocks_views_api() {
  return array(
    'api' => 3,
  );
}
