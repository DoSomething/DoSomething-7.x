<?php

/**
 * @file
 * Creates general custom blocks for dosomething.
 */

/**
 * Define constants for the vocabulary ID's used to generate the dropdowns on
 * the make an impact block.
 */
define('DS_ISSUES_VOCABULARY_ID', 5);
define('DS_WHO_VOCABULARY_ID', 3);
define('DS_WHERE_VOCABULARY_ID', 2);
define('DS_TIME_VOCABULARY_ID', 4);


/**
 * Implements hook_block_info().
 */
function dosomething_blocks_block_info() {
  $blocks['dosomething_social_skyscraper'] = array(
    'info' => t('DoSomething Social Skysraper'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_make_impact'] = array(
    'info' => t('DoSomething Make an Impact'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['dosomething_make_impact_front'] = array(
    'info' => t('DoSomething Make an Impact -- Front Page'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dosomething_utility_bar'] = array(
     'info' => t('DoSomething Utility Bar'),
     'cache' => DRUPAL_NO_CACHE,
   );
  $blocks['dosomething_social_node_buttons'] = array(
    'info' => t('DoSomething Social Node Buttons'),
  );
  $blocks['dosomething_facepile_general'] = array(
    'info' => t('DoSomething Facepile General'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_blocks_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'dosomething_social_skyscraper':
      $block['subject'] = t('Module 3');
      $block['content'] = dosomething_blocks_social_skyscraper_block_content();
      break;
    case 'dosomething_make_impact':
      $block['subject'] = t('Action Finder');
      $block['content'] = drupal_get_form('dosomething_blocks_make_an_impact_form');
      break;
    case 'dosomething_make_impact_front':
      $block['subject'] = t('Action Finder');
      $block['content'] = drupal_get_form('dosomething_blocks_make_an_impact_form_front');
      break;

    case 'dosomething_utility_bar':
      $block['content'] = dosomething_blocks_utility_bar();
      break;

    case 'dosomething_social_node_buttons':
      $block['subject'] = t('Social Buttons');
      $block['content'] = dosomething_blocks_social_node_plugins($url = NULL, array('fb_social' => t('Facebook'), 'tweetbutton' => t('Tweet'), 'sharethis' => t('Share This')), $options = array('fb_social_preset' => 'FB Like Box'));
      break;
    case 'dosomething_facepile_general':
      $block['content'] = dosomething_blocks_facepile();
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view().
 */
function dosomething_blocks_node_view($node, $view_mode, $langcode) {
  // Show the social action buttons on certain content types.
  if (in_array($node->type, variable_get('dosomething_social_action_node_types', array('project_report', 'action_guide', 'tipsandtools', 'dsuguides')))) {
    $node->content['dosomething_social_action_buttons'] = dosomething_blocks_social_node_plugins(NULL, array('fb_social' => t('Facebook'), 'tweetbutton' => t('Tweet'), 'sharethis' => t('Share This')), array('fb_social_preset' => 'FB Like Box'));
    $node->content['dosomething_social_action_buttons']['#weight'] = -5;
  }
}

/**
 * Return array of "Social Skyscraper" block.
 */
function dosomething_blocks_social_skyscraper_block_content() {
  return array(
    'twitter' => array(
      'title' => array(
        '#prefix' => '<h3 class="twitter">',
        '#suffix' => '</h3>',
        '#markup' => t('Twitter Stream'),
      ),
      'content' => array(
        '#markup' => dosomething_blocks_twitter_stream_block_content(),
        '#prefix' => '<div class="social-activity-content twitter">',
        '#suffix' => '</div>',
      ),
    ),
    'facebook' => array(
      'title' => array(
        '#prefix' => '<h3 class="facebook">',
        '#suffix' => '</h3>',
        '#markup' => t('Recent Activity'),
      ),
      'content' => array(
        'content' => dosomething_blocks_facebook_activity_block_content(),
        '#prefix' => '<div class="social-activity-content facebook">',
        '#suffix' => '</div>',
      ),
    ),
  );
}


/**
 * Generate the contents of the facebook activity block.
 */
function dosomething_blocks_facebook_activity_block_content() {
  $element = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fb-activity',
      ),
      'data-width' => 183,
      'data-header' => 'false',
      'data-site' => 'dosomething.org',
      'data-colorscheme' => 'dark',
      'data-recommendations' => 'false',
      'border-color' => '#222',
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_blocks') . '/js/show-facebook-twitter.js',
      ),
    ),
  );
  return array('element' => $element);
}

function dosomething_blocks_twitter_stream_block_content() {
  drupal_add_js(drupal_get_path('module', 'dosomething_blocks') . '/js/show-facebook-twitter.js');
  drupal_add_css(drupal_get_path('module', 'dosomething_blocks') . '/css/twitter-widget.css');

  return theme('dosomething_blocks_twitter_widget');
}

/**
 * Facebook Pile block disaply.
 */
function dosomething_blocks_facepile() {
  if (module_exists('fb_social')) {
    // In order to send the link from the current page,
    // we need to pass in the url.
    global $base_url;
    $preset = fb_social_get_presets('FB Facepile General');
    if (empty($preset->fb_attrs['href'])) {
      $url = empty($preset->fb_attrs['href']) ? fb_social_url($_GET['q']) : $preset->fb_attrs['href'];
    }
    return fb_social_preset_view($preset, $url);
  }
}

/**
 * Create the make an impact form for the make an impact block.
 */
function dosomething_blocks_make_an_impact_form($form, &$form_state) {
  $what_cause = taxonomy_get_tree(DS_ISSUES_VOCABULARY_ID, $parent = 0, $max_depth = 1);
  $who_with = taxonomy_get_tree(DS_WHO_VOCABULARY_ID, $parent = 0, $max_depth = 1);
  $where = taxonomy_get_tree(DS_WHERE_VOCABULARY_ID, $parent = 0, $max_depth = 1);
  $how_long = taxonomy_get_tree(DS_TIME_VOCABULARY_ID, $parent = 0, $max_depth = 1);

  $cause_options = array();
  foreach ($what_cause as $option) {
    $cause_options[$option->tid] = $option->name;
  }

  $who_options = array();
  foreach ($who_with as $option) {
    $who_options[$option->tid] = $option->name;
  }

  $where_options = array();
  foreach ($where as $option) {
    $where_options[$option->tid] = $option->name;
  }

  $time_options = array();
  foreach ($how_long as $option) {
    $time_options[$option->tid] = $option->name;
  }

  $filters = array('where', 'time', 'who', 'issues');
  $defaults = array();
  foreach ($filters as $filter) {
    if (isset($_GET[$filter])) {
      $defaults[$filter] = $_GET[$filter];
    }
    else {
      $defaults[$filter] = '';
    }
  }

  $form['what_cause'] = array(
    '#type' => 'select',
    '#title' => t('What Cause'),
    '#options' => $cause_options,
    '#empty_option' => t('What Cause?'),
    '#required' => FALSE,
    '#default_value' => $defaults['issues'],
  );
  $form['who_with'] = array(
    '#type' => 'select',
    '#title' => t('Who With'),
    '#options' => $who_options,
    '#empty_option' => t('Who With?'),
    '#required' => FALSE,
    '#default_value' => $defaults['who'],
  );
  $form['where'] = array(
    '#type' => 'select',
    '#title' => t('Where'),
    '#options' => $where_options,
    '#empty_option' => t('Where?'),
    '#required' => FALSE,
    '#default_value' => $defaults['where'],
  );
  $form['how_long'] = array(
    '#type' => 'select',
    '#title' => t('How Long'),
    '#options' => $time_options,
    '#empty_option' => t('How Long?'),
    '#required' => FALSE,
    '#default_value' => $defaults['time'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#submit' => array('dosomething_blocks_impact_form_submit'),
    '#prefix' => '<div class="submit-wrapper dude">',
    '#suffix' => '</div>',
  );

  $form_state['#cache'] = FALSE;

  return $form;
}

/**
 * Submit handler for the make an impact block.
 */
function dosomething_blocks_impact_form_submit($form, &$form_state) {
  //For reference the action finder page filter query looks like:
  //?time=15&where=All&who=6&Issues=All&=Apply
  $what_cause = !empty($form_state['values']['what_cause']) ? $form_state['values']['what_cause'] : 'All';
  $how_long = !empty($form_state['values']['how_long']) ? $form_state['values']['how_long'] : 'All';
  $who_with = !empty($form_state['values']['who_with']) ? $form_state['values']['who_with'] : 'All';
  $where = !empty($form_state['values']['where']) ? $form_state['values']['where'] : 'All';
  $options = array(
    'query' => array(
      'where' => $where,
      'time' => $how_long,
      'who' => $who_with,
      'issues' => $what_cause,
    ),
  );
  $form_state['redirect'] = array(
    'action-finder',
    $options,
  );
}

/**
 * Block callback for utility bar that appears at the top of a page.
 */
function dosomething_blocks_utility_bar() {
  // Get login link for fboauth.
  $fb_link = fboauth_action_link_properties('prereg');
  $fb_url = url($fb_link['href'], array('query' => $fb_link['query']));

  $path = drupal_get_path('theme', 'ds');
  $image_path = base_path() . $path . '/css/images';
  $page = search_api_page_load(1);

  $output = array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'dosomething_blocks') . '/js/lets_talk_dialog.js',
      ),
      'library' => array(array('system', 'ui.dialog')),
    ),
    'help' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => array(
          'help-center',
        ),
        'class' => array(
          'utility-items',
        ),
      ),
      'help' => dosomething_blocks_help(),
    ),
    'search' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'search',
        )
      ),
      'search' => drupal_get_form('search_api_page_search_form_' . $page->machine_name, $page, NULL, TRUE),
    ),
    'login' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'utility-items',
          'login',
        ),
      ),
      'login' => dosomething_blocks_login(),
    ),
    // 'fbconnect' => array(
    //   '#type' => 'container',
    //   '#attributes' => array(
    //     'class' => array(
    //       'utility-items',
    //       'fbconnect',
    //     ),
    //   ),
    //   '#access' => user_is_anonymous(),
    //   'link' => array(
    //     '#theme' => 'link',
    //     '#text' => '<img src="' . $image_path . '/btn-fbconnect.png" alt="Facebook Connect">',
    //     '#path' => $fb_url,
    //     '#options' => array(
    //       'attributes' => array(
    //         'class' => array(
    //           'fbconnect',
    //         ),
    //       ),
    //       'html' => TRUE,
    //     ),
    //   ),
    // ),
    'lightbox' => array(
      '#theme' => 'dosomething_blocks_lets_talk_dialog',
    ),
  );
  return $output;
}

/**
 * Creates renderable array of Help Center link.
 */
function dosomething_blocks_help() {
  global $link;
  if (!$link) {
    $output['#markup'] = l('Help Center', '');
  }
  return $output;
}

/**
 * Creates renderable array of login/logout links.
 */
function dosomething_blocks_login() {
  global $user;
  if (!$user->uid) {
    $output['#markup'] = l('Sign in', 'user', array('query' => user_login_destination(), 'attributes' =>  array('class' => array('sign-in-popup'))));
  }
  else {
    $output['#markup'] = l('Log out', 'user/logout');
  }
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change the text of the search form.
 */
function dosomething_blocks_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Go');
  // $form['search_block_form']['#placeholder'] = t('Search');
}

/**
 * Block for social media buttons. Initially for node displays.
 * @param $url string
 *  Url that social plugins refer to. If blank will default to page on display.
 * @param $modules array
 *  Modules to include. If empty all will be included. Choices are:
 *  - fb_social, google_plusone, tweetbutton, mail, print_mail
 * @param $options array
 *  Options specific to modules. REQUIRED for fb_social.
 *
 * @see dosomething_blocks_social_plugins_modules().
 */
function dosomething_blocks_social_node_plugins($url = NULL, $modules = array(), $options = array()) {
  global $base_url;
  $element = array(
    '#theme' => 'dosomething_blocks_social_node_plugins',
  );

  if ($url) {
    $path_array = explode($base_url . '/', $url);
    $path = $path_array[1];
  }
  else {
    $path = NULL;
  }

  // Get the current path.
  $current_path = $_GET['q'];
  if ($alias = drupal_lookup_path('alias', $_GET['q'])) {
    $current_path = $alias;
  }

  // If modules is empty, add all of them.
  if (!$modules) {
    $modules = dosomething_blocks_social_plugins_modules();
  }

  if (module_exists('fb_social') && isset($modules['fb_social']) && $modules['fb_social']) {
    $presets = fb_social_get_presets();
    if (isset($options['fb_social_preset'])) {
      $element['#facebook'] = array('#weight' => 0) + dosomething_blocks_fb_social_preset_view($presets[$options['fb_social_preset']], $url);
    }
  }
  if (module_exists('google_plusone') && isset($modules['google_plusone']) && $modules['google_plusone']) {
    $button_settings = variable_get('google_plusone_button_settings', array());
    $button_settings['url'] = $url;
    $element['#google'] = array(
      '#weight' => 1,
      '#theme' => 'google_plusone_button',
    );
    foreach ($button_settings as $key => $value) {
      $element['#google']["#$key"] = $value;
    }
  }
  if (module_exists('tweetbutton') && isset($modules['tweetbutton']) && $modules['tweetbutton']) {
    $element['#twitter'] = array(
      '#weight' => 2,
      '#theme' => 'tweetbutton_display',
      '#tokens' => dosomething_blocks_tweet_prepare($path),
      '#attached' => array(
        'js' => array(
          array('data' => 'http://platform.twitter.com/widgets.js', 'external'),
        ),
        'css' => array(
          drupal_get_path('module', 'tweetbutton') . '/tweetbutton.css'
        ),
      ),
    );
  }
  if (module_exists('sharethis') && isset($modules['sharethis']) && $modules['sharethis']) {
    // Force the sharethis module to only use ShareThis.
    $data_options = get_options_array();
    $data_options['services'] = '"ShareThis:sharethis"';

    $element['#sharethis'] = array(
      '#markup' => get_button_HTML($data_options, $base_url . '/' . $current_path, drupal_get_title()),
      '#weight' => 3,
    );
  }
  if (module_exists('print') && isset($modules['print']) && $modules['print']) {
    $element['#print'] = array(
      '#weight' => 5,
      '#markup' => $url ? print_insert_link('print/' . $path) : print_insert_link(),
    );
  }
  if (module_exists('print_mail') && isset($modules['print_mail']) && $modules['print_mail']) {
    $element['#email'] = array(
      '#weight' => 4,
      '#markup' => $url ? print_mail_insert_link('printmail/' . $path) : print_mail_insert_link(),
    );
  }
  return $element;
}

/**
 * Return an array of optinos for the social plugins.
 * @see dosomething_blocks_social_node_plugins(). 
 */
function dosomething_blocks_social_plugins_modules() {
  return array(
    'fb_social' => t('Facebook Social'),
    'google_plusone' => t('Google PlusOne'), 
    'tweetbutton' => t('Twitter'), 
    'print' => t('Print'), 
    'print_mail' => t('Email'),
    'sharethis' => t('Sharethis'),
  );
}

/**
 * Implements hook_theme().
 */
function dosomething_blocks_theme() {
  return array(
    'dosomething_blocks_social_node_plugins' => array(
      'variables' => array('facebook' => NULL, 'google' => NULL, 'twitter' => NULL, 'sharethis' => NULL, 'print' => NULL, 'email' => NULL),
    ),
    'dosomething_blocks_lets_talk_dialog' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'dosomething_blocks') . '/templates',
      'template' => 'lets_talk_dialog'
    ),
    'dosomething_blocks_twitter_widget' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'dosomething_blocks') . '/templates',
      'template' => 'ds_twitter_widget',
    ),
  );
}

/**
 * Return title and url tokens for tweetbutton.
 */
function dosomething_blocks_tweet_prepare($path = NULL) {
  $args = array();
  // Use url settings, or current arguments for node settings.
  if ($path) {
    $args = explode('/', drupal_get_normal_path($path));
  }
  else {
    $args = array(arg(0), arg(1));
  }
  // If we are on a node, use node elements.
  if ($args[0] == 'node' && is_numeric($args[1])) {
    $node = node_load($args[1]);
    $tokens = array(
      '!title'        => $node->title,
      '!author_name'  => $node->name,
      '!node_type'    => $node->type,
      '!node_url'     => url('node/' . $node->nid, array('absolute' => TRUE)),
    );
  }
  else {
    $title = drupal_get_title();
    $tokens['!title'] = $title;
    // If there is no URL twitter will use the current one.
    $tokens['!node_url'] = '';
  }
  return $tokens;
}

/**
 * Preprocess social plugins.
 *
 * Build render array for easier manipulation on the theme layer.
 */
function template_preprocess_dosomething_blocks_social_node_plugins(&$variables) {
  uasort($variables, 'element_sort');
  $variables['element']['wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'social-plugin-wrapper',
      ),
    ),
    '#weight' => 1,
  );
  foreach (array_filter($variables) as $name => $plugin) {
    $element = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          $name . '-plugin',
        ),
      ),
      'plugin' => $plugin,
    );
    if ($name == 'facebook') {
      $variables['element'][$name] = $element;
    }
    else {
      $variables['element']['wrapper'][$name] = $element;
    }
  }
}

/**
 * Theme function for social plugins.
 */
function theme_dosomething_blocks_social_node_plugins($variables) {
  return drupal_render($variables['element']);
}

/**
 * Alternative to fb_social_preset_view(). Used to add non-base url.
 */
function dosomething_blocks_fb_social_preset_view($preset, $url = null) {
  $plugin_type = $preset->plugin_type;

  $attributes = $preset->fb_attrs;
  if ($url) {
    $attributes = array_merge($attributes, array('href' => $url));
  }

  fb_social_fb_plugin_preprocess_options($plugin_type, $attributes);

  $plugin = fb_social_fb_plugin_load($plugin_type);

  return array(
    '#theme' => 'fb_social_plugin',
    '#plugin_type' => $plugin_type,
    '#tag_name' => $plugin['html tag name'],
    '#attributes' => drupal_attributes($attributes),
  );
}

/**
 * Create the impact form for the front page. This essentially extends the
 * regular form dosomething_blocks_make_an_impact_form and alters the text.
 */
function dosomething_blocks_make_an_impact_form_front() {
  return call_user_func_array('dosomething_blocks_make_an_impact_form', func_get_args());
}

/**
 * Implements hook_views_api().
 */
function dosomething_blocks_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_preprocess_dosomething_blocks_twitter_widget).
 */
function dosomething_blocks_preprocess_dosomething_blocks_twitter_widget(&$variables) {
  $cache = cache_get('ds_twitter_data');
  if ($cache === FALSE || $cache->expire < REQUEST_TIME) {
    $twitter = new Twitter();
    $twitter_data = $twitter->call('statuses/user_timeline/dosomething', array('count' => 6));
    cache_set('ds_twitter_data', $twitter_data, 'cache', REQUEST_TIME + 86400);
  }
  else {
    $twitter_data = $cache->data;
  }

  foreach ($twitter_data as $key => $data) {
    $twitter_data[$key]['date'] = date('F j g:ia', strtotime($data['created_at']));
  }

  $variables['tweets'] = $twitter_data;
}
