<?php
/**
 * A collection of functionality related to website performance.
 *
 * In an effort to reduce lantancy (the time it takes a connection to start and finish)
 * the web sides load time can be improved by reducding the number of connections necessary
 * to assemble a page.
 *
 * These tools are an attempt to address this issue.
 * 
 **/

/**
 * 'group': A number identifying the group in which to add the stylesheet. Available constants are:
 * 
 * CSS_SYSTEM (-100): Any system-layer CSS.
 * CSS_DEFAULT (0 - default): (default) Any module-layer CSS.
 * CSS_THEME (100): Any theme-layer CSS.
 * 
 * The group number serves as a weight: the markup for loading a stylesheet within a lower weight
 * group is output to the page before the markup for loading a stylesheet within a higher weight
 * group, so CSS within higher weight groups take precendence over CSS within lower weight groups.
 * 
 * Constant used to group CSS for aggregation, the higher the value the sooner it will be loaded
 */
define('CSS_WEBFONTS', 200);


/**
 * Implements hook_permission().
 */
function dosomething_performance_toolbox_permission() {
  return array(
    'administer performance toolbox' => array(
      'title' => t('Performance Toolbox'),
      'description' => t('General access to performance site tools.'),
    ),   
  );
}


/**
 * Implements hook_menu().
 */
function dosomething_performance_toolbox_menu() {
    
  $items = array();
    
  $items['admin/dosomething_performance_toolbox'] = array(
    'title' => 'Performance Toolbox',
    'description' => 'A collection of tools focused on website performance.',
    'access arguments' => array('administer performance toolbox'),
    'page callback' => '_dosomething_performance_toolbox_welcome',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  
  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['admin/dosomething_performance_toolbox/welcome'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Welcome',
    'access arguments' => array('administer performance toolbox'),
  );

  $items["admin/dosomething_performance_toolbox/webfonts"] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Webfonts'),
    'page callback' => '_dosomething_performance_toolbox_webfonts',
    'access arguments' => array('administer performance toolbox'),
    'weight' => 10,
  );
  
  $items["admin/dosomething_performance_toolbox/webfonts/%/%/%"] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('CRUD'),
    'page callback' => '_dosomething_performance_toolbox_webfonts_crud',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('administer performance toolbox'),
    'weight' => 0,
  );
  
  $items["admin/dosomething_performance_toolbox/aggregation"] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Aggregation'),
    'page callback' => '_dosomething_performance_toolbox_aggregation',
    'access arguments' => array('administer performance toolbox'),
    'weight' => 20,
  );

  return $items;
  
}


/**
 * Implements hook_theme().
 */
function dosomething_performance_toolbox_theme($existing, $type, $theme, $path) {
  return array(
    'dosomething_performance_toolbox_welcome' => array(
      'variables' => array('webfont_stats' => array(), 'aggregation_stats' => array()),
      'template' => 'templates/dosomething-performance-toolbox-welcome',
    ),
    'dosomething_performance_toolbox_webfonts' => array(
      'variables' => array('webfont_stats' => array(), 'themes' => array()),
      'template' => 'templates/dosomething-performance-toolbox-webfonts',
    ),
    'dosomething_performance_toolbox_aggregation' => array(
      'template' => 'templates/dosomething-performance-toolbox-aggregation',
    ),
  ); 
}


/**
 * Internal "Welcome" page.
 */
function _dosomething_performance_toolbox_welcome() {
    
  $webfont_stats = array(
    '#theme' => 'table',
    '#rows' => $webfont_stats_rows,
    '#header' => $webfont_stats_header,
  );
  
  $aggregation_stats = array(
    '#theme' => 'table',
    '#rows' => $aggregation_stats_rows,
    '#header' => $aggregation_stats_header,
  );
  
  return theme('dosomething_performance_toolbox_welcome',
                array(
                  'webfont_stats' => $webfont_stats,
                  'aggregation_stats' => $aggregation_stats,
                )
              );

}

/**
 * Internal page to list webfonts.
 */
function _dosomething_performance_toolbox_webfonts() {
    
  // List entries by path showing assigned font files, grouped by theme
  
  // Lookup listing of current webfont entries
  // Links in list to add/edit/delete
  
  // Example "theme ID "-" font file bit.css"
  // Font file bit: Any combination for font files
  // Clear entries cache
  
  // $refresh = FALSE
  $themes = list_themes(TRUE);

  return theme('dosomething_performance_toolbox_webfonts',
           array(
             'webfont_stats' => $webfont_stats,
             'themes' => $themes,
           )
         );

}

/**
 * Internal funciton to direct crud functions.
 */
function _dosomething_performance_toolbox_webfonts_crud($webfont_entry_id, $target_theme_id, $crud) {
    
  switch($crud) {
    
      case 'create':
        
        // ** Load form
        // - Target theme (dropdown)
        
        // - Webfont Name (font-family)
        // - Server
        // - src
        // - IE
        // - font-style
        // - font-weight
        
        /*
         * @font-face {
         *   font-family: "din-web";
         *   src: url('DINWeb-Cond.eot');
         *   src: url('DINWeb-Cond.eot?iefix') format('eot'), url('DINWeb-Cond.woff') format('woff');
         *   font-style: normal;
         *   font-weight: false;
         * }
         */
        // submit goes to form submit funciton, redirects back to "read" listing
        
        break;
    
      case 'read':
        
        // Generate listing / table
        
        break;
    
      case 'update':
        
        // Load form with populated fields
        
        break;
    
      case 'delete':
        
        // Delete entry, return to "read".
        
        break;
  }

    
    
    
  // Add / edit / delete of path entry
  // Path textfield and checkbox list of webfonts by selected theme

  // Example "theme ID "-" font file bit.css"
  // Font file bit: Any combination for font files

  return('_dosomething_performance_toolbox_webfonts_crud');

}

/**
 * Internal page to add webfonts.
 */
function _dosomething_performance_toolbox_webfonts_add_font() {
    
  // Listing of font files, add new font entries for target theme
  // Add: Select theme, Font file Title, file name, location (server), path
  // Assigns bit value

  return(' _dosomething_performance_toolbox_webfonts_add_font');

}

/**
 * Internal page to list aggregation details.
 */
function _dosomething_performance_toolbox_aggregation() {
    
  // Generates listing of css and js file load order (grouping)
  // Helps to optimize / explain grouping in support of aggregation
  // Manage groups for future aggregation combination based on user page flow  

  return theme('dosomething_performance_toolbox_aggregation',
           array(
             'aggregation_stats' => $aggregation_stats,
           )
         );

}
 
 /**
 * Construct a <link> tag for the page head that calls a css file that contains @webfont
 * definitions based on the specific page contents. A default list of webfonts is loaded
 * but in some cases custom css files are defined for specific page or path resulting in a
 * shorter list. The less number of files / calls needed to define a page results in less
 * latency and faster load time.
 *
 * The effectivitness of adjusting these lists is dependent on the user not already having the webfont
 * on their local machine. They may have visted our site before or visited a different site that also
 * uses the same webfonts.
 *
 * The goal is to speed page load times for users visting the site and the specific page for
 * the first time.
 */
function dosomething_performance_toolbox_webfonts() {
    
    $https = $_SERVER['HTTPS'];
  
      // Select Rack Space source based on secure connection
    if (isset($https) && $https == 'on') {
      $rackspace_url = 'https://c308566.ssl.cf1.rackcdn.com';
    } else {
      $rackspace_url = 'http://c308566.r66.cf1.rackcdn.com';
    }
    
    // Set options for  drupal_add_css call
    $options = array();

    // Add font file groupings to specific CSS CSS_WEBFONTS group
    $options['group'] = CSS_WEBFONTS;
    
    // All webfont files are coming from the CDN thus making them external files
    // Externally hosted stylesheets are never aggregated or compressed.
    $options['type'] = 'external';
    
    // http://api.drupal.org/api/drupal/includes!bootstrap.inc/function/request_uri/7
    $request_uri = request_uri();

    if ($request_uri == '/') { // Site front page
    
      // 1+16+32+2 = 51
      $data = $rackspace_url .'/'.'din-51.css';
      
    } elseif (strpos( $request_uri, '/teensforjeans') != FALSE) { // /teensforjeans
        
      // 1+12_6+32+256+64 = 371
      $data = $rackspace_url .'/'.'din-371.css';
      
    } elseif (strpos( $request_uri, '/calloffame') != FALSE) { // /calloffame
        
      // 1+64+32+2
      $data = $rackspace_url .'/'.'din-99.css';
      
    } elseif (strpos( $request_uri, '/activist') != FALSE) { // /activist
        
      // 256+32+1+16+64
      $data = $rackspace_url .'/'.'din-369.css';
      
    } elseif (strpos( $request_uri, '/cleanup') != FALSE) { // /cleanup
        
      // 1+32+64
      $data = $rackspace_url .'/'.'din-97.css'; 
      
    } elseif (strpos( $request_uri, '/tipsandtools') != FALSE) { // /tipsandtools
        
      // 1+32+2
      $data = $rackspace_url .'/'.'din-35.css';
      
    } elseif (strpos( $request_uri, '/social-scholarship/') != FALSE) { // /scholarships

      // 1+2+64+256+32
      $data = $rackspace_url .'/'.'din-355.css';

    } else {
        
      // Define path to DEFAULT font CSS file for general application to site 1+2+4+8+16+32+64+128a+256 
      $data = $rackspace_url .'/'.'din-511.css';

    }
    
    // Add stylesheet call to CSS stack, note change in drupal_add_css values based on addition of specific CSS
    // hook_css_alter uses these values to custom aggregate CSS based on groups
    // http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_add_css/7
    drupal_add_css($data, $options);
  
  }
  
/**
 * Implements hook_css_alter().
 *
 * Drupal 7: Taking control of CSS and JS aggregation
 * http://www.metaltoad.com/blog/drupal-7-taking-control-css-and-js-aggregation
 *
 * Added to control how css files are grouped together when agrigration is enabled
 * Note condition added to break the grouping into two sets as grouping everything
 * into a single file was result in a file that contained over 
 * @param &$css
 *   Users email address.
 */

/*
function dosomething_performance_toolbox_css_alter(&$css) {
    
    // From common.inc, ln: 3121
    // If the item can be grouped with other items, set $group_keys to an array
    // of information that must be the same for all items in its group. If the
    // item can't be grouped with other items, set $group_keys to FALSE. We
    // put items into a group that can be aggregated together: whether they will
    // be aggregated is up to the _drupal_css_aggregate() function or an
    // override of that function specified in hook_css_alter(), but regardless
    // of the details of that function, a group represents items that can be
    // aggregated. Since a group may be rendered with a single HTML tag, all
    // items in the group must share the same information that would need to be
    // part of that HTML tag.
    
    // Set all aggregated css to the CSS_DEFAULT group.
    // This prevents individual css files per group
    // Possible values CSS_SYSTEM (-100), CSS_DEFAULT (0), and CSS_THEME (100)
  
    uasort($css, 'drupal_sort_css_js');
    $i = 0;
    foreach ($css as $name => $style) {
      $css[$name]['weight'] = $i++;
      $css[$name]['group'] = CSS_DEFAULT;
      $css[$name]['every_page'] = FALSE;
    }
  
}

*/

/**
 * Implements hook_js_alter().
 *
 * Added to control how css files are grouped together when agrigration is enabled
 * Note condition added to break the grouping into two sets as grouping everything
 * into a single file was result in a file that contained over 
 * @param &$javascript
 *   The campaign name that the email is to be subscribed to.
 */

function dosomething_performance_toolbox_js_alter(&$javascript) {
    
  uasort($javascript, 'drupal_sort_css_js');
  $i = 0;
  foreach ($javascript as $name => $script) {
    $javascript[$name]['weight'] = $i++;
    $javascript[$name]['group'] = JS_DEFAULT;
    $javascript[$name]['every_page'] = FALSE;
  }
}