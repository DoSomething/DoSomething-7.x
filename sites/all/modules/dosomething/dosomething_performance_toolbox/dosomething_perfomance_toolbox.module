<?php
/**
 * A collection of functionality related to website performance.
 **/
 
 /**
 * Construct a <link> tag for the page head that calls a css file that contains @webfont
 * definitions based on the specific page contents. A default list of webfonts is loaded
 * but in some cases custom css files are defined for specific page or path resulting in a
 * shorter list. The less number of files / calls needed to define a page results in less
 * latency and faster load time.
 *
 * The effectivitness of adjusting these lists is dependent on the user not already having the webfont
 * on their local machine. They may have visted our site before or visited a different site that also
 * uses the same webfonts.
 *
 * The goal is to speed page load times for users visting the site and the specific page for
 * the first time.
 *
 * The supported webfonts and the bit values are:
 *
 * Bit value: 1
 * @font-face
 *   font-family: "din-web";
 *   src: url('DINWeb-CondMedium.eot');
 *   src: url('DINWeb-CondMedium.eot?iefix') format('eot'), url('DINWeb-CondMedium.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 500;
 *   
 * Bit value: 2
 * @font-face
 *   font-family: "din-web"; 
 *   src: url('DINWeb-Cond.eot');
 *   src: url('DINWeb-Cond.eot?iefix') format('eot'), url('DINWeb-Cond.woff') format('woff');
 *   font-style: normal;
 *   font-weight: false;
 *
 * Bit value: 4
 * @font-face
 *   font-family: "din-web";
 *   src: url('DINWeb-CondLight.eot');
 *   src: url('DINWeb-CondLight.eot?iefix') format('eot'), url('DINWeb-CondLight.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 200;
 *
 * Bit value: 8
 * @font-face
 *   font-family: "din-web";
 *   src: url('DINWeb-CondBlack.eot');
 *   src: url('DINWeb-CondBlack.eot?iefix') format('eot'), url('DINWeb-CondBlack.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 700;
 *
 * Bit value: 16
 * @font-face
 *   font-family: "din-web";
 *   src: url('DINWeb-CondBold.eot');
 *   src: url('DINWeb-CondBold.eot?iefix') format('eot'), url('DINWeb-CondBold.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 600;
 *
 * Bit value: 32
 * @font-face
 *   font-family: "din-web-reg";
 *   src: url('DINWeb.eot');
 *   src: url('DINWeb.eot?iefix') format('eot'), url('DINWeb.woff') format('woff');
 *   font-style: normal;
 *   font-weight: false;
 *   
 * Bit value: 64
 * @font-face {
 *   font-family: "din-web-reg";
 *   src: url('DINWeb-Medium.eot');
 *   src: url('DINWeb-Medium.eot?iefix') format('eot'), url('DINWeb-Medium.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 500;
 *
 * Bit value: 128
 * @font-face
 *   font-family: "din-web-reg";
 *   src: url('DINWeb-Light.eot');
 *   src: url('DINWeb-Light.eot?iefix') format('eot'), url('DINWeb-Light.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 200;
 *
 * Bit value: 256
 * @font-face {
 *   font-family: "din-web-reg";
 *   src: url('DINWeb-Bold.eot');
 *   src: url('DINWeb-Bold.eot?iefix') format('eot'), url('DINWeb-Bold.woff') format('woff');
 *   font-style: normal;
 *   font-weight: 600;
 */
function dosomething_performance_toolbox_webfonts() {
    
    // Constant used to group CSS for aggregation, the higher the value the sooner it will be loaded
    define('CSS_WEBFONTS', 200);
    
    // Other system define CSS constants
    // CSS_SYSTEM: Any system-layer CSS: -100
    // CSS_DEFAULT: (default) Any module-layer CSS: 0
    // CSS_THEME: Any theme-layer CSS: 100
  
      // Select Rack Space source based on if secure connection
    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {
      $rackspace_url = 'https://c308566.ssl.cf1.rackcdn.com';
    } else {
      $rackspace_url = 'http://c308566.r66.cf1.rackcdn.com';
    }
    
    // Add DINWeb-Medium to all site pages as it's used in the site navigation (used everywhere).
    $common_data['file'] = $rackspace_url .'/'.'din-1.css';
    
    // Add to every page
    $common_options['every_page'] = TRUE;

    // Add to specific CSS group
    $common_options['group'] = CSS_WEBFONTS;
    $common_options['type'] = 'external';
    
    // Make this the first item in group
    $common_options['weight'] = 1;
    
    // Add to css stack
    drupal_add_css($common_data, $common_options);
  
    // Select CSS based on requested URL
    $bla2 = $_SERVER['REQUEST_URI'];
    
    // Add font file groupings to specific CSS CSS_WEBFONTS group
    $options['group'] = CSS_WEBFONTS;
    
    // All webfont files are coming from the CDN thus making them external files
    $options['type'] = 'external';
    
    if($is_front) { // Site front page: 
    
      // 1+
      $data['file'] = $rackspace_url .'/'.'din-181.css';
      
    } elseif ($_SERVER['REQUEST_URI'] == '/teensforjeans') { // /teensforjeans
        
      $data['file'] = $rackspace_url .'/'.'din-304.css';
      
    } elseif ($_SERVER['REQUEST_URI'] == '/calloffame/honey-badger') { // 4+1+32
      $data['file'] = $rackspace_url .'/'.'din-37.css';
    } elseif ($_SERVER['REQUEST_URI'] == '/tipsandtools') { // 32+4+1
      $data['file'] = $rackspace_url .'/'.'din-37.css';
      
    } elseif (strpos( $_SERVER['REQUEST_URI'], '/social-scholarship/') != FALSE) { // 4+32

      // Define path to CSS file
      $data['file'] = $rackspace_url .'/'.'din-36.css';

      // Add to specific CSS group
      $options['group'] = CSS_WEBFONTS;
      
      // Only load on specific pages, do not aggregate into other css files within the same group
      // TRUE for stylesheets added via module and theme .info files
      $options['every_page'] = FALSE;

    } else {
        
      // Define path to CSS file
      $data['file'] = $rackspace_url .'/'.'din-383.css';
      
      
    }
    
    // Add stylesheet call to stack, note change in drupal_add_css values based on target css to add 
    // http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_add_css/7
    drupal_add_css($data, $options);
  
  }
  
/**
 * Implements hook_css_alter().
 *
 * Added to control how css files are grouped together when agrigration is enabled
 * Note condition added to break the grouping into two sets as grouping everything
 * into a single file was result in a file that contained over 
 * @param $email
 *   Users email address.
 * @param $groupName
 *   The campaign name that the email is to be subscribed to.
 * @return
 *   Boolean indicating success.
 */
function dosomething_performance_toolbox_css_alter(&$css) {
  // Set all aggregated css to the CSS_DEFAULT group.
  // This prevents individual css files per group
  // Possible values CSS_SYSTEM (-100), CSS_DEFAULT (0), and CSS_THEME (100)
  
  uasort($css, 'drupal_sort_css_js');
  $i = 0;
  foreach ($css as $name => $style) {
    $css[$name]['weight'] = $i++;
    
    // Break grouping into two sets - CSS_SYSTEM, (-100) and the rest
    if ($style['group'] == -100) {
      $css[$name]['group'] = CSS_SYSTEM;
    }
    else {
      $css[$name]['group'] = CSS_DEFAULT;
    }
    
    $css[$name]['every_page'] = FALSE;
  }
}

/**
 * Implements hook_js_alter().
 */
function dosomething_performance_toolbox_js_alter(&$javascript) {
  // Set all aggregated javascript to the JS_DEFAULT group.
  // Possible values: JS_LIBRARY, JS_DEFAULT, and JS_THEME
  // This prevents individual js files per group
  uasort($javascript, 'drupal_sort_css_js');
  $i = 0;
  foreach ($javascript as $name => $script) {
    $javascript[$name]['weight'] = $i++;
    $javascript[$name]['group'] = JS_DEFAULT;
    $javascript[$name]['every_page'] = FALSE;
  }
}