<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function dosomething_school_menu() {
  $items = array();
  $items['ds_school/autocomplete'] = array(
    'title' => 'DoSomething School Autocomplete',
    'page callback' => 'dosomething_school_autocomplete_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function dosomething_school_entity_info() {
  $return = array(
    'ds_school' => array(
      'label' => t('School'),
      'plural label' => t('Schools'),
      'description' => t('An school entity, most are from the Great Schools dataset but some are user added.'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'ds_school',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'sid',
        'label' => 'name',
      ),
      // 'label callback' => 'entity_class_label',
      // 'uri callback' => 'entity_class_uri',
    ),
  );

  return $return;
}


/**
 * Implements hook_field_widget_info().
 */
function dosomething_school_field_widget_info() {
  $widgets['dosomething_school_autocomplete'] = array(
    'label' => t('School autocomplete'),
    'description' => t('An autocomplete for schools, filters first by state.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      // We don't have a default here, because it's not the same between
      // the two widgets, and the Field API doesn't update default
      // settings when the widget changes.
      'path' => '',
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function dosomething_school_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'] + field_info_widget_settings($widget['type']);

  $form = array();

  $form['match_operator'] = array(
    '#type' => 'select',
    '#title' => t('Autocomplete matching'),
    '#default_value' => $settings['match_operator'],
    '#options' => array(
      'STARTS_WITH' => t('Starts with'),
      'CONTAINS' => t('Contains'),
    ),
    '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
  );
  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#element_validate' => array('_element_validate_integer_positive'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function dosomething_school_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default_state = '--';
  $default_school = '';
  if (empty($items[0]['target_id'])) {
    // Try to use the profile's state.
    $profile = profile2_load_by_user($GLOBALS['user'], 'main');
    if (!empty($profile->field_user_address['und'][0]['administrative_area'])) {
      $default_state = $profile->field_user_address['und'][0]['administrative_area'];
    }
  }
  elseif ($entity = entity_load_single($field['settings']['target_type'], $items[0]['target_id'])) {
    $default_state = $entity->state;
    $default_school = dosomething_school_make_label($entity);
  }

  // TODO: we might need to expand this out to Canada.
  $states = array(
    '--' => t('- Select one -'),
    'AL' => t('Alabama'),
    'AK' => t('Alaska'),
    'AS' => t('American Samoa'),
    'AZ' => t('Arizona'),
    'AR' => t('Arkansas'),
    'CA' => t('California'),
    'CO' => t('Colorado'),
    'CT' => t('Connecticut'),
    'DE' => t('Delaware'),
    'DC' => t('District of Columbia'),
    'FL' => t('Florida'),
    'GA' => t('Georgia'),
    'GU' => t('Guam'),
    'HI' => t('Hawaii'),
    'ID' => t('Idaho'),
    'IL' => t('Illinois'),
    'IN' => t('Indiana'),
    'IA' => t('Iowa'),
    'KS' => t('Kansas'),
    'KY' => t('Kentucky'),
    'LA' => t('Louisiana'),
    'ME' => t('Maine'),
    'MH' => t('Marshall Islands'),
    'MD' => t('Maryland'),
    'MA' => t('Massachusetts'),
    'MI' => t('Michigan'),
    'MN' => t('Minnesota'),
    'MS' => t('Mississippi'),
    'MO' => t('Missouri'),
    'MT' => t('Montana'),
    'NE' => t('Nebraska'),
    'NV' => t('Nevada'),
    'NH' => t('New Hampshire'),
    'NJ' => t('New Jersey'),
    'NM' => t('New Mexico'),
    'NY' => t('New York'),
    'NC' => t('North Carolina'),
    'ND' => t('North Dakota'),
    'MP' => t('Northern Marianas Islands'),
    'OH' => t('Ohio'),
    'OK' => t('Oklahoma'),
    'OR' => t('Oregon'),
    'PW' => t('Palau'),
    'PA' => t('Pennsylvania'),
    'PR' => t('Puerto Rico'),
    'RI' => t('Rhode Island'),
    'SC' => t('South Carolina'),
    'SD' => t('South Dakota'),
    'TN' => t('Tennessee'),
    'TX' => t('Texas'),
    'UT' => t('Utah'),
    'VT' => t('Vermont'),
    'VI' => t('Virgin Islands'),
    'VA' => t('Virginia'),
    'WA' => t('Washington'),
    'WV' => t('West Virginia'),
    'WI' => t('Wisconsin'),
    'WY' => t('Wyoming'),
  );

  $element['#attached']['js'][] = drupal_get_path('module', 'dosomething_school') . '/dosomething_school.js';
  $element['#element_validate'][] = '_dosomething_school_autocomplete_validate';
  $element['state'] = array(
    '#title' => t('State'),
    '#type' => 'select',
    '#options' => $states,
    // TODO: need to set this... the autocomplete gets sad if it isn't set.
    '#default_value' => $default_state,
  );
  $element['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#maxlength' => 1024,
    '#default_value' => $default_school,
    '#autocomplete_path' => 'ds_school/autocomplete/' . $element['state']['#default_value'],
    '#size' => $instance['widget']['settings']['size'],
  );

  return array('target_id' => $element);
}

function _dosomething_school_autocomplete_validate($element, &$form_state, $form) {
  // If a value was entered into the autocomplete...
  $value = '';
  if (!empty($element['name']['#value'])) {
    // Take "label (entity id)', match the id from parenthesis.
    if (preg_match("/.+\((\d+)\)/", $element['name']['#value'], $matches)) {
      $value = (int) $matches[1];
    }
    # TODO: need to create the school if it doesn't exist right now
  }

  // Update the value of this element so the field can validate the IDs.
  form_set_value($element, $value, $form_state);
}

/**
 * Create the value that'll be used to represent the school.
 */
function dosomething_school_make_label($entity) {
  return "$entity->name ($entity->sid)";
}

function dosomething_school_autocomplete_callback($state, $name) {
  $entity_type = 'ds_school';
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->propertyCondition('state', drupal_strtoupper($state))
    ->propertyCondition('name', '%' . db_like($name) . '%', 'like')
    ->range(0, 10)
    ->propertyOrderBy('name');

  $matches = array();
  $result = $query->execute();
  if (!empty($result[$entity_type])) {
    foreach (entity_load($entity_type, array_keys($result[$entity_type])) as $info) {
      $matches[dosomething_school_make_label($info)] = "$info->name<br><em>$info->level â€” $info->city</em>";
    }
  }

  drupal_json_output($matches);
}