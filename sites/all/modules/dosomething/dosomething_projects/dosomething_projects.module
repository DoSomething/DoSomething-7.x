<?php

/**
 * @file
 * Dosomething API for searching projects.
 */

define('DOSOMETHING_PROJECTS_API_LIMIT', 300);

include_once('dosomething_projects.features.inc');


/**
 * Implements hook_menu().
 */
function dosomething_projects_menu() {
  return array(
    'api/projects' => array(
      'page callback' => 'dosomething_projects_callback',
      'access callback' => 'dosomething_projects_callback_access',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Menu access callback.
 */
function dosomething_projects_callback_access() {
  if (isset($_GET['key'])) {
    $key = $_GET['key'];
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'api_key');
    $query->propertyCondition('title', $key);
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    if (count($nodes)) {
      foreach ($nodes as $node) {
        if ($node->field_query_count[$node->language][0]['value'] < DOSOMETHING_PROJECTS_API_LIMIT) {
          // Update the query count for the key.
          $node->field_query_count[$node->language][0]['value']++;
          node_save($node);
          return TRUE;
        }
      }
    }
  }
  else if (user_access('use api without key')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function dosomething_projects_permission() {
  return array(
    'use api without key' => array(
      'title' => t('Access the DoSomething projects API without a key'),
    ),
  );
}
/**
 * Menu callback for the API hits.
 */
function dosomething_projects_callback() {
  $display_id = 'page';
  $view = views_get_view('dosomething_api');

  // Issue filter.
  if (isset($_GET['issue'])) {
    $cause = $_GET['issue'];
    $terms = taxonomy_get_term_by_name($cause);
    foreach ($terms as $tid => $term) {
      if ($term->vid == '5') {
        $issue_tid = $term->tid;
      }
    }
    $filter = $view->get_item($display_id, 'filter', 'taxonomy_vocabulary_5');
    $filter['value'] = array($issue_tid => $issue_tid);
    $view->set_item($display_id, 'filter', 'taxonomy_vocabulary_5', $filter);
  }
  else {
    $view->set_item($display_id, 'filter', 'taxonomy_vocabulary_5', NULL);
  }

  // Keyword filter.
  if (isset($_GET['keyword'])) {
    $keyword = $_GET['keyword'];
    $filter = $view->get_item($display_id,'filter','search_api_views_fulltext');
    $filter['value'] = $keyword;
    $view->set_item($display_id, 'filter', 'search_api_views_fulltext', $filter);
  }
  else {
    $view->set_item($display_id, 'filter', 'search_api_views_fulltext', NULL);
  }

  // Province (state) filter.
  // It doesn't make sense to have province and zip filters.
  if (isset($_GET['province']) && !isset($_GET['zip'])) {
    $filter = $view->get_item($display_id,'filter','field_webform_address_administrative_area');
    $province = $_GET['province'];
    $filter['value'] = $province;
    $view->set_item($display_id, 'filter', 'field_webform_address_administrative_area', $filter);
  }
  else {
    $view->set_item($display_id, 'filter', 'field_webform_address_administrative_area', NULL);
  }

  // Zip code proximity filter.
  if (isset($_GET['zip'])) {
    $zip = $_GET['zip'];
    // This query relies on the zipcodes table provided by location module.
    $distance = isset($_GET['distance']) ? $_GET['distance'] : 10;
    $data = db_query("SELECT latitude, longitude FROM {zipcodes} WHERE zip = :zip", array(':zip' => $zip))->fetchObject();
    $filter = $view->get_item($display_id,'filter','field_geocode_data_latlon');
    $filter['lat'] = $data->latitude;
    $filter['lng'] = $data->longitude;
    $filter['radius'] = $distance;
    // Setting radius measure in the view seems to be broken.
    $filter['radius_measure'] = 'mi';
    $view->set_item($display_id, 'filter', 'field_geocode_data_latlon', $filter);
  }
  else {
    $view->set_item($display_id, 'filter', 'field_geocode_data_latlon', NULL);
  }

  // Page number filter.
  $page = 0;
  if (isset($_GET['page']) && preg_match('/^\d+$/', $_GET['page']) && $_GET['page'] > 0) {
    $page = $_GET['page'] - 1;
  }

  // Maxnum items filter.
  $maxnum = isset($_GET['maxnum']) ? trim($_GET['maxnum']) : 10;
  if ($maxnum > 100 || $maxnum < 1) {
    $maxnum = 100;
  }
  $view->set_items_per_page($maxnum);
  $view->set_current_page($page);
  if ($page) {
    $view->set_offset($page * $maxnum);
  }

  // Create XML.
  // Might want to move this to a separate function.
  header("content-type: application/xml; charset=utf-8" );
  $doc = new DOMDocument('1.0', 'utf-8');
  $xml = $doc->createElement('xml');
  $doc->appendChild($xml);

  $view->execute_display($display_id);
  foreach ($view->result as $result) {
    $entity = $result->_entity_properties['entity object'];

    $node = $doc->createElement('node');

    $field_project_title = isset($entity->field_project_title) ? $entity->field_project_title[LANGUAGE_NONE][0]['safe_value'] : '';
    $title = $doc->createElement('title');
    $title->appendChild($doc->createTextNode($field_project_title));
    $node->appendChild($title);

    $field_essay_see_it = isset($entity->field_essay_see_it) ? $entity->field_essay_see_it[LANGUAGE_NONE][0]['safe_value'] : '';
    $essay_see_it = $doc->createElement('essay_see_it');
    $essay_see_it->appendChild($doc->createTextNode($field_essay_see_it));
    $node->appendChild($essay_see_it);

    $field_essay_build_it = isset($entity->field_essay_build_it) ? $entity->field_essay_build_it[LANGUAGE_NONE][0]['safe_value'] : '';
    $essay_build_it = $doc->createElement('essay_build_it');
    $essay_build_it->appendChild($doc->createTextNode($field_essay_build_it));
    $node->appendChild($essay_build_it);

    $submitted = date('Y-m-d', $entity->submitted);
    $date_created = $doc->createElement('date_created');
    $date_created->appendChild($doc->createTextNode($submitted));
    $node->appendChild($date_created);

    $zip_code = isset($entity->field_webform_address[LANGUAGE_NONE][0]['postal_code']) ? $entity->field_webform_address[LANGUAGE_NONE][0]['postal_code'] : '';
    $location_postal = $doc->createElement('location_postal');
    $location_postal->appendChild($doc->createTextNode($zip_code));
    $node->appendChild($location_postal);

    $field_lat = isset($entity->field_geocode_data[LANGUAGE_NONE][0]['lat']) ? $entity->field_geocode_data[LANGUAGE_NONE][0]['lat'] : '';
    $location_lat = $doc->createElement('location_lat');
    $location_lat->appendChild($doc->createTextNode($field_lat));
    $node->appendChild($location_lat);

    $field_long = isset($entity->field_geocode_data[LANGUAGE_NONE][0]['lon']) ? $entity->field_geocode_data[LANGUAGE_NONE][0]['lon'] : '';
    $location_long = $doc->createElement('location_long');
    $location_long->appendChild($doc->createTextNode($field_long));
    $node->appendChild($location_long);

    $field_num_people_impacted = !empty($entity->field_num_people_impacted) ? $entity->field_num_people_impacted[LANGUAGE_NONE][0]['value'] : '';
    $num_people_impacted = $doc->createElement('num_people_impacted');
    $num_people_impacted->appendChild($doc->createTextNode($field_num_people_impacted ));
    $node->appendChild($num_people_impacted);

    $field_update_people_involved = !empty($entity->field_update_people_involved) ? $entity->field_update_people_involved[LANGUAGE_NONE][0]['value'] : '';
    $num_people_involved = $doc->createElement('num_people_involved');
    $num_people_involved->appendChild($doc->createTextNode($field_update_people_involved));
    $node->appendChild($num_people_involved);

    if (!empty($entity->taxonomy_vocabulary_5)) {
      $names = array();
      foreach ($entity->taxonomy_vocabulary_5[LANGUAGE_NONE] as $tid) {
        $term = taxonomy_term_load($tid['tid']);
        $names[] = $term->name;
      }
      $names = implode(', ', $names);
    }
    else {
      $names = '';
    }
    $allterms = $doc->createElement('allterms');
    $allterms->appendChild($doc->createTextNode($names));
    $node->appendChild($allterms);

    global $base_url;
    $path = $base_url . '/' . $entity->nid . '/submission/' . $entity->sid;
    $url = $doc->createElement('Path');
    $url->appendChild($doc->createTextNode($path));
    $node->appendChild($url);

    if (isset($entity->field_picture[LANGUAGE_NONE][0]['uri'])) {
      $uri = $entity->field_picture[LANGUAGE_NONE][0]['uri'];
      $photo_path = file_create_url($uri);
    }
    else {
      $photo_path = '';
    }
    $photo = $doc->createElement('photo');
    $photo->appendChild($doc->createTextNode($photo_path));
    $node->appendChild($photo);

    $xml->appendChild($node);
  }
  print $doc->saveXML();
  return NULL;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_projects_form_alter(&$form, &$form_state, $form_id) {
  // If this is a webform form and the node type is project lets hide the club
  // field if and only if it has been set on the form and it matches the query
  // argument.
  if (strpos($form_id, 'webform_client_form_') === 0 && $form['#node']->type == 'project_report') {
    if (!empty($form['submitted']['webform_entity_form']['field_project_clubs'][LANGUAGE_NONE][0]['nid']['#default_value'])
      && is_numeric(arg(2))
      && arg(2) == $form['submitted']['webform_entity_form']['field_project_clubs'][LANGUAGE_NONE][0]['nid']['#default_value']) {
      $form['submitted']['webform_entity_form']['field_project_clubs']['#type'] = 'hidden';
    }
  }
}

