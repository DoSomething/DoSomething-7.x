<?php

/**
 * @file
 * Dosomething API for searching projects.
 */

define('DOSOMETHING_PROJECTS_API_LIMIT', 300);

include_once('dosomething_projects.features.inc');


/**
 * Implements hook_menu().
 */
function dosomething_projects_menu() {
  return array(
    'api/projects' => array(
      'page callback' => 'dosomething_projects_callback',
      'access callback' => 'dosomething_projects_callback_access',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Menu access callback.
 */
function dosomething_projects_callback_access() {
  if (isset($_GET['key'])) {
    $key = $_GET['key'];
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'api_key');
    $query->propertyCondition('title', $key);
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    if (count($nodes)) {
      foreach ($nodes as $node) {
        if ($node->field_query_count[$node->language][0]['value'] < DOSOMETHING_PROJECTS_API_LIMIT) {
          // Update the query count for the key.
          $node->field_query_count[$node->language][0]['value']++;
          node_save($node);
          return TRUE;
        }
      }
    }
  }
  else if (user_access('use api without key')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function dosomething_projects_permission() {
  return array(
    'use api without key' => array(
      'title' => t('Access the DoSomething projects API without a key'),
    ),
  );
}
/**
 * Menu callback for the API hits.
 */
function dosomething_projects_callback() {
  $display_id = 'page';
  //$display_id = 'views_data_export_1';
  $view = views_get_view('dosomething_api');



  if (isset($_GET['cause'])) {
    $cause = $_GET['cause'];
    $terms = taxonomy_get_term_by_name($cause);
    foreach ($terms as $tid => $term) {
      if ($term->vid == '5') {
        $issue_tid = $term->tid;
      }
    }
    $filter = $view->get_item($display_id, 'filter', 'taxonomy_vocabulary_5');
    $filter['value'] = array($issue_tid => $issue_tid);
    $view->set_item($display_id, 'filter', 'taxonomy_vocabulary_5', $filter);
  }

  if (isset($_GET['keyword'])) {
    $keyword = $_GET['keyword'];
    $filter = $view->get_item($display_id,'filter','search_api_views_fulltext');
    $filter['value'] = $keyword;
    $view->set_item($display_id, 'filter', 'search_api_views_fulltext', $filter);
  }

  // It doesn't make sense to have province and zip filters.
  if (isset($_GET['province']) && !isset($_GET['zip'])) {
    // First remove geocode filter.
    $view->set_item($display_id, 'filter', 'field_geocode_data', NULL);
    $filter = $view->get_item($display_id,'filter','field_webform_address_administrative_area');
    $province = $_GET['province'];
    $filter['value'] = $province;
    $view->set_item($display_id, 'filter', 'field_webform_address_administrative_area', $filter);
  }

  if (isset($_GET['zip'])) {
    $zip = $_GET['zip'];
    // This query relies on the zipcodes table provided by location module.
    $distance = isset($_GET['distance']) ? $_GET['distance'] : 10;
    $data = db_query("SELECT latitude, longitude FROM {zipcodes} WHERE zip = :zip", array(':zip' => $zip))->fetchObject();
    $filter = $view->get_item($display_id,'filter','field_geocode_data');
    $filter['lat'] = $data->latitude;
    $filter['lng'] = $data->longitude;
    $filter['radius'] = $distance;
    // Setting radius measure in the view seems to be broken.
    $filter['radius_measure'] = 'mi';
    $view->set_item($display_id, 'filter', 'field_geocode_data', $filter);
  }

  $page = 0;
  if (isset($_GET['page']) && preg_match('/^\d+$/', $_GET['page']) && $_GET['page'] > 0) {
    $page = $_GET['page'] - 1;
  }
  $maxnum = isset($_GET['maxnum']) ? trim($_GET['maxnum']) : 10;
  if ($maxnum > 100 || $maxnum < 1) {
    $maxnum = 100;
  }
  $view->set_items_per_page($maxnum);
  $view->set_current_page($page);
  if ($page) {
    $view->set_offset($page * $maxnum);
  }
  //dpm($view->get_items('filter', $display_id));

  return $view->preview($display_id);
  //print $view->preview($display_id);
  exit;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_projects_form_alter(&$form, &$form_state, $form_id) {
  // If this is a webform form and the node type is project lets hide the club
  // field if and only if it has been set on the form and it matches the query
  // argument.
  if (strpos($form_id, 'webform_client_form_') === 0 && $form['#node']->type == 'project_report') {
    if (!empty($form['submitted']['webform_entity_form']['field_project_clubs'][LANGUAGE_NONE][0]['nid']['#default_value'])
      && is_numeric(arg(2))
      && arg(2) == $form['submitted']['webform_entity_form']['field_project_clubs'][LANGUAGE_NONE][0]['nid']['#default_value']) {
      $form['submitted']['webform_entity_form']['field_project_clubs']['#type'] = 'hidden';
    }
  }
}

