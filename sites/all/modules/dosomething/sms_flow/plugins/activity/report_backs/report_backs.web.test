<?php

/**
 * @file
 * Functional testing for the report back workflows.
 */

class DoSomethingSmsFlowReportBackTestCase extends WebTestSuite {

  // Key/value array of "keywords" from report_backs.keywords.inc
  private $keywords;

  public static function getInfo() {
    return array(
      'name' => 'DoSomething sms_flow Report Back Tests',
      'description' => 'Tests the report back workflows in the sms_flow module.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    // Enable the module
    parent::setUp('sms_flow');

    // Get list of all report back keywords
    $keywords = array();
    include dirname(__FILE__) . '/report_backs.keywords.inc';
    $this->keywords = $keywords;
  }

  /**
   * Tests critical path of workflows with basic dummy data
   */
  protected function subTestWorkflowCriticalPath() {
    // Create dummy $_REQUEST data for all SMS requests
    $phone = '15555555555';
    $_REQUEST['args'] = 'test args';
    $_REQUEST['mms_image_url'] = 'http://www.google-analytics.com/__utm.gif';
    $_REQUEST['opt_in_path_id'] = 0;
    $_REQUEST['phone'] = $phone;

    // Simulate a run through of each workflow
    foreach ($this->keywords as $testKeyword => $workflowName) {
      $isNewWorkFlow = TRUE;
      $isWorkflowInProgress = FALSE;
      $errorFound = FALSE;

      while ($isWorkflowInProgress || $isNewWorkFlow) {
        $isNewWorkFlow = FALSE;
        $isWorkflowInProgress = TRUE;

        // Enable output buffering to capture the `print` output from sms_flow_incoming_callback
        ob_start();

        // Trigger callback that handles SMS requests
        sms_flow_incoming_callback($testKeyword);

        // Disable output buffering. Copy reply to user to $buffer.
        $buffer = ob_get_contents();
        ob_end_clean();

        $storage = conductor_get_storage_handler(variable_get('conductor_default_storage_handler', 'database'));
        $pointer = $storage->loadPointer('sms_prompt:' . $phone);
        $testWorkflow = conductor_get_workflow($workflowName);
        $currentActivity = $testWorkflow->getActivity($pointer['activityName']);

        if (self::hasErrorOutput($buffer)) {
          $errorFound = TRUE;
          $this->assert(FALSE, t('"Aw snap" error message sent to user in workflow %workflow after activity %activity', array('%workflow' => $workflowName, '%activity' => $pointer['activityName'])));
        }

        if (!$currentActivity) {
          $isWorkflowInProgress = FALSE;
        }
        else {
          $activityType = $currentActivity->plugin_info['name'];
        }
      }

      if (!$errorFound) {
        $this->assert(TRUE, t('Workflow %workflow critial path succeeded', array('%workflow' => $workflowName)));
      }
    }
  }

  /**
   * Checks if output sent to user has the "Aw snap" message. There should be no
   * scenario where the user receives that message.
   */
  private function hasErrorOutput($output) {
    if (stripos($output, 'Aw snap! Something went wrong! We\'ll get right on it!') !== FALSE) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

}