<?php

/**
 *  Begins the most epic SMS flow ever.  But seriously, opts an Alpha into a Mobile Commons campaign.  Then opts in Betas into another Mobile Commons
 *  campaign.  Sends $variables (an array of custom variables, surprisingly) along with those opt-ins.  Apply this function in a form submit function.
 *  
 *  @param $alpha_number
 *    The phone number of the alpha who invited the betas.
 *  @param $alpha_optin
 *    A campaign number on mobile commons that the ALPHA will be opted in to.
 *  @param $beta_optin
 *    A campaign on mobile commons that the BETA will be opted into.
 *  @param $beta_numbers
 *    An array of the field keys that represent the phone numbers that the alpha invited through the form.
 *    ALTERNATELY: An array of valid phone numbers to opt in through the opt-in path.
 *  @param $form_values
 *    An array of form values from the submitted webform.
 *  @param $variables
 *    An array of custom variables to send with the opt-in.  These translate to {{variables}} on Mobile Commons.
 *  @param $beta_to_alpha_campaign
 *    A campaign that the beta (then Gamma, then whatever is after Gamma) should be opted into when they invite their friends.  Optional.
 *  @param $type_override (optional)
 *    Set a custom value to the 'type' column. Particularly useful for cases where there is no appropriate NID 
 *    or Drupal type for this invite. ex: the MLK day SMS game
 *
 *  Example (found in dosomething_clubs_preserve_shortform_email() in dosomething_clubs.module):
 *    sms_flow_start('610-368-3195', 128441, 128441, array('field_webform_mobile'), $form_state['values'], array(
 *      'first_name' => 'Mike',
 *      'club_name' => "Mike's cool DoSomething.org Club."
 *    ));
 *
 */

function sms_flow_start($alpha_number, $alpha_optin, $beta_optin, Array $beta_numbers, $form_values, Array $variables, $beta_to_alpha_campaign = FALSE, $type_override = NULL) {

  $nid = 0;
  if (!empty($form_values['details']['nid'])) {
    $nid = $form_values['details']['nid'];
  }

  if (empty($type_override)) {
    $n = node_load($nid);
    $type = $n->type;
  }
  else {
    $type = $type_override;
  }

  $alpha_number = preg_replace('#[^0-9]#', '', $alpha_number);

  $valid_beta_numbers = array();
  foreach ($beta_numbers AS $key => $field) {
    $beta_number = '';

    // Generic $form_state['values']['submitted_tree']
    if (isset($form_values['submitted_tree']) && isset($form_values['submitted_tree'][$field][LANGUAGE_NONE][0])) {
      $beta_number = current($form_values['submitted_tree'][$field][LANGUAGE_NONE][0]);
    }

    // Security for the multiple form_state['values'] that we have migrating around the site.
    else if (isset($form_values[$field][LANGUAGE_NONE][0])) {
      $beta_number = current($form_values[$field][LANGUAGE_NONE][0]);
    }

    // Array of phone numbers passed to function
    if (dosomething_general_valid_cell($field)) {
      $beta_number = preg_replace('#[^0-9]#', '', $field);
    }

    // Check if valid cell and opt in to Mobile Commons.
    if (dosomething_general_valid_cell($beta_number)) {
      $valid_beta_numbers[] = $beta_number;

      $record = array(
        'alpha' => $alpha_number,
        'beta' => $beta_number,
        'timestamp' => REQUEST_TIME,
        'type' => $type,
        'nid' => $nid
      );

      drupal_write_record('sms_flow_records', $record);
    }
  }

  // Opt-in alpha and beta to their respective paths
  dosomething_general_mobile_commons_subscribe_with_friends(
    $alpha_number,
    (!$beta_to_alpha_campaign ? $alpha_optin : $beta_to_alpha_campaign),
    $valid_beta_numbers,
    $beta_optin,
    $variables
  );
}

/**
 *  Accepts a phone number and returns the alpha who invited that phone number, if applicable.
 *
 *  @param $beta
 *    The beta's phone number.  Accepts with punctuation (e.g. xxx-xxx-xxxx) or without.
 *  @param $nid (optional...for now.)
 *    The node id that is being referenced.  This will ensure that we pull the correct alpha, when we
 *    have multiple flow types running at the same time.
 *  @param $type (optional)
 *    Type of invite being referenced. Possible some 'nid' values could overlap depending on the type.
 *
 *  @return the alpha's phone number, if applicable, or false.
 *
 *  Example:
 *  sms_flow_find_alpha('610-368-3195');
 */
function sms_flow_find_alpha($beta, $nid = 0, $type = '') {
  $beta_parsed = preg_replace('#[^0-9]#i', '', $beta);
  $select = db_query("
    SELECT alpha
    FROM sms_flow_records
    WHERE
       (beta = '" . $beta . "'
       OR beta = '" . $beta_parsed . "')
       " . ($nid > 0 ? "AND `nid` = " . intval($nid) : '') . "
       " . (!empty($type) ? "AND `type` = '" . $type . "'" : '') . "
    ORDER BY sid DESC
    LIMIT 1
  ");

  $r = current($select->fetchAll());
  return ($r->alpha ? $r->alpha : false);
}

/**
 *  Checks whether an alpha in the sms_flow_records table has received a message from
 *  an invited beta before, given a particular type and node ID.
 *
 *  @param int $alpha
 *    The phone number without ANY punctuation of the alpha.
 *
 *  @param int $nid
 *    The nid of the invitation, as found in the sms_flow_records table.
 *
 *  @param string $type
 *    The "type" of invitation, as seen in the sms_flow_records table.
 *
 *  @return boolean
 *    true if there is at least one message from beta -> alpha sent
 *    false if there have not been any messages sent from beta -> alpha
 */
function sms_flow_alpha_received_message($alpha, $nid, $type) {
  // Query the sms_flow_records table.
  $select = db_query("
    SELECT
      COUNT(*) AS sent
    FROM sms_flow_records
    WHERE `accepted_invite` = 1
      AND REPLACE(
        REPLACE(
          REPLACE(
            REPLACE(
              `alpha`, ')', ''
            ),
          '(', ''),
        ' ', ''),
      '-', '') = '" . $alpha . "'
      AND `type` = :type
      AND `nid` = :nid
  ", array(':type' => $type, ':nid' => $nid));

  // Get just what we need...
  $r = reset($select->fetchAll());

  // Return true if there's at least one response sent.
  return ($r->sent > 0);
}

/**
 *  Updates the "accepted invite" status for a particular beta number in the sms_flow_records table.
 *
 *  @param $alpha_number
 *    The number of the alpha user who sent the invite.
 *
 *  @param $beta_number
 *    The beta number to look up.
 *
 *  @param $nid
 *    The nid that the user is being invited to, as seen in the sms_flow_records table.
 *
 *  @param $type
 *    The type of invite to check against.
 *
 *  @return
 *    Returns true.
 */
function sms_flow_update_accepted_status($alpha_number, $beta_number, $nid, $type) {
  db_update('sms_flow_records')
    ->fields(array(
      'accepted_invite' => 1
    ))
    ->condition('alpha', $alpha_number)
    ->condition('beta', $beta_number)
    ->condition('nid', $nid)
    ->condition('type', $type)
    ->execute();

    return true;
}

/**
 * Implements hook_menu()
 */
function sms_flow_menu() {
  $items = array();

  $items['sms/sms_flow/%'] = array(
    'title' => 'Mobile Commons SMS Receiver for Invite Flow',
    'page callback' => 'sms_flow_incoming_callback',
    'access callback' => 'sms_mobile_commons_incoming_check',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Mimics functionality found in sms_mobile_commons_incoming_callback(). Allows for
 * for different endpoints to trigger different keyword paths
 */
function sms_flow_incoming_callback($path) {
  // Direct correlation between path endpoint and keyword used. If path doesn't match any keyword
  // specified in the array of keywords, then error out.
  $keyword = $path;
  $keyword_map = module_invoke_all('conductor_sms_keywords');
  if (!array_key_exists($path, $keyword_map)) {
    watchdog('sms_flow', 'Received message at unsupported path: /sms/sms_flow/$path');
    return NULL;
  }

  // Using same code from sms_mobile_commons_incoming_callback(). Only difference
  // is $keyword gets set depending on the path found above.
  $message = isset($_REQUEST['args']) ? $_REQUEST['args'] : FALSE;
  $carrier = isset($_REQUEST['carrier']) ? $_REQUEST['carrier'] : FALSE;
  $sender = isset($_REQUEST['phone']) ? $_REQUEST['phone'] : FALSE;
  $gateway = sms_gateways('gateway', 'sms_mobile_commons');
  $config = $gateway['configuration'];
  $output = $config['sms_mobile_commons_response'];
  $context = array(
    'message' => $message,
    'keyword' => $keyword,
    'carrier' => $carrier,
    'sender' => $sender,
    'gateway' => $gateway,
  );
  drupal_alter('sms_mobile_commons_response', $output, $context);
  sms_incoming($sender, $message, array("carrier" => $carrier, 'keyword' => $keyword, 'response' => $output));
  $args = array('%sender' => $sender, '%message' => $message, '%response' => $output, '%keyword' => $keyword);
  watchdog('sms_flow', 'Received message from %sender: %message with keyword %keyword and responded with %response', $args);
  if (!empty($output)) {
    $output =
    '<?xml version="1.0" encoding="UTF-8"?>
    <response>
     <reply>
      <text>
       <![CDATA[' . $output . ']]>
      </text>
     </reply>
    </response>';
    print $output;
  }

  return NULL;
}

/**
 * Merely for reference.  Not used because dosomething_general_mobile_commons_subscribe offers the same functionality.
 */
function sms_flow_mobile_commons_subscribe($mobile, $opt_in_path, $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&opt_in_path[]=$opt_in_path",
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }

  drupal_http_request($api_opt_in_path_url, $options);
}

/**
 * Specifies conductor workflows that should trigger for a given endpoint
 *   [endpoint] => [conductor workflow]
 */
function sms_flow_conductor_sms_keywords() {
  $keywords = array();

  include 'plugins/activity/clubs/clubs.keywords.inc';
  include 'plugins/activity/drives/drives.keywords.inc';
  include 'plugins/activity/mlk_game/mlk_game.keywords.inc';
  include 'plugins/activity/report_backs/report_backs.keywords.inc';

  return $keywords;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function sms_flow_ctools_plugin_api($owner, $api) {
  if ($owner == 'conductor') {
    return array('version' => 1.0);
  }
}

/**
 * Implements hook_ctools_plugin_directory
 */
function sms_flow_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'conductor') {
    return "plugins/$plugin_type";
  }
}

function sms_flow_default_conductor_workflows() {
  $workflows = array();

  include 'plugins/activity/drives/drives.workflows.inc';
  include 'plugins/activity/report_backs/report_backs.workflows.inc';
  include 'plugins/activity/clubs/clubs.workflows.inc';
  include 'plugins/activity/mlk_game/mlk_game.workflows.inc';  

  return $workflows;
}

function sms_flow_team_invite_form($form, &$form_state, $gid) {
  $form['alpha'] = array(
    '#type' => 'textfield',
    '#title' => 'Your Cell Number:',
    '#size' => 16,
  );

  $form['beta0'] = array(
    '#type' => 'textfield',
    '#title' => 'Friends\' Cell Numbers:',
    '#size' => 16,
  );
  $form['beta1'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta2'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta3'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta4'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );

  $form['invite-gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invite',
  );

  return $form;
}

function sms_flow_team_invite_form_submit($form, &$form_state) {
  global $user;
  $profile = profile2_load_by_user($user, 'main');
  if ($profile) {
    $inviter = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
  }

  if (empty($inviter)) {
    $inviter = $form_state['values']['alpha'];
  }

  $alpha_mobile = $form_state['values']['alpha'];
  $beta_numbers = array();
  for ($i = 0; $i < 5; $i++) {
    $element_name = 'beta' . $i;
    if (!empty($form_state['values'][$element_name])) {
      $beta_numbers[] = $form_state['values'][$element_name];
    }
  }

  $invite_gid = $form_state['values']['invite-gid'];
  // TODO: sms_flow_start expects NID value to be here. Might want to consider modifying that
  $form_state['values']['details']['nid'] = $invite_gid;

  if (count($beta_numbers) > 0) {
    // TODO: opt in paths are hardcoded for TFJ
    sms_flow_start($alpha_mobile, 131891, 129751, $beta_numbers, $form_state['values'], array(
        'tfj2013_inviter' => $inviter,
        'drives_invite_gid' => $invite_gid,
      )
    );
  }

}

/**
 * Get user account from cell number.
 * find_user_by_cell() doesn't handle international code when searching by profile's
 * field_user_mobile value. Only handles international code with an @mobile email address
 */
function _sms_flow_find_user_by_cell($mobile) {
  $account = dosomething_general_find_user_by_cell($mobile);
  if (!$account && strlen($mobile) > 10) {
    $mobile = substr($mobile, -10);
    $account = dosomething_general_find_user_by_cell($mobile);
  }

  return $account;
}
