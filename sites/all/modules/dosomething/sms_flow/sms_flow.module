<?php

/**
 *	Begins the most epic SMS flow ever.  But seriously, opts an Alpha into a Mobile Commons campaign.  Then opts in Betas into another Mobile Commons
 *	campaign.  Sends $variables (an array of custom variables, surprisingly) along with those opt-ins.  Apply this function in a form submit function.
 *	
 *	@param $alpha_number
 *		The phone number of the alpha who invited the betas.
 *	@param $alpha_optin
 *		A campaign number on mobile commons that the ALPHA will be opted in to.
 *	@param $beta_optin
 *		A campaign on mobile commons that the BETA will be opted into.
 *	@param $beta_numbers
 *		An array of the field keys that represent the phone numbers that the alpha invited through the form.
 *		ALTERNATELY: An array of valid phone numbers to opt in through the opt-in path.
 *	@param $form_values
 *		An array of form values from the submitted webform.
 *	@param $variables
 *		An array of custom variables to send with the opt-in.  These translate to {{variables}} on Mobile Commons.
 *	@param $beta_to_alpha_campaign
 *		A campaign that the beta (then Gamma, then whatever is after Gamma) should be opted into when they invite their friends.  Optional.
 *  @param $type_override (optional)
 *    Set a custom value to the 'type' column. Particularly useful for cases where there is no appropriate NID 
 *    or Drupal type for this invite. ex: the MLK day SMS game
 *
 *	Example (found in dosomething_clubs_preserve_shortform_email() in dosomething_clubs.module):
 * 		sms_flow_start('610-368-3195', 128441, 128441, array('field_webform_mobile'), $form_state['values'], array(
 *	 		'first_name' => 'Mike',
 *			'club_name' => "Mike's cool DoSomething.org Club."
 *		));
 *
 */

function sms_flow_start($alpha_number, $alpha_optin, $beta_optin, Array $beta_numbers, $form_values, Array $variables, $beta_to_alpha_campaign = FALSE, $type_override = NULL) {

  $nid = 0;
  if (!empty($form_values['details']['nid'])) {
    $nid = $form_values['details']['nid'];
  }

  if (empty($type_override)) {
    $n = node_load($nid);
    $type = $n->type;
  }
  else {
    $type = $type_override;
  }

  $alpha_number = preg_replace('#[^0-9]#', '', $alpha_number);

  foreach ($beta_numbers AS $key => $field) {
    $beta_number = '';

    // Generic $form_state['values']['submitted_tree']
    if (isset($form_values['submitted_tree']) && isset($form_values['submitted_tree'][$field][LANGUAGE_NONE][0])) {
      $beta_number = current($form_values['submitted_tree'][$field][LANGUAGE_NONE][0]);
    }

    // Security for the multiple form_state['values'] that we have migrating around the site.
    else if (isset($form_values[$field][LANGUAGE_NONE][0])) {
      $beta_number = current($form_values[$field][LANGUAGE_NONE][0]);
    }

    // Array of phone numbers passed to function
    if (dosomething_general_valid_cell($field)) {
      $beta_number = preg_replace('#[^0-9]#', '', $field);
    }

    // Check if valid cell and opt in to Mobile Commons.
    if (dosomething_general_valid_cell($beta_number)) {
      dosomething_general_mobile_commons_subscribe_with_friends(
        $alpha_number,
        (!$beta_to_alpha_campaign ? $alpha_optin : $beta_to_alpha_campaign),
        array($beta_number),  // function expects beta numbers to be an array
        $beta_optin,
        $variables
      );

      $record = array(
        'alpha' => $alpha_number,
        'beta' => $beta_number,
        'timestamp' => REQUEST_TIME,
        'type' => $type,
        'nid' => $nid
      );

      drupal_write_record('sms_flow_records', $record);
    }
  }
}

/**
 *  Accepts a phone number and returns the alpha who invited that phone number, if applicable.
 *
 *  @param $beta
 *    The beta's phone number.  Accepts with punctuation (e.g. xxx-xxx-xxxx) or without.
 *  @param $nid (optional...for now.)
 *    The node id that is being referenced.  This will ensure that we pull the correct alpha, when we
 *    have multiple flow types running at the same time.
 *  @param $type (optional)
 *    Type of invite being referenced. Possible some 'nid' values could overlap depending on the type.
 *
 *  @return the alpha's phone number, if applicable, or false.
 *
 *  Example:
 *  sms_flow_find_alpha('610-368-3195');
 */
function sms_flow_find_alpha($beta, $nid = 0, $type = '') {
  $beta_parsed = preg_replace('#[^0-9]#i', '', $beta);
  $select = db_query("
	SELECT alpha
	FROM sms_flow_records
	WHERE
	   (beta = '" . $beta . "'
	   OR beta = '" . $beta_parsed . "')
	   " . ($nid > 0 ? "AND `nid` = " . intval($nid) : '') . "
     " . (!empty($type) ? "AND `type` = '" . $type . "'" : '') . "
	ORDER BY sid DESC
	LIMIT 1
  ");

  $r = current($select->fetchAll());
  return ($r->alpha ? $r->alpha : false);
}

/**
 *  Checks whether an alpha in the sms_flow_records table has received a message from
 *  an invited beta before, given a particular type and node ID.
 *
 *  @param int $alpha
 *    The phone number without ANY punctuation of the alpha.
 *
 *  @param int $nid
 *    The nid of the invitation, as found in the sms_flow_records table.
 *
 *  @param string $type
 *    The "type" of invitation, as seen in the sms_flow_records table.
 *
 *  @return boolean
 *    true if there is at least one message from beta -> alpha sent
 *    false if there have not been any messages sent from beta -> alpha
 */
function sms_flow_alpha_received_message($alpha, $nid, $type) {
  // Query the sms_flow_records table.
  $select = db_query("
    SELECT
      COUNT(*) AS sent
    FROM sms_flow_records
    WHERE `accepted_invite` = 1
      AND REPLACE(
        REPLACE(
          REPLACE(
            REPLACE(
              `alpha`, ')', ''
            ),
          '(', ''),
        ' ', ''),
      '-', '') = '" . $alpha . "'
      AND `type` = :type
      AND `nid` = :nid
  ", array(':type' => $type, ':nid' => $nid));

  // Get just what we need...
  $r = reset($select->fetchAll());

  // Return true if there's at least one response sent.
  return ($r->sent > 0);
}

/**
 *  Updates the "accepted invite" status for a particular beta number in the sms_flow_records table.
 *
 *  @param $alpha_number
 *    The number of the alpha user who sent the invite.
 *
 *  @param $beta_number
 *    The beta number to look up.
 *
 *  @param $nid
 *    The nid that the user is being invited to, as seen in the sms_flow_records table.
 *
 *  @param $type
 *    The type of invite to check against.
 *
 *  @return
 *    Returns true.
 */
function sms_flow_update_accepted_status($alpha_number, $beta_number, $nid, $type) {
  db_update('sms_flow_records')
    ->fields(array(
      'accepted_invite' => 1
    ))
    ->condition('alpha', $alpha_number)
    ->condition('beta', $beta_number)
    ->condition('nid', $nid)
    ->condition('type', $type)
    ->execute();

    return true;
}

/**
 * Implements hook_menu()
 */
function sms_flow_menu() {
  $items = array();

  $items['sms/sms_flow/%'] = array(
    'title' => 'Mobile Commons SMS Receiver for Invite Flow',
    'page callback' => 'sms_flow_incoming_callback',
    'access callback' => 'sms_mobile_commons_incoming_check',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Mimics functionality found in sms_mobile_commons_incoming_callback(). Allows for
 * for different endpoints to trigger different keyword paths
 */
function sms_flow_incoming_callback($path) {
  // Direct correlation between path endpoint and keyword used. If path doesn't match any keyword
  // specified in the array of keywords, then error out.
  $keyword = $path;
  $keyword_map = module_invoke_all('conductor_sms_keywords');
  if (!array_key_exists($path, $keyword_map)) {
    watchdog('sms_flow', 'Received message at unsupported path: /sms/sms_flow/$path');
    return NULL;
  }

  // Using same code from sms_mobile_commons_incoming_callback(). Only difference
  // is $keyword gets set depending on the path found above.
  $message = isset($_REQUEST['args']) ? $_REQUEST['args'] : FALSE;
  $carrier = isset($_REQUEST['carrier']) ? $_REQUEST['carrier'] : FALSE;
  $sender = isset($_REQUEST['phone']) ? $_REQUEST['phone'] : FALSE;
  $gateway = sms_gateways('gateway', 'sms_mobile_commons');
  $config = $gateway['configuration'];
  $output = $config['sms_mobile_commons_response'];
  $context = array(
    'message' => $message,
    'keyword' => $keyword,
    'carrier' => $carrier,
    'sender' => $sender,
    'gateway' => $gateway,
  );
  drupal_alter('sms_mobile_commons_response', $output, $context);
  sms_incoming($sender, $message, array("carrier" => $carrier, 'keyword' => $keyword, 'response' => $output));
  $args = array('%sender' => $sender, '%message' => $message, '%response' => $output, '%keyword' => $keyword);
  watchdog('sms_flow', 'Received message from %sender: %message with keyword %keyword and responded with %response', $args);
  if (!empty($output)) {
    $output =
    '<?xml version="1.0" encoding="UTF-8"?>
    <response>
     <reply>
      <text>
       <![CDATA[' . $output . ']]>
      </text>
     </reply>
    </response>';
    print $output;
  }

  return NULL;
}

/**
 * Merely for reference.  Not used because dosomething_general_mobile_commons_subscribe offers the same functionality.
 */
function sms_flow_mobile_commons_subscribe($mobile, $opt_in_path, $args = array()) {
  $api_opt_in_path_url = 'https://dosomething.mcommons.com/profiles/join';

  // Send the post data.
  $options = array(
    'headers' => array(
      'Content-type' => 'application/x-www-form-urlencoded',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    ),
    'method' => 'POST',
    'data' => "person[phone]=$mobile&opt_in_path[]=$opt_in_path",
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $options['data'] .= "&person[$key]=" . urlencode($val);
    }
  }

  drupal_http_request($api_opt_in_path_url, $options);
}

/**
 * Specifies conductor workflows that should trigger for a given endpoint
 *   [endpoint] => [conductor workflow]
 */
function sms_flow_conductor_sms_keywords() {
  return array(
    'alcoa-report-back' => 'sms_flow_alcoa_report_back',
    'beta-campaign-report-back' => 'sms_flow_beta_campaign_report_back',
    'drives-create' => 'sms_flow_drives_create',
    'tfjcreate' => 'sms_flow_drives_create',
    'jeans' => 'sms_flow_drives_create',
    'drives-invite' => 'sms_flow_drives_invite',
    'ftaf' => 'sms_flow_ftaf',
    'clubs' => 'sms_flow_clubs_invite',
    'clubs-ftaf' => 'sms_flow_clubs_ftaf',
    'clubs-survey' => 'sms_flow_clubs_survey',
    'clubs-followup' => 'sms_flow_clubs_followup_survey',
    'mlk-game-invite' => 'sms_flow_mlk_game_invite',
    'mlk-invite-path-1' => 'sms_flow_mlk_invite_path_1',
    'mlk-invite-path-2' => 'sms_flow_mlk_invite_path_2',
    'mlk-invite-path-3' => 'sms_flow_mlk_invite_path_3',
    'mlk-invite-path-4' => 'sms_flow_mlk_invite_path_4',
    'mlk-process-beta' => 'sms_flow_mlk_process_beta',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function sms_flow_ctools_plugin_api($owner, $api) {
  if ($owner == 'conductor') {
    return array('version' => 1.0);
  }
}

/**
 * Implements hook_ctools_plugin_directory
 */
function sms_flow_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'conductor') {
    return "plugins/$plugin_type";
  }
}

function sms_flow_default_conductor_workflows() {
  $workflows = array();

  //
  // sms_flow_drives_create workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_drives_create';
  $workflow->title = 'SMS Flow Drives Create';
  $workflow->description = 'Workflow for creating a new drive, or joining an existing one';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $workflow->title = 'Start';
  $workflow->description = 'Workflow for creating a new drive, or joining an existing one';
  $activity->inputs = array();
  $activity->outputs = array('ask_school_level');
  
  // START School lookup

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_school_level';
  $activity->title = 'Ask the user what level of school they\'re in.';
  $activity->question = t('1/3 Great, let\'s get you started. There will be 3 questions. Are you in 1) middle/high school or 2) college? Reply with 1 or 2.');
  $activity->inputs = array('start');
  $activity->outputs = array('ask_school_state');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_school_state';
  $activity->title = 'Ask the user what state they\'re in.';
  $activity->question = t('2/3 What state is your school in? Reply with the 2 letter abbreviation (ex: NY)');
  $activity->inputs = array('ask_school_level');
  $activity->outputs = array('ask_school_name');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_school_name';
  $activity->title = 'Ask the user the name of their school.';
  $activity->question = t('3/3 Last question before we look up your school. What\'s the name of your school?');
  $activity->inputs = array('ask_school_state');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->title = 'Remove the user\'s message signature crap at the end of their reply.';
  $activity->inputs = array('ask_school_name');
  $activity->outputs = array('school_search');

  $activity = $workflow->newActivity('sms_flow_school_search');
  $activity->name = 'school_search';
  $activity->title = 'Lookup the school based on the user supplied info.';
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('check_account_exists', 'end');

  $activity = $workflow->newActivity('sms_check_account_exists');
  $activity->name = 'check_account_exists';
  $activity->title = 'Check that the user exsists.';
  $activity->inputs = array('school_search');
  $activity->outputs = array('account_exists', 'no_account_exists');

  $activity = $workflow->newActivity('activity');
  $activity->name = 'account_exists';
  $activity->title = 'User exsists by cell.';
  $activity->inputs = array('check_account_exists');
  $activity->outputs = array('create_drive');

  $activity = $workflow->newActivity('activity');
  $activity->name = 'no_account_exists';
  $activity->title = 'No user exsists by supplied cell.';
  $activity->inputs = array('check_account_exists');
  $activity->outputs = array('ask_email');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_email';
  $activity->title = 'Ask user for their email address.';
  $activity->question = t('Cool, let\'s get started with adding you to the school\'s drive. What\'s your email address? We\'ll need it to contact you with details about your drive.');
  $activity->inputs = array('no_account_exists');
  $activity->outputs = array('ask_first_name');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_first_name';
  $activity->title = 'What is the user\'s first name?.';
  $activity->question = t('One last question - what\'s your first name?');
  $activity->inputs = array('ask_email');
  $activity->outputs = array('strip_signature_2');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature_2';
  $activity->title = 'Remove the user\'s message signature crap at the end of their reply.';
  $activity->inputs = array('ask_first_name');
  $activity->outputs = array('create_account');

  $activity = $workflow->newActivity('sms_flow_create_account');
  $activity->name = 'create_account';
  $activity->title = 'Create the new user account.';
  $activity->inputs = array('strip_signature_2');
  $activity->outputs = array('create_drive');
 
  $activity = $workflow->newActivity('sms_create_drive');
  $activity->name = 'create_drive';
  $activity->title = 'Create a new drive at the user\'s school.';
  $activity->inputs = array('account_exists', 'create_account');
  $activity->outputs = array('strip_signature_3', 'end');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature_3';
  $activity->inputs = array('create_drive');
  $activity->outputs = array('ftaf_process');

  $activity = $workflow->newActivity('sms_flow_ftaf');
  $activity->name = 'ftaf_process';
  $activity->alpha_optin = 131891;
  $activity->beta_optin = 129751;
  $activity->response_success = t('We\'ve sent along invites to your friends. Reply back with TFJINVITE if you want to invite more.');
  $activity->response_fail = t('Sorry, we didn\'t understand your last response. To invite ppl to your drive again, text TFJINVITE.');
  $activity->inputs = array('strip_signature_3');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('ftaf_process', 'create_drive', 'school_search');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_drives_invite workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_drives_invite';
  $workflow->title = 'SMS Flow Drives Invite';
  $workflow->description = 'Workflow for invitees of a drive invite';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('drive_invite_response');

  $activity = $workflow->newActivity('sms_flow_drive_invite_response');
  $activity->name = 'drive_invite_response';
  $activity->title = 'Process user rejection or acceptance of the invite';
  $activity->accept_responses = array('y','yes','yea','ya','tfjjoin','tfj join');
  $activity->invite_rejected_message = t('No prob. You\'re not getting added into the drive. If you want to join in the future, text back TFJJOIN.');
  $activity->inputs = array('start');
  $activity->outputs = array('check_account_exists', 'end');

  $activity = $workflow->newActivity('sms_check_account_exists');
  $activity->name = 'check_account_exists';
  $activity->inputs = array('drive_invite_response');
  $activity->outputs = array('account_exists', 'no_account_exists');

  $activity = $workflow->newActivity('activity');
  $activity->name = 'account_exists';
  $activity->inputs = array('check_account_exists');
  $activity->outputs = array('process_beta');

  $activity = $workflow->newActivity('activity');
  $activity->name = 'no_account_exists';
  $activity->inputs = array('check_account_exists');
  $activity->outputs = array('ask_first_name');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_first_name';
  $activity->title = 'Ask Name';
  $activity->question = t('Awesome! Reply with ur first name and we\'ll set u up with a login for our website where you can learn more about the drive details and about DoSomething.org');
  $activity->inputs = array('no_account_exists');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->inputs = array('ask_first_name');
  $activity->outputs = array('create_account');

  $activity = $workflow->newActivity('sms_flow_create_account');
  $activity->name = 'create_account';
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('process_beta');

  $activity = $workflow->newActivity('sms_flow_drives_invited_beta');
  $activity->name = 'process_beta';
  $activity->title = 'Process Drive Betas';
  $activity->alpha_campaign_id = 99961;
  $activity->inputs = array('account_exists', 'create_account');
  $activity->outputs = array('ftaf_prompt');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ftaf_prompt';
  $activity->question = t('Amazing! Last year we collected over a million pairs. Text us your friends numbers to invite them to join your drive.');
  $activity->inputs = array('process_beta');
  $activity->outputs = array('ftaf_process');

  $activity = $workflow->newActivity('sms_flow_ftaf');
  $activity->name = 'ftaf_process';
  $activity->title = 'Forward to a Friend';
  $activity->alpha_optin = 131891;
  $activity->beta_optin = 129751;
  $activity->response_success = t('We\'ve sent along invites to your friends. Reply back with TFJINVITE if you want to invite more.');
  $activity->response_fail = t('Sorry, we didn\'t understand your last response. To join the drive again, text TFJJOIN. To invite ppl to ur drive, text TFJINVITE.');
  $activity->inputs = array('ftaf_prompt');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('drive_invite_response', 'ftaf_process');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_ftaf workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_ftaf';
  $workflow->title = 'Forward to a Friend';
  $workflow->description = 'Custom forward to a friend workflow';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('ftaf_prompt');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ftaf_prompt';
  $activity->title = 'Start prompt for FTAF';
  $activity->question = t('Awesome! All you need to do is text us your friends cell phone numbers and we\'ll invite then to participate in your Teens for Jeans drive.');
  $activity->inputs = array('start');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->title = 'Strip Signature';
  $activity->inputs = array('ftaf_prompt');
  $activity->outputs = array('ftaf_process');

  $activity = $workflow->newActivity('sms_flow_ftaf');
  $activity->name = 'ftaf_process';
  $activity->title = 'Forward to a Friend';
  $activity->alpha_optin = 131891;
  $activity->beta_optin = 129751;
  $activity->response_fail = t('Sorry, we didn\'t understand your last response. To try again, reply back with TFJINVITE.');
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('ftaf_process');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_alcoa_report_back workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_alcoa_report_back';
  $workflow->title = '50 Cans Report Back';
  $workflow->description = 'Submits the 50 Cans report back';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->title = 'Strip Signature';
  $activity->inputs = array('start');
  $activity->outputs = array('50cans_report_back');

  $activity = $workflow->newActivity('50cans_report_back');
  $activity->name = '50cans_report_back';
  $activity->title = '50 Cans Report Back';
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('50cans_report_back');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_beta_campaign_report_back workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_beta_campaign_report_back';
  $workflow->title = 'Beta Campaign Report Back';
  $workflow->description = 'Submits the report back for use with the Cleanup (beta) campaign';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('ask_trash_pickup');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_trash_pickup';
  $activity->question = t('How many pieces of trash did you pick up?');
  $activity->inputs = array('start');
  $activity->outputs = array('ask_people_involved');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_people_involved';
  $activity->question = t('How many people were involved?');
  $activity->inputs = array('ask_trash_pickup');
  $activity->outputs = array('ask_zip');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_zip';
  $activity->question = t('What zip code did you clean up?');
  $activity->inputs = array('ask_people_involved');
  $activity->outputs = array('ask_picture');

  $activity = $workflow->newActivity('mms_prompt');
  $activity->name = 'ask_picture';
  $activity->question = t('Send us a picture of what you did!');
  $activity->inputs = array('ask_zip');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->inputs = array('ask_picture');
  $activity->outputs = array('submit');

  $activity = $workflow->newActivity('beta_campaign_report_back');
  $activity->name = 'submit';
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('submit');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_clubs_invite workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_clubs_invite';
  $workflow->title = 'SMS Flow Clubs Invite';
  $workflow->description = 'Workflow for invitees of a Clubs invite';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('clubs_invite_response');

  $activity = $workflow->newActivity('sms_flow_clubs_invite_response');
  $activity->name = 'clubs_invite_response';
  $activity->title = 'Handle beta\'s approval or denial of invitation.';
  $activity->accept_responses = array('y','yes','yea','ya','yeah','cjoin', 'c join');
  $activity->invite_rejected_message = t('No prob. You won\'t be added to the club. If you want to join in the future, text back CJOIN.');
  $activity->inputs = array('start');
  $activity->outputs = array('clubs_process_beta', 'ask_name', 'end');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ask_name';
  $activity->title = 'Ask Name';
  $activity->question = t('Awesome! Reply with ur first name and we\'ll set u up with a login for our website where you can learn more about your club and about DoSomething.org');
  $activity->inputs = array('clubs_invite_response');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->title = 'Strip Signature';
  $activity->inputs = array('ask_name');
  $activity->outputs = array('clubs_process_beta');

  $activity = $workflow->newActivity('sms_flow_clubs_invited_beta');
  $activity->name = 'clubs_process_beta';
  $activity->title = 'Process Clubs Betas';
  $activity->alpha_campaign_id = 99961;
  $activity->inputs = array('clubs_invite_response', 'strip_signature');
  $activity->outputs = array('ftaf_clubs_process');

  $activity = $workflow->newActivity('sms_flow_clubs_ftaf');
  $activity->name = 'ftaf_clubs_process';
  $activity->title = 'Forward to a Friend';
  $activity->alpha_optin = 0;
  $activity->beta_optin = 126531;
  $activity->response_success = t('We\'ve sent along invites to your friends. Reply back with CINVITE if you want to invite more.');
  $activity->response_fail = t('Sorry, we didn\'t understand that. To join the club again, text CJOIN. To invite ppl to ur club, text CINVITE.');
  $activity->inputs = array('clubs_process_beta');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('clubs_invite_response', 'ftaf_clubs_process');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_clubs_ftaf workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_clubs_ftaf';
  $workflow->title = 'Forward to a Friend Clubs Style';
  $workflow->description = 'Custom forward to a friend workflow';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('ftaf_prompt');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'ftaf_prompt';
  $activity->title = 'Start prompt for FTAF';
  $activity->question = t('Awesome! All you need to do is text us back a bunch of your friends\' cell phone numbers and we\'ll invite then to participate in your Club.');
  $activity->inputs = array('start');
  $activity->outputs = array('strip_signature');

  $activity = $workflow->newActivity('sms_strip_signature');
  $activity->name = 'strip_signature';
  $activity->title = 'Strip Signature';
  $activity->inputs = array('ftaf_prompt');
  $activity->outputs = array('ftaf_clubs_process');

  $activity = $workflow->newActivity('sms_flow_clubs_ftaf');
  $activity->name = 'ftaf_clubs_process';
  $activity->title = 'Forward to a Friend';
  $activity->alpha_optin = 0;
  $activity->beta_optin = 126531;
  $activity->response_success = t('We\'ve sent along invites to your friends. Reply back with CINVITE if you want to invite more.');
  $activity->response_fail = t('Sorry, we didn\'t understand your last response. To join the club again, text CJOIN. To invite ppl to ur club, text CINVITE.');
  $activity->inputs = array('strip_signature');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('ftaf_clubs_process');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

 //
  // sms_flow_clubs_survey workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_clubs_survey';
  $workflow->title = 'SMS Flow Clubs Survey';
  $workflow->description = 'Workflow for clubs servey which leads to T-shirt form.';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('clubs_survey_response');

  $activity = $workflow->newActivity('sms_flow_clubs_survey_response');
  $activity->name = 'clubs_survey_response';
  $activity->title = 'Handle club leader first response';
  $activity->accept_responses = array('y','yes','yea','ya','yeah');
  $activity->deny_responses = array('n', 'no', 'nope', 'nah', 'na');
  $activity->rejected_message = t('No prob. Thanks for your interest in DoSomething.org.');
  $activity->inputs = array('start');
  $activity->outputs = array('process_next_answer', 'end');

  $activity = $workflow->newActivity('sms_flow_clubs_survey_question2');
  $activity->name = 'process_next_answer';
  $activity->title = 'Process first question answer.';
  $activity->answers = array('a', 'b', 'c', 'd');
  $activity->reject_message = t("Please give us some time and we'll get back to you.  - Crystal, DoSomething.org");
  $activity->inputs = array('clubs_survey_response');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('clubs_survey_response', 'process_question2');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_clubs_survey workflow
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_clubs_followup_survey';
  $workflow->title = 'SMS Flow Clubs Followup Survey';
  $workflow->description = 'Workflow for clubs follow-up survey.';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->title = 'Start';
  $activity->inputs = array();
  $activity->outputs = array('clubs_survey_followup_response');

  $activity = $workflow->newActivity('sms_flow_clubs_followup_survey_response');
  $activity->name = 'clubs_survey_followup_response';
  $activity->title = 'Handle club leader first response';
  $activity->accept_responses = array('y','yes','yea','ya','yeah','ok','okay');
  $activity->deny_responses = array('n', 'no', 'nope', 'nah', 'na');
  $activity->rejected_message = t('No prob. Thanks for your interest in DoSomething.org.');
  $activity->inputs = array('start');
  $activity->outputs = array('process_next_answer', 'end');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'process_next_answer';
  $activity->title = 'Are you active?';
  $activity->question = t('2. Are your active club members listed on your DoSomething.org Club Profile page? Y or N');
  $activity->inputs = array('clubs_survey_followup_response');
  $activity->outputs = array('process_club_focus');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'process_club_focus';
  $activity->title = 'Club Focus?';
  $activity->question = t('3. Does your club focus on A) general community volunteering or B) a specific cause / organization / project?');
  $activity->inputs = array('process_next_answer');
  $activity->outputs = array('process_club_focus_nest');

  $activity = $workflow->newActivity('sms_flow_clubs_followup_survey_fourth');
  $activity->name = 'process_club_focus_nest';
  $activity->title = 'Process second question answer.';
  $activity->answers = array('a', 'b');
  $activity->reject_message = t("Sorry, we couldn't understand that.  Please respond with A or B.");
  $activity->inputs = array('process_club_focus');
  $activity->outputs = array('process_clubs_last_question');

  $activity = $workflow->newActivity('sms_prompt');
  $activity->name = 'process_clubs_last_question';
  $activity->title = 'Last question';
  $activity->question = t('4. Last question, do you have any advice for other students looking to start (or join) a DS club?');
  $activity->inputs = array('process_club_focus_nest');
  $activity->outputs = array('fin');

  $activity = $workflow->newActivity('sms_flow_clubs_survey_followup_fin');
  $activity->name = 'fin';
  $activity->title = 'Fin.';
  $activity->answers = array('a', 'b', 'c', 'd');
  $activity->reject_message = t("Please give us some time and we'll get back to you.  - Crystal, DoSomething.org");
  $activity->inputs = array('process_clubs_last_question');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->title = 'End';
  $activity->inputs = array('fin');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_game_invite 
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_game_invite';
  $workflow->title = 'MLK Game Invite Friends';
  $workflow->description = 'Get phone numbers, send invites to friends, and save to sms_flow_records';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('game_invite');

  $activity = $workflow->newActivity('mlk_game_invite');
  $activity->name = 'game_invite';
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('game_invite');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_process_beta
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_process_beta';
  $workflow->title = 'MLK Process Invited Betas';
  $workflow->description = 'Send message to Alphas who invited the Betas and opt Betas into the MLK campaign.';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('mlk_process_beta');

  $activity = $workflow->newActivity('mlk_process_beta');
  $activity->name = 'mlk_process_beta';
  $activity->accept_responses = array('y','yes','yea','ya','tfjjoin','tfj join');
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('mlk_process_beta');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_invite_path_1
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_invite_path_1';
  $workflow->title = 'MLK Invite Path 1';
  $workflow->description = 'MLK Invite Path 1';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('mlk_alpha_invite');

  $activity = $workflow->newActivity('mlk_alpha_invite');
  $activity->name = 'mlk_alpha_invite';
  $activity->alpha_optin = 140771;
  $activity->beta_optin = 140781;
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('mlk_alpha_invite');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_invite_path_2
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_invite_path_2';
  $workflow->title = 'MLK Invite Path 2';
  $workflow->description = 'MLK Invite Path 2';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('mlk_alpha_invite');

  $activity = $workflow->newActivity('mlk_alpha_invite');
  $activity->name = 'mlk_alpha_invite';
  $activity->alpha_optin = 140831;
  $activity->beta_optin = 140841;
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('mlk_alpha_invite');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_invite_path_3
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_invite_path_3';
  $workflow->title = 'MLK Invite Path 3';
  $workflow->description = 'MLK Invite Path 3';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('mlk_alpha_invite');

  $activity = $workflow->newActivity('mlk_alpha_invite');
  $activity->name = 'mlk_alpha_invite';
  $activity->alpha_optin = 140861;
  $activity->beta_optin = 140871;
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('mlk_alpha_invite');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  //
  // sms_flow_mlk_invite_path_3
  //
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'sms_flow_mlk_invite_path_3';
  $workflow->title = 'MLK Invite Path 3';
  $workflow->description = 'MLK Invite Path 3';
  $workflow->api_version = '1.0';

  $activity = $workflow->newActivity('start');
  $activity->name = 'start';
  $activity->inputs = array();
  $activity->outputs = array('mlk_alpha_invite');

  $activity = $workflow->newActivity('mlk_alpha_invite');
  $activity->name = 'mlk_alpha_invite';
  $activity->alpha_optin = 140891;
  $activity->beta_optin = 140901;
  $activity->inputs = array('start');
  $activity->outputs = array('end');

  $activity = $workflow->newActivity('end');
  $activity->name = 'end';
  $activity->inputs = array('mlk_alpha_invite');
  $activity->outputs = array();

  $workflows[$workflow->name] = $workflow;

  return $workflows;
}

function sms_flow_team_invite_form($form, &$form_state, $gid) {
  $form['alpha'] = array(
    '#type' => 'textfield',
    '#title' => 'Your Cell Number:',
    '#size' => 16,
  );

  $form['beta0'] = array(
    '#type' => 'textfield',
    '#title' => 'Friends\' Cell Numbers:',
    '#size' => 16,
  );
  $form['beta1'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta2'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta3'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );
  $form['beta4'] = array(
    '#type' => 'textfield',
    '#size' => 16,
  );

  $form['invite-gid'] = array(
    '#type' => 'hidden',
    '#default_value' => $gid,
    '#value' => $gid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invite',
  );

  return $form;
}

function sms_flow_team_invite_form_submit($form, &$form_state) {
  global $user;
  $profile = profile2_load_by_user($user, 'main');
  if ($profile) {
    $inviter = $profile->field_user_first_name[LANGUAGE_NONE][0]['value'];
  }

  if (empty($inviter)) {
    $inviter = $form_state['values']['alpha'];
  }

  $alpha_mobile = $form_state['values']['alpha'];
  $beta_numbers = array();
  for ($i = 0; $i < 5; $i++) {
    $element_name = 'beta' . $i;
    if (!empty($form_state['values'][$element_name])) {
      $beta_numbers[] = $form_state['values'][$element_name];
    }
  }

  $invite_gid = $form_state['values']['invite-gid'];
  // TODO: sms_flow_start expects NID value to be here. Might want to consider modifying that
  $form_state['values']['details']['nid'] = $invite_gid;

  if (count($beta_numbers) > 0) {
    // TODO: opt in paths are hardcoded for TFJ
    sms_flow_start($alpha_mobile, 131891, 129751, $beta_numbers, $form_state['values'], array(
        'tfj2013_inviter' => $inviter,
        'drives_invite_gid' => $invite_gid,
      )
    );
  }

}

/**
 * Get user account from cell number.
 * find_user_by_cell() doesn't handle international code when searching by profile's
 * field_user_mobile value. Only handles international code with an @mobile email address
 */
function _sms_flow_find_user_by_cell($mobile) {
  $account = dosomething_general_find_user_by_cell($mobile);
  if (!$account && strlen($mobile) > 10) {
    $mobile = substr($mobile, -10);
    $account = dosomething_general_find_user_by_cell($mobile);
  }

  return $account;
}
