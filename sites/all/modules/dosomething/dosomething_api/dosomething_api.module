<?php

/**
 * @file
 * The DoSomething API is a library that connects with DoSomething.org's datastore.
 * Functions within this library allow us to connect with users' information, posts,
 * comments, articles, etc.
 *
 * @author Michael Chittenden (mchittenden@dosomething.org)
 */

/**
 * Implements hook_libraries_info().
 */
function dosomething_api_libraries_info() {
  $libraries['dsapi'] = array(
    'name' => 'DSAPI PHP',
    'vendor url' => 'https://github.com/DoSomething/dsapi-php',
    'download url' => 'https://github.com/DoSomething/dsapi-php/archive/master.zip',
    'path' => 'lib',
    'files' => array(
      'php' => array(
        'DSAPI.php'
      ),
    ),
    'version' => 1
  );

  return $libraries;
}

/**
 *  Log in a user.  Assuming $e_or_c is a valid email or cell phone
 *  number of a DoSomething.org member:
 *  @code
 *    dosomething_api_user_log_in('email@dosomething.org');
 *  @endcode
 *
 *  @param string $name
 *    The person's first name.
 *
 *  @param string $contact
 *    The email or cell phone number of the person.
 *
 *  @param string $password
 *    The user's password.
 *
 *  @param array $addons
 *    An (optional) array of arrays, with the following standard:
 *      - 'user' => a key/value array where the key is a valid user field name, and the value is the value.
 *      - 'profile' => a key/value array where the key is a valid profile field name, and the value is the value.
 *
 *  @param array $buckets
 *    (Optional) array of buckets for MailChimp / Mobile Commons integration.
 */
function dosomething_api_create_or_log_in_user($name = '', $contact = '', $password = '', $buckets = array('email' => '', 'mobile' => ''), $addons = array()) {
  // Only run this if a user is not logged in.
  if (user_is_logged_in()) {
    return;
  }

  $account = dosomething_api_user_log_in($contact, 0, array(), $addons);

  if (empty($account)) {
    $u = array(
      'name' => $name,
      'password' => $password
    );

    if (valid_email_address($contact)) {
      $u['email'] = $contact;
    }
    elseif (dosomething_general_valid_cell($contact)) {
      $u['mobile'] = $contact;
    }

    $account = dosomething_api_user_create($u);

    if (!empty($account)) {
      // Run these *after* we know a user was successfully created.
      if (isset($u['email']) && !empty($buckets['email'])) {
        dosomething_subscribe_mailchimp_signup($u['email'], $buckets['email']);
      }
      elseif (isset($u['mobile']) && !empty($buckets['mobile'])) {
        dosomething_general_mobile_commons_subscribe($u['mobile'], $buckets['mobile']);
      }

      dosomething_api_user_log_in($contact);
    }
  }
}

/**
 *  Log in a user.
 *
 *  @param string $e_or_c
 *    A user's email or cell.  Will check against a formatted (e.g. with dashes)
 *    and unformatted version of a mobile number, if appropriate.
 *
 *  @param int $uid
 *    (Optional) The user ID belonging to the account in question.
 *
 *  @param object $account
 *    If available, the account object for the user.  If unspecified, will get the
 *    object from dosomething_api_user_lookup() function.
 *
 *  @param array $addons
 *    An (optional) array of arrays, with the following standard:
 *      - 'user' => a key/value array where the key is a valid user field name, and the value is the value.
 *      - 'profile' => a key/value array where the key is a valid profile field name, and the value is the value.
 *
 *  @see dosomething_api_user_lookup()
 */
function dosomething_api_user_log_in($e_or_c, $uid = 0, $account = array(), $addons = array()) {
  if (!$uid) {
    $account = dosomething_api_user_lookup($e_or_c);
  }
  elseif ($uid > 0) {
    $account->uid = $uid;
  }

  if (!empty($account)) {
    if (!empty($addons)) {
      dosomething_api_member_update($addons, $account);
    }

  	$u = array('uid' => $account->uid);
  	user_login_submit(array(), $u);
  }

  return $account;
}

/**
 * Load up the related user given and email or cell phone value.
 *
 * @param $value
 *   An email or cell phone value.
 * @return
 *  Either FALSE or the loaded user account.
 */
function dosomething_api_user_lookup($value) {
  $account = FALSE;
  if (valid_email_address($value)) {
    $account = user_load_by_mail($value);
  }
  else if ($number = dosomething_general_clean_cell_number($value)) {
    $account = dosomething_general_find_user_by_cell($number);
  }
  return $account;
}

function dosomething_api_user_fetch_data($data = array('account' => array(), 'profile' => array())) {
  global $user;
  if (!$user->uid) {
    return FALSE;
  }

  $return = array();
  if (isset($data['account'])) {
    foreach ($data['account'] AS $field) {
      if (isset($user->{$field})) {
        $return[$field] = $user->{$field};
      }
    }
  }
  if (isset($data['profile'])) {
    $p = profile2_load_by_user($user, 'main');
    foreach ($data['profile'] AS $field => $alias) {
      if (isset($p->{$field}[LANGUAGE_NONE][0]['value'])) {
        $return[($alias ? $alias : $field)] = $p->{$field}[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  return $return;
}

/**
 *  Creates a user and corresponding profile, and returns it.
 *
 *  @param array $info
 *    Name: String, Email: String, Mobie: String
 *    Roles: Array of role names.
 *
 *  @return object $account
 *    A new user with new profile2 main profile.
 *
 */
function dosomething_api_user_create($info = array('name' => '', 'email' => '', 'mobile' => '', 'first_name' => '', 'roles' => array())) {
  // Start the account class.
  $account = new stdClass;

  // If we don't have a name, default to "Guest user"
  if (empty($info['name'])) {
    $info['name'] = t('Guest user');
  }

  $suffix = 0;
  $account->name = $info['name'];
  // If we can find users with that exact name, append a number to the end.
  while (user_load_by_name($account->name)) {
     $suffix++;
     $account->name = $info['name'] . '-' . $suffix;
  }

  // Create a random password for the user.
  if (!isset($info['password'])) {
    $pass = user_password(6);
  }
  else {
    $pass = $info['password'];
  }
  require_once(DRUPAL_ROOT . '/includes/password.inc');
  $hashed_pass = user_hash_password($pass);
  $account->pass = $hashed_pass;

  // Set the email address (or "fake" email for mobile)
  $account->mail = (!empty($info['email']) ? $info['email'] : $info['mobile'] . '@mobile');
  // The user account is activated.
  $account->status = 1;

  // If roles are present:
  if (!empty($info['roles']) && is_array($info['roles'])) {
    $user_roles = array();
    // For each given role_name:
    foreach ($info['roles'] as $role_name) {
      // Find the role rid.
      $role = user_role_load_by_name($role_name);
      if ($role) {
        $user_roles[$role->rid] = $role_name;
      }
    }
    // If roles were found, set them to the user:
    if (!empty($user_roles)) {
      $account->roles = $user_roles;
    }
  }

  // Save the user.
  $account = user_save($account);

  // Load a profile object for the user.
  $profile_values = array('type' => 'main');
  $profile = profile2_create($profile_values);
  $profile->uid = $account->uid;

  // If we have the user's phone number, set that.
  if (!empty($info['mobile'])) {
    $profile->field_user_mobile[LANGUAGE_NONE][0]['value'] = $info['mobile'];
  }
  // If they have a real first name, set that.
  if (!empty($info['first_name']) && $info['first_name'] != 'Guest user' && $info['first_name'] != $info['mobile']) {
    $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $info['first_name'];
  }
  elseif ($info['name'] != 'Guest user' && $info['name'] != $info['mobile']) {
    $profile->field_user_first_name[LANGUAGE_NONE][0]['value'] = $info['name'];
  }

  // Try and save the profile and set a message that we did so...
  try {
    profile2_save($profile);
    watchdog('Api', t('A user was successfully created with the email / cell ' . ($info['email'] ? $info['email'] : $info['mobile'])));
  }
  // ...or throw an exception saying we failed.
  catch (Exception $e) {
    throw new Exception(t('Sorry, there was a problem creating the account.'));
  }

  // Set the profile object as a sub-object of user.
  $account->profile = $profile;
  $account->pass_raw = $pass;

  return $account;
}

/**
 *  Checks whether a password for a given user is a valid password.
 *
 *  @param string $contact
 *    Either the email or the cell phone # of the account in question.
 *
 *  @param string $password
 *    The proposed password for that account.
 *
 *  @return bool
 *    True if the password is correct, else false.
 */
function dosomething_api_valid_password($contact, $password) {
  require_once DRUPAL_ROOT . '/includes/password.inc';
  if ($account = dosomething_api_user_lookup($contact)) {
    if (!user_check_password($password, $account)) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }

  return TRUE;
}

/**
 * Updates member information.
 *
 * @param array $data
 *   An array of arrays with the following combinations:
 *     'user' => An array of user object information that could / should be changed.
 *     'profile' => An array of user profile information that could / should be changed.
 */
function dosomething_api_member_update($data = array('user' => array(), 'profile' => array()), $account = null) {
  if (!$account) {
    global $user;
  }
  else {
    $user = $account;
  }

  $user_changes = $profile_changes = FALSE;
  if (isset($data['user']) && !empty($data['user']) && is_array($data['user'])) {
    foreach ($data['user'] as $field => $val) {
      if (isset($user->{$field}) && ($user->{$field} != $val)) {
        $user->{$field} = $val;
        $user_changes = TRUE;
      }
    }

    if ($user_changes === TRUE) {
      user_save($user);
    }
  }

  if (isset($data['profile']) && !empty($data['profile']) && is_array($data['profile'])) {
    $profile = profile2_load_by_user($user, 'main');
    foreach ($data['profile'] as $field => $val) {
      $field = 'field_user_' . $field;
      if (isset($profile->{$field}[LANGUAGE_NONE][0]['value']) && ($profile->{$field}[LANGUAGE_NONE][0]['value'] != $val)) {
        $profile->{$field}[LANGUAGE_NONE][0]['value'] = $val;
        $profile_changes = TRUE;
      }
      elseif (!isset($profile->{$field}[LANGUAGE_NONE][0]['value'])) {
        $profile->{$field}[LANGUAGE_NONE][0]['value'] = $val;
        $profile_changes = TRUE;
      }
    }

    if ($profile_changes === TRUE) {
      profile2_save($profile);
    }
  }
}
