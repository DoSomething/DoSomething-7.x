<?php

/**
 * Vocabulary id of issues vocabulary.
 */
define('DS_MENU_ISSUES_VID', 5);
define('DS_MENU_ALL_CAUSES_LINK', 'cause');
define('DS_MENU_TAXONOMY_MENU_CID', 'ds_menu_taxonomy_listing_');

/**
 * Implements hook_theme().
 */
function dosomething_menu_theme() {
  return array(
    'dosomething_menu_taxonomy_listing' => array(
      'arguments' => array(
        'tree' => NULL,
        'term' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function dosomething_menu_preprocess_page(&$variables) {
  $tree = dosomething_menu_get_heirarchical_taxonomy_listing(DS_MENU_ISSUES_VID);
  $params = array('tree' => $tree);
  $term = FALSE;

  // We need to know if we are on an issues page.
  if ($term = menu_get_object('taxonomy_term', 2)) {
    if ($term->vid == DS_MENU_ISSUES_VID) {
      $params['term'] = $term;
    }
  }

  $variables['secondary_menu_items'] = dosomething_menu_secondary_links($variables, $term);
  $variables['causes_dropdown_menu'] = theme('dosomething_menu_taxonomy_listing', $params);

  // TODO: Add this as a library or something else for reuse.
  drupal_add_js(drupal_get_path('module', 'dosomething_menu') . '/js/jquery.hoverIntent.minified.js');
  drupal_add_js(drupal_get_path('module', 'dosomething_menu') . '/js/ds-main-menu.js');
}

/**
 * Get the secondary links for all possible main menu links.
 *  This is used to build html for all hidden and shown
 *  secondary links.
 */
function dosomething_menu_secondary_links($variables, $term) {
  $secondary_menu_items = dosomething_menu_navigation_links('main-menu', $term);
  if (count($secondary_menu_items)) {
    foreach ($secondary_menu_items as $mlid => &$links) {
      $links['attributes']['class'][] = 'links';
      $links['attributes']['class'][] = $mlid;

      // Make sure proper classes are set on active secondary menu items.
      if (isset($variables['main_menu'][$mlid . ' active-trail'])) {
        foreach ($links['links'] as $second_mlid => &$second_link) {
          $key = isset($variables['secondary_menu'][$second_mlid . ' active-trail']) ? $second_mlid . ' active-trail' : $second_mlid;
          $classes = $second_link['attributes']['class'];
          if (isset($variables['secondary_menu'][$key]['attributes']['class'])) {
            $classes = array_merge($second_link['attributes']['class'], $variables['secondary_menu'][$key]['attributes']['class']);
          }
          $variables['secondary_menu'][$key]['attributes']['class'] = $classes;
        }
        $links['links'] = $variables['secondary_menu'];
        $links['attributes']['class'][] = 'active';
      }
      // Make sure the causes page is set as active on taxonomy pages.
      else if ($term && strpos($mlid, 'active-trail') !== FALSE) {
        $links['attributes']['class'][] = 'active';
      }
      else {
        $links['attributes']['class'][] = 'hidden';
      }
    }
  }
  return $secondary_menu_items;
}

/**
 * Return an array of links for a navigation menu.
 *  Note that this is specifc for level 2.
 *
 * @param $menu_name
 *   The name of the menu.
 *
 * @param $term
 *  Whether or not this is a taxonomy term page.
 *
 * @return
 *   An array of links of the specified menu.
 */
function dosomething_menu_navigation_links($menu_name, $term = FALSE) {
  // Don't even bother querying the menu table if no menu is specified.
  if (empty($menu_name)) {
    return array();
  }

  // Get the menu hierarchy for the current page.
  $mlids = array();

  $main_tree = menu_build_tree($menu_name);
  $router_item = menu_get_item();
  $links = array();
  foreach ($main_tree as $tree) {
    if (!empty($tree['below'])) {
      $count = 0;
      foreach ($tree['below'] as $item) {
        if (!$item['link']['hidden']) {
          $class = '';
          $l = $item['link']['localized_options'];
          $l['href'] = $item['link']['href'];
          $l['title'] = $item['link']['title'];
          if ($item['link']['in_active_trail']) {
            $class = ' active-trail';
            $l['attributes']['class'][] = 'active-trail';
          }
          // Normally, l() compares the href of every link with $_GET['q'] and sets
          // the active class accordingly. But local tasks do not appear in menu
          // trees, so if the current path is a local task, and this link is its
          // tab root, then we have to set the class manually.
          if ($item['link']['href'] == $router_item['tab_root_href'] && $item['link']['href'] != $_GET['q']) {
            $l['attributes']['class'][] = 'active';
          }

          // If this is a taxonomy page, then we set the active-trail
          // to the causes menu. We also need to set the trigger for the
          // dropdown.
          if ($item['link']['href'] == DS_MENU_ALL_CAUSES_LINK) {
            $l['attributes']['class'][] = 'causes-dropdown-trigger';
            if ($term) {
              $l['attributes']['class'][] = 'active-trail';
              $l['attributes']['class'][] = 'active';
              $class = ' active-trail';
            }
          }

          // Keyed with the unique mlid to generate classes in theme_links().
          $l['attributes']['class'][] = 'main-menu-parent-' . $tree['link']['mlid'];
          $l['attributes']['class'][] = 'secondary-menu-item-' . $count;
          $links['menu-' . $tree['link']['mlid'] . $class]['links']['menu-' . $item['link']['mlid'] . $class] = $l;
        }
        $count++;
      }
    }
  }
  return $links;
}

/**
 * Build a heirarchical listing of taxonomy items.
 *  Will only work for 2 level with strict parent child relationships.
 *  ie terms exist only within one level.
 */
function dosomething_menu_get_heirarchical_taxonomy_listing($vid) {
  $cid = DS_MENU_TAXONOMY_MENU_CID . $vid;
  $cache = cache_get($cid);
  if ($cache && isset($cache->data)) {
    return $cache->data;
  }
  $tree = array();
  $taxonomy_tree = taxonomy_get_tree($vid);
  foreach ($taxonomy_tree as $term) {
    foreach ($term->parents as $parent_id) {
      if ($parent_id) {
        if (!isset($tree[$parent_id])) {
          $tree[$parent_id] = array();
          $tree[$parent_id]['children'] = array();
        }
        $tree[$parent_id]['children'][$term->tid]['data'] = l(check_plain($term->name), 'taxonomy/term/' . $term->tid);
        $tree[$parent_id]['children'][$term->tid]['class'] = array('causes-menu-dropdown-level-2');
      }
      else if (!isset($tree[$term->tid]->tid)) {
        $children = isset($tree[$term->tid]['children']) ? $tree[$term->tid]['children'] : array();
        $tree[$term->tid]['data'] = l(check_plain($term->name), 'taxonomy/term/' . $term->tid);
        $tree[$term->tid]['children'] = $children;
        $tree[$term->tid]['class'] = array('causes-menu-dropdown-level-1');
      }
    }
  }
  cache_set($cid, $tree);
  return $tree;
}

/**
 * Theme function for rendering a multi-level taxonomy list.
 */
function theme_dosomething_menu_taxonomy_listing($variables) {
  $tree = $variables['tree'];
  $term = isset($variables['term']) ? $variables['term'] : NULL;

  // If this is a taxonomy page, then the menu should have
  // the parent at the top and then all of its children.
  // Otherwise we just show all of the parent items.
  if (is_null($term)) {
    foreach ($tree as &$item) {
      unset($item['children']);
    }
  }
  else {
   $title = '';
    if (isset($tree[$term->tid])) {
      $parent_id = $term->tid;
    }
    else {
      foreach ($tree as $tid => &$children) {
        if (isset($children['children'][$term->tid])) {
          $children['children'][$term->tid]['class'][] = 'active';
          $parent_id = $tid;
          break;
        }
      }
    }
    if (isset($parent_id)) {
      $tree[$parent_id]['class'][] = 'active';
      $tree = array($tree[$parent_id]);
    }
    else {
      foreach ($tree as $item) {
        unset($tree['children']);
      }
    }
  }

  $attributes = array(
    'id' => 'causes-menu-dropdown',
  );
  $items = array(
    '#theme' => 'item_list',
    '#items' => $tree,
    '#attributes' => $attributes,
  );
  return $items;
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function dosomething_menu_taxonomy_term_presave($term) {
  // Clear the taxonomy menu cache.
  cache_clear_all(DS_MENU_TAXONOMY_MENU_CID . $term->vid, 'cache');
}

/**
 * Implements hook_taxonomy_vocabulary_presave().
 */
function dosomething_menu_taxonomy_vocabulary_presave($vocabulary) {
  // Clear the taxonomy menu cache.
  cache_clear_all(DS_MENU_TAXONOMY_MENU_CID . $vocabulary->vid, 'cache');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dosomething_menu_form_taxonomy_overview_terms_alter(&$form, &$form_state) {
  $form['#submit'][] = 'dosomething_menu_taxonomy_overview_terms_submit';
}

/**
 * Submission callback for taxonomy_overview_terms form.
 */
function dosomething_menu_taxonomy_overview_terms_submit($form, &$form_state) {
  // Clear the taxonomy menu cache.
  if ($form_state['triggering_element']['#value'] == t('Reset to alphabetical')) {
    // Execute the reset action.
    if ($form_state['values']['reset_alphabetical'] === TRUE) {
      cache_clear_all(DS_MENU_TAXONOMY_MENU_CID . $form_state['values']['vid'], 'cache');
    }
  }
  else {
  $vocabulary = $form['#vocabulary'];
    cache_clear_all(DS_MENU_TAXONOMY_MENU_CID . $vocabulary->vid, 'cache');
  }
}

