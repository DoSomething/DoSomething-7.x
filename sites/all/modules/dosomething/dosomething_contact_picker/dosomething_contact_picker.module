<?php

/**
 * Implements hook_menu()
 */
function dosomething_contact_picker_menu() {
  $items['contact-picker/%'] = array(
  	'page callback' => 'dosomething_contact_picker_portal',
  	'page arguments' => array(1),
  	'access callback' => TRUE,
  );

  $items['contact-picker/%/done'] = array(
    'page callback' => 'dosomething_contact_picker_done',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['contact-picker/service/%'] = array(
    'page callback' => 'dosomething_contact_picker_load_service',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'dosomething_contact_picker.services.inc',
  );

  $items['contact-picker/invite/%'] = array(
    'page callback' => 'dosomething_contact_picker_invite_emails',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function dosomething_contact_picker_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'dosomething_contact_picker');
  $libraries['contact_picker'] = array(
  	'title' => 'DoSomething Contact Picker',
  	'version' => '2.0',
  	'js' => array(
  		$path . '/js/dosomething_contact_picker.js' => array(),
  	),
  	'css' => array(
  		$path . '/css/dosomething_contact_picker.css' => array(),
  	),
  );

  return $libraries;
}

/**
 * Builds the portal for the contact picker.
 */
function dosomething_contact_picker_portal($nid) {
  $node = menu_get_object('node', 1, 'node/' . $nid);
  if (!isset($node->nid)) {
  	return;
  }

  if ($path = libraries_get_path('SocialApiService')) {
  	require_once $path . '/service.php';
  }

  $api = SocialApiService::getInstance();
  $thescripts = $api->getScripts();

  $scripts = '';
  foreach ($thescripts AS $script) {
    $scripts .= '<script type="text/javascript" src="/' . $path . "/$script" . '"></script>';
  }

  echo theme('contact_picker_portal', array(
    'scripts' => $scripts,
    'nid' => $node->nid,
    'type' => $node->type,
    'hash' => drupal_get_token(),
  ));
  drupal_exit();
}

/**
 * Sends emails.
 */
function dosomething_contact_picker_invite_emails($nid) {
  $hash = check_plain($_POST['hash']);

  if (!drupal_valid_token($hash)) {
    echo 'Something went wrong.  Sorry!';
    exit;
  }

  $type = check_plain($_POST['type']);
  $contacts = $_POST['emails'];

  global $user, $language;

  $emails = module_invoke_all('contact_scraper_emails');
  if (isset($emails[$type]['invited'])) {
    $e = $emails[$type]['invited'];

    foreach ($contacts AS $email) {
      if (valid_email_address(trim($email))) {
        if (isset($_SESSION['guest_user_info']) && !user_is_logged_in()) {
          $e['params']['first_name'] = $_SESSION['guest_user_info']['first_name'];
          $e['params']['last_name'] = $_SESSION['guest_user_info']['last_name'];
        }

        $e['params']['email'] = $email;
        $e['params']['email'] .= '/' . md5($email . md5('ds.org'));

        drupal_mail($e['group'], $e['email'], trim($email), $language, ($e['params'] ? $e['params'] : array()));

        // If a "store" function is set, store this node ID, user ID and email in the database.
        if (isset($e['store_function'])) {
          $e['store_function']($nid, $user->uid, $email);
        }
      }
    }
  }

  // Email the inviter
  if ($user->mail && isset($emails[$type]['inviter'])) {
    $i = $emails[$type]['inviter'];
    drupal_mail($i['group'], $i['email'], $user->mail, $language, ($i['params'] ? $i['params'] : array()));
  }

  drupal_goto('contact-picker/' . $nid . '/done');
  drupal_exit();
}

function dosomething_contact_picker_done($nid) {
  echo theme('contact_picker_done', array(
    'nid' => $nid
  ));

  drupal_exit();
}

/**
 * Implements hook_theme()
 */
function dosomething_contact_picker_theme($existing, $type, $theme, $path) {
  return array(
    'contact_picker_portal' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'contact-scraper-landing',
    ),
    'contact_picker_contacts' => array(
      'path' => $path . '/templates',
      'variable' => array(
        'contacts' => NULL,
        'close' => FALSE,
      ),
      'template' => 'contact-picker-contacts',
    ),
    'contact_picker_done' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'contact-scraper-done',
    ),
  );
}
