<?php

/**
 *  @file
 *  The DoSomething Contact Picker was originally a project designed for
 *  petitions on DoSomething.org.  Over time, it branched out into clubs and
 *  eventually become a project that was used across different products and campaigns.
 *
 *  The Contact Picker is a jQuery dialog that appears when a button is clicked, and encourages you
 *  to select your GMail or Yahoo contacts, to share what you were just looking at with them.
 *  Clicking on Gmail or Yahoo will force the user to log in / authenticate (as needed),
 *  then will reload the page with the contacts.  A user can search, select all or select
 *  individual contacts from the list.  When a user clicks the large red "Invite" button,
 *  the system sends the selected email addressed emails, as defined through hook_contact_scraper_emails()
 *
 *  The Contact Picker loads the Google and Yahoo API's through the SocialApiService library.
 *
 *  @see SocialApiService library
 *  @see hook_contact_scraper_emails() 
 *
 *  @date 3/13/13
 *  @author Michael Chittenden
 */

/**
 * Implements hook_menu()
 */
function dosomething_contact_picker_menu() {
  $items['contact-picker/%'] = array(
  	'page callback' => 'dosomething_contact_picker_portal',
  	'page arguments' => array(1),
  	'access callback' => TRUE,
  );

  $items['contact-picker/%/done'] = array(
    'page callback' => 'dosomething_contact_picker_done',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['contact-picker/service/%'] = array(
    'page callback' => 'dosomething_contact_picker_load_service',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'dosomething_contact_picker.services.inc',
  );

  $items['contact-picker/invite/%'] = array(
    'page callback' => 'dosomething_contact_picker_invite_emails',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function dosomething_contact_picker_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'dosomething_contact_picker');
  $libraries['contact_picker'] = array(
  	'title' => 'DoSomething Contact Picker',
  	'version' => '2.0',
  	'js' => array(
  		$path . '/js/dosomething_contact_picker.js' => array(),
  	),
  	'css' => array(
  		$path . '/css/dosomething_contact_picker.css' => array(),
  	),
  );

  return $libraries;
}

/**
 * Builds the portal for the contact picker.
 */
function dosomething_contact_picker_portal($nid) {
  // Load the node that we're talking about.
  $node = menu_get_object('node', 1, 'node/' . $nid);

  // Assuming it's not a real node, stop right here.
  if (!isset($node->nid)) {
  	return;
  }

  // Get the path to the library.
  if ($path = libraries_get_path('SocialApiService')) {
  	require_once $path . '/service.php';
  }
  // If no path(???), stop now.
  else {
    return;
  }

  // Load the service
  $api = SocialApiService::getInstance();
  // Get the scripts.
  $thescripts = $api->getScripts();

  // Run through the scripts array and make them into <script> tags.
  $scripts = '';
  foreach ($thescripts AS $script) {
    $scripts .= '<script type="text/javascript" src="/' . $path . "/$script" . '"></script>';
  }

  // Print the portal template.
  echo theme('contact_picker_portal', array(
    'scripts' => $scripts,
    'nid' => $node->nid,
    'type' => $node->type,
    'hash' => drupal_get_token(),
  ));
  // Stop so nothing else shows up.
  drupal_exit();
}

/**
 * Sends emails.
 */
function dosomething_contact_picker_invite_emails($nid) {
  // Get the hash from the invite form.
  $hash = check_plain($_POST['hash']);

  // If it's not a valid hash, stop!
  if (!drupal_valid_token($hash)) {
    echo 'Something went wrong.  Sorry!';
    exit;
  }

  // Get the type from the form.
  $type = check_plain($_POST['type']);

  // Get the emails from the form.
  $contacts = $_POST['emails'];

  // Stop us here if there are no contacts.
  if (empty($contacts)) {
    echo 'Please choose some contacts to email.';
    exit;
  }

  global $user, $language;

  // Get all email templates
  $emails = module_invoke_all('contact_picker_emails');
  if (isset($emails[$type]['invited'])) {
    $e = $emails[$type]['invited'];

    if (!empty($contacts) && is_array($contacts)) {
      // Loop through all emails.
      foreach ($contacts AS $email) {
        // Make sure it's a valid email..
        if (valid_email_address(trim($email))) {
          // If it's a guest, we probably don't have their name, so let's see it's in the session variables.
          if (isset($_SESSION['guest_user_info']) && !user_is_logged_in()) {
            $e['params']['first_name'] = $_SESSION['guest_user_info']['first_name'];
            $e['params']['last_name'] = $_SESSION['guest_user_info']['last_name'];
          }

          // Set some parameters...
          $e['params']['email'] = $email;
          $e['params']['email'] .= '/' . md5($email . md5('ds.org'));

          // Send the email
          drupal_mail($e['group'], $e['email'], trim($email), $language, ($e['params'] ? $e['params'] : array()));

          // If a "store" function is set, run that function with this node ID, user ID and email.
          if (isset($e['store_function'])) {
            $e['store_function']($nid, $user->uid, $email);
          }
        }
      }
    }
  }

  // Email the inviter, if applicable.
  if ($user->mail && isset($emails[$type]['inviter'])) {
    $i = $emails[$type]['inviter'];
    drupal_mail($i['group'], $i['email'], $user->mail, $language, ($i['params'] ? $i['params'] : array()));
  }

  // Redirect to "Done" page.
  drupal_goto('contact-picker/' . $nid . '/done');

  // And exit, just for good measure.
  drupal_exit();
}

/**
 *  Handles the "Done" page.  In theory this will never be seen, but in case we
 *  want to bring it back...there you go.
 *
 *  @param int $nid
 *    The node ID of the node that is being shared.
 *
 *  @return string
 *    Returns the templatized "Done" page.
 */
function dosomething_contact_picker_done($nid) {
  echo theme('contact_picker_done', array(
    'nid' => $nid
  ));

  drupal_exit();
}

/**
 * Implements hook_theme()
 */
function dosomething_contact_picker_theme($existing, $type, $theme, $path) {
  return array(
    'contact_picker_portal' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'contact-scraper-landing',
    ),
    'contact_picker_contacts' => array(
      'path' => $path . '/templates',
      'variable' => array(
        'contacts' => NULL,
        'close' => FALSE,
      ),
      'template' => 'contact-picker-contacts',
    ),
    'contact_picker_done' => array(
      'path' => $path . '/templates',
      'variables' => array(),
      'template' => 'contact-scraper-done',
    ),
  );
}

/**
 *  Defines data and structure for Contact Picker emails.
 */
function hook_contact_picker_emails() {
  /**
   *  This function needs to return a multidimensional array of email information.  The
   *  array MUST be strucuted like so:
   *
   *  array(
   *    'node-type' => array(
   *       'client_email' => array(
   *         'title' => '',           // The title of the email the user would send if they clicked "I want to use my own email client."
   *         'body' => '',            // The body of the email the user would send if they clicked "I want to use my own email client."
   *       ),
   *       'invited' => array(
   *         'group' => '',           // Used in drupal_mail(): the module that has the email you want to send.
   *         'email' => '',           // Used in drupal_mail(): the name of the email as defined in hook_mail().
   *         'params' => array(),     // Used in drupal_mail(): parameters to pass to drupal_mail()
   *         'store_function' => '',  // (Optional) a function that will store the email that is being invited, along with the UID, time, and NID
   *       ),
   *       'inviter' => array(
   *         'group' => '',           // Used in drupal_mail(): the module that has the email the INVITER should get
   *         'email' => '',           // Used in drupal_mail(): the email that the INVITER should get.
   *         'params' => array(),     // Used in drupal_mail(): parameters to pass to the email that the INVITER gets.
   *       ),
   *     ),
   *   ),
   *
   *  Return the array when finished.
   */
}
