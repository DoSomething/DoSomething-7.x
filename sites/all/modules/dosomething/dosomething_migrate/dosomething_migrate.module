<?php

/**
 * @file
 *
 */

/**
 * Implementation of hook_migrate_api().
 */
function dosomething_migrate_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

function dosomething_migrate_set_webform_types() {
  //Set webform node types.
  $types_to_add = array(
    'campaign_report_back',
    'campaign_sign_up',
    'grant_application',
    'scholarship_application',
    'project_report',
  );
  $webform_types = webform_variable_get('webform_node_types');
  foreach ($types_to_add as $type) {
    if (!in_array($type, $webform_types)) {
      $webform_types[] = $type;
    }
  }
  variable_set('webform_node_types', $webform_types);
}

/**
 * manually run the import of the webform nodes.
 */
function dosomething_migrate_regenerate_webform_nodes() {
  //Get mapping array.
  $mapping_array = dosomething_migrate_return_content_type_mapping();

  // Get the list of files from the directory. Only serialized text files.
  $files = file_scan_directory(drupal_get_path('module', 'dosomething_migrate') . '/nodes', '/\.txt$/');

  //Get the node data and save it into drupal
  foreach ($files as $file) {
    $webform = dosomething_migrate_save_webform_node($file->uri);
    //Update the mapping
    $key = array_search($webform->title, $mapping_array);
    if ($key) {
      $mapping_array[$key] = $webform->nid;
    }
  }
  //Set the variable mapping the old array types to new node ids.
  variable_set('webform_migrate_webform_mapping', $mapping_array);
}

/**
 * Regenerate a single node from a file name.
 */
function dosomething_migrate_regenerate_webform_node_from_file($filename, $directory = FALSE) {
  if (!$directory) {
    $directory = drupal_get_path('module', 'dosomething_migrate') . '/nodes';
  }
  //Get mapping array.
  $mapping_array = variable_get('webform_migrate_webform_mapping');

  // Get the file from the directory. Only serialized text files.
  $file = $directory . '/' . $filename;

  //Get the node data and save it into drupal
  $webform = dosomething_migrate_save_webform_node($file);
  //Update the mapping
  $key = substr($filename, 0, -4);
  $mapping_array[$key] = $webform->nid;
  //Set the variable mapping the old array types to new node ids.
  variable_set('webform_migrate_webform_mapping', $mapping_array);
}



function dosomething_migrate_add_missing_nodes() {
  $path = drupal_get_path('module', 'dosomething_migrate') . '/nodes';

  $mapping_array = variable_get('webform_migrate_webform_mapping', array());
  $required_types = dosomething_migrate_return_content_type_mapping();

  $missing = array_diff_key($required_types, $mapping_array);
  $loadable_nids = array_keys(node_load_multiple(array_filter($mapping_array)));
  $unloadable = array_diff($mapping_array, $loadable_nids);
  $problems = ($unloadable + $missing);

  $fixed_something = FALSE;
  foreach ($problems as $type => $junk) {
var_dump("addding a missing $type");
    $webform = dosomething_migrate_save_webform_node($path . '/' . $type . '.txt');
    $mapping_array[$type] = $webform->nid;
    $fixed_something = TRUE;
  }

  if ($fixed_something == TRUE) {
var_dump("updated mappings");
    variable_set('webform_migrate_webform_mapping', $mapping_array);
  }
}

function dosomething_migrate_save_webform_node($path) {
  $webform = unserialize(file_get_contents($path));
  $webform_data = $webform->webform;
  unset($webform->webform);
  node_save($webform);
  unset ($webform->webform);
  dosomething_migrate_recursively_readd_nid($webform_data, $webform->nid);
  $webform->webform = $webform_data;
  $webform_data['nid'] = $webform->nid;
  $webform->webform['record_exists'] = TRUE;
  foreach ($webform->webform['components'] as $key => $component) {
    $webform->webform['components'][$key]['nid'] = $webform->nid;
    if (!$webform->webform['components'][$key]['mandatory']) {
      $webform->webform['components'][$key]['mandatory'] = 0;
    }
  }
  node_save($webform);
  return $webform;
}

/**
 * Recurse through a webform object and add a new $nid.
 */
function dosomething_migrate_recursively_readd_nid(&$thing, $nid) {
  if (is_array($thing) || is_object($thing)) {
    foreach ($thing as $key => &$value) {
      if (is_array($value) || is_object($thing)) {
        dosomething_migrate_recursively_readd_nid($value, $nid);
      }
      elseif ($key == 'nid') {
        $value = $nid;
      }
    }
  }
  return $thing;
}

/**
 * Simply return an array mapping content type names to node titles.
 * We are converting content types into nodes with webform submissions,
 *  so each node type will become a node and each node will become a
 *  webform submission.
 */
function dosomething_migrate_return_content_type_mapping() {
  $array = array(
    'campaign_bfb_2011' => 'Campaign Project - Battle for the Bands 2011',
    'campaign_ebd_2011' => 'Campaign Project - Epic Book Drive 2011',
    'campaign_gys_2011' => 'Campaign Project - Green Your School 2011',
    'campaign_hunt_2011' => 'Campaign Project - Scavenger Hunt 2011',
    'canned_food' => 'Canned Food Drive Report (Tackle Hunger)',
    'healthy_schools_report' => 'Healthy Schools Report Back',
    'save_our_music' => 'Save Our Music',
    'sfs_report_gallery' => 'Staples for Students Image Submission',
    'staples_reason' => 'Staples Reason for Helping',
    'tfj_contest_signup' => 'Teens for Jeans Contest Signup',
    'troop_letter' => 'Support Our Troops Letter',
    '1in3_abuse_old' => '1in3 Dating Abuse',
    '911_registration' => 'Register to Volunteer on September 11th',
    'abc_family' => 'ABC Family',
    'ds101_action_kit' => 'Do Something 101 Action Kit',
    'ebd_signup' => 'Epic Book Drive Signup',
    'gys_2011' => 'Green Your School 2011',
    'healthy_schools' => 'Healthy Schools',
    'increaseyourgreen_signup' => 'Increase Your Green Signup',
    'scavenger_2011_signup' => 'Scavenger Hunt 2011 Signup',
    'staples_2011_signup' => 'Staples 2011 Signup',
    'tackle_hunger' => 'Tackle Hunger',
    'aspca_grant_app' => 'ASPCA Grant App',
    'general_grant_app' => 'General Grant Application',
    'grant' => 'Grant',
    'general_scholarship_app' => 'General Scholarship Application',
    'scholarships_att' => 'Scholarships ATT',
    'sixflags_scholarships_app' => 'Six Flags Friends Scholarships',
    'project' => 'Projects',
    'decade_2011_signup' => 'Decade of thanks 9/11 Signup',
    'campaign_bully_2011' => 'Campaign Project - Bullying 2011',
    'ewaste_signup_2011' => 'ewaste 2011 signup',
    'campaign_macys_2011' => 'Campaign Project - Macys Membership 2011',
    'campaign_art_2011' => 'Campaign Project - Make Art Save Art 2011',
    'campaign_sports_2011' => 'Campaign Project - Sports Equipment 2011',
    'campaign_cancer_2011' => 'Campaign Project -Give a Spit about Cancer 2011',
    'campaign_ew_2011' => 'Campaign Project - ewaste 2011',
    'cancer_2011_signup' => 'Cancer 2011 Signup',
    'campaign_gys_2012' => 'Campaign Project - Green Your School 2012',
    'campaign_trashy_2011' => 'Campaign Project - Trashy 2011',
    'campaign_bfb_2012' => 'Campaign Project - Battle for the Bands 2012',
    'campaign_tfj_2012' => 'Campaign Project - Teens for Jeans 2012',
  );
  return $array;
}

/**
 * A quick one off function to clean up after doing lots of testing.
 *  Removes all nodes of the types imported by the node creation.
 *  USE WITH CAUTION.
 */
function dosomething_migrate_clear_nodes() {
  $result = db_query("SELECT
      nid
    FROM
      {node}
    WHERE
      type = 'grant_application'
      OR type = 'campaign_sign_up'
      OR type = 'campaign_report_back'
      OR type = 'scholarship_application'
      OR type = 'project_report'");
  while ($nid = $result->fetch()) {
    node_delete($nid->nid);
  }
}

/**
 * A function to update the nodes that need to be imported prior to migration.
 * N.B. In order for this to work the nodes directory in this module MUST BE
 *  writable by the apache user (usually www-data) and so should probably be owned
 *  or group owned by that user.
 */
function dosomething_migrate_update_nodes() {
  $mapping = dosomething_migrate_return_content_type_mapping();
  $serialized_nodes = array();
  $c = 0;
  $result = db_query("
    SELECT nid
    FROM {node}
    WHERE type = 'grant_application'
      OR type = 'campaign_sign_up'
      OR type = 'campaign_report_back'
      OR type = 'scholarship_application'
      OR type = 'project_report'");
  while ($nid = $result->fetch()) {
    $c++;
    $node = node_load($nid->nid);
    unset($node->nid);
    unset($node->vid);
    $node->webform['record_exists'] = FALSE;
    $key = array_search($node->title, $mapping);
    if ($key) {
      $serialized = serialize($node);
      $handle = fopen(drupal_get_path('module', 'dosomething_migrate') .  "/nodes/" . $key . ".txt", "w");
      fwrite($handle, $serialized);
      fclose($handle);
    }
  }
}

/**
 * Function to run manually to gracefully remove duplicate profiles.
 */
function dosomething_migrate_surgical_profile_deletion() {
  $uids = db_query('SELECT uid FROM {profile} GROUP BY uid HAVING COUNT(uid) > 1');
  while ($uid = $uids->fetchField()) {
    $pids = db_query('SELECT pid FROM {profile} WHERE uid = :uid', array(':uid' => $uid))->fetchCol();
    $chunks = array_chunk($pids, 50);
    foreach ($chunks as $chunk) {
      profile2_delete_multiple($chunk);
      $r1 = db_delete('migrate_map_dssqluserprofile')
        ->condition('destid1', $chunk)
        ->execute();
      $r2 = db_delete('migrate_map_dsjsonprofile')
        ->condition('destid1', $chunk)
        ->execute();
      echo 'Dropped records from dssqluserprofile map: ' . $r1 . "\n";
      echo 'Dropped records from dsjsonprofile map: ' . $r2 . "\n";
    }
  }
}

/**
 * Function to run manually to move the phone numbers from the d6 site to the d7
 * site.
 */
function dosomething_migrate_force_phone_number_update() {
  $last = variable_get('dosomething_phone_import_status', 0);
  $d6results = db_query("SELECT uid, value FROM dosomething_prod.profile_values WHERE fid = 13 AND value IS NOT NULL AND value <> :nothing AND uid > :uid", array(':nothing' => '', ':uid' => $last));
  $i = 0;
  while ($result = $d6results->fetchAssoc()) {
    print 'updating profile phone number for user ' . $result['uid'] . "\n";
    $phone =  preg_replace('/\D/', '', $result['value']);
    $phone  = (string) substr(ltrim($phone, '1'), 0, 32);
    db_query("UPDATE field_data_field_user_mobile SET field_user_mobile_value = :num WHERE entity_id = (SELECT pid FROM profile WHERE uid = :uid LIMIT 1) AND entity_type = :type", array(':num' => $phone, ':uid' => $result['uid'], ':type' => 'profile2'));

    // Let's not go crazy storing variables but every 50 let's flag our
    // status so we can pick back up without redoing everything.
    $i++;
    if ($i % 50 == 0) {
      variable_set('dosomething_phone_import_status', $result['uid']);
    }
  }
  print 'Done moving records. Moved ' . $i . ' records.';
}
