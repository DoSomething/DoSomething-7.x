<?php

/**
 * @file
 * Provide mobile commons integration for SMS framework.
 */

/**
 * Implements hook_gateway_info().
 */
function sms_mobile_commons_gateway_info() {
  return array(
    'sms_mobile_commons' => array(
      'name' => 'SMS Mobile Commons',
      'send' => 'sms_mobile_commons_send',
      'receive' => TRUE,
      'configure form' => 'sms_mobile_commons_admin_form',
      'send form' => 'sms_mobile_commons_send_form',
    )
  );
}

/**
 * Implements hook_admin_form().
 */
function sms_mobile_commons_admin_form($configuration) {
  if (!is_null($configuration['sms_mobile_commons_password'])) {
    $password_needed = FALSE;
    $password_message = "A password HAS been set.";
  }
  else {
    $password_needed = TRUE;
    $password_message = "A password HAS NOT been set.";

  }
  $form = array();
  $form['sms_mobile_commons_custom_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile Commons custom URL'),
    '#default_value' => $configuration['sms_mobile_commons_custom_url'],
    '#description' => t('The custom URL used to access your Mobile Commons API. It often looks like "http://MYACCOUNT.mcommons.com".'),
    '#required' => TRUE,
  );
  $form['sms_mobile_commons_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#default_value' => $configuration['sms_mobile_commons_email'],
    '#description' => t('The email address that is used to authenticate you to Mobile Commons'),
    '#required' => TRUE,
  );
  $form['sms_mobile_commons_campaign'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign ID'),
    '#default_value' => $configuration['sms_mobile_commons_campaign'],
    '#description' => t('The campaign ID of your Mobile Commons campaign that the users are associted with.'),
  );
  $form['sms_mobile_commons_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => $configuration['sms_mobile_commons_password'],
    '#description' => t('The password to access Mobile Commons APIs. NOTE: ' . $password_message),
    '#required' => $password_needed,
  );
  $form['sms_mobile_commons_opt_in_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Opt In Path'),
    '#description' => t('The path on mobile commons that handles user opt-ins'),
    '#default_value' => $configuration['sms_mobile_commons_opt_in_path'],
  );
  $form['sms_mobile_commons_response'] = array(
    '#type' => 'textfield',
    '#title' => t('Response text for mData.'),
    '#description' => t('A default response to give back when the site receives a message via mData. In most cases you will want to ignore the use of a default response and instead implement hook_sms_mobile_commons_response_alter().'),
    '#default_value' => $configuration['sms_mobile_commons_response'],
  );
  
  return $form;

}

/**
 * Implements hook_form_alter().
 */
function sms_mobile_commons_form_sms_admin_gateway_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'sms_mobile_commons_admin_form_validate';
}

/**
 * Provides form validation for the SMS Mobile Commons gateway configuration.
 */
function sms_mobile_commons_admin_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['sms_mobile_commons_email'])) {
    form_set_error($name = 'sms_mobile_commons_email', $message = 'The email address was not valid');
  }
  if (!valid_url($form_state['values']['sms_mobile_commons_custom_url'])) {
    form_set_error($name = 'sms_mobile_commons_custom_url', $message = 'The url was not valid');
  }
  if (!valid_url($form_state['values']['sms_mobile_commons_opt_in_path'])) {
    form_set_error($name = 'sms_mobile_commons_opt_in_path', $message = 'The opt-in path was not valid');
  }
}

/**
 * Custom callback for incoming HTTP request.
 */
function sms_mobile_commons_incoming_callback() {  
  $message = $_REQUEST['args'];  
  $keyword = $_REQUEST['keyword'];
  $carrier = $_REQUEST['carrier'];
  $sender = $_REQUEST['phone'];
  $gateway = sms_gateways('gateway', 'sms_mobile_commons');
  $config = $gateway['configuration'];
  $output = $config['sms_mobile_commons_response'];
  drupal_alter('sms_mobile_commons_response', $output, $message, $sender, $keyword);
  sms_incoming($sender, $message, array("carrier" => $carrier, 'keyword' => $keyword, 'response' => $output));
  watchdog('sms_mobile_commons', 'Received message from %sender: %message and responded with %response', array('%sender' => $sender, '%message' => $message, '%response' => $output));
  $output =
  '<?xml version="1.0" encoding="UTF-8"?>
  <response>
   <reply>
    <text>
     <![CDATA[' . $output . ']]>
    </text>
   </reply>
  </response>';
  print $output;
  exit;
}

/**
 * Implements hook_menu().
 */
function sms_mobile_commons_menu() {
  $items = array();

  $items['sms/mobile-commons/receiver'] = array(
    'title' => 'Mobile Commons SMS receiver',
    'page callback' => 'sms_mobile_commons_incoming_callback',
    'access callback' => 'sms_mobile_commons_incoming_check',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Add a filter to ensure incoming texts are coming from Mobile Commons' IP.
 */
function sms_mobile_commons_incoming_check() {
  return TRUE;
  // TODO: learn the mobile commons ip range
  /* if ($_SERVER['REMOTE_ADDR'] == "64.22.127.76") {
    return TRUE;
  } */
  return FALSE;
}

/**
 * Implements hook_send().
 */
function sms_mobile_commons_send($number, $message, $options) {
  $status = FALSE;
  $return_message = "NULL";
  
  if (strlen($message) > 160) {
    $return_message = 'The message you wanted to send is too long and cannot be sent.';
  }
 
  //Get configuration parameters
  $gateway = sms_gateways('gateways');
  $config = $gateway['sms_mobile_commons']['configuration'];
  $api_send_url = $config['sms_mobile_commons_custom_url'];
  $auth_string = $config['sms_mobile_commons_email'] . ':'  . $config['sms_mobile_commons_password'];
  
  //remove http or https at beginning of string.
  $api_send_url = str_replace('https://', '', $api_send_url);
  $api_send_url = str_replace('http://', '', $api_send_url);
  
  $api_check_user_url = 'https://' . $api_send_url . '/api/profile'; 
  $api_send_url = 'https://' . $api_send_url . '/api/send_message'; 
  
  //If option is set allow override of default campaign id.
  if (isset($options['campaign_id'])) {
    $campaign_id = $options['campaign_id']; 
  }
  else {
    //Otherwise just use the default.
    $campaign_id = $config['sms_mobile_commons_campaign'];
  }
  
  //FOR TESTING
  $number = ''; //Enter your number
  $campaign_id = ''; //enter id
  $message = "YO YO, Coffee is ready. \n --Peace";
  
  //SEND MESSAGE
  $opts = array(
    'http' => array( 
      'method'  => 'POST', 
      'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode($auth_string)). 
        "Content-type: application/x-www-form-urlencoded\r\n", 
      'content' => http_build_query(array(
        'campaign_id' => $campaign_id,
        'body' => $message,
        'phone_number' => $number,
      )), 
    )
  );

  $context = stream_context_create($opts);
  $return_val = file_get_contents($api_send_url, false, $context); 
  
  if (strpos($return_val, '<response success="true"/>') !== FALSE) {
    $status = TRUE;
    $return_message = "The message was successfully sent.";
  }
  else if (strpos($return_val, 'message="Invalid phone number"') !== FALSE) {
    //Phone number was invalid, don't add to a campaign.
    $return_message = "Invalid phone number";
  }
  else {
     //we may want to add user to campaign. Right now mobile commons doesn't seem to care that users aren't (security problem?)
     // but if we do get an invalid reply let's check their status.
     $opts = array(
        'http' => array( 
          'method'  => 'GET', 
          'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode($auth_string)), 
        ), 
      );
      $context = stream_context_create($opts);
      $return_val = file_get_contents($api_check_user_url . '?phone_number=' . $number, false, $context); 
  }
  
  $result = array(
    'status' => $status,
    'message' => $return_message,
    'variables' => NULL,
  ); 
}
