<?php

/**
 * @file
 * Provide mobile commons integration for SMS framework.
 */

/**
 * Implements hook_gateway_info().
 */
function sms_mobile_commons_gateway_info() {
  return array(
    'sms_mobile_commons' => array(
      'name' => 'SMS Mobile Commons',
      'send' => 'sms_mobile_commons_send',
      'receive' => TRUE,
      'configure form' => 'sms_mobile_commons_admin_form',
      'send form' => 'sms_mobile_commons_send_form',
    )
  );
}

/**
 * Implements hook_admin_form().
 */
function sms_mobile_commons_admin_form($configuration) {
  if (!isset($configuration['sms_mobile_commons_password']) || empty($configuration['sms_mobile_commons_password'])) {
    $password_needed = TRUE;
    $password_message = "A password HAS NOT been set.";
  }
  else {
    $password_needed = FALSE;
    $password_message = "A password HAS been set but is not being displayed for security reasons.";

  }
  $form = array();
  $form['sms_mobile_commons_custom_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile Commons custom URL'),
    '#default_value' => isset($configuration['sms_mobile_commons_custom_url']) ? $configuration['sms_mobile_commons_custom_url'] : '',
    '#description' => t('The custom URL used to access your Mobile Commons API. It often looks like "http://MYACCOUNT.mcommons.com".'),
    '#required' => TRUE,
  );
  $form['sms_mobile_commons_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#default_value' => isset($configuration['sms_mobile_commons_email']) ? $configuration['sms_mobile_commons_email'] : '',
    '#description' => t('The email address that is used to authenticate you to Mobile Commons'),
    '#required' => TRUE,
  );
  $form['sms_mobile_commons_company_uuid'] = array(
    '#type' => 'textfield',
    '#title' => t('Company UUID'),
    '#default_value' => isset($configuration['sms_mobile_commons_company_uuid']) ? $configuration['sms_mobile_commons_company_uuid'] : '',
    '#description' => t('The company UUID is needed by some API calls like the profile opt-out. It can be found in your Mobile Commons company setup page (https://secure.mcommons.com/companies).'),
  );
  $form['sms_mobile_commons_campaign'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign ID'),
    '#default_value' => isset($configuration['sms_mobile_commons_campaign']) ? $configuration['sms_mobile_commons_campaign'] : '',
    '#description' => t('The campaign ID of your Mobile Commons campaign that the users are associated with.'),
  );
  $form['sms_mobile_commons_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('The password to access Mobile Commons APIs. NOTE: ' . $password_message),
    '#required' => $password_needed,
  );
  $form['sms_mobile_commons_opt_in_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Opt In Path'),
    '#description' => t('The opt-in path on mobile commons. This is usually a number of about 5 digits.'),
    '#default_value' => isset($configuration['sms_mobile_commons_opt_in_path']) ? $configuration['sms_mobile_commons_opt_in_path'] : '',
  );
  $form['sms_mobile_commons_response'] = array(
    '#type' => 'textfield',
    '#title' => t('Response text for mData.'),
    '#description' => t('A default response to give back when the site receives a message via mData. In most cases you will want to ignore the use of a default response and instead implement hook_sms_mobile_commons_response_alter().'),
    '#default_value' => isset($configuration['sms_mobile_commons_response']) ? $configuration['sms_mobile_commons_response'] : '',
  );

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function sms_mobile_commons_form_sms_admin_gateway_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'sms_mobile_commons_admin_form_validate';
}

/**
 * Provides form validation for the SMS Mobile Commons gateway configuration.
 */
function sms_mobile_commons_admin_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['sms_mobile_commons_email'])) {
    form_set_error($name = 'sms_mobile_commons_email', $message = 'The email address was not valid');
  }
  if (!valid_url($form_state['values']['sms_mobile_commons_custom_url'])) {
    form_set_error($name = 'sms_mobile_commons_custom_url', $message = 'The url was not valid');
  }
  //Fix the empty password coming from the form system. The password type does
  //not show the password by default which leaves it empty when submitting the
  //form.
  if (empty($form_state['values']['sms_mobile_commons_password'])) {
    $sms_config = variable_get('sms_sms_mobile_commons_settings');
    $form_state['values']['sms_mobile_commons_password'] = $sms_config['sms_mobile_commons_password'];

    if (is_null($form_state['values']['sms_mobile_commons_password'])) {
      form_set_error($name = 'sms_mobile_commons_password', $message = 'A password is needed');
    }
  }
}

/**
 * Custom callback for incoming HTTP request.
 */
function sms_mobile_commons_incoming_callback() {
  $message = isset($_REQUEST['args']) ? $_REQUEST['args'] : FALSE;
  $keyword = isset($_REQUEST['keyword']) ? $_REQUEST['keyword'] : FALSE;
  $carrier = isset($_REQUEST['carrier']) ? $_REQUEST['carrier'] : FALSE;
  $sender = isset($_REQUEST['phone']) ? $_REQUEST['phone'] : FALSE;
  $gateway = sms_gateways('gateway', 'sms_mobile_commons');
  $config = $gateway['configuration'];
  $output = $config['sms_mobile_commons_response'];
  $context = array(
    'message' => $message,
    'keyword' => $keyword,
    'carrier' => $carrier,
    'sender' => $sender,
    'gateway' => $gateway,
  );
  drupal_alter('sms_mobile_commons_response', $output, $context);
  sms_incoming($sender, $message, array("carrier" => $carrier, 'keyword' => $keyword, 'response' => $output));
  $args = array('%sender' => $sender, '%message' => $message, '%response' => $output, '%keyword' => $keyword);
  watchdog('sms_mobile_commons', 'Received message from %sender: %message with keyword %keyword and responded with %response', $args);
  $output =
  '<?xml version="1.0" encoding="UTF-8"?>
  <response>
   <reply>
    <text>
     <![CDATA[' . $output . ']]>
    </text>
   </reply>
  </response>';
  print $output;
  return NULL;
}

/**
 * Implements hook_menu().
 */
function sms_mobile_commons_menu() {
  $items = array();

  $items['sms/mobile-commons/receiver'] = array(
    'title' => 'Mobile Commons SMS receiver',
    'page callback' => 'sms_mobile_commons_incoming_callback',
    'access callback' => 'sms_mobile_commons_incoming_check',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Add a filter to ensure incoming texts are coming from Mobile Commons' IP.
 */
function sms_mobile_commons_incoming_check() {
  // Valid IP range as specified by Mobile Commons is: 64.22.127.0/24.
  // This translates to any IP 64.22.127.0 - 64.22.127.255
  $valid = FALSE;
  $ip = ip_address();
  $valid = FALSE;
  if (strpos($ip, '64.22.127') === 0) {
    if ((int) substr($ip, 9, 3) >= 0 && (int) substr($ip, 10, 3) <= 255) {
      $valid = TRUE;
    }
  }
  return $valid;
}

/**
 * Implements hook_send().
 */
function sms_mobile_commons_send($number, $message, $options = array()) {
  $status = FALSE;
  $return_message = "No message sent";
  $validation_message = "No validation attempted";

  if (strlen($message) > 160) {
    $return_message = t('The message you wanted to send is too long and cannot be sent.');
    return array(
      'status' => $status,
      'message' => $return_message,
      'variables' => NULL,
      'validation' => $validation_message,
    );
  }

  // Get configuration parameters
  $gateway = sms_gateways('gateways');
  $config = $gateway['sms_mobile_commons']['configuration'];
  $api_send_url = $config['sms_mobile_commons_custom_url'];
  $auth_string = _sms_mobile_commons_get_auth_string();

  // Remove http or https at beginning of string.
  $api_send_url = str_replace('https://', '', $api_send_url);
  $api_send_url = str_replace('http://', '', $api_send_url);

  $api_check_user_url = 'https://' . $api_send_url . '/api/profile';
  $api_send_url = 'https://' . $api_send_url . '/api/send_message';

  // If option is set allow override of default campaign id.
  if (isset($options['campaign_id'])) {
    $campaign_id = $options['campaign_id'];
  }
  else {
    // Otherwise just use the default.
    $campaign_id = $config['sms_mobile_commons_campaign'];
  }

  // Find out if user has opted-out if they have don't send a message.
  $opts = array(
    'http' => array(
      'method'  => 'GET',
      'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode($auth_string)),
    ),
  );
  $context = stream_context_create($opts);
  $return_val = file_get_contents($api_check_user_url . '?phone_number=' . $number, FALSE, $context);
  if (strpos($return_val, '<response success="true"/>') >= 0) {
    // User profile was found.
    $validation_message = t('Profile successfully found. User is valid.');
  }
  if (strpos($return_val, '<error id="5" message="Invalid phone number"/>') !== FALSE) {
    // Messages cannot be sent to this phone number.
    $validation_message = t('Mobile commons doesn\'t like this phone number but it may just be one that it hasn\'t encountered before.');
  }
  if (strpos($return_val, '<status>Undeliverable</status>') !== FALSE && strpos($return_val, 'status="Opted-Out"') !== FALSE) {
    $validation_message = t('Message could not be delivered. User has probably opted out. Don\'t send spam. No attempt to send a message will be made.');
  }
  else {
    // Send the message.
    $return_val = sms_mobile_commons_message_send($number, $message, $campaign_id, $auth_string, $api_send_url);
    if (strpos($return_val, '<response success="true"/>') !== FALSE) {
      $status = TRUE;
      $return_message = t('The message was successfully sent.');
    }
    else {
      // Message failed. Might be a bad phone number. But mobile commons
      // returns 'Invalid phone number' for non phone numbers as well as
      // those not in the system.
      $return_message = t('Falied to send message');

      if ($options['auto_add'] === TRUE) {
        //Add users to campaign and try again.
        sms_mobile_commons_add_user_to_campaign($number, '', '', $campaign_id);
        $return_val = sms_mobile_commons_message_send($number, $message, $campaign_id, $auth_string, $api_send_url);
        if (strpos($return_val, '<response success="true"/>') !== FALSE) {
          $status = TRUE;
          $return_message = t('After adding the user to the campaign, the message was successfully sent.');
        }
        else {
          $return_message = t('Attempted to add the user to the campaign but still failed to send the message.');
        }
      }
    }
  }

  $result = array(
    'status' => $status,
    'validation' => $validation_message,
    'message' => $return_message,
    'variables' => NULL,
  );
  return $result;
}

/**
 * Adds a user to a campaign.
 *
 * @param $number
 *   The user's phone number.
 * @param $first_name
 *   The user's first name.
 * @param $last_name
 *   The user's last name.
 */
function sms_mobile_commons_add_user_to_campaign($number, $first_name = '', $last_name = '', $campaign_id = NULL) {
  //Get configuration parameters
  $gateway = sms_gateways('gateways');
  $config = $gateway['sms_mobile_commons']['configuration'];
  $opt_in_path = $config['sms_mobile_commons_opt_in_path'];
  $custom_url = $config['sms_mobile_commons_custom_url'];

  // Get the default campaign id if it has not been overridden.
  if (is_null($campaign_id)) {
    // Otherwise just use the default.
    $campaign_id = $config['sms_mobile_commons_campaign'];
  }

  // Remove http or https at beginning of string.
  $custom_url = str_replace('https://', '', $custom_url);
  $custom_url = str_replace('http://', '', $custom_url);

  $api_opt_in_path_url = 'https://' . $custom_url . '/campaigns/' . $campaign_id . '/subscriptions?opt_in_path=' . $opt_in_path;

  // Send the post data.
  $opts = array(
    'http' => array(
      'method'  => 'POST',
      'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
      'content' => http_build_query(array(
        'person' => array(
          'phone' => $number,
        ),
      )),
    )
  );
  $context = stream_context_create($opts);
  return file_get_contents($api_opt_in_path_url, FALSE, $context);
}

/**
 * Removes a number from one or multiple Mobile Commons campaigns
 *
 * @param $number
 *   The number that should be opted out of a campaign.
 * @param $campaigns
 *   Number or array of single or multiple Mobile Commons campaign ids to opt the number out of.
 */
function sms_mobile_commons_campaign_opt_out($number, $campaigns) {
  $api_opt_out_url = 'https://secure.mcommons.com/profiles/opt_out';

  $content = array(
    'company_uuid' => _sms_mobile_commons_get_company_uuid(),
    'person' => array(
      'phone' => $number,
    ),
  );

  if (is_array($campaigns)) {
    if (count($campaigns) > 1) {
      // Manually concatenating additional campaigns onto the build query.
      // Additional campaigns must be in the format "&campaign[]="
      $content_query = http_build_query($content);
      foreach ($campaigns as $id) {
        $campaign_key = urlencode('campaign[]');
        $content_query .= '&' . $campaign_key . '=' . $id;
      }
    }
    else {
      if (count($campaigns) == 1) {
        $content['campaign'] = $campaigns[0];
      }

      $content_query = http_build_query($content);
    }
  }
  elseif (is_numeric($campaigns) && $campaigns > 0) {
    $content['campaign'] = $campaigns;
    $content_query = http_build_query($content);
  }
  else {
    return FALSE;
  }

  $opts = array(
    'http' => array(
      'method'  => 'POST',
      'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode(_sms_mobile_commons_get_auth_string())) . "Content-type: application/x-www-form-urlencoded\r\n",
      'content' => $content_query,
    )
  );

  $context = stream_context_create($opts);
  return file_get_contents($api_opt_out_url, FALSE, $context);
}

/**
 * Send a message to an SMS number.
 *
 * @param $number
 *   The number the message should be sent to.
 * @param $message
 *   The message to send to the specified number.
 * @param $campaign_id
 *   The Mobile Commons ID to use.
 * @param $auth_string
 *   The Mobile Commons API key used for authorization.
 */
function sms_mobile_commons_message_send($number, $message, $campaign_id, $auth_string, $api_send_url) {
  $opts = array(
    'http' => array(
      'method'  => 'POST',
      'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode($auth_string)) . "Content-type: application/x-www-form-urlencoded\r\n",
      'content' => http_build_query(array(
        'campaign_id' => $campaign_id,
        'body' => $message,
        'phone_number' => $number,
      )),
    )
  );

  $context = stream_context_create($opts);
  return file_get_contents($api_send_url, FALSE, $context);
}

/**
 * Opt-in the mobile number to a Mobile Commons campaign opt-in path.
 *
 * @param $number
 *   The number to opt-in.
 * @param $opt_in_path
 *   The Mobile Commons opt-in path id number to opt the user into.
 * @param $args
 *   Array of key-value pairs for additional parameters to include with the
 *   opt-in request. More info can be found at https://secure.mcommons.com/help/forms
 */
function sms_mobile_commons_opt_in($number, $opt_in_path, $args = array()) {
  $api_opt_in_url = 'https://secure.mcommons.com/profiles/join';

  $content = array(
    'opt_in_path[]' => $opt_in_path,
    'person' => array(
      'phone' => $number,
    ),
  );

  if (!empty($args)) {
    foreach ($args as $key => $val) {
      $content[$key] = urlencode($val);
    }
  }

  $opts = array(
    'http' => array(
      'method'  => 'POST',
      'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
      'content' => http_build_query($content),
    )
  );

  $context = stream_context_create($opts);
  return file_get_contents($api_opt_in_url, FALSE, $context);
}

/**
 * Update the Mobile Commons profile for a given number
 *
 * @param $mobile
 *    Mobile number of profile to update
 * @param $args
 *    Array of fields to update for that profile
 */
function sms_mobile_commons_profile_update($number, $args = array()) {
  $api_profile_update_url = 'https://secure.mcommons.com/api/profile_update';

  $content = array(
    'phone_number' => $number,
  );

  if (!empty($args)) {
    foreach ($args AS $key => $val) {
      $content[$key] = $val;
    }
  }

  $opts = array(
    'http' => array(
      'method'  => 'POST',
      'header'  => sprintf("Authorization: Basic %s\r\n", base64_encode(_sms_mobile_commons_get_auth_string())) . "Content-type: application/x-www-form-urlencoded\r\n",
      'content' => http_build_query($content),
    )
  );

  $context = stream_context_create($opts);
  return file_get_contents($api_profile_update_url, FALSE, $context);
}

/**
 * Get the Mobile Commons authorization string for API calls
 */
function _sms_mobile_commons_get_auth_string() {
  $gateway = sms_gateways('gateways');
  $config = $gateway['sms_mobile_commons']['configuration'];
  return $config['sms_mobile_commons_email'] . ':' . $config['sms_mobile_commons_password'];
}

/**
 * Get the Mobile Commons Company UUID
 */
function _sms_mobile_commons_get_company_uuid() {
  $gateway = sms_gateways('gateways');
  $config = $gateway['sms_mobile_commons']['configuration'];
  return $config['sms_mobile_commons_company_uuid'];
}
