<?php

/**
 * @file
 * Optimizely module
 *
 * Originally for Visual Website Optimizer by Awesome Software, http://www.awesome-software.net/
 * and Ted Cooper (ELC) http://drupal.org/user/784944
 *
 * Ported to Optimizely by netstudio.gr and Yannis Karampelas (http://drupal.org/user/1145950).
 *
 * Adds Optimizely javascript (snippet) to the page which loads the A/B test from
 * the optimizely.com website.
 *
 * 7.x-2.x Functionality added to support multiple project entries from an Optimizely account. Each entry
 * specifies target paths to include the Optimizely projects on the specific site paths. Targeting paths
 * eliminates the need to load Optimizely tests on every page of a site.
 *
 * 7.x-2.x by Darren "Dee" Lee (DeeZone: http://drupal.org/user/288060) and Peter Lehrer (plehrer: http://drupal.org/user/2257350)
 * Sponsored by DoSomething.org (http://www.dosomething.org)
 */

/**
 * Implements hook_help().
 *
 * Help textrelated to the modules functionality and use.
 */
 function optimizely_help($path, $arg) {
	
  switch($path){
		
    case 'admin/help#optimizely':
      return '<p>' . t('<a href="">Optimizely</a> is a third party service to add A/B testing to a web site. The tests are applied to the site by loading javascript snippets generated by the Optimizely web site. The generated javascript files are applied to certain paths on the site based on Project entries managed by the Optimizely module. To start to apply the general, site wide Optimizely javascript the <a href="@settings">Optimizely account ID</a> must be entered in the module administration page.', array('@settings' => url('admin/config/system/optimizely/settings'))) . '</p>';
		
    case 'admin/config/system/optimizely':
      return t('A listing of the Optimizely projects. Each entry can be enabled/disable in general, to be included / excluded on specific paths or wildcard paths. Enabled entries are highlighted in green while disabled entries are in red. The top, "Default" entry highlight with a dashed green line can not be deleted but can be disabled.');
      break;

    case 'admin/config/system/optimizely/add_update':
      return t('Add or edit specific project entries. Each entry should have an Optimizely project / experiment assigned to it. as well as a range or paths where the javascript file should called from.');
      break;

    case 'admin/config/system/optimizely/settings':
      return t('Add the Optimizely account ID supplied by the Optimizely website. The account ID is essential to setting up the initial site wide wide default project entry.');
      break;

  }

}

/**
 * Implements hook_menu().
 *
 * Menu entries that define the paths to trigger specific functionality when the path is accessed.
 */
function optimizely_menu() {

  $items = array();

  $items['admin/config/system/optimizely'] = array(
    'title' => 'Optimizely',
    'description' => 'List of all different projects to put Optimizely code snippet.',
    'page callback' => 'optimizely_list_page',
    'access arguments' => array('administer optimizely'),
    'file' => 'optimizely.admin.inc',
    'file path' => drupal_get_path('module', 'optimizely'),
  );

  $items['admin/config/system/optimizely/default'] = array(
    'title' => 'Project Listing',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/system/optimizely/add_update'] = array(
    'title' => 'Add Project',
    'description' => 'Add Project entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('optimizely_add_update_form'),
    'access arguments' => array('administer optimizely'),
    'file' => 'optimizely.admin.inc',
    'file path' => drupal_get_path('module', 'optimizely'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/system/optimizely/add_update/%'] = array(
    'title' => 'Edit Project',
    'description' => 'Configure Project entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('optimizely_add_update_form', 5),
    'access arguments' => array('administer optimizely'),
    'file' => 'optimizely.admin.inc',
    'file path' => drupal_get_path('module', 'optimizely'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/system/optimizely/settings'] = array(
    'title' => 'Account Info',
    'description' => 'Configure your Optimizely account details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('optimizely_setup_account_settings_form'),
    'access arguments' => array('administer optimizely'),
    'file' => 'optimizely.admin.inc',
    'file path' => drupal_get_path('module', 'optimizely'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['admin/config/system/optimizely/delete/%'] = array(
    'title' => 'Delete Project',
    'description' => 'Deletes the target project from the database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('optimizely_delete_page', 5),
    'access arguments' => array('administer optimizely'),
    'file' => 'optimizely.admin.inc',
    'file path' => drupal_get_path('module', 'optimizely'),
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function optimizely_permission() {
  return array(
    'administer optimizely' => array(
      'title' => t('Administer Optimizely module'),
      'description' => t('Administer access to everything in module'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_init().
 *
 * This function impliments the rules entered about for each project entry. The goal
 * is to control when an entry is applied to a page build by adding a call to a
 * Optimizely javascript snippet.
 *
 * The "Paths" setting for each entry are interpited as literal paths or a whole ranges of
 * paths noted with wildcards "*". A Project entry can appear on one or more paths that can
 * include wildcards. The <front> token is supported in the possible path .
 *
 * For example, '<front>' will add the Optimizely snippet on the front page, and
 * 'clubs/*' will place the snippet on all pages bellow 'clubs/'. Note: The snippet
 * will only appear on the actual 'clubs' page if you specify 'clubs'
 * without the wildcard.
 *
 * Project entries can include or exclude paths. Exclude paths result in the snippet on all paths
 *
 * Each entry
 *
 * The radio button 'optimizely_enabled' is set to 'disabled' it means that the snippet
 * will be added to all pages except those listed.
 *
 * A disabled project entry will be ignored.
 */
function optimizely_init() {

  // Load all entries in the optimizely table
  $query = db_select('optimizely', 'o')
    ->fields('o')
    ->condition('o.enabled', 1, '=')
    ->orderBy('oid');

  // Fetch the result set.
  $result = $query->execute();

  // Query results found
  if ($result) {

    // Loop through each row of the found results
    while ($row = $result->fetchAssoc()) {

      // Only process the entries that are enabled
      if ($row['enabled']) {

        $project_paths = unserialize($row['path']);

        // parse_url(request_uri(), PHP_URL_PATH);
        $current_path = current_path();

        // Find comparable alias that could match the paths entered in the project entry
        $current_path_alias = drupal_get_path_alias($current_path);

        foreach ($project_paths as $path_count => $target_path) {

          if ( ( $row['include'] && drupal_match_path($current_path_alias, $target_path) ) ||
               ( (!$row['include']) && (!drupal_match_path($current_path_alias, $target_path) &&
                                       !optimizely_wildcard_match($target_path, $project_paths) )
               )
             ) {

            drupal_add_js('http://cdn.optimizely.com/js/' . $row['project_code'] . '.js', 'external');

          }

        }

      }

    }

  }

}

/**
 * optimizely_wildcard_match()
 *
 * @parm: $target_path - string
 *   The specific path, typically the current path
 *
 * @parm: $project_paths - Array
 *   An array of desired paths to compare $target_path to. Supports matching wild cards
 *
 *
 * @returns $found_flag - Boolean
 *   TRUE if match is found
 *
 * Menu entries that define the paths to trigger specific functionality when the path is accessed.
 */
function optimizely_wildcard_match($target_path, $project_paths) {

  $found_flag = FALSE;
  foreach ($project_paths as $project_path) {

    // Remove wild card notation
    if (strpos($project_path, '/*') > 0) {

      $project_path = substr($project_path, 0, strlen($project_path) - 2);

      // Look for match as partial sub paths
      if (is_int(strpos($project_path, $target_path))) {
        $found_flag = TRUE;
      }

    } // Exact matches
    elseif ($project_path == $target_path) {
      $found_flag = TRUE;
    }

  }

  return $found_flag;

}