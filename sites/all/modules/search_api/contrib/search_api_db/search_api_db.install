<?php

/**
 * Implements hook_requirements().
 */
function search_api_db_requirements($phase) {
  $t = get_t();
  $ret['search_api_db']['title'] = $t('Database search');
  $ret['search_api_db']['value'] = $t('deprecated');
  $ret['search_api_db']['description'] = $t('This module was moved out of the core Search API project. ' .
      'To keep using it, please download the separate module from <a href="@url">its project page</a>. ' .
      'To get rid of this error message delete the old module under @path after downloading the new one.' .
      'The legacy module used now will soon be removed.',
      array('@url' => url('http://drupal.org/project/search_api_db'), '@path' => DRUPAL_ROOT . drupal_get_path('module', 'search_api_db')));
  $ret['search_api_db']['severity'] = REQUIREMENT_ERROR;

  return $ret;
}

/**
 * Implements hook_uninstall().
 */
function search_api_db_uninstall() {
  if (module_exists('search_api')) {
    db_delete('search_api_server')
      ->condition('class', 'search_api_db_service')
      ->execute();
  }
  foreach (db_find_tables(Database::getConnection()->prefixTables('{search_api_db}') . '%') as $table) {
    if (preg_match('/search_api_db_.*$/', $table, $matches)) {
      db_drop_table($matches[0]);
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function search_api_db_update_dependencies() {
  // This update should run after primary IDs have been changed to machine names in the framework.
  $dependencies['search_api_db'][7101] = array(
    'search_api' => 7102,
  );
  return $dependencies;
}

/**
 * Implements hook_update_N().
 *
 * Re-arranges the $server->options['indexes'] array to be keyed by machine_name
 * instead of by id.
 */
function search_api_db_update_7101() {
  $query = db_select('search_api_server', 's');
  $query->addField('s', 'machine_name');
  $query->condition('class', 'search_api_db_service');
  $index_names = db_select('search_api_index', 'i')
    ->fields('i', array('id', 'machine_name'))
    ->condition('server', clone $query, 'IN')
    ->execute()
    ->fetchAllKeyed();
  $query->addField('s', 'options');
  $servers = $query->execute();
  foreach ($servers->fetchAllKeyed() as $name => $options) {
    $options = unserialize($options);
    if (empty($options['indexes'])) {
      continue;
    }
    $indexes = array();
    foreach ($options['indexes'] as $id => $info) {
      if (isset($index_names[$id])) {
        $indexes[$index_names[$id]] = $info;
      }
    }
    $options['indexes'] = $indexes;
    $options = serialize($options);
    db_update('search_api_server')
      ->fields(array(
        'options' => $options,
      ))
      ->condition('machine_name', $name)
      ->execute();
  }
}
