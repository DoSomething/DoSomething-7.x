<?php

function export_menu() {
  $items['admin/export/%'] = array(
    'title' => t('Your export is complete!'),
    'page callback' => "export::finished",
    'page arguments' => array(2),
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  $items['admin/export/file/%'] = array(
    'page callback' => "export::load_file",
    'page arguments' => array(3),
    'access arguments' => array('administer group'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function not_empty($data) {
  if (!empty($data)) {
    return $data;
  }
  else {
    return false;
  }
}

function export_narrow($form, &$form_state) {
  $vals = array_filter(array_values($form_state['values']['options']), 'not_empty');
  export::narrow_init($vals);
}

define('DEFAULT_EXPORT_LIMIT', 500);
class export {
  private static $file;
  public static $inited = false;

  private static $package;

  private static $count_query;
  private static $run_queries;
  private static $filename;

  private static $narrow;

  private static $limit;
  private static $fields = array();

  private static $part;

  public static $breakdown = '';
  private static $path;

  public static function narrow_init(array $breakdown) {
    self::init(self::$package, self::$limit, $breakdown);
  }

  public static function init($package, $limit = DEFAULT_EXPORT_LIMIT, $breakdown = '') {
    if ($package) {
      $queries = module_invoke($package, 'export_queries');
      self::$limit = $limit;
      self::$fields = $queries['fields'];
      self::$filename = $queries['filename'];
      self::$package = $package;

      if (!$_SESSION['started']) {
        unset($_SESSION['breakdown']);
      }

      $breakdown = ($_SESSION['breakdown'] ? $_SESSION['breakdown'] : $breakdown);
      self::$breakdown = $breakdown;
      $_SESSION['breakdown'] = $breakdown;

      if (!self::get_queries()) {
        self::set_queries($queries);
      }

      if ($queries['parts'] && !$breakdown) {
        self::$narrow = $queries['parts'];
        return self::narrow();
      }

      return self::run($breakdown);
    }
  }

  public static function narrow_form() {
    $form['start'] = array(
      '#markup' => 'Please select which elements you would like to export:',
      '#prefix' => '<p>',
      '#suffix' => '</p>'
    );

    $options = db_query(self::$narrow)->fetchAllKeyed();

    $form['options'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#attributes' => array(
        'checked' => 'checked'
      )
    );

    $form['begin'] = array(
      '#type' => 'submit',
      '#value' => t('Start export'),
      '#attributes' => array(
        'class' => array('go-button')
      ),
      '#prefix' => '<p>',
      '#suffix' => '</p>'
    );

    $form['#submit'][] = 'export_narrow';
    return $form;
  }

  public static function narrow() {
    // Clean the directory of previously created petitions exports...
    shell_exec('rm -rf ' . drupal_realpath('private://') . '/petitions_*');
    return drupal_render(drupal_get_form('export::narrow_form'));
  }

  public static function get_queries() {
    $i = 0;
    if ($_SESSION['count']) {
      self::$count_query = $_SESSION['count'];
      $i++;
    }
    if ($_SESSION['run']) {
      self::$run_queries = $_SESSION['run'];
      $i++;
    }

    if ($i == 2) {
      return true;
    }
    else { return false; }
  }

  public static function set_queries($queries = array()) {
    if ($queries['count']) {
      self::$count_query = (!empty($queries) ? $queries['count'] : $_SESSION['count']);
    }
    if ($queries['run']) {
      self::$run_queries = (!empty($queries) ? $queries['run'][0] : $_SESSION['run']);
    }
  }

  public static function run($breakdown = '') {
    $page = $limit = 0;
    $page = intval($_GET['page']);
    if (!$page) {
      $page = 1;
      $nopage = true;
    }
    else  {
      $nopage = false;
    }

    if (!intval($_GET['limit'])) {
      $limit = self::$limit;
    }
    else {
      $limit = intval($_GET['limit']);
    }

    $start = (!$nopage ? ($page * ($limit)) : 0);
    if (!$nopage) { $page++; }

    $_SESSION['started'] = true;
    $d = self::the_query($start, $limit);
    $count = self::get_counts();

    $p = floor(($start / $count) * 100);
    if ($p > 100) {
      $p = 100;
    }

    $hash = '';
    if (empty($breakdown)) {
      // If we're not doing this export in parts, continue the normal way.
      $hash = self::get_hash();
    }
    if (self::write_stuff($hash, $d)) {
      $content = '<div style="background: #d9d9d9; border: 1px solid #000; display: block; height: 30px; border-radius: 5px; padding: 0px;">
      <div style="background: #D65E5E; height: 30px; width: ' . $p . '%; color: #fefefe; text-align: right; padding: 5px 5px 0px 0px; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;">' . ($p > 0 ? "{$p}%" : '') . '</div>
      </div>';

      $content .= '<p><strong>Completed ' . $start . ' of ' . $count . ' (' . $p . '%)</strong></p>';
    }

    if ($p < 100) {
     $addy = $_SERVER['REDIRECT_URL'] . "?page=" . $page . "&hash=" . $hash;
    }
    else {
      if (self::$breakdown) {
        $filepath = drupal_realpath('private://') . '/' . self::$filename;
        $hash = base64_encode(serialize(array(
          'filename' => basename($filepath),
          'file_path' => $filepath,
          'part' => TRUE
        )));
      }
     $addy = '/admin/export/' . $hash;
    }

    $content .= "<script> window.location.href = '" . $addy . "' </script>";

    return $content;
  }

  public static function load_file($data) {
    $info = unserialize(base64_decode($data));
    if (strpos($info['file_path'], 'private') === FALSE) {
      return 'Access denied!';
    }

    drupal_add_http_header('Content-Type', ($info['part'] ? 'application/octet-stream' : 'text/csv; utf-8'));
    drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $info['filename'] . ($info['part'] ? '.zip' : ''), TRUE);

    drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

    readfile($info['file_path'] . ($info['part'] ? '.zip' : ''));
    exit;
  }

  public static function finished($data) {
      $info = unserialize(base64_decode($data));
      if (empty($info['file_path']) || empty($info['filename'])) {
        return t("Sorry, your file couldn't be created (file information not passed).");
      }

      unset($_SESSION['started']);

      if (isset($info['part'])) {
        $filepath = drupal_realpath('private://') . '/' . $info['filename'];
        shell_exec('zip -j ' . $filepath . ' ' . $filepath . '*');
      }

    $redirect = base_path() . 'admin/export/file/' . $data;
    drupal_add_js('setTimeout(function() { window.location.href = "' . $redirect . '"; }, 2000);', 'inline');

    $download_link = t('Your export is complete! If your download does not begun automatically, !click!', array(
      '!click' => l(t('Click here'), 'admin/export/file/' . $data))
    );

    $output = '<p>' . $download_link . '</p>';
    return $output;
  }

  public static function write_stuff($hash, &$data) {
    $c = count($data['results']);
    if (!empty($hash)) {
      $info = unserialize(base64_decode($hash));
      $handle = fopen($info['file_path'], 'a');
    }
    $i = 0;
    $e = array();
    foreach ($data['results'] AS $key => $stuff) {
      if (empty($hash) && !isset($handle) && !strpos(self::$path, $stuff->id)) {
        // The hash is empty so it's likely that we're doing a multi-part export
        // Load / create the correct file and continue!
        self::$path = drupal_realpath('private://') . '/' . self::$filename . '-' . $stuff->id . '.csv';
      }
      $stuff = (array) $stuff;
      $e[self::$path][] = $stuff;
      $i++;
    }

    foreach ($e AS $path => $data) {
      $ex = array_to_csv($data, FALSE);
      $handle = fopen($path, 'a');
      if (fwrite($handle, $ex) && ($i == $c)) {
        fclose($handle);
      }
    }

    if ($i == $c) {
      return true;
    }
    else {
      return false;
    }
  }

  public static function get_hash() {
    if (!$_GET['hash']) {
      $filename = self::$filename;
      $h = array(
        'filename' => $filename,
        'file_path' => drupal_realpath('private://') . '/' . $filename . '.csv'
      );

      $field_labels = self::$fields;

      $handle = fopen($h['file_path'], 'w');
      fputcsv($handle, $field_labels);
      fclose($handle);

      $hash = base64_encode(serialize($h));
    }
    else {
      $hash = $_GET['hash'];
    }

    return $hash;
  }

  public static function log($title, $message) {
    mail('mchittenden@dosomething.org', $title, $message);
  }

  public static function get_counts() {
    static $context;
    $counts = db_query(
      self::$count_query . (self::$breakdown ? ' AND `node`.`nid` IN (' . implode(',', self::$breakdown) . ')' : '')
    );

    $count = $counts->rowCount();
    return $count;
  }

  public static function the_query($limit = 0, $offset = 0, $return_query = FALSE) {
    $query = self::$run_queries;
    if (self::$breakdown) {
      $query = str_replace('%exportwhere', ' AND `node`.`nid` IN (' . implode(',', self::$breakdown) . ')', $query);
    }
    else {
      $query = str_replace('%exportwhere', '', $query);
    }

    $query .= (is_numeric($limit) ? " limit $limit" . (is_numeric($offset) ? ", $offset" : '') : '');

    $q = db_query($query);
      if ($return_query) {
        return $q;
      }
      else {
        return array(
          'count' => $q->rowCount(),
          'results' => $q->fetchAll()
        );
      }
    }
}