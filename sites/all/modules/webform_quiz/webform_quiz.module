<?php

/**
 * Implements hook_webform_component_info().
 */
function webform_quiz_webform_component_info() {
  $components = array();

  $components['quiz_question'] = array(
    'label' => t('Quiz question'),
    'description' => t('A question to be scored for a quiz.'),
    'features' => array(
      'description' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'default_value' => FALSE,
    ),
    'file' => 'webform_quiz.component.inc',
  );

  return $components;
}

/**
 *  Implements hook_form_alter()
 */
function webform_quiz_form_alter(&$form, &$form_state, $form_id) {
  $node = &$form['#node'];
  if ($node->type == 'quiz' && !user_is_logged_in()) {
    drupal_add_css(drupal_get_path('module', 'webform_quiz') . '/css/quiz_logged_out.css');
    $f = &$form['submitted'];
    $f['first_name'] = array(
      '#type' => 'textfield',
      '#weight' => 10000,
      '#default_value' => '',
      '#required' => TRUE,
      '#attributes' => array(
        'placeholder' => t('Your first name'),
      ),
    );

    $f['email_or_cell'] = array(
      '#type' => 'textfield',
      '#weight' => 10001,
      '#default_value' => '',
      '#required' => TRUE,
      '#attributes' => array(
        'placeholder' => t('Your Email / Cell'),
      ),
    );

    $f['password'] = array(
      '#type' => 'password',
      '#weight' => 10002,
      '#default_value' => '',
      '#required' => TRUE,
      '#attributes' => array(
        'placeholder' => t('Your Password'),
      ),
    );

    $form['#validate'][] = 'webform_quiz_validate_login_or_register';
    $form['#submit'][] = 'webform_quiz_login_or_register';
  }
}

/**
 *  Validates that the password is legit.
 */
function webform_quiz_validate_login_or_register($form, &$form_state) {
  $data = $form_state['input']['submitted'];

  // Check the password.
  if (!dosomething_api_valid_password($data['email_or_cell'], $data['password'])) {
    form_set_error('password', t('Invalid email / password combination.'));
  }
}

/**
 *  Logs in or registers a user.
 */
function webform_quiz_login_or_register($form, &$form_state) {
  $data = $form_state['input']['submitted'];
  dosomething_api_create_or_log_in_user($data['first_name'], $data['email_or_cell'], $data['password']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_quiz_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
  $node = &$form['#node'];
  $field_limit = 8;
  $filler = range(0, $field_limit);
  unset($filler[0]);
  $is_not_quiz = $node->type != 'quiz';

  $form['role_control']['#weight'] = -2;

  $form['quiz_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable quiz feature'),
    '#default_value' => isset($node->webform['quiz_redirects']) && $is_not_quiz,
    '#access' => $is_not_quiz,
    '#weight' => -3,
  );

  $form['quiz'] = array(
    '#type' => 'fieldset',
    '#access' => $is_not_quiz,
    '#title' => t('Quiz Options'),
    '#description' => t('Enter the URL, internal or external, to redirect to when a given numbered response is chosen most frequently. In other words, if response 1 is chosen the most number of times, we will redirect them to the URL below for response 1. Additional fields will show up, up to 8, after entering a value.'),
    '#collapsible' => TRUE,
    '#weight' => -3,
    '#states' => array(
      'visible' => array(
        ':input[name="quiz_enable"]' => array('checked' => TRUE),
      ),
    ),
  );

  foreach ($filler as $int) {
    $form['quiz']["response_redirect_$int"] = array(
      '#type' => 'textfield',
      '#title' => t('Redirect URL: Response') . ' ' . $int,
      '#default_value' => $node->webform['quiz_redirects'][$int],
      '#states' => array(
        'visible' => array(
          ':input[name="response_redirect_'.($int-1).'"]' => array('empty' => FALSE),
        ),
      ),
    );
  }
  unset($form['quiz']['response_redirect_1']['#states']);

  $form['#valudate'][] = 'webform_quiz_webform_configure_validate';
  $form['#submit'][] = 'webform_quiz_webform_configure_submit';
}

function webform_quiz_webform_configure_validate($form, &$form_state) {
  return;
}

function webform_quiz_webform_configure_submit($form, $form_state) {
  $node = &$form['#node'];

  webform_quiz_clear($node->nid);
  if (isset($form_state['values']['quiz_enable']) && $form_state['values']['quiz_enable']) {
    $i = 1;
    while ($form_state['values']["response_redirect_$i"] != '') {
      $node->webform['quiz_redirects'][$i] = $form_state['values']["response_redirect_$i"];
      $write = array(
        'rid' => $i,
        'nid' => $node->nid,
        'redirect_url' => $node->webform['quiz_redirects'][$i],
      );
      
      drupal_write_record('webform_quiz', $write);
      $i++;
    }
  }
  return;
}

function webform_quiz_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (!in_array($node->type, webform_variable_get('webform_node_types'))) return;
    $result = db_select('webform_quiz')
      ->fields('webform_quiz')
      ->condition('nid', $nid)
      ->execute()
      ->fetchAllAssoc('rid', PDO::FETCH_ASSOC);

    if (empty($result) && $node->type == 'quiz') {
      $etids = array();
      foreach ($node->field_quiz_result_pages[LANGUAGE_NONE] as $result_page) {
        $etids[] = $result_page['value'];
      }
      $redirects = entity_load('field_collection_item', $etids);
      foreach ($redirects as $key => $redirect) {
        $add['title'] = $redirect->field_title[LANGUAGE_NONE][0]['value'];
        $add['url'] = "quiz-result/$nid/$key";
        $nodes[$nid]->webform['quiz_redirects'][] = $add;
      }
    }
    else {
      if (!empty($result) && is_array($result)) {
        foreach ($result as $rid => $webform_quiz) {
          $add['title'] = $add['url'] = $webform_quiz['redirect_url'];
          $nodes[$nid]->webform['quiz_redirects'][$rid] = $add;
        }
      }
    }
  }
}

function webform_quiz_webform_submission_presave($node, $submission) {
  $aggregator = array();

  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'quiz_question') {
      foreach ($submission->data[$cid]['value'] as $value) {
        if ($value !== FALSE) {
          $inc = $component['extra']['quiz_multiplier'];
          $aggregator[$value] = (isset($aggregator[$value])) ? $aggregator[$value] + $inc : $inc;
        }
      }
    }
  }

  if (count($aggregator) > 0) {
    asort($aggregator);
    end($aggregator);
    $winner = key($aggregator);

    $node->webform['redirect_url'] = $node->webform['quiz_redirects'][$winner]['url'];
  }
}

function webform_quiz_clear($nid) {
  db_delete('webform_quiz')
    ->condition('nid', $nid)
    ->execute();
}

function webform_init() {
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  if (arg(0) == 'quiz-result' && is_numeric(arg(1))) {
    $fblink = fboauth_action_link_properties('connect', current_path());
    $fblink = l('Connect with Facebook', $fblink['href'], array('query' => $fblink['query']));

    drupal_add_js(
      array(
        'fbconnect_button' => $fblink,
        'quiz_url' => url('node/'.arg(1), array('absolute' => TRUE)),
        'logged_in' => user_is_logged_in(),
      ),
      'setting'
    );

    drupal_add_library('connections', 'facebook');
    drupal_add_js(drupal_get_path('module', 'webform_quiz') . '/webform_quiz_popup.js');
    drupal_add_css(drupal_get_path('module', 'webform_quiz') . '/webform_quiz_popup.css', array('weight' => '100', 'group' => CSS_THEME));
  }
}
